	NAME STORAGE_NEW_USB_SDCARD

;STORAGE COMMANDS
		GLOBAL STRG_INIT
		GLOBAL STRG_OPENCRD
		GLOBAL STRG_OPNFILE
		GLOBAL STRG_CLSFILE
		GLOBAL STRG_DIRLIST
		GLOBAL STRG_DIRCHG
		GLOBAL STRG_BLKREAD
		GLOBAL STRG_BLKWRITE
		GLOBAL STRG_TPFILE
		GLOBAL STRG_GETPOS
		GLOBAL STRG_SETPOS
		GLOBAL STRG_GETSIZE
		GLOBAL STRG_GETEOF
		GLOBAL STRG_PRDRVINFO
		GLOBAL STRG_LOADFILE
		GLOBAL STRG_SAVEFILE
		GLOBAL STRG_CHECK
		GLOBAL STRG_EXISTS		
		GLOBAL STRG_DIRLIST
		GLOBAL STRG_DIRCHG
		GLOBAL STRG_TPFILE
		GLOBAL STRG_GETPOS
		GLOBAL STRG_SETPOS
		GLOBAL STRG_GETSIZE
		GLOBAL STRG_GETEOF


@CH376_ERROR EQU RS_MESG



;INITIALIZE THE CH376S
;A=3 FOR SDCARD, 6 FOR USB FLASH
;RETURNS THE VERSION ON A IF ALL OK
;A=0 IF ERROR OR DEVICE NOT PRESENT
;ALSO CHECK THE ZF NZ=ERROR
;DESTROYS D
STRG_INIT:	LD D,A
		XOR A		
		LD (STRG_STAT),A 	;NOT CONNECTED, NOT EXISTS
		CALL CH376_INIT
		JR NZ,INIERR
		LD A,D			;SELECT USB DEVICE 3 FOR SDCARD, 6 FOR FLASH
		CALL CH376_SETUSB
		JR Z,INIOK
INIERR:		LD A,0		
		RET
INIOK:		CALL CH376_VERSION
		CP A		;SET ZF
		LD A, $80		;BIT 7 MEANS EXISTS
		LD (STRG_STAT),A 	;
		RET

;NZ IF EXISTS
STRG_EXISTS:	LD A,(STRG_STAT)
		BIT 7,A
		RET

;CHECKS IF USB IS CONNECTED OR DISCONNECTED AND CONNECTS IF NECESSARY
;CAN BE CALLED MULTIPLE TIMES ONLY ONCE THE DRIVE IS MOUNTED
;CF SET IF DEVICE NOT PRESENT
;A=0 TIMEOUT, A=1 IF JUST CONNECTED,A=2 IF JUST DISCONNECTED
STRG_CHECK:	CALL STRG_EXISTS
		SCF
		RET Z				;Z MEANS NOT EXISTS
		LD B,5
SC_AGN1:	CALL CH376_CONNECT		
		JR Z,DOCON
		JR NC,DODISC
		DJNZ SC_AGN1				
		;CALL RS_MESG
		;DEFM " TIMEOUT CONNECTING"
		;DB 10,13,0
		XOR A			
		RET 		;TIMEOUT
		
DOCON:		XOR A				;CLCF
		LD A,(STRG_STAT)
		BIT 0,A
		RET NZ				;ALREADY MOUNTED THE DRIVE
		;CALL RS_MESG
		;DEFM " MOUNTING"
		;DB 10,13,0					
		CALL CH376_MOUNT			;MOUNT THE DRIVE
		JR NZ, DONOMNT
		;CALL RS_MESG
		;DEFM " CONNECT"
		;DB 10,13,0		
		LD A,(STRG_STAT)
		SET 0,A
		LD (STRG_STAT),A
		XOR A				;CLEAR CARRY FLAG MEANS WE ARE OK
		LD A,1				;A=1 IS JUST CONNECTED
		RET
DONOMNT:	;CALL RS_MESG
		;DEFM " NOT MOUNTED"
		;DB 10,13,0		

DODISC:		;CALL RS_MESG
		;DEFM " DISCONNECT"
		;DB 10,13,0	
		XOR A	
		LD A,(STRG_STAT)		
		BIT 0,A
		RET Z				;ALREADY DISCONNECTED
		RES 0,A				;SET BIT 0 TO 0=DISCONNECTED
		LD (STRG_STAT),A		
		LD A,2				;A=2 IS JUST DISCONNECTED
		RET


;MOUNTS THE FLASH DISK
;IN A=6 USB STICK 3-SDCARD
;NZ IF ERROR
STRG_OPENCRD:   CALL CH376_MOUNTDEV
		RET 


STRG_DIRLIST:	RET
STRG_DIRCHG: 	RET
STRG_TPFILE: 	RET
STRG_GETPOS: 	RET
STRG_SETPOS: 	RET
STRG_GETSIZE: 	RET
STRG_GETEOF: 	RET



;PRINTS TO SCREEN USB DRIVE INFO
;VOLUME NAME , TOTAL SECTORS, FREE SECTORS, FILESYSTEM TYPE
		;VOLUME NAME
STRG_PRDRVINFO:	LD A,CMD_RDUSB_DATA0
		CALL CH376_COMMD
		CALL CH376_GETDATA
		PUSH AF
		SUB 8		
		LD B,A
		POP AF			
		LD HL,USBBUF+8		;SKIP 8 BYTES
PDI_NXT:	LD A,(HL)
		PUSH HL
		PUSH BC
		CALL OS_PRINTCHAR
		POP BC
		POP HL
		INC HL
		DJNZ PDI_NXT		
		CALL RS_NEWLINE
		; SECTORS FREE AND USED
		LD A,CMD_DISK_QUERY  	
		CALL CH376_COMMD
		CALL CH376_WTCMDEND
		RET NZ
		LD A,CMD_RDUSB_DATA0
		CALL CH376_COMMD		
		CALL CH376_GETDATA
		
		LD IX,USBBUF	
		PUSH IX			
		LD D,(IX+3)
		LD E,(IX+2)
		LD H,(IX+1)
		LD L,(IX+0)
		CALL B2D32				;DE:HL RES ON B2DBUF
		LD HL,B2DBUF
		CALL SKIPSPC
		CALL OS_PRINTTEXT
		CALL OS_PRINTMSG
		DEFM " SECTORS"
		DB 10,13 0
		POP IX

		PUSH IX					
		LD D,(IX+7)
		LD E,(IX+6)
		LD H,(IX+5)
		LD L,(IX+4)		
		CALL B2D32		;DE:HL RES ON B2DBUF
		LD HL,B2DBUF
		CALL SKIPSPC
		CALL OS_PRINTTEXT
		CALL OS_PRINTMSG
		DEFM " SECTORS FREE   "
		DB 10,13,0			
		POP IX
		;FILESYSTEM TYPE		
FILESYSTEM:	LD A,(IX+8)		;1-FAT12,2-FAT16,3-FAT32
		DEC A
		JR Z,PDI_NXT0
		DEC A
		JR Z,PDI_NXT1
		DEC A
		JR Z,PDI_NXT2
		JR PDI_NXT3
		;1-FAT12		
PDI_NXT0:	CALL OS_PRINTMSG
		DEFM "FS IS FAT-12"
		DB 10,13,0
		RET
PDI_NXT1:	CALL OS_PRINTMSG
		DEFM "FS IS FAT-16"
		DB 10,13,0
		RET
PDI_NXT2:	CALL OS_PRINTMSG
		DEFM "FS IS FAT-32"
		DB 10,13,0
		RET
PDI_NXT3:	CALL OS_PRINTMSG
		DEFM "UNKNOWN FS"
		DB 10,13,0
		LD A,(IX+8)		;TO BE PRINTED MAYBE
		RET


;OPEN A FILE WITH ITS NAME ON STRGBUFF
;A=0 FOR READ, 1 FOR WRITE, 2 FOR READ/WRITE, 4 FOR CREATE/WRITE
STRG_OPNFILE:	PUSH AF
		LD A, CMD_SETFILENAME
    		CALL CH376_COMMD
		LD HL, STRGBUFF
    		CALL CH376_WRSTRING
		JR Z,OF_WSOK
		POP AF
		CALL OS_PRINTMSG
		DEFM "ERROR SETTING FILENAME"
		DB 10,13,0		
		RET
OF_WSOK:	POP AF
		;PUSH AF
		;CALL PRINTNUM
		;POP AF		
		OR A		;0 READ
		JR Z,OF_OPEN
		SUB 1		;1 WRITE
		JR Z,OF_OPEN
		SUB 1		;2 READ/WRITE
		JR Z,OF_OPEN
		;SUB 1		;3 CREATE AS 4
		;JR Z,OF_CREATE
		;SUB 1		;4 CREATE
		;JR NZ,OF_OPEN	;OTHER JUST OPEN
		;3-255 CREATE
OF_CREATE:	CALL OS_PRINTMSG
		DB 10,13
		DEFM "CREATING..."
		DB 10,13,0				
		LD A, CMD_FILE_CREATE		
		JR OF_EXEC
OF_OPEN:	CALL OS_PRINTMSG
		DB 10,13
		DEFM "OPENING..."
		DB 10,13,0	
		LD A, CMD_FILE_OPEN
OF_EXEC:	;PUSH AF
		;CALL PRINTNUM
		;POP AF
		CALL CH376_COMMD
		CALL CH376_WTCMDEND
		RET

STRG_CLSFILE:	LD A, CMD_FILE_CLOSE
    		CALL CH376_COMMD
    		LD A, 1                             ; 1 = update file size if necessary
    		CALL CH376_DATAWR
    		CALL CH376_WTCMDEND
    		RET

;BC THE REQUESTED BYTES
;DE THE DESTINATION BUFFER
;RET HL,BC= BYTES RECEIVED
;ZF OK , NZ ERROR
STRG_BLKREAD:	PUSH DE
		LD A, CMD_BYTE_READ
    		CALL CH376_COMMD
    		LD A, C                           ; BYTES REQUEST ON BC
    		CALL CH376_DATAWR
    		LD A, B
    		CALL CH376_DATAWR				
		CALL OS_PRINTMSG
		DEFM "BLOCK READING"
		DB 10,13,0
		POP DE
		LD HL,0				  ;BYTE RECEIVE COUNTER
STBR_DOREST:	PUSH HL
		PUSH DE
		CALL CH376_WTCMDEND
		POP DE
		POP HL
		JR Z, FR_DONE	  ;Z=NO MORE OR CANNOT READ
		CP USB_INT_DISK_READ                    
    		JR NZ, FR_ERROR
		;OK READ THE BYTES
		LD A,CMD_RDUSB_DATA0
		CALL CH376_COMMD	
		CALL CH376_DATARD		;A= BYTES TO READ TO BUFFER
		LD B,A
		;PUSH HL
		;PUSH DE
		;PUSH BC
		;PUSH AF
		;CALL OS_PRINTMSG
		;DEFM "READING "
		;DB 0	
		;POP AF	
		;CALL PRINTNUM
		;POP BC
		;POP DE
		;POP HL
STBR_NXT1:	CALL CH376_DATARD		;READ THE BYTES TO BUFFER
		LD (DE),A
		INC DE
		INC HL				;TOTAL BYTES READ COUNTER
		DJNZ STBR_NXT1		
		LD A, CMD_BYTE_RD_GO	
		CALL CH376_COMMD	
		JR STBR_DOREST
FR_DONE:	PUSH HL
		CALL OS_PRINTMSG
		DEFM "READING DONE!!! "
		DB 0	
		POP HL
		LD B,H
		LD C,L
		OR A
		RET
FR_ERROR:	PUSH AF
		CALL OS_PRINTMSG
		DEFM "ERROR READING BLOCK!!! "
		DB 0	
		POP AF
		LD B,2
		DEC B
		RET		

;LOADS A FILE TO MEM
;HL THE FILE
;BC THE BYTE COUNT TO LOAD
;DE THE BUFFER TO PUT THE BYTES
;RET CF IF ERROR & BC BYTES LOADED TO BUFFER
STRG_LOADFILE:	PUSH DE
		PUSH BC
		PUSH HL		
		CALL OS_PRINTMSG
		DEFM "OPEN FILE"
		DB 10,13,0
		POP HL
		CALL COPYFNAME
		XOR A			;READ ONLY 
		CALL STRG_OPNFILE		
		JR NZ, FOPENERR
		CALL OS_PRINTMSG
		DB 10,13
		DEFM "FILE OPEN OK"
		DB 10,13,0
		;LD BC,4000
		POP BC		;BYTECOUNT
		POP DE		;DEST BUFFER
		CALL STRG_BLKREAD
		JR Z, FREADOK
		;CALL PRINTNUM
		CALL OS_PRINTMSG
		DEFM " ERROR READING FILE"
		DB 10,13,0
FREADOK:	PUSH BC
		CALL B2D16
		LD HL,B2DBUF
		CALL SKIPSPC
		CALL RS_TXT
		CALL OS_PRINTMSG
		DEFM " BYTES READ"
		DB 10,13,0
		CALL STRG_CLSFILE
		POP BC			;BYTES LOADED TO BUFFER
		XOR A
		RET
FOPENERR:	POP BC
		POP DE
		;CALL PRINTNUM
		CALL OS_PRINTMSG
		DEFM "-->ERROR OPENING FILE"
		DB 10,13,0
		LD HL,STRGBUFF
		CALL RS_TXT
		CALL RS_NEWLINE
		SCF
		RET

;BC THE BYTES TO WRITE 
;DE THE SOURCE BUFFER OF BYTES TO BE WRITTEN
STRG_BLKWRITE:  PUSH DE
		LD A, CMD_BYTE_WRITE
    		CALL CH376_COMMD
    		LD A, C                           ; BYTES REQUEST ON BC
    		CALL CH376_DATAWR
    		LD A, B
    		CALL CH376_DATAWR				
		CALL OS_PRINTMSG
		DEFM "BLOCK WRITING"
		DB 10,13,0
		POP HL
STBW_DOREST:	PUSH HL
		CALL CH376_WTCMDEND
		POP HL
		JR Z, WFR_DONE	  ;Z=NO MORE OR CANNOT READ
		CP USB_INT_DISK_WRITE                    
    		JR NZ, WFR_ERROR
		LD A,CMD_WR_REQ_DATA
		CALL CH376_COMMD	
		;READ BYTE COUNT 		
		CALL CH376_DATARD	;READ BYTE COUNT UP TO 255 BYTES
		LD B,A			

STBW_NXT1:	LD A,(HL)
		CALL CH376_DATAWR
		INC HL
		DJNZ STBW_NXT1
		LD A, CMD_BYTE_WR_GO	
		CALL CH376_COMMD	
		JR STBW_DOREST
WFR_DONE:	PUSH HL
		CALL OS_PRINTMSG
		DEFM "WRITING DONE!!! "
		DB 13,10,0	
		POP HL
		OR A
		RET
WFR_ERROR:	PUSH AF
		CALL OS_PRINTMSG
		DEFM "ERROR WRITING BLOCK!!! "
		DB 13,10,0	
		POP AF
		LD B,2
		DEC B
		RET		


;SAVES A FILE FROM MEM
;HL THE FILE
;BC THE BYTE COUNT TO SAVE
;DE THE BUFFER TO GET THE BYTES
;RET CF IF ERROR & BC BYTES SAVED TO FILE
STRG_SAVEFILE:	PUSH DE
		PUSH BC
		PUSH HL		
		CALL OS_PRINTMSG
		DB 10,13
		DEFM "SAVE FILE"
		DB 10,13,10,13,0
		POP HL
		CALL COPYFNAME
		LD A,4			;CREATE THE FILE
		CALL STRG_OPNFILE		
		JR NZ, FSAVEERR
		CALL OS_PRINTMSG
		DB 10,13
		DEFM "FILE CREATED OK"
		DB 10,13,0
		POP BC		;BYTECOUNT
		POP DE		;SOURCE BUFFER
		CALL STRG_BLKWRITE
		JR Z, FWRITEOK
		;CALL PRINTNUM
		CALL OS_PRINTMSG
		DEFM " ERROR WRITING FILE"
		DB 10,13,0
FWRITEOK:	CALL OS_PRINTMSG
		DEFM "BYTE WRITTEN"
		DB 10,13,0
		CALL STRG_CLSFILE
		XOR A
		RET
FSAVEERR:	POP BC
		POP DE
		CALL PRINTNUM
		CALL OS_PRINTMSG
		DEFM "-->ERROR CREATING FILE"
		DB 10,13,0
		LD HL,STRGBUFF
		CALL RS_TXT
		CALL RS_NEWLINE
		SCF
		RET

