       ;ORG 

       ;COLOR
       @COL_BLACK   EQU 0x0000
       @COL_RED     EQU 0xF800
       @COL_GREEN   EQU 0x07C0
       @COL_YELLOW  EQU 0xFFC0
       @COL_BLUE    EQU 0x003F
       @COL_MAGENTA EQU 0xF83F ;0xF863
       @COL_CYAN    EQU 0x07FF       
       @COL_WHITE   EQU 0xFFFF
       

       
       ;LOCAL CONSTS       
       LCD_RS EQU DEVTFT;  ;PORT TO CONTROL RS PIN 17=cs+rs+low = COMMAND  A0 CONNECT TO RS
       LCD_CS EQU DEVTFT+1;  ;PORT TO CONTROL CS PIN 16=cs+rs_high  = DATA
       @LCD_WIDTH  EQU 799
       @LCD_HEIGHT EQU 479
       FONT_WIDTH EQU 8
       FONT_HEIGHT EQU 10
       


       
    
      
LCD_WR_DAT16:;TWO PARAMS
             ;D=VL E=VH
    LD A,E
    OUT (LCD_CS),A

LCD_RD_DAT:        
LCD_RD_BUS: 
             ;DESTROYS A            
    IN A,(LCD_CS)
    RET

     
LCD_WR_DAT:        
LCD_WR_BUS:  ;ONE PARAM VL
             ;PASS BY REGISTER D=VL 
             ;DESTROYS A            
    LD A,D  
    OUT (LCD_CS),A
    RET


LCD_WR_COM:  ;ONE PARAM VL
             ;PASS BY REGISTER D=VL 
             ;DESTROYS A            
    LD A,D  
    OUT (LCD_RS),A
    RET


LCD_WR_COM2:;ONE PARAM VL
           ;PASS BY REGISTER D=VL
           ;DESTROYS A
    
    XOR A
    OUT (LCD_RS),A  ;RS LOW = COMMAND BYTE      
    CALL LCD_WR_BUS
    LD A,1
    OUT (LCD_RS),A  ;RS HIGH  = DATA BYTE
    RET
    
@LCD_INIT: ;INITIALIZE THE SSD1963

    LD D,0xE2         ;PLL multiplier, set PLL clock to 120M
    CALL LCD_WR_COM   ;N=0x36 for 6.5M, 0x23 for 10M crystal
    LD D,0x23 ;1E
    CALL LCD_WR_DAT
    LD D,0x02
    CALL LCD_WR_DAT
    LD D,0x54
    CALL LCD_WR_DAT
    LD D,0xE0         ; PLL enable    
    CALL LCD_WR_COM
    LD D,0x01
    CALL LCD_WR_DAT
    LD B,10        ;delay(10);
    CALL DELAYMICRO
    LD D,0xE0         ; PLL enable    
    CALL LCD_WR_COM   
    LD D,0x03
    CALL LCD_WR_DAT
    LD B,10        ;delay(10);
    CALL DELAYMICRO    

    LD D,0x01         ; software reset  
    CALL LCD_WR_COM   
    LD B,20       ;delay(20); MICROSECS
    CALL DELAYMICRO        
    LD D,0xE6         ;PLL setting for PCLK, depends on resolution  
    CALL LCD_WR_COM           
    LD D,0x03
    CALL LCD_WR_DAT   
    LD D,0x33 ;FF
    CALL LCD_WR_DAT       
    LD D,0x33 ;FF
    CALL LCD_WR_DAT   
    
    LD D,0xB0         ;LCD SPECIFICATION
    CALL LCD_WR_COM       
    LD D,0x20
    CALL LCD_WR_DAT   
    LD D,0x00
    CALL LCD_WR_DAT       
    LD D,0x03         ;Set HDP  799
    CALL LCD_WR_DAT   
    LD D,0x1F
    CALL LCD_WR_DAT   
    LD D,0x01         ;Set VDP  479
    CALL LCD_WR_DAT   
    LD D,0xDF
    CALL LCD_WR_DAT 
    LD D,0x00
    CALL LCD_WR_DAT     
        
        
    LD D,0xB4         ;HSYNC
    CALL LCD_WR_COM       
    LD D,0x04 ;03         ;Set HT 928
    CALL LCD_WR_DAT   
    LD D,0x1F ;A0
    CALL LCD_WR_DAT       
    LD D,0x00         ;Set HPS  46
    CALL LCD_WR_DAT   
    LD D,0xD2 ;2E
    CALL LCD_WR_DAT   
    LD D,0x00 ;30         ;Set HPW  48
    CALL LCD_WR_DAT   
    LD D,0x00         ;Set LPS  15
    CALL LCD_WR_DAT 
    LD D,0x00 ;0F
    CALL LCD_WR_DAT   
    LD D,0x00
    CALL LCD_WR_DAT     
                                  
    LD D,0xB6         ;VSYNC
    CALL LCD_WR_COM       
    LD D,0x02         ;Set VT 525
    CALL LCD_WR_DAT   
    LD D,0x0C ;0D
    CALL LCD_WR_DAT       
    LD D,0x00         ;Set VPS  16
    CALL LCD_WR_DAT   
    LD D,0x22 ;10
    CALL LCD_WR_DAT   
    LD D,0x00 ;10         ;Set VPW  16
    CALL LCD_WR_DAT   
    LD D,0x00         ;Set FPS  8
    CALL LCD_WR_DAT 
    LD D,0x00 ; 08
    CALL LCD_WR_DAT   
    
    LD D,0xB8         
    CALL LCD_WR_COM           
    LD D,0x0F ;07         ;GPIO3=input, GPIO[2:0]=output
    CALL LCD_WR_DAT         
    LD D,0x01         ;GPIO0 normal
    CALL LCD_WR_DAT 
           
    LD D,0xBA         
    CALL LCD_WR_COM           
    LD D,0x01 ;0F
    CALL LCD_WR_DAT   ;GPIO[3:0] out 1
        
    LD D,0x36         ;rotation
    CALL LCD_WR_COM           
    LD D,0x08 ;2A         
    CALL LCD_WR_DAT         

    LD D,0xF0         ;pixel data interface
    CALL LCD_WR_COM           
    LD D,0x06         ;CHANGE THIS FOR 8 BIT INTERFACE  6=9BIT SEND 2 BYTES 
    CALL LCD_WR_DAT     

    LD B,5       ;delay(5);
    CALL DELAYMICRO        

    LD D,0xBC         
    CALL LCD_WR_COM           
    LD D,0x40
    CALL LCD_WR_DAT   
    LD D,0x80
    CALL LCD_WR_DAT   
    LD D,0x40
    CALL LCD_WR_DAT   
    LD D,0x01
    CALL LCD_WR_DAT       
    LD B,5       ;delay(5);
    CALL DELAYMICRO  
  
    LD D,0x29         ;display on 
    CALL LCD_WR_COM       
    LD D,0xBE         ;set PWM for B/L
    CALL LCD_WR_COM                 
    LD D,0x06
    CALL LCD_WR_DAT                 
    LD D,0xF0         
    CALL LCD_WR_DAT   
    LD D,0x01         
    CALL LCD_WR_DAT   
    LD D,0xF0         
    CALL LCD_WR_DAT   
    LD D,0x00         
    CALL LCD_WR_DAT   
    LD D,0x00         
    CALL LCD_WR_DAT                   

    LD D,0xD0         
    CALL LCD_WR_COM                 
    LD D,0x0D         
    CALL LCD_WR_DAT         

    ;SET VIEWPORT
    LD HL,0
    PUSH HL
    PUSH HL
    LD HL,799
    PUSH HL
    LD HL,479
    PUSH HL
    CALL LCD_SETXY
    RET
      

@LCD_SETXY:    ;SET WINDOW ON LCD TO FILL WITH BYTES
              ;4 PARAMS PASS BY STACK
              ;2 BYTES EACH PARAM TOTAL 8 BYTES
              ;X1,X2,Y1,Y2   X1,X2 SHOULD SWAP Y1,Y2 CAUSE OF THE LCD ORIENTATION
              ;WE SEND HERE
              ;X1 = IX+6_7  Y1=IX+4_5
              ;X2=  IX+2_3  Y2=IX+0_1
              
              ;WE SEND ON LCD
              ;Y1=IX+6_7 Y2=IX+2_3
              ;X1=IX+4_5 X2=IX+0_1
              ;HIGH BYTE FIRST SO +8 IS H AND +7 IS L
              ;SHOULD ADD SP,8 AFTER RET
              
    LD IX,2
    ADD IX,SP         
    LD D,0x2A         ;SEND IX PARAMS
    CALL LCD_WR_COM    
    LD D,(IX+7)
    CALL LCD_WR_DAT
    LD D,(IX+6)
    CALL LCD_WR_DAT
    LD D,(IX+3)
    CALL LCD_WR_DAT
    LD D,(IX+2)
    CALL LCD_WR_DAT       
    LD D,0x2B         ;SEND Y PARAMS
    CALL LCD_WR_COM   
    LD D,(IX+5)
    CALL LCD_WR_DAT
    LD D,(IX+4)
    CALL LCD_WR_DAT
    LD D,(IX+1)
    CALL LCD_WR_DAT
    LD D,(IX)
    CALL LCD_WR_DAT       
    LD D,0x2C         ;SEND DATA
    CALL LCD_WR_COM   
    POP DE
    LD HL,4*2       ;REMOVE 4 PARAMS FROM STACK
    ADD HL,SP
    LD SP,HL
    EX DE,HL
    JP (HL)        
             

@LCD_SETPIXEL: ;SEND A 16 BIT VALUE FOR COLOR
              ;COLOR VALUE ON HL  VH & VL
              ;DESTROYS D,A
    LD D,H        
    CALL LCD_WR_DAT 
    LD D,L
    CALL LCD_WR_DAT 
    RET
    
@LCD_GETPIXEL: ;GET A 16 BIT VALUE FOR COLOR
              ;COLOR VALUE ON HL  VH & VL
              ;DESTROYS D,A
    LD D,0x2E         ;READ DATA
    CALL LCD_WR_COM           
    CALL LCD_RD_DAT 
    LD H,A
    CALL LCD_RD_DAT 
    LD L,A
    RET    

;READS A PIXEL FROM VIDEO BUFFER
;PARAMS ON STACK X,Y 2 BYTES EACH
;SELF CLEANING THE STACK FROM PARAMS
;RESULT ON HL
@LCD_READPIXEL: PUSH IX ; 2 PARAMS ON STACK TOTAL 4 BYTES
    LD IX,4    ;2 FOR RET ADDR AND 2 FOR PUSH IX
    ADD IX,SP    
    LD H,(IX+3)   ;X
    LD L,(IX+2)   ;X
    LD D,(IX+1) ;Y
    LD E,(IX) ;Y
    PUSH HL
    PUSH DE
    PUSH HL
    PUSH DE
    CALL LCD_SETXY
    CALL LCD_GETPIXEL
    PUSH HL    
    CALL LCD_CLRXY
    POP DE  ;RESULT COLOR
    POP IX
    POP BC  ;RET ADDR
    LD HL,2*2        ;REMOVE PARAMS FROM STACK
    ADD HL,SP
    LD SP,HL
    EX DE,HL ;HL RESULT
    PUSH BC  ;RET ADDR ON STACK
    RET


@LCD_DRAWPIXEL: ; 2 PARAMS ON STACK TOTAL 4 BYTES
    LD IX,2     ;setXY(x, y, x, y);
    ADD IX,SP
    LD H,(IX+3)   ;X
    LD L,(IX+2)   ;X
    LD D,(IX+1) ;Y
    LD E,(IX) ;Y
    PUSH HL
    PUSH DE
    PUSH HL
    PUSH DE
    CALL LCD_SETXY
    LD HL,(FCOLOR)
    CALL LCD_SETPIXEL
    CALL LCD_CLRXY
    RET

@LCD_CLRXY:  ;RESET LCD WINDOW TO FULL
     LD HL,0
     PUSH HL
     PUSH HL
     LD HL,LCD_WIDTH
     PUSH HL
     LD HL,LCD_HEIGHT
     PUSH HL
     CALL LCD_SETXY
     RET

LCD_DRAWHLINE: ;3 PARAMS 2-BYTES EACH TOTAL 6 BYTES
              ;X , Y , LENGTH
      LD IX,2
      ADD IX,SP
      LD H,(IX+5)   ;X  
      LD L,(IX+4)   ;X
      LD D,(IX+3)   ;Y
      LD E,(IX+2)   ;Y
      LD B,(IX+1)   ;LENGTH
      LD C,(IX)     ;LENGTH
      
      
      PUSH HL
      LD HL,0
      OR A           ;CLEAR CARRY
      SBC HL,BC      ;CHECK IF LENGTH<0
      JR C,POSH1
      XOR A          ;l=-l
			SUB C
			LD C,A
			SBC A,A
			SUB B
			LD B,A
			POP HL
      SBC HL,BC       ;x -= l;
      PUSH HL                    
POSH1: POP HL
			PUSH HL
      PUSH DE
      ADD HL,BC
      PUSH HL
      PUSH DE
      CALL LCD_SETXY   ;setXY(x, y, x+l, y);
      LD HL,(FCOLOR)    
NXTH1: CALL LCD_SETPIXEL
      DEC BC
      LD A,C
      OR B
      JR NZ, NXTH1     
      CALL LCD_CLRXY
      POP DE
      LD HL,6       ;REMOVE PARAMS FROM STACK
      ADD HL,SP
      LD SP,HL      
      EX DE,HL
      JP (HL)



LCD_DRAWVLINE: ;3 PARAMS 2-BYTES EACH TOTAL 6 BYTES
              ;X , Y , LENGTH
      LD IX,2
      ADD IX,SP
      LD D,(IX+5)   ;X  
      LD E,(IX+4)   ;X
      LD H,(IX+3)   ;Y
      LD L,(IX+2)   ;Y
      LD B,(IX+1)   ;LENGTH
      LD C,(IX)     ;LENGTH     
      PUSH HL
      LD HL,0
      OR A           ;CLEAR CARRY
      SBC HL,BC      ;CHECK IF LENGTH<0
      JR C,POSV1
      XOR A          ;l=-l
			SUB C
			LD C,A
			SBC A,A
			SUB B
			LD B,A
			POP HL
      SBC HL,BC       ;Y -= l;
      PUSH HL                   
POSV1: POP HL
			PUSH DE
      PUSH HL
      PUSH DE
      ADD HL,BC
      PUSH HL
      CALL LCD_SETXY   ;setXY(x, y, x, y+l);
      LD HL,(FCOLOR)    
NXTV1: CALL LCD_SETPIXEL
      DEC BC
      LD A,C
      OR B
      JR NZ, NXTV1     
      CALL LCD_CLRXY
      POP DE
      LD HL,6       ;REMOVE PARAMS FROM STACK
      ADD HL,SP
      LD SP,HL
      EX DE,HL
      JP (HL)

@LCD_DRAWLINE: ;4 PARAMS 2-BYTES EACH TOTAL 8 BYTES
              ;X1 , Y1 , X2, Y2
      LD IX,2
      ADD IX,SP
     ; LD D,(IX+7)   ;X1  
     ; LD E,(IX+6)   ;X1
     ; LD H,(IX+5)   ;Y1
    ;  LD L,(IX+4)   ;Y1
     ; LD D,(IX+3)   ;X2  
    ;  LD E,(IX+2)   ;X2
    ;  LD H,(IX+1)   ;Y2
    ;  LD L,(IX)     ;Y2
      
      LD H,(IX+5)   ;Y1
      LD L,(IX+4)   ;Y1
      LD D,(IX+1)   ;Y2
      LD E,(IX)     ;Y2
      OR A
      SBC HL,DE
      JR NZ,YNOTEQ
      ;CALL DRAWHLINE CAUSE Y1=Y2
      LD B,(IX+7)   ;X1
      LD C,(IX+6)   ;X1
      PUSH BC       ;X1 1ST PARAM ON STACK
      PUSH DE				;Y 2ND PARAM ON STACK
      LD H,(IX+3)   ;X2
      LD L,(IX+2)   ;X2       
      SBC HL,BC  	  ;X2-X1 = LENGTH OF HORIZ LINE
      PUSH HL       ;LENGTH 3RD PARAM ON STACK 
      CALL LCD_DRAWHLINE
      JP DLNEX
YNOTEQ:  
      LD H,(IX+7)   ;X1
      LD L,(IX+6)   ;X1
      LD D,(IX+3)   ;X2
      LD E,(IX+2)   ;X2 
      OR A
      SBC HL,DE
      JR NZ,XNOTEQ
      ;CALL DRAWVLINE CAUSE X1=X2
      PUSH DE       ;X2=X1 1ST PARAM ON STACK
      LD B,(IX+5)   ;Y1
      LD C,(IX+4)   ;Y1
      PUSH BC       ;Y1 2ND PARAM ON STACK
      LD H,(IX+1)   ;Y2
      LD L,(IX)   ;Y2       
      SBC HL,BC  	  ;Y2-Y1 = LENGTH OF VERT LINE
      PUSH HL       ;LENGTH 3RD PARAM ON STACK 
      CALL LCD_DRAWVLINE
      JP DLNEX
XNOTEQ:
      ;LINE ALGORITHM
      JR C,X2GTX1
      ;HL=X1-X2
      XOR A		
      DEC A  ;XSTEP=-1
      JR DLNXT1
X2GTX1:      
     ; LD HL,DE      ;X2
      PUSH DE
      POP HL
      LD D,(IX+7)   ;X1
      LD E,(IX+6)   ;X1 
      OR A     
      SBC HL,DE     ;X2-X1 ON HL
      ;HL=X2-X1  HL=DX
      LD A,1        ;XSTEP=1
DLNXT1:
      LD B,0
      LD C,0
      PUSH BC       ;T
      PUSH HL       ;DX
      CP 1
      JR Z,DLXMINUS1
      LD B,0XFF
DLXMINUS1:LD C,A      
      PUSH BC       ;XSTEP
      LD H,(IX+5)   ;Y1
      LD L,(IX+4)   ;Y1
      LD D,(IX+1)   ;Y2
      LD E,(IX)     ;Y2      
      OR A
      SBC HL,DE
      JR C,Y2GTY1  ;HL=Y1-Y2
      XOR A
      DEC A         ;YSTEP=-1
      JR DLNXT2
Y2GTY1:
      ;LD HL,DE      ;Y2
      PUSH DE
      POP HL
      LD D,(IX+5)   ;Y1
      LD E,(IX+4)   ;Y1  
      OR A
      SBC HL,DE  ;HL=Y2-Y1    HL=DY      
      LD B,0
      LD A,1        ;YSTEP=1
DLNXT2:
      CP 1
      JR Z,DLYMINUS1
      LD B,0XFF
DLYMINUS1:
      LD C,A      
      PUSH HL       ;DY
      PUSH BC       ;YSTEP   
      LD IY,0
      ADD IY,SP
      ;IY+9= T HI
      ;IY+8= T LO
      ;IY+7= DX HI
      ;IY+6= DX LO
      ;IY+5= XSTEP
      ;IY+4= XSTEP
      ;IY+3= DY HI
      ;IY+2= DY LO
      ;IY+1= YSTEP
      ;IY= YSTEP
      
      ;DE = ROW
      ;LD D,(IX+7)   ;COL
      ;LD E,(IX+6)   ;COL
      LD D,(IY+7)    ;DX
      LD E,(IY+6)    ;DX
      OR A
      SBC HL,DE      ;DY-DX
      JP C,DXGTDY
      JP Z,DXGTDY
      ;DX<DY 
      ADD HL,DE      ;HL=DY
      LD B,H
      LD C,L
      SRL B
      RR C           ;(dy >> 1)
      LD HL,0
      SBC HL,BC      ;t = - (dy >> 1);
      LD (IY+9),H    ;SAVE T
      LD (IY+8),L    ;SAVE T
DLAGN1:
      LD D,(IX+5)   ;ROW
      LD E,(IX+4)   ;ROW=Y1
      LD H,(IX+7)   ;COL
      LD L,(IX+6)   ;COL=X1
      PUSH DE
      PUSH IX
      PUSH HL
      PUSH DE
      PUSH HL
      PUSH DE
      CALL LCD_SETXY
      LD HL,(FCOLOR)    
      CALL LCD_SETPIXEL
      POP IX
      POP DE
      LD H,(IX+1)   ;Y2
      LD L,(IX)     ;Y2 
      SBC HL,DE     ; ROW=Y2
      JP Z,DLEXIT
      LD B,(IY+1)   ;YSTEP HI
      LD C,(IY)     ;YSTEP LO
      EX DE,HL
      ADD HL,BC     ;row += ystep;
      LD (IX+5),H   ;SAVE ROW
      LD (IX+4),L   ;   
      ;EX DE,HL      ;DE=ROW
      LD D,(IY+9)   ; T
      LD E,(IY+8)   ; T      
      LD H,(IY+7)   ;DX
      LD L,(IY+6)   ;DX
      ADD HL,DE
      LD (IY+9),H   ;t += dx;
      LD (IY+8),L
      EX DE,HL
      LD HL,$8000
      SBC HL,DE     ;CHECK IF T<0
      JR C,DLAGN1   ; CARRY SET IF NEGATIVE
      LD B,(IY+5)   ;XSTEP HI
      LD C,(IY+4)   ;XSTEP LO
      LD H,(IX+7)   ;COL HI
      LD L,(IX+6)   ;COL LO
      ADD HL,BC     ;col += xstep;
      LD (IX+7),H   ;SAVE COL
      LD (IX+6),L   ;         
      							;t   -= dy;
      LD H,(IY+9)   ; T
      LD L,(IY+8)   ; T      
      LD B,(IY+3)   ;DY
      LD C,(IY+2)   ;DY
      SBC HL,BC
      LD (IY+9),H   ;t -= dY;
      LD (IY+8),L							
      JP DLAGN1
DXGTDY: 
      ADD HL,DE      ;HL=DY DE=DX
      LD B,D
      LD C,E
      SRL B
      RR C           ;(dX >> 1)
      LD HL,0
      SBC HL,BC      ;t = - (dX >> 1);
      LD (IY+9),H    ;SAVE T
      LD (IY+8),L    ;SAVE T
DLAGN2:
      LD D,(IX+5)   ;ROW
      LD E,(IX+4)   ;ROW=Y1
      LD H,(IX+7)   ;COL
      LD L,(IX+6)   ;COL=X1
      PUSH HL       ;SAVE COL
      PUSH IX
      PUSH HL
      PUSH DE
      PUSH HL
      PUSH DE
      CALL LCD_SETXY
      LD HL,(FCOLOR)    
      CALL LCD_SETPIXEL
      POP IX
      POP DE        ;RETRIEVE COL
      LD H,(IX+3)   ;X2
      LD L,(IX+2)   ;X2 
      SBC HL,DE     ; COL=X2?
      JR Z,DLEXIT
      EX DE,HL      ;HL=COL
      LD B,(IY+5)   ;XSTEP HI
      LD C,(IY+4)   ;XSTEP LO
      ADD HL,BC     ;col += xstep;
      LD (IX+7),H   ;SAVE COL
      LD (IX+6),L   ;   
      LD D,(IY+9)   ; T
      LD E,(IY+8)   ; T      
      LD H,(IY+3)   ;DY
      LD L,(IY+2)   ;DY
      ADD HL,DE
      LD (IY+9),H   ;t += dY;
      LD (IY+8),L
      EX DE,HL      ;T=DE
      LD HL,$8000  
      SBC HL,DE    ;CHECK IF T<0
      JR C,DLAGN2  ;CARRY SET IF NEGATIVE    
      LD B,(IY+1)   ;YSTEP HI
      LD C,(IY)     ;YSTEP LO
      LD H,(IX+5)   ;ROW HI
      LD L,(IX+4)   ;ROW LO
      ADD HL,BC     ;ROW += Ystep;
      LD (IX+5),H   ;SAVE COL
      LD (IX+4),L   ;         
      							;t   -= dX;
      LD H,(IY+9)   ; T
      LD L,(IY+8)   ; T      
      LD B,(IY+7)   ;DX
      LD C,(IY+6)   ;DX
      SBC HL,BC
      LD (IY+9),H   ;t -= dX;
      LD (IY+8),L							
      JP DLAGN2

DLEXIT:
      LD HL,5*2     ;REMOVE 5 IY PARAMS FROM STACK
      ADD HL,SP     ;
      LD SP,HL           
DLNEX:POP DE        ;RET ADDR
      LD HL,4*2       ;REMOVE 4 PARAMS FROM STACK
      ADD HL,SP
      LD SP,HL     
      EX DE,HL
      JP (HL)

      
      
;DE 1ST PARAM HL 2ND PARAM      
@PLOTP:PUSH BC       ;SAVE BC
      PUSH IX
     
      PUSH DE
      PUSH HL
      PUSH DE
      PUSH HL
      CALL LCD_SETXY      
      LD HL,(FCOLOR)
      CALL LCD_SETPIXEL  
      
      POP IX
      POP BC        ;RESTORE BC
      RET   
   
   
;int x, int y, int radius   
@LCD_CIRCLE:
      POP HL         ;GET THE RETURN ADDRESS
      PUSH DE        ;F VAR 
      PUSH DE        ;DDF_X 
      PUSH DE        ;DDF_Y
      PUSH DE        ;X1
      PUSH DE        ;Y1
      PUSH HL        ;RET ADDR
      LD IX,2
      ADD IX,SP
      ;LD D,(IX+15)    ;X
      ;LD E,(IX+14)    ;X
      ;LD D,(IX+13)    ;Y
      ;LD E,(IX+12)    ;Y
      ;LD D,(IX+11)    ;R
      ;LD E,(IX+10)    ;R
      ;LD D,(IX+9)    ;F
      ;LD E,(IX+8)    ;F
      ;LD D,(IX+7)    ;DDF_X
      ;LD E,(IX+6)    ;DDF_X
      ;LD D,(IX+5)    ;DDF_Y
      ;LD E,(IX+4)    ;DDF_Y
      ;LD D,(IX+3)    ;X1
      ;LD E,(IX+2)    ;X1
      ;LD D,(IX+1)    ;Y1
      ;LD E,(IX+0)    ;Y1
      ;f = 1 - radius
      XOR A
      LD D,(IX+11)    ;R
      LD E,(IX+10)    ;R
      LD (IX+1),D     ;Y1=R
      LD (IX+0),E
      LD HL,1
      LD (IX+7),H     ;DDF_X=1
      LD (IX+6),L
      LD (IX+3),H     ;X1=0
      LD (IX+2),H      
      SBC HL,DE
      LD (IX+9),H     ;F
      LD (IX+8),L     ;F
      ;ddF_y = -2 * radius;
      EX DE,HL        ;HL=RADIUS
      ADD HL,HL       ;2*R
      EX DE,HL
      LD HL,0
      SBC HL,DE          ;-2*R
      LD (IX+5),H
      LD (IX+4),L     ;DDF_Y
      ;setXY(x, y + radius, x, y + radius);
      LD H,(IX+13)    ;Y
      LD L,(IX+12)
      PUSH HL         ;SAVE Y
      LD D,(IX+11)    ;R
      LD E,(IX+10)
      PUSH DE         ;SAVE R
      ADD HL,DE       ;Y+R      
      LD D,(IX+15)    ;X
      LD E,(IX+14)
      PUSH DE         ;SAVE X
      ;PUSH DE,HL,DE,HL
      CALL PLOTP      
      ;setXY(x, y - radius, x, y - radius);
      POP DE        ;GET X
      POP BC        ;GET R
      POP HL        ;GET Y
      PUSH HL       ;SAVE VARS
      PUSH BC
      PUSH DE
      XOR A
      SBC HL,BC     ;
      ;PUSH DE,HL,DE,HL
      CALL PLOTP      
	    ;setXY(x + radius, y, x + radius, y);      
	    POP HL        ;GET X
	    POP BC        ;GET R
	    POP DE        ;GET Y
	    PUSH DE       ;SAVE VARS
	    PUSH BC
	    PUSH HL
	    XOR A
	    ADC HL,BC
	    EX DE,HL
      ;PUSH DE,HL,DE,HL
      CALL PLOTP      
      ;setXY(x - radius, y, x - radius, y);	    
	    POP HL        ;GET X
	    POP BC        ;GET R
	    POP DE        ;GET Y
	    XOR A
	    SBC HL,BC
	    EX DE,HL
      ;PUSH DE,HL,DE,HL
      CALL PLOTP      

;while(x1 < y1)	    
CIRC_AGN:LD H,(IX+3)    ;X1
      LD L,(IX+2)    ;X1
      LD D,(IX+1)    ;Y1
      LD E,(IX+0)    ;Y1
      XOR A
      SBC HL,DE
      JP NC,CIRC_EXIT
	    ;if(f >= 0)
	    ADD HL,DE
	    PUSH HL        ;SAVE X1
	    PUSH DE        ;SAVE Y1
	    LD HL,0
	    XOR A
	    ;LD D,(IX+9)    ;F
	    ;LD E,(IX+8) 
	    LD A,(IX+9)     ;F HI BYTE
	    CP 80
	    JR NC,CIRC_SKIP
	    JR Z,CIRC_SKIP
	    ;y1--;
			;ddF_y += 2;
			;f += ddF_y;
	    POP DE        ;Y1
	    DEC DE
	    LD (IX+1),D   ;SAVE Y1
	    LD (IX+0),E
	    PUSH DE       ;Y1
	    LD H,(IX+5)   ;DDF_Y
	    LD L,(IX+4)   
	    INC HL
	    INC HL
	    LD (IX+5),H   ;SAVE DDF_Y
	    LD (IX+4),L
	    LD D,(IX+9)   ;F
	    LD E,(IX+8)
	    ADD HL,DE
	    LD (IX+9),H    ;SAVE F
	    LD (IX+8),L	    	    
CIRC_SKIP: ;x1++;
	    ;ddF_x += 2;
		  ;f += ddF_x;    
		  POP BC       ;Y1
		  POP HL       ;X1
		  INC HL
		  LD (IX+3),H  ;SAVE X1
		  LD (IX+2),L
		  PUSH HL      ;X1
	    LD H,(IX+7)   ;DDF_X
	    LD L,(IX+6)   
	    INC HL
	    INC HL
	    LD (IX+7),H   ;SAVE DDF_X
	    LD (IX+6),L
	    LD D,(IX+9)   ;F
	    LD E,(IX+8)
	    ADD HL,DE
	    LD (IX+9),H    ;SAVE F
	    LD (IX+8),L	    	
	            
      ;setXY(x + x1, y + y1, x + x1, y + y1);		  
      POP HL        ;X1
      PUSH HL
      LD D,(IX+15)  ;X
      LD E,(IX+14)
      PUSH DE
      ADD HL,DE
      EX DE,HL      ;DE=X+X1
      LD H,(IX+13)  ;Y
      LD L,(IX+12)
      ADD HL,BC     ;HL=Y+Y1
      ;DE,HL,DE,HL
      CALL PLOTP
      ;setXY(x - x1, y + y1, x - x1, y + y1);
		  POP HL        ;X
		  POP DE        ;X1
		  PUSH DE
		  PUSH HL
		  XOR A
		  SBC HL,DE
		  EX DE,HL      ;DE=X-X1
      LD H,(IX+13)  ;Y
      LD L,(IX+12)
      ADD HL,BC     ;HL=Y+Y1
      ;DE,HL,DE,HL
      CALL PLOTP
		  ;setXY(x + x1, y - y1, x + x1, y - y1);
		  POP HL        ;X
		  POP DE        ;X1 
		  PUSH DE
		  PUSH HL
		  ADD HL,DE
		  EX DE,HL      ;DE=X+X1
      LD H,(IX+13)  ;Y
      LD L,(IX+12)
      XOR A
      SBC HL,BC     ;HL=Y+Y1
      ;DE,HL,DE,HL
      CALL PLOTP
		  ;setXY(x - x1, y - y1, x - x1, y - y1);		  
		  POP HL        ;X
		  POP DE        ;X1  
		  PUSH DE
		  PUSH HL
		  XOR A
		  SBC HL,DE
		  EX DE,HL      ;DE=X-X1
      LD H,(IX+13)  ;Y
      LD L,(IX+12)
      XOR A
      SBC HL,BC     ;HL=Y-Y1
      ;DE,HL,DE,HL
      CALL PLOTP
      ;setXY(x + y1, y + x1, x + y1, y + x1);
      POP HL         ;X
      POP DE         ;X1
      PUSH BC        ;SAVE Y1 SWITCH DE AND BC
      PUSH HL        ;SAVE X      
      PUSH DE        ;SAVE X1      
      ADD HL,BC      ;
      POP BC         ;BC=X1
      EX DE,HL       ;DE=X+Y1
      LD H,(IX+13)  ;Y
      LD L,(IX+12)
      ADD HL,BC     ;HL=Y+X1
      ;DE,HL,DE,HL
      CALL PLOTP
		  ;setXY(x - y1, y + x1, x - y1, y + x1);
		  POP HL        ;X
		  POP DE        ;Y1
		  PUSH DE
		  PUSH HL
		  XOR A
		  SBC HL,DE
		  EX DE,HL      ;DE=X-Y1
      LD H,(IX+13)  ;Y
      LD L,(IX+12)
      ADD HL,BC     ;HL=Y+X1
      ;DE,HL,DE,HL
      CALL PLOTP
		  ;setXY(x + y1, y - x1, x + y1, y - x1);		  
		  POP HL        ;X
		  POP DE        ;Y1
		  PUSH DE
		  PUSH HL
      ADD HL,DE
      EX DE,HL      ;DE=X+Y1
      LD H,(IX+13)  ;Y
      LD L,(IX+12)
      XOR A
      SBC HL,BC     ;HL=Y-X1
      PUSH HL
      ;DE,HL,DE,HL
      CALL PLOTP
		  ;setXY(x - y1, y - x1, x - y1, y - x1);      
      POP BC        ;Y-X1
      POP HL        ;X
      POP DE        ;Y1 
      XOR A
      SBC HL,DE
      EX DE,HL      ;DE=X-Y1
      PUSH BC
      POP HL        ;HL=Y-X1
      ;DE,HL,DE,HL
      CALL PLOTP		  		  
	    JP CIRC_AGN
CIRC_EXIT: CALL LCD_CLRXY
      POP DE ;GET RET ADDR
      LD HL,8*2       ;REMOVE PARAMS FROM STACK
      ADD HL,SP     ;
      LD SP,HL 
      EX DE,HL     
      JP (HL)
         
;FILL AN AREA AROUND POINT X,Y
;BOTH PARAMS ON STACK
;COLOR TO FILL FCOLOR
;AREA BOUNDS BY BCOLOR       
@LCD_FILL:   
    EXX
    POP DE  ;save return addr to de'
    EXX  
    CALL _FILL         
    EXX
    PUSH DE ;restore return addr from de'
    EXX
    RET

