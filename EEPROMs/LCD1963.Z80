

       ;ORG 


       ;COLOR
       @COL_BLACK   EQU 0x0000
       @COL_RED     EQU 0xF800
       @COL_GREEN   EQU 0x07C0
       @COL_YELLOW  EQU 0xFFC0
       @COL_BLUE    EQU 0x003F
       @COL_MAGENTA EQU 0xF83F ;0xF863
       @COL_CYAN    EQU 0x07FF       
       @COL_WHITE   EQU 0xFFFF
       

       
       ;LOCAL CONSTS       
       LCD_RS EQU DEVTFT;  ;PORT TO CONTROL RS PIN 17=cs+rs+low = COMMAND  A0 CONNECT TO RS
       LCD_CS EQU DEVTFT+1;  ;PORT TO CONTROL CS PIN 16=cs+rs_high  = DATA
       LCD_WIDTH  EQU 799
       LCD_HEIGHT EQU 479
       FONT_WIDTH EQU 8
       FONT_HEIGHT EQU 10
       


       
    
      
LCD_WR_DAT16:;TWO PARAMS
             ;D=VL E=VH
    LD A,E
    OUT (LCD_CS),A

LCD_RD_DAT:        
LCD_RD_BUS: 
             ;DESTROYS A            
    IN A,(LCD_CS)
    RET

     
LCD_WR_DAT:        
LCD_WR_BUS:  ;ONE PARAM VL
             ;PASS BY REGISTER D=VL 
             ;DESTROYS A            
    LD A,D  
    OUT (LCD_CS),A
    RET


LCD_WR_COM:  ;ONE PARAM VL
             ;PASS BY REGISTER D=VL 
             ;DESTROYS A            
    LD A,D  
    OUT (LCD_RS),A
    RET


LCD_WR_COM2:;ONE PARAM VL
           ;PASS BY REGISTER D=VL
           ;DESTROYS A
    
    XOR A
    OUT (LCD_RS),A  ;RS LOW = COMMAND BYTE      
    CALL LCD_WR_BUS
    LD A,1
    OUT (LCD_RS),A  ;RS HIGH  = DATA BYTE
    RET
    
@LCD_INIT: ;INITIALIZE THE SSD1963

    LD D,0xE2         ;PLL multiplier, set PLL clock to 120M
    CALL LCD_WR_COM   ;N=0x36 for 6.5M, 0x23 for 10M crystal
    LD D,0x23 ;1E
    CALL LCD_WR_DAT
    LD D,0x02
    CALL LCD_WR_DAT
    LD D,0x54
    CALL LCD_WR_DAT
    LD D,0xE0         ; PLL enable    
    CALL LCD_WR_COM
    LD D,0x01
    CALL LCD_WR_DAT
    LD B,10        ;delay(10);
    CALL DELAYMICRO
    LD D,0xE0         ; PLL enable    
    CALL LCD_WR_COM   
    LD D,0x03
    CALL LCD_WR_DAT
    LD B,10        ;delay(10);
    CALL DELAYMICRO    

    LD D,0x01         ; software reset  
    CALL LCD_WR_COM   
    LD B,20       ;delay(20); MICROSECS
    CALL DELAYMICRO        
    LD D,0xE6         ;PLL setting for PCLK, depends on resolution  
    CALL LCD_WR_COM           
    LD D,0x03
    CALL LCD_WR_DAT   
    LD D,0x33 ;FF
    CALL LCD_WR_DAT       
    LD D,0x33 ;FF
    CALL LCD_WR_DAT   
    
    LD D,0xB0         ;LCD SPECIFICATION
    CALL LCD_WR_COM       
    LD D,0x20
    CALL LCD_WR_DAT   
    LD D,0x00
    CALL LCD_WR_DAT       
    LD D,0x03         ;Set HDP  799
    CALL LCD_WR_DAT   
    LD D,0x1F
    CALL LCD_WR_DAT   
    LD D,0x01         ;Set VDP  479
    CALL LCD_WR_DAT   
    LD D,0xDF
    CALL LCD_WR_DAT 
    LD D,0x00
    CALL LCD_WR_DAT     
        
        
    LD D,0xB4         ;HSYNC
    CALL LCD_WR_COM       
    LD D,0x04 ;03         ;Set HT 928
    CALL LCD_WR_DAT   
    LD D,0x1F ;A0
    CALL LCD_WR_DAT       
    LD D,0x00         ;Set HPS  46
    CALL LCD_WR_DAT   
    LD D,0xD2 ;2E
    CALL LCD_WR_DAT   
    LD D,0x00 ;30         ;Set HPW  48
    CALL LCD_WR_DAT   
    LD D,0x00         ;Set LPS  15
    CALL LCD_WR_DAT 
    LD D,0x00 ;0F
    CALL LCD_WR_DAT   
    LD D,0x00
    CALL LCD_WR_DAT     
                                  
    LD D,0xB6         ;VSYNC
    CALL LCD_WR_COM       
    LD D,0x02         ;Set VT 525
    CALL LCD_WR_DAT   
    LD D,0x0C ;0D
    CALL LCD_WR_DAT       
    LD D,0x00         ;Set VPS  16
    CALL LCD_WR_DAT   
    LD D,0x22 ;10
    CALL LCD_WR_DAT   
    LD D,0x00 ;10         ;Set VPW  16
    CALL LCD_WR_DAT   
    LD D,0x00         ;Set FPS  8
    CALL LCD_WR_DAT 
    LD D,0x00 ; 08
    CALL LCD_WR_DAT   
    
    LD D,0xB8         
    CALL LCD_WR_COM           
    LD D,0x0F ;07         ;GPIO3=input, GPIO[2:0]=output
    CALL LCD_WR_DAT         
    LD D,0x01         ;GPIO0 normal
    CALL LCD_WR_DAT 
           
    LD D,0xBA         
    CALL LCD_WR_COM           
    LD D,0x01 ;0F
    CALL LCD_WR_DAT   ;GPIO[3:0] out 1
        
    LD D,0x36         ;rotation
    CALL LCD_WR_COM           
    LD D,0x08 ;2A         
    CALL LCD_WR_DAT         

    LD D,0xF0         ;pixel data interface
    CALL LCD_WR_COM           
    LD D,0x06         ;CHANGE THIS FOR 8 BIT INTERFACE  6=9BIT SEND 2 BYTES 
    CALL LCD_WR_DAT     

    LD B,5       ;delay(5);
    CALL DELAYMICRO        

    LD D,0xBC         
    CALL LCD_WR_COM           
    LD D,0x40
    CALL LCD_WR_DAT   
    LD D,0x80
    CALL LCD_WR_DAT   
    LD D,0x40
    CALL LCD_WR_DAT   
    LD D,0x01
    CALL LCD_WR_DAT       
    LD B,5       ;delay(5);
    CALL DELAYMICRO  
  
    LD D,0x29         ;display on 
    CALL LCD_WR_COM       
    LD D,0xBE         ;set PWM for B/L
    CALL LCD_WR_COM                 
    LD D,0x06
    CALL LCD_WR_DAT                 
    LD D,0xF0         
    CALL LCD_WR_DAT   
    LD D,0x01         
    CALL LCD_WR_DAT   
    LD D,0xF0         
    CALL LCD_WR_DAT   
    LD D,0x00         
    CALL LCD_WR_DAT   
    LD D,0x00         
    CALL LCD_WR_DAT                   

    LD D,0xD0         
    CALL LCD_WR_COM                 
    LD D,0x0D         
    CALL LCD_WR_DAT         

    ;SET VIEWPORT
    LD HL,0
    PUSH HL
    PUSH HL
    LD HL,799
    PUSH HL
    LD HL,479
    PUSH HL
    CALL LCD_SETXY
    LD HL,8       ;REMOVE 4 PARAMS FROM STACK
    ADD HL,SP
    LD SP,HL
    RET
      

@LCD_SETXY:    ;SET WINDOW ON LCD TO FILL WITH BYTES
              ;4 PARAMS PASS BY STACK
              ;2 BYTES EACH PARAM TOTAL 8 BYTES
              ;X1,X2,Y1,Y2   X1,X2 SHOULD SWAP Y1,Y2 CAUSE OF THE LCD ORIENTATION
              ;WE SEND HERE
              ;X1 = IX+6_7  Y1=IX+4_5
              ;X2=  IX+2_3  Y2=IX+0_1
              
              ;WE SEND ON LCD
              ;Y1=IX+6_7 Y2=IX+2_3
              ;X1=IX+4_5 X2=IX+0_1
              ;HIGH BYTE FIRST SO +8 IS H AND +7 IS L
              ;SHOULD ADD SP,8 AFTER RET
              
    LD IX,2
    ADD IX,SP         
    LD D,0x2A         ;SEND IX PARAMS
    CALL LCD_WR_COM    
    LD D,(IX+7)
    CALL LCD_WR_DAT
    LD D,(IX+6)
    CALL LCD_WR_DAT
    LD D,(IX+3)
    CALL LCD_WR_DAT
    LD D,(IX+2)
    CALL LCD_WR_DAT       
    LD D,0x2B         ;SEND Y PARAMS
    CALL LCD_WR_COM   
    LD D,(IX+5)
    CALL LCD_WR_DAT
    LD D,(IX+4)
    CALL LCD_WR_DAT
    LD D,(IX+1)
    CALL LCD_WR_DAT
    LD D,(IX)
    CALL LCD_WR_DAT       
    LD D,0x2C         ;SEND DATA
    CALL LCD_WR_COM           
    RET
             

@LCD_SETPIXEL: ;SEND A 16 BIT VALUE FOR COLOR
              ;COLOR VALUE ON HL  VH & VL
              ;DESTROYS D,A
    LD D,H        
    CALL LCD_WR_DAT 
    LD D,L
    CALL LCD_WR_DAT 
    RET
    
@LCD_GETPIXEL: ;GET A 16 BIT VALUE FOR COLOR
              ;COLOR VALUE ON HL  VH & VL
              ;DESTROYS D,A
    LD D,0x2E         ;READ DATA
    CALL LCD_WR_COM           
    CALL LCD_RD_DAT 
    LD H,A
    CALL LCD_RD_DAT 
    LD L,A
    RET    

@LCD_READPIXEL: ; 2 PARAMS ON STACK TOTAL 4 BYTES
    LD IX,2     ;setXY(x, y, x, y);
    ADD IX,SP
    LD H,(IX+3)   ;X
    LD L,(IX+2)   ;X
    LD D,(IX+1) ;Y
    LD E,(IX) ;Y
    PUSH HL
    PUSH DE
    PUSH HL
    PUSH DE
    CALL LCD_SETXY
    LD HL,8       ;REMOVE PARAMS FROM STACK
    ADD HL,SP
    LD SP,HL
    CALL LCD_GETPIXEL
    PUSH HL    
    CALL LCD_CLRXY
    POP HL
    RET


@LCD_DRAWPIXEL: ; 2 PARAMS ON STACK TOTAL 4 BYTES
    LD IX,2     ;setXY(x, y, x, y);
    ADD IX,SP
    LD H,(IX+3)   ;X
    LD L,(IX+2)   ;X
    LD D,(IX+1) ;Y
    LD E,(IX) ;Y
    PUSH HL
    PUSH DE
    PUSH HL
    PUSH DE
    CALL LCD_SETXY
    LD HL,8       ;REMOVE PARAMS FROM STACK
    ADD HL,SP
    LD SP,HL
    LD HL,(FCOLOR)
    CALL LCD_SETPIXEL
    CALL LCD_CLRXY
    RET

@LCD_CLRXY:  ;RESET LCD WINDOW TO FULL
     LD HL,0
     PUSH HL
     PUSH HL
     LD HL,LCD_WIDTH
     PUSH HL
     LD HL,LCD_HEIGHT
     PUSH HL
     CALL LCD_SETXY
     LD HL,8        ;REMOVE PARAMS FROM STACK
     ADD HL,SP
     LD SP,HL
     RET

LCD_DRAWHLINE: ;3 PARAMS 2-BYTES EACH TOTAL 6 BYTES
              ;X , Y , LENGTH
      LD IX,2
      ADD IX,SP
      LD H,(IX+5)   ;X  
      LD L,(IX+4)   ;X
      LD D,(IX+3)   ;Y
      LD E,(IX+2)   ;Y
      LD B,(IX+1)   ;LENGTH
      LD C,(IX)     ;LENGTH
      
      
      PUSH HL
      LD HL,0
      OR A           ;CLEAR CARRY
      SBC HL,BC      ;CHECK IF LENGTH<0
      JR C,POSH1
      XOR A          ;l=-l
			SUB C
			LD C,A
			SBC A,A
			SUB B
			LD B,A
			POP HL
      SBC HL,BC       ;x -= l;
      PUSH HL                    
POSH1: POP HL
			PUSH HL
      PUSH DE
      ADD HL,BC
      PUSH HL
      PUSH DE
      CALL LCD_SETXY   ;setXY(x, y, x+l, y);
      LD HL,8       ;REMOVE PARAMS FROM STACK
      ADD HL,SP
      LD SP,HL
      LD HL,(FCOLOR)    
NXTH1: CALL LCD_SETPIXEL
      DEC BC
      LD A,C
      OR B
      JR NZ, NXTH1     
      CALL LCD_CLRXY
      RET


LCD_DRAWVLINE: ;3 PARAMS 2-BYTES EACH TOTAL 6 BYTES
              ;X , Y , LENGTH
      LD IX,2
      ADD IX,SP
      LD D,(IX+5)   ;X  
      LD E,(IX+4)   ;X
      LD H,(IX+3)   ;Y
      LD L,(IX+2)   ;Y
      LD B,(IX+1)   ;LENGTH
      LD C,(IX)     ;LENGTH     
      PUSH HL
      LD HL,0
      OR A           ;CLEAR CARRY
      SBC HL,BC      ;CHECK IF LENGTH<0
      JR C,POSV1
      XOR A          ;l=-l
			SUB C
			LD C,A
			SBC A,A
			SUB B
			LD B,A
			POP HL
      SBC HL,BC       ;Y -= l;
      PUSH HL                   
POSV1: POP HL
			PUSH DE
      PUSH HL
      PUSH DE
      ADD HL,BC
      PUSH HL
      CALL LCD_SETXY   ;setXY(x, y, x, y+l);
      LD HL,8       ;REMOVE PARAMS FROM STACK
      ADD HL,SP
      LD SP,HL
      LD HL,(FCOLOR)    
NXTV1: CALL LCD_SETPIXEL
      DEC BC
      LD A,C
      OR B
      JR NZ, NXTV1     
      CALL LCD_CLRXY
      RET

@LCD_DRAWLINE: ;4 PARAMS 2-BYTES EACH TOTAL 8 BYTES
              ;X1 , Y1 , X2, Y2
      LD IX,2
      ADD IX,SP
     ; LD D,(IX+7)   ;X1  
     ; LD E,(IX+6)   ;X1
     ; LD H,(IX+5)   ;Y1
    ;  LD L,(IX+4)   ;Y1
     ; LD D,(IX+3)   ;X2  
    ;  LD E,(IX+2)   ;X2
    ;  LD H,(IX+1)   ;Y2
    ;  LD L,(IX)     ;Y2
      
      LD H,(IX+5)   ;Y1
      LD L,(IX+4)   ;Y1
      LD D,(IX+1)   ;Y2
      LD E,(IX)     ;Y2
      OR A
      SBC HL,DE
      JR NZ,YNOTEQ
      ;CALL DRAWHLINE CAUSE Y1=Y2
      LD B,(IX+7)   ;X1
      LD C,(IX+6)   ;X1
      PUSH BC       ;X1 1ST PARAM ON STACK
      PUSH DE				;Y 2ND PARAM ON STACK
      LD H,(IX+3)   ;X2
      LD L,(IX+2)   ;X2       
      SBC HL,BC  	  ;X2-X1 = LENGTH OF HORIZ LINE
      PUSH HL       ;LENGTH 3RD PARAM ON STACK 
      CALL LCD_DRAWHLINE
      LD HL,6       ;REMOVE PARAMS FROM STACK
      ADD HL,SP
      LD SP,HL      
      RET
YNOTEQ:  
      LD H,(IX+7)   ;X1
      LD L,(IX+6)   ;X1
      LD D,(IX+3)   ;X2
      LD E,(IX+2)   ;X2 
      OR A
      SBC HL,DE
      JR NZ,XNOTEQ
      ;CALL DRAWVLINE CAUSE X1=X2
      PUSH DE       ;X2=X1 1ST PARAM ON STACK
      LD B,(IX+5)   ;Y1
      LD C,(IX+4)   ;Y1
      PUSH BC       ;Y1 2ND PARAM ON STACK
      LD H,(IX+1)   ;Y2
      LD L,(IX)   ;Y2       
      SBC HL,BC  	  ;Y2-Y1 = LENGTH OF VERT LINE
      PUSH HL       ;LENGTH 3RD PARAM ON STACK 
      CALL LCD_DRAWVLINE
      LD HL,6       ;REMOVE PARAMS FROM STACK
      ADD HL,SP
      LD SP,HL
      RET
XNOTEQ:
      ;LINE ALGORITHM
      JR C,X2GTX1
      ;HL=X1-X2
      XOR A		
      DEC A  ;XSTEP=-1
      JR DLNXT1
X2GTX1:      
     ; LD HL,DE      ;X2
      PUSH DE
      POP HL
      LD D,(IX+7)   ;X1
      LD E,(IX+6)   ;X1 
      OR A     
      SBC HL,DE     ;X2-X1 ON HL
      ;HL=X2-X1  HL=DX
      LD A,1        ;XSTEP=1
DLNXT1:
      LD B,0
      LD C,0
      PUSH BC       ;T
      PUSH HL       ;DX
      CP 1
      JR Z,DLXMINUS1
      LD B,0XFF
DLXMINUS1:LD C,A      
      PUSH BC       ;XSTEP
      LD H,(IX+5)   ;Y1
      LD L,(IX+4)   ;Y1
      LD D,(IX+1)   ;Y2
      LD E,(IX)     ;Y2      
      OR A
      SBC HL,DE
      JR C,Y2GTY1  ;HL=Y1-Y2
      XOR A
      DEC A         ;YSTEP=-1
      JR DLNXT2
Y2GTY1:
      ;LD HL,DE      ;Y2
      PUSH DE
      POP HL
      LD D,(IX+5)   ;Y1
      LD E,(IX+4)   ;Y1  
      OR A
      SBC HL,DE  ;HL=Y2-Y1    HL=DY      
      LD B,0
      LD A,1        ;YSTEP=1
DLNXT2:
      CP 1
      JR Z,DLYMINUS1
      LD B,0XFF
DLYMINUS1:
      LD C,A      
      PUSH HL       ;DY
      PUSH BC       ;YSTEP   
      LD IY,0
      ADD IY,SP
      ;IY+9= T HI
      ;IY+8= T LO
      ;IY+7= DX HI
      ;IY+6= DX LO
      ;IY+5= XSTEP
      ;IY+4= XSTEP
      ;IY+3= DY HI
      ;IY+2= DY LO
      ;IY+1= YSTEP
      ;IY= YSTEP
      
      ;DE = ROW
      ;LD D,(IX+7)   ;COL
      ;LD E,(IX+6)   ;COL
      LD D,(IY+7)    ;DX
      LD E,(IY+6)    ;DX
      OR A
      SBC HL,DE      ;DY-DX
      JP C,DXGTDY
      JP Z,DXGTDY
      ;DX<DY 
      ADD HL,DE      ;HL=DY
      LD B,H
      LD C,L
      SRL B
      RR C           ;(dy >> 1)
      LD HL,0
      SBC HL,BC      ;t = - (dy >> 1);
      LD (IY+9),H    ;SAVE T
      LD (IY+8),L    ;SAVE T
DLAGN1:
      LD D,(IX+5)   ;ROW
      LD E,(IX+4)   ;ROW=Y1
      LD H,(IX+7)   ;COL
      LD L,(IX+6)   ;COL=X1
      PUSH DE
      PUSH IX
      PUSH HL
      PUSH DE
      PUSH HL
      PUSH DE
      CALL LCD_SETXY
      LD HL,8       ;REMOVE PARAMS FROM STACK
      ADD HL,SP     ;
      LD SP,HL      
      LD HL,(FCOLOR)    
      CALL LCD_SETPIXEL
      POP IX
      POP DE
      LD H,(IX+1)   ;Y2
      LD L,(IX)     ;Y2 
      SBC HL,DE     ; ROW=Y2
      JP Z,DLEXIT
      LD B,(IY+1)   ;YSTEP HI
      LD C,(IY)     ;YSTEP LO
      EX DE,HL
      ADD HL,BC     ;row += ystep;
      LD (IX+5),H   ;SAVE ROW
      LD (IX+4),L   ;   
      ;EX DE,HL      ;DE=ROW
      LD D,(IY+9)   ; T
      LD E,(IY+8)   ; T      
      LD H,(IY+7)   ;DX
      LD L,(IY+6)   ;DX
      ADD HL,DE
      LD (IY+9),H   ;t += dx;
      LD (IY+8),L
      EX DE,HL
      LD HL,$8000
      SBC HL,DE     ;CHECK IF T<0
      JR C,DLAGN1   ; CARRY SET IF NEGATIVE
      LD B,(IY+5)   ;XSTEP HI
      LD C,(IY+4)   ;XSTEP LO
      LD H,(IX+7)   ;COL HI
      LD L,(IX+6)   ;COL LO
      ADD HL,BC     ;col += xstep;
      LD (IX+7),H   ;SAVE COL
      LD (IX+6),L   ;         
      							;t   -= dy;
      LD H,(IY+9)   ; T
      LD L,(IY+8)   ; T      
      LD B,(IY+3)   ;DY
      LD C,(IY+2)   ;DY
      SBC HL,BC
      LD (IY+9),H   ;t -= dY;
      LD (IY+8),L							
      JP DLAGN1
DXGTDY: 
      ADD HL,DE      ;HL=DY DE=DX
      LD B,D
      LD C,E
      SRL B
      RR C           ;(dX >> 1)
      LD HL,0
      SBC HL,BC      ;t = - (dX >> 1);
      LD (IY+9),H    ;SAVE T
      LD (IY+8),L    ;SAVE T
DLAGN2:
      LD D,(IX+5)   ;ROW
      LD E,(IX+4)   ;ROW=Y1
      LD H,(IX+7)   ;COL
      LD L,(IX+6)   ;COL=X1
      PUSH HL       ;SAVE COL
      PUSH IX
      PUSH HL
      PUSH DE
      PUSH HL
      PUSH DE
      CALL LCD_SETXY
      LD HL,8       ;REMOVE PARAMS FROM STACK
      ADD HL,SP     ;
      LD SP,HL      
      LD HL,(FCOLOR)    
      CALL LCD_SETPIXEL
      POP IX
      POP DE        ;RETRIEVE COL
      LD H,(IX+3)   ;X2
      LD L,(IX+2)   ;X2 
      SBC HL,DE     ; COL=X2?
      JR Z,DLEXIT
      EX DE,HL      ;HL=COL
      LD B,(IY+5)   ;XSTEP HI
      LD C,(IY+4)   ;XSTEP LO
      ADD HL,BC     ;col += xstep;
      LD (IX+7),H   ;SAVE COL
      LD (IX+6),L   ;   
      LD D,(IY+9)   ; T
      LD E,(IY+8)   ; T      
      LD H,(IY+3)   ;DY
      LD L,(IY+2)   ;DY
      ADD HL,DE
      LD (IY+9),H   ;t += dY;
      LD (IY+8),L
      EX DE,HL      ;T=DE
      LD HL,$8000  
      SBC HL,DE    ;CHECK IF T<0
      JR C,DLAGN2  ;CARRY SET IF NEGATIVE    
      LD B,(IY+1)   ;YSTEP HI
      LD C,(IY)     ;YSTEP LO
      LD H,(IX+5)   ;ROW HI
      LD L,(IX+4)   ;ROW LO
      ADD HL,BC     ;ROW += Ystep;
      LD (IX+5),H   ;SAVE COL
      LD (IX+4),L   ;         
      							;t   -= dX;
      LD H,(IY+9)   ; T
      LD L,(IY+8)   ; T      
      LD B,(IY+7)   ;DX
      LD C,(IY+6)   ;DX
      SBC HL,BC
      LD (IY+9),H   ;t -= dX;
      LD (IY+8),L							
      JP DLAGN2

DLEXIT:
      LD HL,10      ;REMOVE 10 IY PARAMS FROM STACK
      ADD HL,SP     ;
      LD SP,HL           
      RET          
;
@LCD_PRINTCHAR:
      ;A THE CHAR TO BE PRINTED ON CURSORX AND CURSORY
      ;SETXY(CURSORX*FONT_WIDTH,CURSORY*FONT_HEIGHT,(CURSORX+1)*FONT_WIDTH,(CURSORY+1)*FONT_HEIGHT)
      ;FONT_PATTERN = B=FONT_ADDR  C=A FOR EACH FONT LINE JUST INCREASE B
      CP 0X08   ;BACKSPACE
      JP Z,PRCH_DOBCKSPC
      CP 0X0A   ;LINE FEED JUST IGNORE IT
      RET Z
      CP 0X0D   ;CHECK FOR ENTER
      JR NZ,PRCH_DOPRN
      LD HL,CURSORX
      JP PRCH_NEWLN 
PRCH_DOBCKSPC:
      LD HL,CURSORX      
      LD A,(HL)
      JR C,DOREALBCKSPC
      ;IF C IS NOT SET THEN GO LEFT
      CP 1      ;COMPARE WITH COLUMN 1 CAUSE OF THE PROMPT ON COLUMN 0
      RET Z
      DEC (HL)
      RET      
DOREALBCKSPC:
      CP 1      ;COMPARE WITH COLUMN 1 CAUSE OF THE PROMPT ON COLUMN 0
      JR Z,PRCH_DOBCKSPC2     ;IF 0 WE ARE ON THE 1ST COLUMN SO NOTHING TO DO JUST DELETE THE 8=BS FROM BUFFER
      DEC (HL)  ;GO 1 POSITION BACK
      PUSH HL
      LD A,32   ;PRINT SPACE
      CALL PRCH_DOPRN ;THIS FORWARDS THE CURSOR SO WE SHOULD GO BACK AGAIN
      POP HL
      DEC (HL)  ;GO 1 POSITION BACK
      OR A      
      ;NOW DELETE FROM THE BASIC BUFFER TOO
      ;BS =8 ALREADY PUT ON BUFFER SO WE SHOULD GO BACK 2 PLACES
PRCH_DOBCKSPC2:
      LD IX,2
      ADD IX,SP
      LD H,(IX+1);POSITION IN ACCS FOR THE NEW CHARACTER      
      LD L,(IX) ;POSITION IN ACCS FOR THE NEW CHARACTER  
      LD A,0    ;NOT XOR WE DONT WANT TO MESS WITH ZERO FLAG
      JR Z,PRCH_SKIP1  ;WE ARE ON COLUMN 1
      DEC HL     ;PREVIOUS POSITION DELETE BACKSPACE
      LD (HL),A  ;PUT 0 ON LAST POSITION
PRCH_SKIP1:      
      DEC HL     ;PREVIOUS POSITION DELETE PREVIOUS CHAR
      LD (HL),A  ;PUT 0 ON LAST POSITION      
      LD (IX+1),H ;PUT POSITION BACK ON STACK IT WILL POPED
      LD (IX),L
      RET
                  
PRCH_DOPRN:
      PUSH AF  ;SAVE CHAR TO STACK
      LD (LASTCHAR),A ;SAVE LAST PRINTED CHAR
      LD A,(CURSORX)
      LD B,FONT_WIDTH
      LD D,0
      LD E,A
      LD HL,0
      OR A          ; CLEAR CARRY
PRCH_AGN1:
      ADC HL,DE
      DJNZ PRCH_AGN1 ;HL=DE*B
      PUSH HL       ;1ST PARAM X1
      LD DE,FONT_WIDTH 
      ADC HL,DE      
      DEC HL
      PUSH HL       ;SAVE 3RD PARAM X2
      LD A,(CURSORY)
      LD B,FONT_HEIGHT 
      LD D,0
      LD E,A
      LD HL,0
PRCH_AGN2:
      ADC HL,DE
      DJNZ PRCH_AGN2      
      POP DE        ;RETREIVE 3RD PARAM X2
      PUSH HL       ;2ND PARAM Y1
      PUSH DE       ;3RD PARAM X2
      LD DE,FONT_HEIGHT
      ADC HL,DE     ;CALC 4TH PARAM      
      DEC HL        ;4TH PARAM -1  
      PUSH HL				;4TH PARAM Y2
      CALL LCD_SETXY
      LD HL,8
      ADD HL,SP
      LD SP,HL      ;SKIP 4 PARAMS 8 BYTES
      POP AF        ;CHAR TO PRINT FROM STACK
      LD HL,FONT_ADDR
      LD D,0
      LD E,A
      ADC HL,DE     ;THIS IS THE CHAR ADDRESS
      PUSH HL
      POP DE        ; CHAR ADDRESS ON DE
      LD C,FONT_HEIGHT   ; TOTAL FONT LINES
PRCH_AGN3:      
      LD A,(DE)           ;FONT 8BIT PATTERN FOR A LINE
      LD B,FONT_WIDTH      
PRCH_AGN4:      
      SLA A               ;CHECK BIT FOR 1=FCOLOR OR 0=BCOLOR
      JR C,FORECOLOR
      LD HL,(BCOLOR)
      JR PRCH_CONT
FORECOLOR:
      LD HL,(FCOLOR)      
PRCH_CONT:
      PUSH AF
      PUSH DE             ;TODO:PROBABLY NOT NEEDED HERE 
      CALL LCD_SETPIXEL
      POP DE
      POP AF      
      DJNZ PRCH_AGN4
      INC D             ;ADD 256 FOR NEXT CHAR PATTERN
      DEC C
      JR NZ,PRCH_AGN3
      ;FORWARD CURSOR
      LD HL,CURSORX
      LD A,(HL)
      INC A
      CP 80
      JR Z,PRCH_NEWLN  ;NEW LINE
      LD (HL),A
      RET
         
PRCH_NEWLN:
      XOR A  
      LD (HL),A   
      INC HL
      LD A,(HL)
      INC A       
      ;CHECK FOR END OF SCREEN
      CP 47         ;47 LINES MAX THEN WRAP OR BETTER SCROLL THE SCREEN!!!
      JR NZ,PRCH_NOTYET
      XOR A
PRCH_NOTYET:
      LD (HL),A                             
      RET
;
@LCD_RMVCURS:
      ;REMOVES THE CURSOR FROM PREVIOUS POSITION
   ;   LD A,(CURSORX)
   ;   LD H,A
   ;   LD A,(CURSORY)
   ;   LD L,A
   ;   PUSH HL             ;SAVE CURSOR
   ;   LD A,(PRECSRX)     ;REPLACE CURSX AND Y WITH THE PREVIOUS ONES
   ;   LD (CURSORX),A
   ;   LD A,(PRECSRY)
   ;   LD (CURSORY),A
      LD HL,(BCOLOR);      
      JR LCD_SETCURS
   ;   POP HL              ;LOAD CURSOR
   ;   LD A,H
   ;   LD (CURSORX),A
   ;   LD A,L
   ;   LD (CURSORY),A
    ;  RET
      

@LCD_PRNCURS:     
      ;ADD A CURSOR ON NEW POSITION
      LD HL,(FCOLOR)      ;COLOR PARAM      
      
@LCD_SETCURS:
      PUSH HL             ;COLOR PARAM
      LD A,(CURSORX)
      LD B,FONT_WIDTH
      LD D,0
      LD E,A
      LD HL,0
      OR A                ;CLEAR CARRY
SCUR_AGN1:
      ADC HL,DE
      DJNZ SCUR_AGN1      ;HL = DE * B 
      PUSH HL             ;1ST PARAM X1
      LD BC,FONT_WIDTH
      ADC HL,BC           ;NEXT CHAR
      DEC HL              ;MINUS 1
      PUSH HL             ;SAVE 3RD PARAM X2      
      LD A,(CURSORY)      
      LD B,FONT_HEIGHT 
      LD D,0
      LD E,A
      LD HL,0
SCUR_AGN2:
      ADC HL,DE
      DJNZ SCUR_AGN2      ;HL=B*DE
      LD C,FONT_HEIGHT-2  ;2 PIXEL HEIGTH CURSOR       
      LD B,0
      ADC HL,BC           ;ADD FONT_HEIGHT-2 PIXELS
      POP DE              ;RETREIVE 3RD PARAM ON DE
      PUSH HL             ;2ND PARAM Y1
      PUSH DE             ;3RD PARAM X2
      ;INC HL
      INC HL              ; Y2 ADD THE LAST +2 PIXELS  
      PUSH HL             ;4TH PARAM Y2
      CALL LCD_SETXY
      LD HL,8
      ADD HL,SP
      LD SP,HL            ;SKIP 4 PARAMS 8 BYTES            
      ;SEND THE PIXELS = 2*FONT_WIDTH   
      POP HL              ;GET THE COLOR
      LD B,2*FONT_WIDTH   ;2*8=16
SCUR_AGN3:
      CALL LCD_SETPIXEL   ;DESTROYS D,A
      DJNZ SCUR_AGN3                            
      ;LD A,(CURSORX)
      ;LD (PRECSRX),A      ; SAVE CURSOR TO PREVIOUSX
      ;LD A,(CURSORY)
      ;LD (PRECSRY),A      ; SAVE CURSOR TO PREVIOUSX      
      RET

@LCD_CLRSCR:
     CALL LCD_CLRXY;
     LD HL,(BCOLOR)     
    ; JP METH2
     LD BC,LCD_HEIGHT
CS_AGNA2: PUSH BC
     LD BC,LCD_WIDTH
CS_AGNA1:  CALL LCD_SETPIXEL         ;DESTROYS D,A, HL HAS COLOR INFO
     DEC BC
     LD A,B
     OR C
     JR NZ,CS_AGNA1
     POP BC
     DEC BC
     LD A,B
     OR C     
     JR NZ,CS_AGNA2
     LD HL,0                   ;RESET CURSOR AT 0,0
     LD (CURSORX),HL       
		 RET
    
     
METH2:     
     ;OUTER LOOP HEIGHT TIMESS
     LD B,LCD_HEIGHT.AND.0xFF   ;lsb
     LD C,LCD_HEIGHT.SHR.8+1      ;MSB+1
CS_AGN2:     
     PUSH BC          
     ;INNER LOOP WIDTH TIMES
     LD B,LCD_WIDTH.AND.0xFF   ;lsb
     LD C,LCD_WIDTH.SHR.8+1      ;MSV+1          
CS_AGN1:     
     CALL LCD_SETPIXEL         ;DESTROYS D,A, HL HAS COLOR INFO
     DJNZ CS_AGN1
     DEC C
     JR NZ,CS_AGN1     
     POP BC
     DJNZ CS_AGN2
     DEC C
     JR NZ,CS_AGN2 
     LD HL,0                   ;RESET CURSOR AT 0,0
     LD (CURSORX),HL       
     RET
     
     
;PRINT A MESSAGE AT CURSOR     
@LCD_MSG:
     ;HL HAS THE TEXT BUFFER
     LD A,(HL)
     CP 0
     RET Z
     PUSH HL
     CALL LCD_PRINTCHAR     
     POP HL
     INC HL
     JR LCD_MSG
     
     
;========================
;  BBC BASIC COMMANDS
;========================     
     
; WORKS WITH BBC BASIC
; SET LOGICAL COLOR 1 OF 15 POSITIONS
@BAS_COLOUR:
     CP 1          ;IS IT FOR GRAPHICS?
     JR Z,GRCOLS
     LD HL,BCOLOR
     LD (GR_PARAM4),HL
     LD HL,FCOLOR
     LD (GR_PARAM3),HL
     JR BS_DOCOL
GRCOLS: LD HL,BGRCOL
     LD (GR_PARAM4),HL
     LD HL,FGRCOL
     LD (GR_PARAM3),HL         
BS_DOCOL: CALL EXPRI    ;GET 1ST PARAM
     EXX
     LD A,(IY)
     CP 0x0D       ;FINISHED COMD LINE
     JR Z,COLSEL
     CP ','        ;CHECK FOR ','
     JP NZ,GRPHERR
     ;SET A NEW COLOR ON FCOLOR PALLETE
     PUSH HL       ;SAVE 1ST PARAM
     INC IY        ;NEXT PARAM
     CALL EXPRI    ;GET 2ND PARAM
     EXX
     POP DE        ;RESTORE 1ST PARAM ON DE HL HAS THE 2ND
     LD A,E
     SUB 128
     JR C,COLFC
     LD E,A
     LD IX,BCOLPAL
     JR DOPALCOL
COLFC: LD IX,FCOLPAL
DOPALCOL:
     LD A,E
     CP 15			  ;MAX 16 COLORS
     JP NC,GRPHERR
     ADD IX,DE     
     ADD IX,DE     ;2*DE CAUSE ITS A 2 BYTE ARRAY
     LD (IX),L    ;SAVE THE NEW COLOR 
     LD (IX+1),H  
     RET  
COLSEL:
     ;SELECT A NEW FCOLOR FROM THE PALLETE
     PUSH HL
     POP DE     
     LD A,E
     SUB 128        ;CHECK MSB
     JR C,CFC
     LD E,A
     LD IX,GR_PARAM4
     LD L,(IX)
     LD H,(IX+1)     
     LD IX,BCOLPAL  ;BACKCOLOR
     JR SFC
CFC: LD IX,GR_PARAM3
     LD L,(IX)
     LD H,(IX+1)     
     LD IX,FCOLPAL  ;FRONTCOLOR
SFC: LD A,E
     CP 16			  ;MAX 16 COLORS
     JP NC,GRPHERR
     ADD IX,DE
     ADD IX,DE
     LD D,(IX)
     LD E,(IX+1)     
     LD (HL),D  ;SAVE AGAIN 
     INC HL     
     LD (HL),E       
     RET          


;GETS ALL AVAILABLE PARAMS
;RETURNS IN A HOW MANY 1-4
GETBASICPARAMS:
     XOR A
     LD HL,GR_PARAM1
GBP_NXT:
     PUSH AF
     PUSH HL
     CALL EXPRI    ;GET 1ST PARAM
     EXX           ;HL HAS THE PARAM     
     POP DE        ;GET PARAM ADDRESS
     EX DE,HL
     LD (HL),E
     INC HL
     LD (HL),D
     INC HL        ;PARAM SAVED     
     POP AF
     INC A          
     CP 4
     RET Z     
     PUSH AF
     LD A,(IY)     
     CP 0x0D       ;FINISHED COMD LINE
     JR Z,NOMORE 
     CP ','        ;CHECK FOR ','
     JR NZ,NOMORE
     INC IY        ;NEXT PARAM
     POP AF    
     JR GBP_NXT     
NOMORE:POP AF     
     RET
     

;SAVE GR_PARAM1 AND GR_PARAM2 TO GR_LASTX,GR_LASTY
@GRPH_SAVELASTPOS:
     LD BC,8					;8 BYTES SHIFT UP KEEPS 2 LAST POSITIONS NEEDED IN PLOT COMMD
     LD DE,GR_LASTX3
     LD HL,GR_LASTX2
     LDIR     
     LD HL,(GR_PARAM1)
     LD (GR_LASTX),HL  ;SAVE TO LAST		     		     
     LD HL,(GR_PARAM2)
     LD (GR_LASTY),HL  ;SAVE TO LAST     
		 RET

;TWO PARAMS DRAW A LINE TO X,Y
@BAS_DRAW:
     CALL GETBASICPARAMS
     CP 2
     JP NZ,GRPHERR          
BAS_DODRAW: CALL GRPH_SAVECOLORS
     PUSH IY
     ;PUSH IX
     ;DRAW A LINE FROM LASTX,LASTY TO GR_PARAM1,GR_PARAM2
     LD HL,(GR_LASTX)
     PUSH HL
     LD HL,(GR_LASTY)
     PUSH HL
     CALL GRPH_SAVELASTPOS
     LD HL,(GR_PARAM1)
     PUSH HL
     LD HL,(GR_PARAM2)
     PUSH HL 
     CALL LCD_DRAWLINE 
     LD HL,8       ;REMOVE PARAMS FROM STACK
     ADD HL,SP
     LD SP,HL     
     ;POP IX
     POP IY
     CALL GRPH_RESTORECOLORS
     RET           ;RETURN TO BASIC  


;TWO PARAMS MOVE THE GRAPHICS CURSOR TO X,Y
@BAS_MOVE:  CALL GETBASICPARAMS
          CP 2
          JP NZ,GRPHERR   
         ; LD A,(IY)  
          CALL GRPH_SAVELASTPOS
          RET
          

;POINT GETS A LOGICAL COLOR(FROM THE PALLETE) FROM THE SCREEN
;WE MUST TAKE A PIXEL(2BYTES) FROM THE SCREEN AND SEE WHICH LOGICAL COLOR IT IS TO RETURN IT
;TWO PARAMS, RETURNS THE COLOR FROM PALLETE CURSOR TO X,Y
@BAS_POINT:CALL GETBASICPARAMS
           CP 2
           JP NZ,GRPHERR   
          ; PUSH IY   
          ; PUSH IX    
           LD HL,(GR_PARAM1)
           PUSH HL
           LD HL,(GR_PARAM2)
           PUSH HL           
           CALL LCD_READPIXEL
           EX DE,HL
           LD HL,4       ;REMOVE 2 PARAMS FROM STACK
           ADD HL,SP
           LD SP,HL     
           EX DE,HL
           ;HL HAS THE COLOR
          ; POP IX
          ; POP IY
           LD A,(IY)  
           CP ')'
           JP NZ,GRPHERR 
           INC IY 
           ;RETURNS A NUMBER IN BCHLHL'
           ; SO FOR 16 BIT NUMBER WE CLEAR BC,HL AND SET HL'
           LD BC,0
           DI
           PUSH HL
           EXX
           POP HL
           EXX           
           LD HL,0
           EI
           RET


;A HAS THE GROUP
;HL HAS THE GROUP TABLE ADDRESS ON RETURN
;HL=0 NOT FOUND GROUP NOT IMPLEMENTED
GRPH_GETGROUP: CP 0
					;GROUP00
					LD HL,PLOT00
					RET Z
          CP 80.SHR.3
					LD HL,PLOT80
					RET Z
          CP 96.SHR.3
					LD HL,PLOT96
					RET Z       
          CP 128.SHR.3
					LD HL,PLOT128
					RET Z                   
	        CP 144.SHR.3
					LD HL,PLOT144
					RET Z                   
          CP 152.SHR.3
					LD HL,PLOT152
					RET Z                   
          CP 160.SHR.3
					LD HL,PLOT160
					RET Z                   
          CP 192.SHR.3
					LD HL,PLOT192
					RET Z                   
          CP 200.SHR.3
          LD HL,PLOT200
          RET Z 
					LD HL,0
					RET                    		            
					                       
;PLOT MODE,X,Y MODE DOES MANY THINGS
@BAS_PLOT:CALL GETBASICPARAMS
          CP 3
          JP NZ,GRPHERR   
          LD A,(GR_PARAM1)
          ;SHIFT UP PARAM2 AND PARAM3 PRESERVE A
          LD BC,4
          LD HL,GR_PARAM2
          LD DE,GR_PARAM1
          LDIR                    
          LD B,A  ;COMMAND GROUP 5 BITS
          SRL B
          SRL B
          SRL B          
          AND 7		
          LD C,A  ;SPECIFIC COMMAND IN GROUP
          LD A,B
          CALL GRPH_GETGROUP
          LD A,H
          CP 0
          RET Z ;RET IF HL=0 GROUP NOT IMPLEMENTED
          LD B,0
          SLA C      ;C=C*2 2BYTE ADDRESSES
          ADD HL,BC  ;C IS 0-7 SPECIFIC COMMD
          LD E,(HL)
          INC HL
          LD D,(HL)
          EX DE,HL
          JP (HL)

GRPH_NOTIMPL:RET

;CONVERTS THE RELATIVE POSITION TO ABSOLUTE LASTX+GRPARAM1,LASTY+GRPARAM1
GRPH_CALCREL: LD HL,(GR_PARAM1)
         LD DE,(GR_LASTX)
         ADD HL,DE
         LD (GR_PARAM1),HL
         LD HL,(GR_PARAM2)
         LD DE,(GR_LASTY)
         ADD HL,DE
         LD (GR_PARAM2),HL
				 RET

GRPH_MOVEREL:
         CALL GRPH_CALCREL
         CALL GRPH_SAVELASTPOS         
         RET
         
GRPH_LINEREL:         
         CALL GRPH_CALCREL
         CALL BAS_DODRAW
         RET
         
GRPH_SWAPCOLORS:
         LD HL,(FCOLOR)
         PUSH HL
         LD HL,(BCOLOR)
         LD (FCOLOR),HL
         POP HL
         LD (BCOLOR),HL
         RET

GRPH_SWAPGRCOLS:
         LD HL,(FGRCOL)
         PUSH HL
         LD HL,(BGRCOL)
         LD (FGRCOL),HL
         POP HL
         LD (BGRCOL),HL
         RET
         
;SAVE THE CURRENT FCOLOR AND BCOLOR AND SETS THE GRAPHICS ONES    
@GRPH_SAVECOLORS:
         LD BC,4 ;2 FCOLOR + 2 BCOLOR
         LD HL,FCOLOR
         LD DE,FCOLTM 
         LDIR
         LD BC,4 ;2 FGRCOL + 2 BGRCOL
         LD HL,FGRCOL
         LD DE,FCOLOR
         LDIR         
				 RET
				        
;RESTORES LAST SAVED FCOLOR AND BCOLOR         
@GRPH_RESTORECOLORS:	
         LD BC,4 ;2 FCOLOR + 2 BCOLOR
         LD HL,FCOLTM
         LD DE,FCOLOR 
         LDIR
				 RET
			          
         
GRPH_LINERELBC:         
         CALL GRPH_SWAPGRCOLS
         CALL GRPH_CALCREL
         CALL BAS_DODRAW
         CALL GRPH_SWAPGRCOLS
         RET

GRPH_DRAWBC:         
         CALL GRPH_SWAPGRCOLS
         CALL BAS_DODRAW
         CALL GRPH_SWAPGRCOLS
         RET

GRPH_TRIANGLE:                  
         CALL BAS_DODRAW  ;FROM LASTX=2ND PT TO GR_PARAM1=3RD PT
         LD HL,(GR_LASTX3)
         LD (GR_PARAM1),HL
         LD HL,(GR_LASTY3)
         LD (GR_PARAM2),HL
         CALL BAS_DODRAW  ;FROM LASTX=3RD PT TO GR_PARAM1=1ST PT
         LD HL,(GR_LASTX3)
         LD (GR_PARAM1),HL
         LD HL,(GR_LASTY3)
         LD (GR_PARAM2),HL
         CALL BAS_DODRAW  ;FROM LASTX=1ST PT TO GR_PARAM1=2ND PT
         LD BC,4
         LD HL,GR_LASTX3
         LD DE,GR_LASTX
         LDIR               ;SET LASTX,LASTY         
				 RET
				 
GRPH_TRIANGLEBC:CALL GRPH_SWAPGRCOLS
         CALL GRPH_TRIANGLE
         CALL GRPH_SWAPGRCOLS
				 RET
				 
				 ;PT1=LASTX PT2=PARAM1
GRPH_RECT:LD HL,GR_PARAM1
         LD DE,GR_PARAM3
         LD BC,4
         LDIR               ;COPY PARAM1,2 TO 3,4         
         LD HL,(GR_LASTY)
         PUSH HL            ;PT1_Y
         LD HL,(GR_LASTX)
         PUSH HL            ;PT1_X         
         LD HL,(GR_LASTY)         
         LD (GR_PARAM2),HL         
         CALL BAS_DODRAW    ;PT1_X,PT1_Y TO PT2_X,PT1_Y
         LD HL,(GR_PARAM4)
         LD (GR_PARAM2),HL
         CALL BAS_DODRAW    ;PT2_X,PT1_Y TO PT2_X,PT2_Y
         POP HL             ;PT1_X
         LD (GR_PARAM1),HL         
         CALL BAS_DODRAW    ;PT2_X,PT2_Y TO PT1_X,PT2_Y
         POP HL             ;PT1_Y
         LD (GR_PARAM2),HL
         CALL BAS_DODRAW    ;PT1_X,PT2_Y TO PT1_X,PT1_Y
         LD BC,4
         LD HL,GR_PARAM3
         LD DE,GR_LASTX
         LDIR               ;SET LASTX,LASTY
         RET

GRPH_RECTBC:CALL GRPH_SWAPGRCOLS
         CALL GRPH_RECT
         CALL GRPH_SWAPGRCOLS
				 RET
         

PLOT00:  DW GRPH_MOVEREL
				 DW GRPH_LINEREL
				 DW GRPH_NOTIMPL
				 DW GRPH_LINERELBC
				 DW GRPH_SAVELASTPOS
				 DW BAS_DODRAW
				 DW GRPH_NOTIMPL				 
				 DW GRPH_DRAWBC

PLOT80:  DW GRPH_NOTIMPL
				 DW GRPH_TRIANGLE
				 DW GRPH_NOTIMPL
				 DW GRPH_TRIANGLEBC
				 DW GRPH_NOTIMPL
				 DW GRPH_TRIANGLE
				 DW GRPH_NOTIMPL				 
				 DW GRPH_TRIANGLEBC

PLOT96:  DW GRPH_NOTIMPL
				 DW GRPH_RECT
				 DW GRPH_NOTIMPL
				 DW GRPH_RECTBC
				 DW GRPH_NOTIMPL
				 DW GRPH_RECT
				 DW GRPH_NOTIMPL				 
				 DW GRPH_RECTBC

PLOT128: DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL				 
				 DW GRPH_NOTIMPL
				 
PLOT144: DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL				 
				 DW GRPH_NOTIMPL

PLOT152: DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL				 
				 DW GRPH_NOTIMPL

PLOT160: DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL				 
				 DW GRPH_NOTIMPL
				
PLOT192: DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL				 
				 DW GRPH_NOTIMPL
				 
PLOT200: DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL
				 DW GRPH_NOTIMPL				 
				 DW GRPH_NOTIMPL
				 
@GRPHERR:
		 XOR     A
		 CALL    EXTERR
		 DEFM    'param error'
		 DEFB    0     

;=============================
