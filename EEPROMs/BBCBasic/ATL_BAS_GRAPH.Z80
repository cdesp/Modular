;========================
;  BBC BASIC COMMANDS
;  BASIC GRAPHICS INTERFACE
;========================
		
; GLOBAL VARS FROM ATLAS O.S.		
INCLUDE ..\MYOS_2_0000.SYM
		


; WORKS WITH BBC BASIC
; SET LOGICAL COLOR 1 OF 15 POSITIONS
@BAS_COLOUR:	
		CP 1 								;IS IT FOR GRAPHICS?
		JR Z, GRCOLS
		LD HL, BCOLOR
		LD (GR_PARAM4), HL
		LD HL, FCOLOR
		LD (GR_PARAM3), HL
		JR BS_DOCOL
GRCOLS:		LD HL, BGRCOL
		LD (GR_PARAM4), HL
		LD HL, FGRCOL
		LD (GR_PARAM3), HL
BS_DOCOL:	CALL EXPRI 							;GET 1ST PARAM
		EXX
		LD A, (IY)
		CP 0x0D 							;FINISHED COMD LINE
		JR Z, COLSEL
		CP ':'
		JR Z, COLSEL
		CP ', ' 							;CHECK FOR ','
		JP NZ, GRPHERR
;SET A NEW COLOR ON FCOLOR PALLETE
		PUSH HL 							;SAVE 1ST PARAM
		INC IY 								;NEXT PARAM
		CALL EXPRI 							;GET 2ND PARAM
		EXX
		POP DE 								;RESTORE 1ST PARAM ON DE HL HAS THE 2ND
		LD A, E
		SUB 128
		JR C, COLFC
		LD E, A
		LD IX, BCOLPAL
		JR DOPALCOL
COLFC:		LD IX, FCOLPAL
DOPALCOL:	
		LD A, E
		CP 15 								;MAX 16 COLORS
		JP NC, GRPHERR
		ADD IX, DE
		ADD IX, DE 							;2*DE CAUSE ITS A 2 BYTE ARRAY
		LD (IX), L 							;SAVE THE NEW COLOR
		LD (IX + 1), H
		RET
COLSEL:		
;SELECT A NEW FCOLOR FROM THE PALLETE
		PUSH HL
		POP DE
		LD A, E
		SUB 128 							;CHECK MSB
		JR C, CFC
		LD E, A
		LD IX, GR_PARAM4
		LD L, (IX)
		LD H, (IX + 1)
		LD IX, BCOLPAL 							;BACKCOLOR
		JR SFC
CFC:		LD IX, GR_PARAM3
		LD L, (IX)
		LD H, (IX + 1)
		LD IX, FCOLPAL 							;FRONTCOLOR
SFC:		LD A, E
		CP 16 								;MAX 16 COLORS
		JP NC, GRPHERR
		ADD IX, DE
		ADD IX, DE
		LD D, (IX)
		LD E, (IX + 1)
		LD (HL), D 							;SAVE AGAIN
		INC HL
		LD (HL), E
		RET
		
		
;GETS ALL AVAILABLE PARAMS
;RETURNS IN A HOW MANY 1-4
@GETBASICPARAMS:	
		XOR A
		LD HL, GR_PARAM1
GBP_NXT:	
		PUSH AF
		PUSH HL
		CALL EXPRI 							;GET 1ST PARAM
		EXX 								;HL HAS THE PARAM
		POP DE 								;GET PARAM ADDRESS
		EX DE, HL
		LD (HL), E
		INC HL
		LD (HL), D
		INC HL 								;PARAM SAVED
		POP AF
		INC A
		CP 4
		RET Z
		PUSH AF
		LD A, (IY)
		CP 0x0D 							;FINISHED COMD LINE
		JR Z, NOMORE
		CP ':' 								;FINISHED COMD LINE
		JR Z, NOMORE
		CP ', ' 							;CHECK FOR ','
		JR NZ, NOMORE
		INC IY 								;NEXT PARAM
		POP AF
		JR GBP_NXT
NOMORE:		POP AF
		RET
		
		
;SAVE GR_PARAM1 AND GR_PARAM2 TO GR_LASTX,GR_LASTY
@GRPH_SAVELASTPOS:	
		LD BC, 8 							;8 BYTES SHIFT UP KEEPS 2 LAST POSITIONS NEEDED IN PLOT COMMD
		LD DE, GR_LASTX3
		LD HL, GR_LASTX2
		LDIR
		LD HL, (GR_PARAM1)
		LD (GR_LASTX), HL 						;SAVE TO LAST
		LD HL, (GR_PARAM2)
		LD (GR_LASTY), HL 						;SAVE TO LAST
		RET
		
;TWO PARAMS DRAW A LINE TO X,Y
@BAS_DRAW:	
		CALL GETBASICPARAMS
		CP 2
		JP NZ, GRPHERR
BAS_DODRAW:	CALL GRPH_SAVECOLORS
		PUSH IY
;PUSH IX
;DRAW A LINE FROM LASTX,LASTY TO GR_PARAM1,GR_PARAM2
		LD HL, (GR_LASTX)
		PUSH HL
		LD HL, (GR_LASTY)
		PUSH HL
		CALL GRPH_SAVELASTPOS
		LD HL, (GR_PARAM1)
		PUSH HL
		LD HL, (GR_PARAM2)
		PUSH HL
		CALL LCD_DRAWLINE
;POP IX
		POP IY
		CALL GRPH_RESTORECOLORS
		RET 								;RETURN TO BASIC
		
		
;TWO PARAMS MOVE THE GRAPHICS CURSOR TO X,Y
@BAS_MOVE:	CALL GETBASICPARAMS
		CP 2
		JP NZ, GRPHERR
; LD A,(IY)
		CALL GRPH_SAVELASTPOS
		RET
		
		
;POINT GETS A LOGICAL COLOR(FROM THE PALLETE) FROM THE SCREEN
;WE MUST TAKE A PIXEL(2BYTES) FROM THE SCREEN AND SEE WHICH LOGICAL COLOR IT IS TO RETURN IT
;TWO PARAMS, RETURNS THE COLOR FROM PALLETE CURSOR TO X,Y
@BAS_POINT:	CALL GETBASICPARAMS
		CP 2
		JP NZ, GRPHERR
; PUSH IY
; PUSH IX
		LD HL, (GR_PARAM1)
		PUSH HL
		LD HL, (GR_PARAM2)
		PUSH HL
		CALL LCD_READPIXEL
;HL HAS THE COLOR
; POP IX
; POP IY
		LD A, (IY)
		CP ')'
		JP NZ, GRPHERR
		INC IY
;RETURNS A NUMBER IN BCHLHL'
; SO FOR 16 BIT NUMBER WE CLEAR BC,HL AND SET HL'
		LD BC, 0
		DI
		PUSH HL
		EXX
		POP HL
		EXX
		LD HL, 0
		EI
		RET
		
		
;A HAS THE GROUP
;HL HAS THE GROUP TABLE ADDRESS ON RETURN
;HL=0 NOT FOUND GROUP NOT IMPLEMENTED
GRPH_GETGROUP:	CP 0
;GROUP00
		LD HL, PLOT00
		RET Z
		CP 80.SHR.3
		LD HL, PLOT80
		RET Z
		CP 96.SHR.3
		LD HL, PLOT96
		RET Z
		CP 128.SHR.3
		LD HL, PLOT128
		RET Z
		CP 144.SHR.3
		LD HL, PLOT144
		RET Z
		CP 152.SHR.3
		LD HL, PLOT152
		RET Z
		CP 160.SHR.3
		LD HL, PLOT160
		RET Z
		CP 192.SHR.3
		LD HL, PLOT192
		RET Z
		CP 200.SHR.3
		LD HL, PLOT200
		RET Z
		LD HL, 0
		RET
		
;PLOT MODE,X,Y MODE DOES MANY THINGS
@BAS_PLOT:	CALL GETBASICPARAMS
		CP 3
		JP NZ, GRPHERR
		LD A, (GR_PARAM1)
;SHIFT UP PARAM2 AND PARAM3 PRESERVE A
		LD BC, 4
		LD HL, GR_PARAM2
		LD DE, GR_PARAM1
		LDIR
		LD B, A 							;COMMAND GROUP 5 BITS
		SRL B
		SRL B
		SRL B
		AND 7
		LD C, A 							;SPECIFIC COMMAND IN GROUP
		LD A, B
		CALL GRPH_GETGROUP
		LD A, H
		CP 0
		RET Z								;RET IF HL=0 GROUP NOT IMPLEMENTED
		LD B, 0
		SLA C 								;C=C*2 2BYTE ADDRESSES
		ADD HL, BC 							;C IS 0-7 SPECIFIC COMMD
		LD E, (HL)
		INC HL
		LD D, (HL)
		EX DE, HL
		JP (HL)
		
GRPH_NOTIMPL:	XOR A
		CALL EXTERR
		DEFM 'NOT IMPLEMENTED'
		DEFB    0
		
		
;CONVERTS THE RELATIVE POSITION TO ABSOLUTE LASTX+GRPARAM1,LASTY+GRPARAM1
GRPH_CALCREL:	LD HL, (GR_PARAM1)
		LD DE, (GR_LASTX)
		ADD HL, DE
		LD (GR_PARAM1), HL
		LD HL, (GR_PARAM2)
		LD DE, (GR_LASTY)
		ADD HL, DE
		LD (GR_PARAM2), HL
		RET
		
GRPH_MOVEREL:	
		CALL GRPH_CALCREL
		CALL GRPH_SAVELASTPOS
		RET
		
GRPH_LINEREL:	
		CALL GRPH_CALCREL
		CALL BAS_DODRAW
		RET
		
GRPH_SWAPCOLORS:	
		LD HL, (FCOLOR)
		PUSH HL
		LD HL, (BCOLOR)
		LD (FCOLOR), HL
		POP HL
		LD (BCOLOR), HL
		RET
		
GRPH_SWAPGRCOLS:	
		LD HL, (FGRCOL)
		PUSH HL
		LD HL, (BGRCOL)
		LD (FGRCOL), HL
		POP HL
		LD (BGRCOL), HL
		RET
		
;SAVE THE CURRENT FCOLOR AND BCOLOR AND SETS THE GRAPHICS ONES
@GRPH_SAVECOLORS:	
		LD BC, 4							;2 FCOLOR + 2 BCOLOR
		LD HL, FCOLOR
		LD DE, FCOLTM
		LDIR
		LD BC, 4							;2 FGRCOL + 2 BGRCOL
		LD HL, FGRCOL
		LD DE, FCOLOR
		LDIR
		RET
		
;RESTORES LAST SAVED FCOLOR AND BCOLOR
@GRPH_RESTORECOLORS:	
		LD BC, 4							;2 FCOLOR + 2 BCOLOR
		LD HL, FCOLTM
		LD DE, FCOLOR
		LDIR
		RET
		
		
GRPH_LINERELBC:	
		CALL GRPH_SWAPGRCOLS
		CALL GRPH_CALCREL
		CALL BAS_DODRAW
		CALL GRPH_SWAPGRCOLS
		RET
		
GRPH_DRAWBC:	
		CALL GRPH_SWAPGRCOLS
		CALL BAS_DODRAW
		CALL GRPH_SWAPGRCOLS
		RET
		
GRPH_TRIANGLE:	
		CALL BAS_DODRAW 						;FROM LASTX=2ND PT TO GR_PARAM1=3RD PT
		LD HL, (GR_LASTX3)
		LD (GR_PARAM1), HL
		LD HL, (GR_LASTY3)
		LD (GR_PARAM2), HL
		CALL BAS_DODRAW 						;FROM LASTX=3RD PT TO GR_PARAM1=1ST PT
		LD HL, (GR_LASTX3)
		LD (GR_PARAM1), HL
		LD HL, (GR_LASTY3)
		LD (GR_PARAM2), HL
		CALL BAS_DODRAW 						;FROM LASTX=1ST PT TO GR_PARAM1=2ND PT
		LD BC, 4
		LD HL, GR_LASTX3
		LD DE, GR_LASTX
		LDIR 								;SET LASTX,LASTY
		RET
		
GRPH_TRIANGLEBC:	CALL GRPH_SWAPGRCOLS
		CALL GRPH_TRIANGLE
		CALL GRPH_SWAPGRCOLS
		RET
		
;PT1=LASTX PT2=PARAM1
GRPH_RECT:	LD HL, GR_PARAM1
		LD DE, GR_PARAM3
		LD BC, 4
		LDIR 								;COPY PARAM1,2 TO 3,4
		LD HL, (GR_LASTY)
		PUSH HL 							;PT1_Y
		LD HL, (GR_LASTX)
		PUSH HL 							;PT1_X
		LD HL, (GR_LASTY)
		LD (GR_PARAM2), HL
		CALL BAS_DODRAW 						;PT1_X,PT1_Y TO PT2_X,PT1_Y
		LD HL, (GR_PARAM4)
		LD (GR_PARAM2), HL
		CALL BAS_DODRAW 						;PT2_X,PT1_Y TO PT2_X,PT2_Y
		POP HL 								;PT1_X
		LD (GR_PARAM1), HL
		CALL BAS_DODRAW 						;PT2_X,PT2_Y TO PT1_X,PT2_Y
		POP HL 								;PT1_Y
		LD (GR_PARAM2), HL
		CALL BAS_DODRAW 						;PT1_X,PT2_Y TO PT1_X,PT1_Y
		LD BC, 4
		LD HL, GR_PARAM3
		LD DE, GR_LASTX
		LDIR 								;SET LASTX,LASTY
		RET
		
GRPH_RECTBC:	CALL GRPH_SWAPGRCOLS
		CALL GRPH_RECT
		CALL GRPH_SWAPGRCOLS
		RET
		
;pLOTS A CIRCLE AT LASTX,LASTY,GRPARAM1 OR GRPARAM2 AS RADIUS
GRPH_CIRCREL:	CALL GRPH_SAVECOLORS
		LD HL, (GR_PARAM1)
		LD A, H
		OR L
		JR NZ, CIRE_DOIT
		LD HL, (GR_PARAM2)
		LD A, H
		OR L
		RET Z 								; RETURN IF BOTH PARAMS ARE ZERO
CIRE_DOIT:	LD DE, (GR_LASTX)
		PUSH DE
		LD DE, (GR_LASTY)
		PUSH DE
		PUSH HL
		CALL LCD_CIRCLE
		CALL GRPH_RESTORECOLORS
		RET
		
GRPH_CIRCRELBC:	CALL GRPH_SWAPGRCOLS
		CALL GRPH_CIRCREL
		CALL GRPH_SWAPGRCOLS
		RET
		
		
;NOT IMPLEMENTED YET
;PLOT A CIRCLE AT LASTX,LASTY, GRPARAM1,GRPARAM2 A POINT IN THE CIRCUMFERENCE
;FIND THE DISTANCE BETWEEN THE TWO POINTS AND PLOT WITH CIRCREL
GRPH_CIRCLE:	RET
		LD HL, (GR_LASTX)
		LD DE, (GR_PARAM1)
		XOR A
		SBC HL, BC
		LD (GR_PARAM3), HL 						;X2-X1
		LD HL, (GR_LASTY)
		LD DE, (GR_PARAM2)
		XOR A
		SBC HL, BC
		LD (GR_PARAM4), HL 						;Y2-Y1
;SQR(PARAM3^2+PARAM4^2)
		LD BC, (GR_PARAM3)
		PUSH BC
		POP DE
		CALL MULT32 							;BCHL RESULT
		EXX
		PUSH BC
		POP DE
		EXX
		PUSH HL 							;DE LOW
		LD BC, (GR_PARAM4)
		PUSH BC
		POP DE
		CALL MULT32 							;BCHL RESULT
		EXX
		PUSH BC
		POP HL
		EXX
		POP DE
;NOW HL'HL ONE NUMBER DE'DE THE OTHER
		CALL ADD32
;NOW HL'HL RESULT
;TODO:FIND A SQRT32
		
		RET
		
GRPH_CIRCLEBC:	CALL GRPH_SWAPGRCOLS
		CALL GRPH_CIRCLE
		CALL GRPH_SWAPGRCOLS
		RET
		
;FILLS AN AREA WITH BCOLOR BOUND BY FCOLOR
;STARTS AT GPARAM1,GPARAM2
GRPH_FILL:	CALL GRPH_SWAPGRCOLS
		CALL GRPH_SAVECOLORS
		LD HL, (GR_PARAM1)
		PUSH HL
		LD HL, (GR_PARAM2)
		PUSH HL
		CALL LCD_FILL
		CALL GRPH_RESTORECOLORS
		CALL GRPH_SWAPGRCOLS
		RET
		
PLOT00:		DW GRPH_MOVEREL
		DW GRPH_LINEREL
		DW GRPH_NOTIMPL
		DW GRPH_LINERELBC
		DW GRPH_SAVELASTPOS
		DW BAS_DODRAW
		DW GRPH_NOTIMPL
		DW GRPH_DRAWBC
		
PLOT80:		DW GRPH_NOTIMPL
		DW GRPH_TRIANGLE
		DW GRPH_NOTIMPL
		DW GRPH_TRIANGLEBC
		DW GRPH_NOTIMPL
		DW GRPH_TRIANGLE
		DW GRPH_NOTIMPL
		DW GRPH_TRIANGLEBC
		
PLOT96:		DW GRPH_NOTIMPL
		DW GRPH_RECT
		DW GRPH_NOTIMPL
		DW GRPH_RECTBC
		DW GRPH_NOTIMPL
		DW GRPH_RECT
		DW GRPH_NOTIMPL
		DW GRPH_RECTBC
		
PLOT128:	DW GRPH_NOTIMPL
		DW GRPH_FILL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		
PLOT144:	DW GRPH_CIRCREL
		DW GRPH_CIRCREL
		DW GRPH_NOTIMPL
		DW GRPH_CIRCRELBC
		DW GRPH_CIRCLE
		DW GRPH_CIRCLE
		DW GRPH_NOTIMPL
		DW GRPH_CIRCLEBC
		
PLOT152:	DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		
PLOT160:	DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		
PLOT192:	DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		
PLOT200:	DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		DW GRPH_NOTIMPL
		
@GRPHERR:	
		XOR A
		CALL EXTERR
		DEFM 'param error'
		DEFB    0
		
;=============================
