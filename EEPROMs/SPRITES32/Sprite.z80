;struct Sprites
;nosprites byte 1
				
;struct sprite
;PosX word    2  0 position X in Screen
;PosY word    2  2 position Y in Screen
;NewX word    2  4 new position X in Screen
;NewY word    2  6 new position Y in Screen
;wid:byte     1  8 width of sprite
;hei:byte     1  9 height of sprite
;curpic:byte  1  10 current picture no
;npics:byte   1  11 number of sprite pics
;graddr:word  2  12 address in memory graphics are stored
;scraddr:word 2  14 address in memory screen background is stored
;
;
;total bytes needed in struct 16
;bytes needed for graphics (wid*hei)*npics*2
;
;routines
;getScreenBG sprno  puts data from screen to memory
;setScreenBG sprno  puts data from memory to screenBG
;setScreenSPR sprno,memaddr  puts data from blend memory to screen
;createSprite returns sprno IN A
;getSpriteStruct sprno returns addr of start of struct

		
		

		MAXSPR EQU 20
		MAXSPRW EQU 30
		MAXSPRH EQU 30
		SPRSTRCSIZE EQU 16

;TEMP VARS FOR WRITING OR READING THE SCREEN
@TEMW		DB 0	;SPRITE WIDTH
@TEMH		DB 0	;SPRITE HEIGHT
@TMLNY		DW 0	;SPRITE LINE Y ADDRESS ADD 160 TO NEXT
@TMLNX		DW 0	;SPRITE LINE X OF		
		
;creates a new sprite
;RETUNRS SPR NO ON A
;Z IS SET IF ERROR
@createSprite:	LD A, (NOSPRITES)
		CP MAXSPR
		JR NC, CSERROR
		INC A
		LD (NOSPRITES), A
		DEC A
		CP 255
		RET
CSERROR:	LD A, 255
		CP 255
		RET
		
;SETS IX TO THE SPRITE STRUCT
;A PRESERVED
;TODO: USE MULTIPLICATION		
@getSpriteStruct: LD HL, 0
		LD DE, SPRSTRCSIZE
		LD B, A
		CP 0
		JR Z, GSSEXIT
GSSAGN:		ADD HL, DE
		DJNZ GSSAGN
GSSEXIT:	EX DE, HL
		LD HL, SPRT
		ADD HL, DE
		PUSH HL
		POP IX
		RET
			
;COPIES THE SCREEN BACKGROUND BEFORE WE COPY THE BLENDED GRAPH	
;A THE SPRITE NO	
@getScreenBG:	CALL getSpriteStruct 	
		LD D,(IX+2)							;GET Y
		LD E,(IX+3)
		;CALC START ADDRESS
		;y*160+X  
		LD A,160
		CALL Mult12	;HL=A*DE=160*Y
		LD D,(IX)							;GET X
		LD E,(IX+1)
		ADD HL,DE	;ADD X
		LD DE,$6000	;START OF VIDEO BUFFER
		ADD HL,DE	;HL THE SPRITE VIDEO START ADDRESS 		
		LD (TMLNY),HL	;SAVE START LINE ADDRESS ON VID BUF
		LD B, (IX + 14) 						;SCRADDRESS
		LD C, (IX + 15)
		LD A,(IX+9)	;SPRITE HEIGHT ON TEMH
		DEC A
		LD (TEMH),A
		EX DE,HL	;DE THE SPRITE VIDEO START ADDRESS 		
GSBGDOROW:	LD A,(IX+8)   	;SPRITE WIDTH ON TEMH
		OR A
		RRA		;HALVE THE PIXEL WIDTH CAUSE 2 PIXELS / BYTE
		DEC A
		LD (TEMW),A
GSBGNXPXL:	LD A,(DE)	;DE THE VIDEO BUF ADDR TO READ 2 PIXELS 
	;	RRA
;		RRA
	;	RRA
	;	RRA
	;	AND $0F
	;	LD (BC),A	;LEFT PIXEL
	;	INC BC
	;	LD A,(DE)
	;	AND $0F
		LD (BC),A	;RIGHT PIXEL
		INC BC
		;NEXT BYTE
		LD HL,TEMW
		LD A,(HL)
		CP 0		;CAUSE WE START ON WIDTH-1
		JR Z, GSBGNXROW		
		DEC (HL)	;MINUS A BYTE=2 PIXELS
		INC DE		;NEXT 2 PIXELS ON SCREEN
		JR GSBGNXPXL
GSBGNXROW:	LD HL,TEMH
		LD A,(HL)
		DEC (HL)
		CP 0		;CAUSE WE START ON HEIGHT-1
		JR Z,GSBGDOEXIT		
		;SET NEXT LINE START ADDR
		LD HL,(TMLNY)
		LD DE,160
		ADD HL,DE
		LD (TMLNY),HL
		EX DE,HL	;DE THE VIDEO BUF ADDR TO READ 2 PIXELS 
		JR GSBGDOROW
GSBGDOEXIT:	RET
		
;SETS THE SCREEN BACKGROUND BACK TO SCREEN TO ERASE THE SPRITE
;A THE SPRITE NO		
@SetScreenBG: 	CALL getSpriteStruct 	
		LD B, (IX + 14) 						;SCRADDRESS
		LD C, (IX + 15)
		JR SetToScreen

;PUTS THE BLENDED GRAPH TO SCREEN
;A THE SPRITE NO
;@setScreenSPR:  CALL getSpriteStruct 
		;LD BC, (BLENDADDR) 						;BLEND ADDRESS
		
;COPIES A SPRITE TO SCREEN 
;BC THE ADDRESS OF THE SPRITE
@SetToScreen:	LD D,(IX+2)							;GET Y
		LD E,(IX+3)
		;CALC START ADDRESS
		;y*160+X  
		LD A,160	
		PUSH BC	
		CALL Mult12	;A*DE=160*Y
		POP BC
		LD D,(IX)							;GET X
		LD E,(IX+1)
		ADD HL,DE	;ADD X
		LD DE,$6000	;START OF VIDEO BUFFER
		ADD HL,DE	;HL THE SPRITE VIDEO START ADDRESS 		
		LD (TMLNY),HL
		LD A,(IX+9)	;SPRITE HEIGHT ON TEMH
		DEC A
		LD (TEMH),A
		EX DE,HL	;DE THE SPRITE VIDEO START ADDRESS 		
SSBGDOROW:	LD A,(IX+8)   	;SPRITE WIDTH ON TEMH
		OR A
		RRA		;HALVE THE PIXEL WIDTH CAUSE 2 PIXELS / BYTE
		DEC A
		LD (TEMW),A
SSBGNXPXL:	LD A,(BC)	;BC THE LEFT BACKG PIXEL 		
		;RLA
		;RLA
		;RLA
		;RLA
		;LD L,A
		;INC BC
		;LD A,(BC)	;BC THE RIGHT BACKG PIXEL 
		;OR L
		INC BC		;NEXT PIXEL
		LD (DE),A	;SET 2 PIXELS ON SCREEN
		;NEXT PIXEL
		LD HL,TEMW
		LD A,(HL)
		CP 0		;CAUSE WE START ON WIDTH-1
		JR Z, SSBGNXROW		
		DEC (HL)	;MINUS A HORIZONTAL BYTE=2 PIXELS
		INC DE		;NEXT 2 PIXELS ON SCREEN
		JR SSBGNXPXL
SSBGNXROW:	LD HL,TEMH
		LD A,(HL)
		DEC (HL)
		CP 0		;CAUSE WE START ON HEIGHT-1
		JR Z,SSBGDOEXIT		
		;SET NEXT LINE START ADDR
		LD HL,(TMLNY)
		LD DE,160
		ADD HL,DE
		LD (TMLNY),HL
		EX DE,HL	;DE THE VIDEO BUF ADDR TO READ 2 PIXELS 
		JR SSBGDOROW
SSBGDOEXIT:	RET
			
TMRLAST		DB 0	
TMTESTBIT	EQU 4
;Sets next sprite pic to print EVERY X MSECS
;A HAS THE SPRITE NO
;TODO:DO THIS FOR ALL SPRITES AT ONCE
;Z SET IF NOT CHANGED
@SPRNXTPIC:	LD H,A				;SAVE A
		EI
		LD A,(TIMECTR)
		BIT TMTESTBIT,A
		JR Z,SPNG1			
		LD (TMRLAST),A			;EXIT AND SAVE IF NOT ZERO
SPNGEX1:	XOR A
		RET
SPNG1:		LD A,(TMRLAST)			;TIMECTR IS ZERO
		BIT TMTESTBIT,A
		RET Z				;TMRLAST IS ZERO TOO
		LD (TMRLAST),A		
		;NOW CHANGE THE PIC NO
		LD A,H
		CALL getSpriteStruct
		LD A, (IX+11)
		CP 1
		JR Z,SPNGEX1							;NO MOVING PICS
		LD A, (IX+10)							;CURPIC		
		INC A
		CP (IX+11)
		JR NZ,SPNGEXIT 
		XOR A										;ZERO IF OVERFLOW
SPNGEXIT:	LD (IX+10),A
		CP 250								;NZ
		RET


;BLEND THE SPRITE GRAPHICS WITH THE BACKGROUND and prints it on screEn
;A THE SPRITE NO
@SPRBLDTOSCR:	CALL getSpriteStruct 					
		LD A, (IX+10)							;CURPIC		
	;	INC A
	;	CP (IX+11)
	;	JP NZ, CALCPICSTART						;JP IF NO OVERFLOW	
	;	XOR A
;CALCPICSTART:	LD (IX+10),A							;BC + A * SPRITE SIZE		
		;PUSH BC
		LD H,(IX+8)	;SPR WIDTH
		OR A
		RR H		;HALVE THIS CAUSE 2 PIXELS PER BYTE
		LD E,(IX+9)	;SPR HEIGHT
		CALL Mult8	;SPR SIZE WIDTH*HEIGHT
		;HL THE SPRITE SIZE IN BYTES
		EX DE,HL	;DE THE SPRITE SIZE
		CALL Mult12	;HL=A*DE
		;POP BC
		LD B, (IX + 12) 						;GRADDR TODO GRADDR*curpic
		LD C, (IX + 13)		
		ADD HL,BC	;SPRITE START ADDRESS
		LD B,H
		LD C,L		;SPRITE START ADDRESS TO BC
;COPIES A SPRITE TO SCREEN BLENDIND IT TO BACKGROUND
;BC THE ADDRESS OF THE SPRITE
@GRPBLTOScr:	LD D,(IX+2)							;GET Y
		LD E,(IX+3)
		;CALC START ADDRESS
		;y*160+X  
		LD A,160	
		PUSH BC	
		CALL Mult12	;A*DE=160*Y
		POP BC
		LD D,(IX)							;GET X
		LD E,(IX+1)
		ADD HL,DE	;ADD X
		LD DE,$6000	;START OF VIDEO BUFFER
		ADD HL,DE	;HL THE SPRITE VIDEO START ADDRESS 		
		LD (TMLNY),HL
		LD A,(IX+9)	;SPRITE HEIGHT ON TEMH
		DEC A
		LD (TEMH),A
		EX DE,HL	;DE THE SPRITE VIDEO START ADDRESS 		
GRPBDOROW:	LD A,(IX+8)   	;SPRITE WIDTH ON TEMH
		OR A
		RRA		;HALVE THE PIXEL WIDTH CAUSE 2 PIXELS / BYTE
		DEC A
		LD (TEMW),A
		;BC HAS THE SPRITE GRAPHICS 2 PIXELS PER BYTE
GRPBNXPXL:	LD A,(BC)	;BC THE LEFT SPRITE PIXEL 
		LD L,A		;SAVE SPRITE BYTE		
		AND $F0
		OR A
		JR NZ,RSPRPXL	;PUT SCREEN PIXEL IF ZERO ELSE PUT SPR PIXEL
		LD A,(DE)	;GET SCREEN PIXEL
		AND $F0		;LEFT PIXEL FROM SCREEN
RSPRPXL:	LD H,A		;SAVE LEFT PIXEL
		LD A,L		;GET SPRITE BYTE
		AND $0F		;REMOVE LEFT PIXEL
		OR A
		JR NZ,BSPRPXL
		LD A,(DE)	;GET SCREEN PIXEL
		AND $0F		;RIGHT PIXEL FROM SCREEN

BSPRPXL:	OR H		;BLEND 2 PIXELS		
		INC BC		;NEXT BYTE
		LD (DE),A	;SET 2 PIXELS ON SCREEN
		;NEXT PIXEL
		LD HL,TEMW
		LD A,(HL)
		CP 0		;CAUSE WE START ON WIDTH-1
		JR Z, GRPBNXROW		
		DEC (HL)	;MINUS A HORIZONTAL BYTE=2 PIXELS
		INC DE		;NEXT 2 PIXELS ON SCREEN
		JR GRPBNXPXL
GRPBNXROW:	LD HL,TEMH
		LD A,(HL)
		DEC (HL)
		CP 0		;CAUSE WE START ON HEIGHT-1
		JR Z,GRPBDOEXIT		
		;SET NEXT LINE START ADDR
		LD HL,(TMLNY)
		LD DE,160
		ADD HL,DE
		LD (TMLNY),HL
		EX DE,HL	;DE THE VIDEO BUF ADDR TO READ 2 PIXELS 
		JR GRPBDOROW
GRPBDOEXIT:	RET

;PLOTPIXEL AT 320X200
;HL=X , DE=Y  A=COLOR
@VGA_PLOTPIXEL:	PUSH HL								;CHECK BOUNDS
		PUSH AF
		LD A,E
		LD DE,$6000
;HALVE HL=X CAUSE 2 PIXELS ONE BYTE
		SRL H
		RR L
		ADD HL, DE 							;FIND COLUMN
		PUSH HL
		LD DE, 160
		;HL=A*160	=Y*160		
		CALL Mult12
		POP DE
		ADD HL,DE
PP_DOPLOTPX:	POP BC 								;B HAS THE COLOR
		POP DE 								;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
		LD A, (HL) 							;GET PIXEL BYTE
		BIT 0, E 							;CHECK X IS EVEN OR ODD
		JR Z, PP_DOEVEN 							;EVEN
;SET RIGHT 4 BITS
		AND $F0 							;CLEAR RIGHT 4 BITS
		JR PP_DPEXIT
;SET LEFT 4BITS
PP_DOEVEN:	RLC B
		RLC B
		RLC B
		RLC B
		AND $0F 							;ZERO LEFT
PP_DPEXIT:	OR B 								;MIX PIXELS
		LD (HL), A
		RET			
		
		
		
		SPRITES EQU $
		NOSPRITES DB 0
		;BLENDADDR DEFW BLENDAREA
		
		
		SPRT EQU $ 							;STRUCT SPRITE ARRAY
		DS MAXSPR * SPRSTRCSIZE
		
		;BLENDAREA DS MAXSPRW * MAXSPRH  				;1 BYTE PER PIXEL
