		ORG $4000
		
		
		INCLUDE \..\MYOS_2_0000_HARD.SYM

		LOGRAPH EQU 00B
		
		
		SPRSPD EQU 1		;1 IS 2 PIXELS
		
		DI
		
		LD A, 4								;PAGE 4
		LD B, 2 							;4000h
		CALL PUTPGINBANK
		JP SWITCHBANK

;SET VISIBLE BUFFER ****DELETE THIS ON NEXT ROM BURN****
;A THE BUFFER
		CONFPG EQU 11
		CONFADDR EQU $1FF8 

VGA_SETVISBUFF:	RRCA								;GOTO BIT 7
		PUSH HL
		PUSH AF
		LD B, 4 							;8000h
		CALL GETPGINBANK
		POP HL								;H THE BUFFER
		PUSH AF								;SAVE PREVIOUS PAGE
		PUSH HL
		LD A, CONFPG 							;PAGE 11
		CALL PUTPGINBANK
		LD HL, CONFADDR
		LD DE, $8000
		OR A
		ADC HL, DE
		POP BC								;B THE BUFFER 0 OR 1
		LD A,(HL)
		RLA
		RL B								;BIT 7=BUFFER ON CARRY
		RRA
		LD (HL),A
		POP AF								;PREVIOUS PAGE NO
		LD B, 4
		CALL PUTPGINBANK 						;RESTORE PREVIOUS PAGE
		POP HL
		RET		

GETBUFFER0:	LD A, 8								;PAGE 8
		LD B, 3 							;6000h
		CALL PUTPGINBANK
		LD A, 9								;PAGE 9
		LD B, 4 							;8000h
		CALL PUTPGINBANK
		LD A, 10							;PAGE 10
		LD B, 5 							;A000h
		CALL PUTPGINBANK
		LD A, 11							;PAGE 11
		LD B, 6 							;C000h
		CALL PUTPGINBANK

		CALL PAINTBUF0		
		RET

GETBUFFER1:	LD A, 12							;PAGE 12
		LD B, 3 							;6000h
		CALL PUTPGINBANK
		LD A, 13							;PAGE 13
		LD B, 4 							;8000h
		CALL PUTPGINBANK
		LD A, 14							;PAGE 14
		LD B, 5 							;A000h
		CALL PUTPGINBANK
		LD A, 15							;PAGE 15
		LD B, 6 							;C000h
		CALL PUTPGINBANK		
		CALL PAINTBUF1
		RET


PLTXY:		
		PUSH HL
		PUSH DE
		PUSH BC
		CALL VGA_PLTPXL32
		POP BC
		POP DE
		POP HL
		RET

PAINTBUF0:	
		LD B,6
		LD HL,600
PBNX1:		PUSH BC
		LD B,6
		LD DE,30
PBNX:		LD A, 0011B
		CALL PLTXY
		INC DE
		DJNZ PBNX
		POP BC
		INC HL
		DJNZ PBNX1
		RET

PAINTBUF1:	
		LD B,2
		LD HL,605
PBNX2:		PUSH BC
		LD B,6
		LD DE,30
PBNX3:		LD A, 0101B
		CALL PLTXY
		INC DE
		DJNZ PBNX3
		POP BC
		INC HL
		DJNZ PBNX2
		RET





MYSWWRKBUF:	LD A,(MYBUF)
		XOR 1		
		CALL SETMYWRKBUF		
		RET

SETMYWRKBUF:	LD (MYBUF),A
		LD (VGABUF),A
		OR A
		JP Z,GETBUFFER0		
		JP GETBUFFER1


SWITCHBANK:	CALL GETBUFFER0
		EI

AGN:		LD A, 10
		LD (CURSORX), A
		LD A, 20
		LD (CURSORY), A
		LD HL, MYMSG1
		CALL LCD_MSG
		LD HL,MYMSG1
		CALL RS_TXT
		
		
		CALL GET_CHAR 							;TAKE A CHAR FROM RS232 OR PS2 KEYB
		CP 'S'
		CALL Z, MAINSETUP
		CP 'G'
		CALL Z, STARTGAME
		CP 'C'
		CALL Z, CLEARSCREEN
		
		CP 'M'
		JP Z, MENU
		JR AGN
		
MYMSG1:		DEFM "S:CREATE P:PRINT D:MOVE R:REFRESH | M=MENU "
		DB 0
		
		
CLEARSCREEN:				; SET FCOLOR AND BCOLOR DEFAULT VALUES
		LD C, LOGRAPH 							;LOW RES graph SCREEN
		CALL VGA_SETCONF				
		LD A, 10
		LD (CURSORX), A
		LD A, 20
		LD (CURSORY), A
		LD HL, MYMSG1
		CALL LCD_MSG
		LD A, 10
		LD (CURSORX), A
		LD A, 10
		LD (CURSORY), A
		LD HL, MYMSG1
		CALL LCD_MSG
		XOR A
		RET
		

WAITFORTE:	RET
		LD HL, INT2TE	;TIMECTR
		XOR A
		LD (HL), A
		EI
; WFTEAGN1:	LD A, (TIMECTR)
; 		BIT 2, A
; 		JR Z, WFTEAGN1 	
; WFTEAGN2:	LD A, (TIMECTR)
; 		BIT 2, A
; 		JR NZ, WFTEAGN2
WFTEAGN:	LD A, (HL)
		CP 1
		JR NZ, WFTEAGN

		DI
		RET
		
WAITSOME:	EI
		LD A, (TIMECTR)	;
      		BIT 0, A
		JR NZ,WT2
		JR WAITSOME
WT2:		LD A, (TIMECTR)	;
      		BIT 0, A
		RET Z
		JR WT2

		BASEADDR EQU $6000

		
CLRGRAPH:	XOR A
SETBGR:		LD HL, BASEADDR
		LD DE, BASEADDR + 1
		LD BC, 32000 - 1 						;TOTAL BYTES		
		LD (HL), A
		LDIR 			
		RET


SETBGR2:	LD HL, BASEADDR
		LD DE, BASEADDR + 1
		LD BC, 16000 - 1 						;TOTAL BYTES		
		LD (HL), A
		LDIR 			
		RET


TESTDB:		LD B,30
TDBNXT:		PUSH BC
		LD A,1
		CALL VGA_SETVISBUFF	;SET VISIBLE BUFFER
		LD A,0
		CALL VGA_SETVISBUFF	;SET VISIBLE BUFFER 1
		POP BC
		DJNZ TDBNXT
		XOR A
		RET
		
		FRAMEDEL EQU 1	;15;DELAY FOR VGA TO PAINT A FRAME IN MS 13MS	


WAITFORFRAME:	RET
		LD B,FRAMEDEL 
		CALL DELAYMILI		;WAIT FOR 1 FRAME AT LEAST BEFORE CHANGE BUFFER
		RET

		BGCOLOR1 EQU 10000000B
		BGCOLOR  EQU 11101110B


PAINTBACK:	LD A,BGCOLOR
		CALL SETBGR
		LD A,BGCOLOR1
		CALL SETBGR2
		RET


LASTKEY:	DB 0								;LAST KEY PRESSED
FRMCNT:		DB 0
		MAXFRM EQU 7

		

STARTGAME:	LD B,6
		LD A,10
SG_CL:		PUSH AF
		PUSH BC
		CALL LCD_CLRTXTLN
		POP BC
		POP AF
		INC A
		DJNZ SG_CL

		XOR A
		LD (LASTKEY),A
		CALL MAINSETUP

		LD A,0
		CALL SETMYWRKBUF
		CALL PAINTBACK

;		LD A,1
;		CALL PRINTSPR
;		LD A,0
;		CALL PRINTSPR

		LD A,1
		CALL SETMYWRKBUF
		CALL PAINTBACK

		CALL RS_RX

		LD A,1
		CALL VGA_SETVISBUFF	;SET VISIBLE BUFFER 1		
		LD A,0
		CALL SETMYWRKBUF
		


GAMELOOP:	CALL VGA_SWVISBUFF
		;CALL WAITFORFRAME
		CALL MYSWWRKBUF
		;CALL RS_RX
		;CALL PAINTBACK	
		CALL PAINTFRAME
		
		LD A,(MYBUF)
		OR A
		JR Z,GAMELOOP			

		;LD A,0
		;CALL VGA_SETVISBUFF	;SET VISIBLE BUFFER 0				
		;CALL WAITFORFRAME
		;CALL RS_RX
		;LD A,1
		;CALL SETMYWRKBUF
		;CALL PAINTBACK
		;CALL PAINTFRAME		


		;LD B,10
		;CALL DELAYMILI
		LD A,(FRMCNT)
		CP 1
		JR Z,CHKKEY
		CP 3
		JR Z,CHKKEY
		CP 5
		JR Z,CHKKEY
		
		JR GAMELOOP



CHKKEY:				
NOPRN:		CALL GET_CHARNW
		CP 0
		JR NZ, NEWKEY 		
		LD A,(LASTKEY)							;GET OLD KEY
NEWKEY:		LD (LASTKEY),A
		CP '0'
		JP Z,4
		CP 'T'
		CALL Z,TESTDB
		CP 'P'
		CALL Z,RS_RX
		CP 'W'
		JR NZ, NXTBUT1
		CALL SPRMOVEUP
		JR GAMELOOP
NXTBUT1:	CP 'S'
		JR NZ, NXTBUT2
		CALL SPRMOVEDN
		JR GAMELOOP
NXTBUT2:	CP 'A'
		JR NZ, NXTBUT3
		CALL SPRMOVELF
		JR GAMELOOP
NXTBUT3:	CP 'D'
		JR NZ, NXTBUT4
		CALL SPRMOVERG
		JR GAMELOOP
NXTBUT4:	JR GAMELOOP
		
SPRMOVEUP:	LD A, 0
		CALL getSpriteStruct
		LD H, (IX + 2)
		LD L, (IX + 3)
		LD BC, SPRSPD
		XOR A
		SBC HL, BC
		RET C 								; NO MOVE
		ADD HL, BC
		LD BC, SPRSPD
		SBC HL, BC
		LD (IX + 6), H
		LD (IX + 7), L
		RET
		
SPRMOVEDN:	LD A, 0
		CALL getSpriteStruct
		XOR A
		LD HL, 200
		LD BC, SPH+SPRSPD
		SBC HL,BC
		LD B,H
		LD C,L		
		LD H, (IX + 2)
		LD L, (IX + 3)	
		SBC HL,BC	
		RET NC 								; NO MOVE
		ADD HL, BC
		LD BC, SPRSPD
		ADD HL, BC
		LD (IX + 6), H
		LD (IX + 7), L
		RET
		
SPRMOVELF:	LD A, 0
		CALL getSpriteStruct
		LD H, (IX)
		LD L, (IX + 1)
		LD BC,SPRSPD
		XOR A
		SBC HL, BC
		RET C 								; NO MOVE
		;ADD HL, BC
		;LD BC, SPRSPD
		;SBC HL, BC
		LD (IX + 4), H
		LD (IX + 5), L
		RET
		
SPRMOVERG:	LD A, 0
		CALL getSpriteStruct
		LD HL, 160
		LD BC, (SPW/2)+SPRSPD
		XOR A
		SBC HL,BC
		LD B,H
		LD C,L								;160-SPW-2
		LD H, (IX)							;CURRENT X POS	
		LD L, (IX + 1)
		SBC HL, BC
		RET NC 								; NO MOVE
		ADD HL, BC
		LD BC, SPRSPD
		ADD HL, BC
		LD (IX + 4), H
		LD (IX + 5), L
		RET

;A SPRITE NO
;C IS SET IF SPRITE HAS MOVED
SPRITEMOVED:	

		CALL getSpriteStruct	
		LD H, (IX)
		LD L, (IX+1)
		LD D, (IX+4)
		LD E, (IX+5)
		OR A
		SBC HL,DE
		LD A,H
		OR L
		;JR SPRMOVED
		JR NZ,SPRMOVED
		LD H, (IX+2)
		LD L, (IX+3)
		LD D, (IX+6)
		LD E, (IX+7)
		OR A
		SBC HL,DE
		LD A,H
		OR L
		JR NZ,SPRMOVED
		XOR A
		RET
SPRMOVED:	SCF	
		RET


		
POSX:		DB 0,0
POSY:		DB 0,0


SAVEPOSITION:	LD H,(IX+0)
		LD L,(IX+1)
		LD (POSX),HL
		LD H,(IX+2)
		LD L,(IX+3)
		LD (POSY),HL
		RET

RESTPOSITION:	LD HL,(POSX)
		LD (IX+0),H
		LD (IX+1),L
		LD HL,(POSY)
		LD (IX+2),H
		LD (IX+3),L
		RET
		
MOVESPRITE:	LD A, (IX + 4)							;NEWX		
		LD (IX), A

		LD A, (IX + 5)
		LD (IX + 1), A 							;POSX=NEWPOSX
		
		LD A, (IX + 6)							;NEWY		
		LD (IX + 2), A

		LD A, (IX + 7)
		LD (IX + 3), A 							;POSY=NEWPOSY
		RET

T_SPRNO:	DB 0


DONXTSPR:	LD A,(MYBUF)
		OR A
		RET Z
		LD A,(FRMCNT)
		CP 2
		RET NZ
		LD A,(T_SPRNO)
		CALL SPRNXTPIC		
		RET



PAINTFRAME:	LD A, (NOSPRITES)
PF_PAINTNEXT:	PUSH AF
		DEC A				;ZERO BASED SO 1 MEANS 0
		LD (T_SPRNO),A		
		CALL getSpriteStruct		;IX POINTS AT SPRITE STRUCT
		CALL DONXTSPR			;CHECK SPRITE ANIMATION


		;LD H,10 ;AT X
		;LD L,11 ;AT Y	
		;LD A,(MYBUF)
		;RLA
		;RLA
		;RLA
		;RLA
		;ADD A,L
		;LD L,A
		;CALL PRINTINFO		

				

		LD A,(T_SPRNO)
		CALL setScreenBG		;PAINT THE BACKGROUND ERASE SPRITE
		CALL SAVEPOSITION		;SAVE THE POSITION OF THE SPRITE
		CALL MOVESPRITE			;MOVE TO NEW POSITION
		LD H,20 ;AT X
		LD L,11 ;AT Y	
		;LD A,(MYBUF)
		;RLA
		;RLA
		;RLA
		;RLA
		;ADD A,L
		;LD L,A
		;CALL PRINTINFO		
		LD A,(T_SPRNO)
		CALL getScreenBG		;GET THE SCREEN BACKGROUND
		LD A,(T_SPRNO)
		CALL SPRBLDTOSCR		;BLEND THE SPRITE TO THE BACKGROUND AND PAINT
		;CALL setScreenSPR
		LD A,(MYBUF)
		OR A
		JR NZ, SKIPREST
		CALL RESTPOSITION		;RESTORE THE PREVIOUS POSITION
		
SKIPREST:	POP AF
		DEC A
		OR A
		JR NZ, PF_PAINTNEXT

		LD A,(MYBUF)
		OR A
		RET Z
		LD A,(FRMCNT)
		INC A
		CP MAXFRM
		JR NZ,SVEXIT
		XOR A
SVEXIT:		LD (FRMCNT),A
		RET
		

M1:		DEFM " X= "
		DB 0
M2:		DEFM " Y= "
		DB 0
M3:		DEFM "NX= "
		DB 0
M4:		DEFM "NY= "
		DB 0

PRN_MSG:	PUSH IX
		CALL LCD_MSG
		POP IX
		RET

;HL THE NUMBER
PRN_NUM:	PUSH IX
		CALL B2D16
		LD HL,B2DEND-4
		CALL PRN_MSG
		POP IX
		RET

LEFTX		DB 0

PRINTINFO:	LD A,(T_SPRNO) ;ONLY SPRITE 0
		OR A
		RET NZ
		LD A,H
		LD (LEFTX),A
		LD (CURSORX),A
		LD A,L
		LD (CURSORY),A
		LD HL,M1		
		CALL PRN_MSG
		LD H,(IX+0)
		LD L,(IX+1)
		CALL PRN_NUM
		LD HL,CURSORY
		INC (HL)
		LD A,(LEFTX)
		LD (CURSORX),A

		LD HL,M2		
		CALL PRN_MSG
		LD H,(IX+2)
		LD L,(IX+3)
		CALL PRN_NUM
		LD HL,CURSORY
		INC (HL)
		LD A,(LEFTX)
		LD (CURSORX),A


		LD HL,M3		
		CALL PRN_MSG
		LD H,(IX+4)
		LD L,(IX+5)
		CALL PRN_NUM
		LD HL,CURSORY
		INC (HL)
		LD A,(LEFTX)
		LD (CURSORX),A
		
		LD HL,M4		
		CALL PRN_MSG
		LD H,(IX+6)
		LD L,(IX+7)
		CALL PRN_NUM
		LD HL,CURSORY
		INC (HL)
		LD A,(LEFTX)
		LD (CURSORX),A

		RET


		
MAINSETUP:	CALL CLEARSCREEN
		CALL createSprite		
		JP Z, GENERROR
		CALL getSpriteStruct
		LD HL, 8 							; POSX
		LD (IX), H
		LD (IX + 1), L
		LD (IX + 4), H 							;NEWPOS
		LD (IX + 5), L
		LD HL, 110 							;POSY
		LD (IX + 2), H
		LD (IX + 3), L
		LD (IX + 6), H 							;NEWPOS
		LD (IX + 7), L
		LD H, SPW 							;WIDTH
		LD (IX + 8), H
		LD H, SPH 							;HEIGHT
		LD (IX + 9), H
		LD H, 1 							;CURPIC (NO OF PICS-1 TO WRAP AT ONCE)
		LD (IX + 10), H
		LD H, 2 ;2 							;NO OF PICS
		LD (IX + 11), H
		LD HL, PIRAV 							;GRADDR
		LD (IX + 12), H
		LD (IX + 13), L
		LD HL, PIRAVSCR 						;scraddr
		LD (IX + 14), H
		LD (IX + 15), L
		CALL getScreenBG
		
		CALL createSprite		
		JP Z, GENERROR
		CALL getSpriteStruct
		LD HL, 70 							; POSX
		LD (IX), H
		LD (IX + 1), L
		LD (IX + 4), H 							;NEWPOS
		LD (IX + 5), L
		LD HL, 16 							;POSY
		LD (IX + 2), H
		LD (IX + 3), L
		LD (IX + 6), H 							;NEWPOS
		LD (IX + 7), L
		LD H, ENW 							;WIDTH
		LD (IX + 8), H
		LD H, ENH 							;HEIGHT
		LD (IX + 9), H
		LD H, 0 							;CURPIC (NO OF PICS-1 TO WRAP AT ONCE)
		LD (IX + 10), H
		LD H, 1 							;NO OF PICS
		LD (IX + 11), H
		LD HL, ENEMY 							;GRADDR
		LD (IX + 12), H
		LD (IX + 13), L
		LD HL, ENEMYSCR 						;scraddr
		LD (IX + 14), H
		LD (IX + 15), L		
		CALL getScreenBG

		XOR A
		RET
		

TESTCODE:	LD HL, TSTMSG
		CALL RS_TXT
		RET
TSTMSG:		DEFM "TEST OK"
		DB 10,13,0

		
GENERROR:	LD HL, ERRMSG
		CALL RS_TXT						;TODO:PRINT ERROR
		RET
ERRMSG:		DEFM "ERROR CREATING SPRITE"
		DB 0

		SHPNT DB 0
		INCLUDE SPRITE.Z80		
		SPW EQU 12
		SPH EQU 12
		;INCLUBIN GALAGA_20.BIN
		PIRAVSCR DS SPW * SPH		;SPACE TO SAVE THE SCREEN IMAGE buf 1
		PIRAVSCR2 DS SPW * SPH		;SPACE TO SAVE THE SCREEN IMAGE buf 2
		PIRAV EQU $			;ALL IMAGES OF PIRAV AFTER THIS
		INCLUBIN pirav12.bin		
		INCLUBIN pirav12a.bin
		
		ENW EQU 16
		ENH EQU 16
		ENEMYSCR DS ENW * ENH 
		ENEMYSCR2 DS ENW * ENH
		ENEMY EQU $
		INCLUBIN enemy16.bin		
