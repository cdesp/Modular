NAME MAIN

	GLOBAL DEVI2C	
	GLOBAL DEVLCD
	GLOBAL DEVSER
	GLOBAL DEVINP
	GLOBAL DEVTFT
	GLOBAL DEVFFS
	GLOBAL MENU
	GLOBAL KEYCTR
	GLOBAL SOUTAS
	GLOBAL COPSTA

  ;$08 IS USED FOR FLIP/FLOP SET/RESET 
  DEVXX2  EQU $38 ;Y7 EMPTY
	DEVI2C	EQU $30 ;Y6 I2C INTERFACE (DS1307 RTC,LCD 16X2,...)
	DEVLCD	EQU $28	;Y5 
	DEVSER 	EQU $20	;Y4 Serial RS232
	DEVINP  EQU $18 ;Y3 INPUT FROM DEVICES: DEV1=USB KEYB ON BITS 7=DATA & 6=CLOCK,DEV2=XXX
	DEVTFT  EQU $10 ;Y2 LCD SCREEN TFT wSSD1963
	DEVFFS  EQU $08 ;Y1 EPROM WR SIGNAL ON/OFF 1/0 BIT 0, USB KEYB ON/OFF ON/OFF 2/0 BIT 1
	DEVXX1  EQU $00 ;Y0 EMPTY
	
	COPSTA	EQU   6	; PS/2 STATUS PORT 

	;PINS EQU DEVLCD 	;LCD INSTRUCTION PORT
	;PDAT EQU DEVLCD+01	;LCD DATA SEND PORT



	;DISPCT EQU 8+4		;DISPLAY CONTROL
				;BIT 0= BLINK CURSOR POS CHAR
				;BIT 1= CURSOR ON OFF
				;BIT 2=	DISPLAY ON OFF
				;BIT 3= 1	

  RAMAD  EQU 0x8000
	STACKP EQU 0xFFF0  	;100	
	KDATA	EQU 6	;DATA FLAGS SET TO 1 IF UNTRANSMITTED


	


@START:	DI
  LD HL,$A000 ;TEMPORARY INTERRUPT SERVICE IN RAM
  LD A,$ED ;RETI
  LD (HL),A
  INC HL
  LD A,$4D ;RETI
  LD (HL),A
  

	;LD HL,STRBT
	;CALL RS_TXT	;OUTPUT MENU COMMANDS AT RS232	
	;JP BOOT



	;OUT 5 TIMES AT PORT 0 (0 AND 255)
CN1:	LD B,5
AGN1:	LD C,0
	LD A,0
	OUT (C),A
	LD C,0
	LD A,255
	OUT (C),A
	DJNZ AGN1

		
	;TEST RAM
	
	LD DE,1
	LD A,0		;WRITE 0
	LD C,A
	LD HL,RAMAD	
	LD B,8
AGN2:	LD (HL),A
	LD C,(HL)
	CP C
	JP NZ, ERR
	ADD HL,DE
	ADD A,32	;WRITE +32
	LD C,A
	DJNZ AGN2
	
	LD B,5
AGN3:	LD C,00001000B  ;LLH ON 138 Y1 OUT
	LD A,64
	OUT (C),A
	ADD A,128
	OUT (C),A	
	DJNZ AGN3  	; SIGNAL ALL OK CONTINUOUS 10 TIMES ON PORT 8
	JP BOOT


ERR:	LD C,00111000B  ;HHH ON 138 Y7 OUT
	LD A,64
	OUT (C),A
	
	JP ERR 	;DO AGAIN PORT 1

@BOOT:	DI
  IM 1 
	LD SP,STACKP	
	CALL EPROMOFF
	CALL KEYBDATON 

  ;RS232 SERIAL PORT INIT
	CALL RS_INI	;RS232 INITIALIZE
	LD HL,STR00
	CALL RS_TXT

  ;LCD16X2 INIT
;	CALL LCDINI	;LCD 16x2 Initialized
;	LD HL,STR0
;	CALL LCDTXT

  ;LCD TFT 800X480px  INIT
  CALL LCD_INIT
  LD HL,COL_BLUE
  LD (BCOLOR),HL
  LD HL,COL_YELLOW
  LD (FCOLOR),HL
  LD HL,STRSCR	
  CALL RS_TXT
  CALL LCD_CLRSCR  
  LD A,1
  LD (CURSORX),A
  LD A,22
  LD (CURSORY),A  
	LD HL,STR0   ;LCD INIT MSG
	CALL LCD_MSG
	

	
ALLOK:	;CALL TVON

      ; !!!INTERRUPTS ENABLED WHEN UPLOADING PROGRAMS
@MENU:	
	LD HL,STRMN
	CALL RS_TXT	;OUTPUT MENU COMMANDS AT RS232	
	LD HL,STR01
	CALL RS_TXT	;OUTPUT WAITING AT RS232
	
	
	;;LD HL,STR02
	;CALL LCDTXT

	
	LD HL,SMENU
  LD A,5
  LD (CURSORX),A
  LD A,2
  LD (CURSORY),A  
	CALL LCD_MSG
		
	CALL GET_CHAR	;TAKE A CHAR FROM RS232 OR PS2 KEYB
	;CALL RS_RX	; WAIT FOR A CHAR IN RS232	
	
	CP 'U'		;UPLOAD PROGRAM
	CALL Z, UPLOD
	CP 'X'
	JP Z,EXEC
	CP 'T'
	CALL Z,RSTST
	CP 'S'
	CALL Z,TXTSCR
	CP 'I'
	CALL Z,UPLOD2
	CP 'Y'
	CALL Z,RSTST2
	CP 'H'
	CALL Z,XMTST
	CP 'J'
	CALL Z,DNLOD
	;CP 'K'
	;CALL Z,LCD_INIT
	CP 'C'
	CALL Z,LCD_CLRSCR
	CP 'L'
	CALL Z,LCD_TEST
	CP 'B'
	JP Z,BBCBASIC
	
	JP MENU

  
	;TEST KEY PRESSED EITHER RS232 OR PS2	
@GET_CHAR:	XOR A
	
	;GET CHAR FROM RS232
	CALL RS_KEYRD	;CHAR IN RS232?
	JR Z,GT_TST2
	CALL RS_RX	; GET THAT CHAR
	RET
	;GET CHAR FROM PS2 KEYBOARD
GT_TST2	
 ; JR GET_CHAR ; SHOULD BE REMOVED WHEN USB KEUB WORKS OK
;  CALL PS2ISK  	;A=0 IF WE HAVE A KEY ELSE 1
;	OR A
;	JR NZ,GET_CHAR	;RECHECK NO KEY
	CALL READCHAR	;GET THE KEY FROM USB KEYBOARD (HAS A TIMEOUT)
	CP 0          ;IF KEY=0 THEN IT IS INVALID
	JR Z,GET_CHAR

	;SEND KEY THROUGH SERIAL PORT
	PUSH AF
	CALL RS_TX
	LD A,10
	CALL RS_TX
	LD A,13
	CALL RS_TX
	POP AF
	RET


EXEC:	CALL LCDCLS
	CALL LCDLN2
	LD HL,SPRGX
	CALL LCDTXT	
	CALL LCDLN1
	
	LD A,5
	CALL SCPRN			

	LD DE,PRGEX
	LD A,(DE)
	LD L,A
	INC DE
	LD A,(DE)
	LD H,A
	JP (HL)

UPLOD: DI	
	LD HL,DATST
	CALL LCDLN2
	CALL LCDTXT

	CALL RS_RX 	;HL HAS RAM ADDRESS
	LD L,A
	CALL RS_RX
	LD H,A
	CALL RS_RX	;BC HAS TOTAL DATA TO BE SEND
	LD C,A
	CALL RS_RX
	LD B,A
	
	LD DE,PRGEX 	;SAVE TO PRGEX THE PROG EXEC ADDR=HL
	LD A,L
	LD (DE),A
	INC DE
	LD A,H
	LD (DE),A
	
	CP $80
	CALL C,EPROMON  ;C ROM IN 0-8000 NC ROM IN 8000-FFFF ;SET ROM WRITABLE = '0'

NORWR:	PUSH HL
NXB:	CALL RS_RX
	LD (HL),A
	INC HL
	DEC BC
	LD A,B
	OR C
	JR NZ,NXB	;LOOP ALL BYTES	
  CALL EPROMOFF

	LD HL,DATTR
	CALL LCDCLS
	CALL LCDTXT
	LD A,5	
	CALL SCPRN			
	CALL DELAY
	
	POP HL
	;CALL (HL)
	
  EI
	RET



UPLOD2:	DI
	LD HL,DATST
	CALL LCDLN2
	CALL LCDTXT

	CALL RS_RX 	;HL HAS RAM ADDRESS
	LD L,A
	CALL RS_RX
	LD H,A
	CALL RS_RX	;BC HAS TOTAL DATA TO BE SEND
	LD C,A
	CALL RS_RX
	LD B,A
	
	LD DE,PRGEX 	;SAVE TO PRGEX THE PROG EXEC ADDR=HL
	LD A,L
	LD (DE),A
	INC DE
	LD A,H
	LD (DE),A

NXB2:	CALL RS_RX
	LD (HL),A
	INC HL
	DEC BC
	LD A,B
	OR C
	JR NZ,NXB2	;LOOP ALL BYTES	  	
	
	EI

	RET
	
DNLOD:	
	;LD HL,DATST
	;CALL LCDLN2
	;CALL LCDTXT

	CALL RS_RX 	;HL HAS RAM ADDRESS
	LD L,A
	CALL RS_RX
	LD H,A
	CALL RS_RX	;BC HAS TOTAL DATA TO BE SEND
	LD C,A
	CALL RS_RX
	LD B,A
	
NXB3:	LD A,(HL)
	CALL RS_TX	;SEND BYTE
	INC HL
	DEC BC
	LD A,B
	OR C
	JR NZ,NXB3	;LOOP ALL BYTES	  		
	RET

RSTST:	NOP	;GET A KEY FROM RS232
	LD B,10
TEN:	PUSH BC
	CALL RS_RX
	;CALL LCDCHR  	;THE RECEIVED CHAR
	CALL RS_TX	;SEND BACK THE CHAR

	LD A,' '
	;CALL LCDCHR
	LD A,'R'
	;CALL LCDCHR
	
	CALL DEL2
	;CALL LCDCLS
	POP BC
	DJNZ TEN

	XOR A
	RET
	
RSTST2:	NOP	;TEST RECEIVING AND SENDING 255 BYTES
	LD B,255
TEN2:	PUSH BC
	CALL RS_RX
	;CALL LCDCHR  	;THE RECEIVED CHAR
	CALL RS_TX	;SEND BACK THE CHAR		
	;CALL DEL2
	POP BC
	DJNZ TEN2
	XOR A
	RET


XMTST:	NOP	;TEST XMIT ALL 8 BITS
	LD B,255
TEN3:	PUSH BC
	LD A,B
	CALL RS_TX	;SEND  THE BYTE
	POP BC
	DJNZ TEN3
	XOR A
	RET

TXTSCR: RET

;-----------------------------------
; FLIP FLOP MANAGEMENT
;-----------------------------------

;B HAS THE BIT TO SET OFF =0 ON THE FLIP FLOPS
@FF_OFF: INC B   ; DO 0-7 TO 1-8
       XOR A
       SCF
SBAGN: RLA         ; MOVE IT TO THE RIGHT PLACE
       DJNZ SBAGN
       CPL	    ;INVERSE BITS ON A
       LD B,A
       LD HL,FFSTAT
       LD A,(HL)
       AND B        ;ZERO THE BIT
       LD (HL),A
       OUT (DEVFFS),A
       RET

;B HAS THE BIT TO SET OFF =0 ON THE FLIP FLOPS
@FF_ON: INC B   ; DO 0-7 TO 1-8
       XOR A
       SCF
SBAGN: RLA         ; MOVE IT TO THE RIGHT PLACE
       DJNZ SBAGN
       LD B,A
       LD HL,FFSTAT
       LD A,(HL)
       OR B        ;SET THE BIT
       LD (HL),A
       OUT (DEVFFS),A
       RET

@EPROMOFF: PUSH HL
       PUSH BC
       LD B,0
       CALL FF_OFF
       POP BC
       POP HL
       RET

@EPROMON: PUSH HL
          PUSH BC
      LD B,0
      CALL FF_ON
      POP BC
      POP HL
      RET





SOUTAS:	PUSH AF  	;SERIAL PRINT ASCII IN DECIMAL
	LD H,0
	LD L,A
	LD DE,MYNUM
	CALL OUTASC
	
	LD A,10
	LD (DE),A
	INC DE
	LD A,13
	LD (DE),A
	INC DE
	XOR A
	LD (DE),A

	LD HL,MYNUM
	CALL RS_TXT
	POP AF
	RET

	

	
SMENU	DEFM "UI:UP J:DN X:RUN TYH:RS S:DISP C:CLS L:LCDST B:BASIC"
	DB 0

STR0	DEFM "LCD INITIALIZED"
	DB 0

STR1	DEFM "RS232 INIT"
	DB 0

STR2	DEFM "PROGRAM HALTED"
	DB 0

STR02	DEFM "WAITING..."
	DB 0

DATTR	DEFM "PRG TRANSFERED"
	DB 0
	
DATST	DEFM "RECEIVING..."
	DB 0	

SPRGX	DEFM "PRG EXECUTE"
	DB 0
	
STIMG	DEFM "IMAGE COPY"
	DB 0

TXTMES	DEFM "SCREEN READY"
	DB 0

STRMN	DEFM "UI:UP J:DN X:RUN TYH:RS S:DISP C:CLS L:LCDST B:BASIC"
	DB 10,13,0

STRSCR	DEFM "CLEARING SCREEN."
	DB 10,13,0

STR00	DB 10,13
	DEFM "RS232 INITIALIZED"
	DB 10,13,0

STR01	DB 10,13
	DEFM "WAITING..."
	DB 10,13,0
	DB 0

STR06	DB 10,13
	DEFM "KEY PRESSED"
	DB 10,13,0
	DB 0

	END



