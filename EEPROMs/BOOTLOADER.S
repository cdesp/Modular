NAME MAIN

	GLOBAL DEVPS2	
	GLOBAL DEVLCD
	GLOBAL DEVSER
	GLOBAL DEVTFT
	GLOBAL MENU
	GLOBAL KEYCTR
	GLOBAL SOUTAS;
	GLOBAL COPSTA

	DEVPS2	EQU $46 ;PS/2 Keyb
	DEVLCD	EQU $40	;LCD 16X2
	DEVSER 	EQU $20	;Serial
	DEVTFT  EQU $10 ;LCD SCREEN TFT
	COPSTA	EQU   6	; PS/2 STATUS PORT

	;PINS EQU DEVLCD 	;LCD INSTRUCTION PORT
	;PDAT EQU DEVLCD+01	;LCD DATA SEND PORT


	PS2OUT	EQU DEVPS2
	PS2IN 	EQU DEVPS2+1

	;DISPCT EQU 8+4		;DISPLAY CONTROL
				;BIT 0= BLINK CURSOR POS CHAR
				;BIT 1= CURSOR ON OFF
				;BIT 2=	DISPLAY ON OFF
				;BIT 3= 1	

  RAMAD  EQU 0x8000
	STACKP EQU 0xFFF0  	;100	
	KDATA	EQU 6	;DATA FLAGS SET TO 1 IF UNTRANSMITTED


	


@START:	DI
	;LD HL,STRBT
	;CALL RS_TXT	;OUTPUT MENU COMMANDS AT RS232	
	;JP BOOT



	;OUT 5 TIMES AT PORT 0 (0 AND 255)
CN1:	LD B,5
AGN1:	LD C,0
	LD A,0
	OUT (C),A
	LD C,0
	LD A,255
	OUT (C),A
	DJNZ AGN1

		
	;TEST RAM
	
	LD DE,1
	LD A,0		;WRITE 0
	LD C,A
	LD HL,RAMAD	
	LD B,8
AGN2:	LD (HL),A
	LD C,(HL)
	CP C
	JP NZ, ERR
	ADD HL,DE
	ADD A,32	;WRITE +32
	LD C,A
	DJNZ AGN2
	
	LD B,5
AGN3:	LD C,00001000B  ;LLH ON 138 Y1 OUT
	LD A,64
	OUT (C),A
	ADD A,128
	OUT (C),A	
	DJNZ AGN3  	; SIGNAL ALL OK CONTINUOUS 10 TIMES ON PORT 8
	JP BOOT


ERR:	LD C,00111000B  ;HHH ON 138 Y7 OUT
	LD A,64
	OUT (C),A
	
	JP ERR 	;DO AGAIN PORT 1

@BOOT:	IM 1 
	DI


	LD SP,STACKP
	
	

  ;RS232 SERIAL PORT INIT
	CALL RS_INI	;RS232 INITIALIZE
	LD HL,STR00
	CALL RS_TXT

  ;LCD16X2 INIT
;	CALL LCDINI	;LCD 16x2 Initialized
;	LD HL,STR0
;	CALL LCDTXT

  ;LCD TFT 800X480px  INIT
  CALL LCD_INIT
  LD HL,COL_BLUE
  LD (BCOLOR),HL
  LD HL,COL_YELLOW
  LD (FCOLOR),HL
  LD HL,STRSCR	
  CALL RS_TXT
  CALL LCD_CLRSCR  
  LD A,1
  LD (CURSORX),A
  LD A,22
  LD (CURSORY),A  
	LD HL,STR0   ;LCD INIT MSG
	CALL LCD_MSG
	

	
ALLOK:	;CALL TVON

@MENU:	
	LD HL,STRMN
	CALL RS_TXT	;OUTPUT MENU COMMANDS AT RS232	
	LD HL,STR01
	CALL RS_TXT	;OUTPUT WAITING AT RS232
	
	
	;;LD HL,STR02
	;CALL LCDTXT

	
	LD HL,SMENU
  LD A,30
  LD (CURSORX),A
  LD A,2
  LD (CURSORY),A  
	CALL LCD_MSG
		
	CALL GET_CHAR	;TAKE A CHAR FROM RS232 OR PS2 KEYB
	;CALL RS_RX	; WAIT FOR A CHAR IN RS232	
	
	CP 'U'		;UPLOAD PROGRAM
	CALL Z, UPLOD
	CP 'X'
	JP Z,EXEC
	CP 'T'
	CALL Z,RSTST
	CP 'S'
	CALL Z,TXTSCR
	CP 'I'
	CALL Z,UPLOD2
	CP 'Y'
	CALL Z,RSTST2
	CP 'H'
	CALL Z,XMTST
	CP 'J'
	CALL Z,DNLOD
	;CP 'K'
	;CALL Z,LCD_INIT
	CP 'C'
	CALL Z,LCD_CLRSCR
	CP 'L'
	CALL Z,LCD_TEST
	CP 'B'
	JP Z,BBCBASIC
	
	JP MENU


	;TEST KEY PRESSED EITHER RS232 OR PS2	
@GET_CHAR:	XOR A
	
	;GET CHAR FROM RS232
	CALL RS_KEYRD	;CHAR IN RS232?
	JR Z,GT_TST2
	CALL RS_RX	; GET THAT CHAR
	RET
	;GET CHAR FROM PS2 KEYBOARD
GT_TST2	CALL PS2ISK  	;A=1 IF WE HAVE A KEY ELSE 0
	CP 0
	JR Z,GET_CHAR	;RECHECK
	CALL GTKEY	;GET THE KEY
	CP 0
	JP Z GET_CHAR
	CALL PS2LOK	;TRANSLATE IT
	;LD C,32
	;SUB C
	
	PUSH AF
	CALL RS_TX
	LD A,10
	CALL RS_TX
	LD A,13
	CALL RS_TX
	POP AF
	RET

GONB	CALL LCDLN2
	LD HL,DSPMES
	CALL LCDTXT
	CALL LCDCOF	;CURSOR OFF
	CALL LCDBON	;BLINK ON
	JP $A015

DSPMES	DEFM "<< CDESP 2016 >>"
	DB 0


EXEC:	CALL LCDCLS
	CALL LCDLN2
	LD HL,SPRGX
	CALL LCDTXT	
	CALL LCDLN1
	
	LD A,5
	CALL SCPRN			

	LD DE,PRGEX
	LD A,(DE)
	LD L,A
	INC DE
	LD A,(DE)
	LD H,A
	JP (HL)

UPLOD: 	
	LD HL,DATST
	CALL LCDLN2
	CALL LCDTXT

	CALL RS_RX 	;HL HAS RAM ADDRESS
	LD L,A
	CALL RS_RX
	LD H,A
	CALL RS_RX	;BC HAS TOTAL DATA TO BE SEND
	LD C,A
	CALL RS_RX
	LD B,A
	
	LD DE,PRGEX 	;SAVE TO PRGEX THE PROG EXEC ADDR=HL
	LD A,L
	LD (DE),A
	INC DE
	LD A,H
	LD (DE),A
	
	CP $80
	JR Z,ROMWR
	JR C,NORWR

ROMWR	OUT (124),A 	;SET ROM WRITABLE = '0'




NORWR:	PUSH HL
NXB:	CALL RS_RX
	LD (HL),A
	INC HL
	DEC BC
	LD A,B
	OR C
	JR NZ,NXB	;LOOP ALL BYTES	

  	OUT (125),A 	;SET ROM NON WRITABLE ='1'

	LD HL,DATTR
	CALL LCDCLS
	CALL LCDTXT
	LD A,5	
	CALL SCPRN			
	CALL DELAY
	
	POP HL
	;CALL (HL)
	

	RET



UPLOD2:	
	LD HL,DATST
	CALL LCDLN2
	CALL LCDTXT

	CALL RS_RX 	;HL HAS RAM ADDRESS
	LD L,A
	CALL RS_RX
	LD H,A
	CALL RS_RX	;BC HAS TOTAL DATA TO BE SEND
	LD C,A
	CALL RS_RX
	LD B,A
	
	LD DE,PRGEX 	;SAVE TO PRGEX THE PROG EXEC ADDR=HL
	LD A,L
	LD (DE),A
	INC DE
	LD A,H
	LD (DE),A

NXB2:	CALL RS_RX
	LD (HL),A
	INC HL
	DEC BC
	LD A,B
	OR C
	JR NZ,NXB2	;LOOP ALL BYTES	  	
	
	

	RET
	
DNLOD:	
	;LD HL,DATST
	;CALL LCDLN2
	;CALL LCDTXT

	CALL RS_RX 	;HL HAS RAM ADDRESS
	LD L,A
	CALL RS_RX
	LD H,A
	CALL RS_RX	;BC HAS TOTAL DATA TO BE SEND
	LD C,A
	CALL RS_RX
	LD B,A
	
NXB3:	LD A,(HL)
	CALL RS_TX	;SEND BYTE
	INC HL
	DEC BC
	LD A,B
	OR C
	JR NZ,NXB3	;LOOP ALL BYTES	  	
	

	RET

PS2AGN:			;TEST PS/2 INPUT
	IN A,(PS2IN)
	CP 0
	JR Z,PS2AGN
	CP 255
	JR Z,PS2AGN
	CP 1
	JP Z, PS2AGN
	;CALL LCDCHR
	CALL RS_TX
	CALL DEL2
	;CALL LCDCLS
	JR PS2AGN
	

RSTST:	NOP	;GET A KEY FROM RS232
	LD B,10
TEN:	PUSH BC
	CALL RS_RX
	;CALL LCDCHR  	;THE RECEIVED CHAR
	CALL RS_TX	;SEND BACK THE CHAR

	LD A,' '
	;CALL LCDCHR
	LD A,'R'
	;CALL LCDCHR
	
	CALL DEL2
	;CALL LCDCLS
	POP BC
	DJNZ TEN

	XOR A
	RET
	
RSTST2:	NOP	;TEST RECEIVING AND SENDING 255 BYTES
	LD B,255
TEN2:	PUSH BC
	CALL RS_RX
	;CALL LCDCHR  	;THE RECEIVED CHAR
	CALL RS_TX	;SEND BACK THE CHAR		
	;CALL DEL2
	POP BC
	DJNZ TEN2
	XOR A
	RET


XMTST:	NOP	;TEST XMIT ALL 8 BITS
	LD B,255
TEN3:	PUSH BC
	LD A,B
	CALL RS_TX	;SEND  THE BYTE
	POP BC
	DJNZ TEN3
	XOR A
	RET
	


TXTSCR: RET



GETKEY: 	PUSH HL
	PUSH DE
	PUSH BC
RGT:	CALL GTNBKEY	;KEY PRESSED
	;for trapping
	;PUSH AF
	;CALL SOUTAS
	;LD HL,$026F  ;FLAGS
	;LD A,(HL)
	;CALL SOUTAS
	;POP AF
	;
	POP BC
 	POP DE 
 	POP HL
 	CP 0				;CHECK IF INVALID KEY
 	RET NZ 							
 	RES KDATA (HL)							 ; KEY INVALID RESET KDATA TEST BIT
  	INC HL 			;GET TO THE LAST VALID KEY
	LD A,(HL)
	DEC HL  	
 	RET	

RSTX: 	CALL RS_TX
	RET
	
RSRX:	CALL RS_RX
	RET	
	


SOUTAS:	PUSH AF  	;SERIAL PRINT ASCII IN DECIMAL
	LD H,0
	LD L,A
	LD DE,MYNUM
	CALL OUTASC
	
	LD A,10
	LD (DE),A
	INC DE
	LD A,13
	LD (DE),A
	INC DE
	XOR A
	LD (DE),A

	LD HL,MYNUM
	CALL RS_TXT
	POP AF
	RET

	

	
SMENU	DEFM "UI:UP,X:RUN,TYH:RS,S:DISP,NM:NBROM,CV:TV, J:DN"
	DB 0

STR0	DEFM "LCD INITIALIZED"
	DB 0

STR1	DEFM "RS232 INIT"
	DB 0

STR2	DEFM "PROGRAM HALTED"
	DB 0

STR02	DEFM "WAITING..."
	DB 0

DATTR	DEFM "PRG TRANSFERED"
	DB 0
	
DATST	DEFM "RECEIVING..."
	DB 0	

SPRGX	DEFM "PRG EXECUTE"
	DB 0
	
STIMG	DEFM "IMAGE COPY"
	DB 0

TXTMES	DEFM "SCREEN READY"
	DB 0

STRMN	DEFM "U:UP,X:RUN,T:RS,"
	DB 10,13,0

STRSCR	DEFM "CLEARING SCREEN."
	DB 10,13,0

STR00	DB 10,13
	DEFM "RS232 INITIALIZED"
	DB 10,13,0

STR01	DB 10,13
	DEFM "WAITING..."
	DB 10,13,0
	DB 0

STR06	DB 10,13
	DEFM "KEY PRESSED"
	DB 10,13,0
	DB 0

	END



