 14)   0000 	            		 CH376_ERROR EQU RS_MESG	;
 17)   0000 00          		 NOP	;
 18)   0001 00          		 NOP	;
 19)   0002 F3          		 DI  	;
 20)   0003 31 00 F0    		 LD SP, BLSTACKP 	;
 21)   0006 C3 C4 00    		 JP BOOTLOADER	;
 23)   0009 41 54 4C 41 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 23)   000D 53 20 42 4F 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 23)   0011 4F 54 4C 4F 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 23)   0015 41 44 45 52 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 23)   0019 20          		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 24)   001A 56 65 72 73 		 DEFM "Version "  	;
 24)   001E 69 6F 6E 20 		 DEFM "Version "  	;
 25)   0022 30 2E 30 39 		 DEFM "0.09"	;
 26)   0026 0A 0D       		 DEFB 0AH,0DH	;
 27)   0028 43 44 65 73 		 DEFM "CDesp 2022-23"	;
 27)   002C 70 20 32 30 		 DEFM "CDesp 2022-23"	;
 27)   0030 32 32 2D 32 		 DEFM "CDesp 2022-23"	;
 27)   0034 33          		 DEFM "CDesp 2022-23"	;
 28)   0035 0A 0D       		 DEFB 0AH,0DH    	;
 29)   0037 00          		 DEFB 00H	;
 34)   0038 C3 57 06    		 JP RS_MESG	;
 36)   003B 00 01 0A 0B 		MYMMUBANK:     DB 0,1,10,11,4,5,6,7	;
 36)   003F 04 05 06 07 		MYMMUBANK:     DB 0,1,10,11,4,5,6,7	;
 40)   0043 3E 07       		SETUPFFPS: LD A,7	;
 41)   0045 D3 68       		SFFAGN: OUT (DEVINT), A	;
 42)   0047 3D          		 DEC A	;
 43)   0048 C2 45 00    		 JP NZ, SFFAGN    	;
 44)   004B C9          		 RET	;
 46)   004C 21 01 F0    		SETUPVARS: LD HL,OSVARS      ;ZERO OS VARIABLES	;ZERO OS VARIABLES
 47)   004F AF          		SI_AGN: XOR A	;
 48)   0050 77          		 LD (HL),A	;
 49)   0051 23          		 INC HL	;
 50)   0052 7C          		 LD A,H	;
 51)   0053 B5          		 OR L	;
 52)   0054 20 F9       		 JR NZ,SI_AGN       ;HL=0000 WHEN OVERFLOW FROM FFFF 	;HL=0000 WHEN OVERFLOW FROM FFFF
 53)   0056 C9          		 RET	;
 56)   0057 00          		INITVGA: NOP	;
 58)   0058 21 88 F0    		 LD HL,SCRNST	;
 59)   005B CB 86       		 RES 0,(HL) ;DISABLE LCD	;DISABLE LCD
 60)   005D CB CE       		 SET 1,(HL) ;ENABLE VGA	;ENABLE VGA
 62)   005F 21 5D 05    		 LD HL, CHARSETFILE  	;
 63)   0062 01 B8 0B    		 LD BC, 3000  ;MAX FILE SIZE	;MAX FILE SIZE
 64)   0065 11 00 40    		 LD DE, FONT_ADDR 	;
 65)   0068 CD 56 0B    		 CALL STRG_LOADFILE	;
 66)   006B 30 1C       		 JR NC, CHFILOK	;
 67)   006D CD 57 06    		 CALL RS_MESG	;
 68)   0070 45 52 52 4F 		 DEFM "ERROR LOADING CHARSET"	;
 68)   0074 52 20 4C 4F 		 DEFM "ERROR LOADING CHARSET"	;
 68)   0078 41 44 49 4E 		 DEFM "ERROR LOADING CHARSET"	;
 68)   007C 47 20 43 48 		 DEFM "ERROR LOADING CHARSET"	;
 68)   0080 41 52 53 45 		 DEFM "ERROR LOADING CHARSET"	;
 68)   0084 54          		 DEFM "ERROR LOADING CHARSET"	;
 69)   0085 0D 0A 00    		 DB 13,10,0	;
 70)   0088 76          		 HALT	;
 71)   0089 CD 61 0D    		CHFILOK: CALL VGA_INIT	;
 72)   008C CD 57 06    		 CALL RS_MESG	;
 73)   008F 56 47 41 20 		 DEFM "VGA CARD OK"	;
 73)   0093 43 41 52 44 		 DEFM "VGA CARD OK"	;
 73)   0097 20 4F 4B    		 DEFM "VGA CARD OK"	;
 74)   009A 0A 0D 00    		 DB 10,13,0	;
 75)   009D C9          		 RET	;
 80)   009E F5          		@OS_PRINTCHAR: PUSH AF	;
 81)   009F D1          		OSPCNX: POP DE	;
 82)   00A0 3A 88 F0    		 LD A,(SCRNST)	;
 83)   00A3 E6 02       		 AND 2	;
 84)   00A5 C8          		 RET Z	;
 85)   00A6 D5          		 PUSH DE	;
 86)   00A7 F1          		 POP AF    ;GET THE FLAGS BACK AND THE CHAR	;GET THE FLAGS BACK AND THE CHAR
 87)   00A8 F5          		 PUSH AF	;
 88)   00A9 CD 3E 06    		 CALL RS_TX	;
 89)   00AC F1          		 POP AF  	;
 90)   00AD CD 63 0E    		 CALL VGA_PRCH 	;
 91)   00B0 C9          		 RET	;
 94)   00B1 7E          		@OS_PRINTTEXT: LD A,(HL)	;
 95)   00B2 FE 00       		 CP 0	;
 96)   00B4 C8          		 RET Z	;
 97)   00B5 E5          		 PUSH HL	;
 98)   00B6 CD 9E 00    		 CALL OS_PRINTCHAR	;
 99)   00B9 E1          		 POP HL	;
100)   00BA 23          		 INC HL	;
101)   00BB 18 F4       		 JR OS_PRINTTEXT 	;
103)   00BD E1          		@OS_PRINTMSG: POP HL	;
104)   00BE CD B1 00    		               CALL OS_PRINTTEXT 	;
105)   00C1 23          		 INC HL	;
106)   00C2 E5          		 PUSH HL   ;CONTINUE AFTER THE MESG 	;CONTINUE AFTER THE MESG
107)   00C3 C9          		 RET	;
109)   00C4 00          		BOOTLOADER: NOP 	;
112)   00C5 0E 00       		SETUPMMU: LD C,DEVMMU	;
113)   00C7 AF          		  XOR A   ;BANK	;BANK
114)   00C8 06 00       		 LD B,0.SHL.5  ;PAGE	;PAGE
116)   00CA 3C          		 INC A	;
117)   00CB 06 20       		 LD B,1.SHL.5	;
118)   00CD ED 79       		 OUT (C),A  	;
120)   00CF 3E 0A       		 LD A,10   ;VID MEM RAM	;VID MEM RAM
121)   00D1 06 40       		 LD B,2.SHL.5  	;
122)   00D3 ED 79       		 OUT (C),A  	;
124)   00D5 3E 0B       		 LD A,11   ;VID MEM RAM	;VID MEM RAM
125)   00D7 06 60       		 LD B,3.SHL.5  	;
126)   00D9 ED 79       		 OUT (C),A  	;
128)   00DB 3E 04       		 LD A,4	;
129)   00DD 06 80       		 LD B,4.SHL.5	;
130)   00DF ED 79       		 OUT (C),A  	;
131)   00E1 3C          		 INC A	;
132)   00E2 06 A0       		 LD B,5.SHL.5	;
133)   00E4 ED 79       		 OUT (C),A  	;
134)   00E6 3C          		 INC A	;
135)   00E7 06 C0       		 LD B,6.SHL.5	;
136)   00E9 ED 79       		 OUT (C),A  	;
137)   00EB 3C          		 INC A	;
138)   00EC 06 E0       		 LD B,7.SHL.5	;
139)   00EE ED 79       		 OUT (C),A 	;
140)   00F0 CD 4C 00    		 CALL SETUPVARS	;
141)   00F3 CD EE 05    		 CALL INITMMU       ;PUT PAGES 0..7 IN RAM BANKS 0..7  	;PUT PAGES 0..7 IN RAM BANKS 0..7
142)   00F6 21 3B 00    		 LD HL,MYMMUBANK	;
143)   00F9 11 1D F0    		 LD DE,BANKS	;
144)   00FC 01 08 00    		 LD BC,8	;
145)   00FF ED B0       		 LDIR        ;TO RAM PAGE 7 OS VARS	;TO RAM PAGE 7 OS VARS
147)   0101 3E 01       		 LD A, 1 ;12        ;12=9600 BPS, 1=115200BPS	;12        ;12=9600 BPS, 1=115200BPS
148)   0103 CD 25 06    		 CALL RS_INI        ;RS232 INITIALIZE	;RS232 INITIALIZE
149)   0106 CD 57 06    		 CALL RS_MESG	;
150)   0109 53 45 52 49 		 DEFM "SERIAL INITIALIZED OK"	;
150)   010D 41 4C 20 49 		 DEFM "SERIAL INITIALIZED OK"	;
150)   0111 4E 49 54 49 		 DEFM "SERIAL INITIALIZED OK"	;
150)   0115 41 4C 49 5A 		 DEFM "SERIAL INITIALIZED OK"	;
150)   0119 45 44 20 4F 		 DEFM "SERIAL INITIALIZED OK"	;
150)   011D 4B          		 DEFM "SERIAL INITIALIZED OK"	;
151)   011E 0A 0D 00    		 DB 10,13,0	;
152)   0121 F3          		 DI	;
154)   0122 3E 06       		 LD A,6	;
155)   0124 CD 6A 08    		 CALL STRG_INIT	;
156)   0127 28 22       		 JR Z, STINIOK	;
157)   0129 CD 57 06    		 CALL RS_MESG	;
158)   012C 45 52 52 4F 		 DEFM "ERROR INITILIAZING CH376S"	;
158)   0130 52 20 49 4E 		 DEFM "ERROR INITILIAZING CH376S"	;
158)   0134 49 54 49 4C 		 DEFM "ERROR INITILIAZING CH376S"	;
158)   0138 49 41 5A 49 		 DEFM "ERROR INITILIAZING CH376S"	;
158)   013C 4E 47 20 43 		 DEFM "ERROR INITILIAZING CH376S"	;
158)   0140 48 33 37 36 		 DEFM "ERROR INITILIAZING CH376S"	;
158)   0144 53          		 DEFM "ERROR INITILIAZING CH376S"	;
159)   0145 0A 0D 00    		 DB 10,13,0	;
160)   0148 C3 67 05    		 JP BOOTMENU	;
161)   014B CD 57 06    		STINIOK: CALL RS_MESG	;
162)   014E 53 54 4F 52 		 DEFM "STORAGE DEVICE OK"	;
162)   0152 41 47 45 20 		 DEFM "STORAGE DEVICE OK"	;
162)   0156 44 45 56 49 		 DEFM "STORAGE DEVICE OK"	;
162)   015A 43 45 20 4F 		 DEFM "STORAGE DEVICE OK"	;
162)   015E 4B          		 DEFM "STORAGE DEVICE OK"	;
163)   015F 0A 0D 00    		 DB 10,13,0	;
164)   0162 3E 06       		 LD A,6    ;USB DRIVE	;USB DRIVE
165)   0164 CD C6 08    		 CALL STRG_OPENCRD  ;MOUNT THE DRIVE	;MOUNT THE DRIVE
166)   0167 28 21       		 JR Z, STOPNOK	;
167)   0169 CD 57 06    		 CALL RS_MESG	;
168)   016C 45 52 52 4F 		 DEFM "ERROR MOUNTING THE DRIVE"	;
168)   0170 52 20 4D 4F 		 DEFM "ERROR MOUNTING THE DRIVE"	;
168)   0174 55 4E 54 49 		 DEFM "ERROR MOUNTING THE DRIVE"	;
168)   0178 4E 47 20 54 		 DEFM "ERROR MOUNTING THE DRIVE"	;
168)   017C 48 45 20 44 		 DEFM "ERROR MOUNTING THE DRIVE"	;
168)   0180 52 49 56 45 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   0184 0A 0D 00    		 DB 10,13,0	;
170)   0187 C3 67 05    		 JP BOOTMENU  	;
171)   018A CD B8 09    		STOPNOK: CALL STRG_PRDRVINFO ;PRINT DRIVE INFO	;PRINT DRIVE INFO
172)   018D CD AD 06    		 CALL RS_NEWLINE	;
173)   0190 CD 57 00    		 CALL INITVGA	;
181)   0193 21 09 00    		 LD HL,OSVERMES	;
182)   0196 CD B1 00    		 CALL OS_PRINTTEXT	;
188)   0199 21 53 05    		 LD HL,BFILEINI	;
189)   019C 01 A0 0F    		 LD BC,4000  ;MAX BYTES OF FILE	;MAX BYTES OF FILE
190)   019F 11 BC F0    		 LD DE,FILEBUFFER 	;
191)   01A2 CD 56 0B    		 CALL STRG_LOADFILE	;
192)   01A5 30 1F       		 JR NC, FILOK	;
193)   01A7 CD 57 06    		 CALL RS_MESG	;
194)   01AA 45 52 52 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
194)   01AE 52 20 4C 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
194)   01B2 41 44 49 4E 		 DEFM "ERROR LOADING BOOT.INI"	;
194)   01B6 47 20 42 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
194)   01BA 4F 54 2E 49 		 DEFM "ERROR LOADING BOOT.INI"	;
194)   01BE 4E 49       		 DEFM "ERROR LOADING BOOT.INI"	;
195)   01C0 0D 0A 00    		 DB 13,10,0	;
196)   01C3 C3 67 05    		 JP BOOTMENU	;
209)   01C6 ED 43 1B F0 		FILOK: LD (FILEBTCNT),BC	;
210)   01CA 21 BC F0    		 LD HL,FILEBUFFER	;
211)   01CD 09          		 ADD HL,BC	;
212)   01CE 23          		 INC HL	;
213)   01CF 36 00       		 LD (HL),0	;
214)   01D1 21 BC F0    		 LD HL,FILEBUFFER	;
215)   01D4 CD 14 05    		 CALL FINDSECTION	;
216)   01D7 50 41 47 45 		 DEFM "PAGES"	;
216)   01DB 53          		 DEFM "PAGES"	;
217)   01DC 00          		 DB 0	;
218)   01DD 30 20       		 JR NC, PRG_NXT1	;
219)   01DF CD 57 06    		 CALL RS_MESG	;
220)   01E2 45 52 52 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
220)   01E6 52 20 5B 50 		 DEFM "ERROR [PAGES] NOT FOUND"	;
220)   01EA 41 47 45 53 		 DEFM "ERROR [PAGES] NOT FOUND"	;
220)   01EE 5D 2E 4E 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
220)   01F2 54 2E 46 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
220)   01F6 55 4E 44    		 DEFM "ERROR [PAGES] NOT FOUND"	;
221)   01F9 0D 0A 00    		 DB 13,10,0	;
222)   01FC C3 67 05    		 JP BOOTMENU	;
223)   01FF CD 99 04    		PRG_NXT1: CALL AN_PAGES	;
224)   0202 21 BC F0    		 LD HL,FILEBUFFER	;
225)   0205 CD 14 05    		 CALL FINDSECTION	;
226)   0208 46 49 4C 45 		 DEFM "FILES"	;
226)   020C 53          		 DEFM "FILES"	;
227)   020D 00          		 DB 0	;
228)   020E 30 20       		 JR NC, PRG_NXT2	;
229)   0210 CD 57 06    		 CALL RS_MESG	;
230)   0213 45 52 52 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
230)   0217 52 20 5B 46 		 DEFM "ERROR [FILES] NOT FOUND"	;
230)   021B 49 4C 45 53 		 DEFM "ERROR [FILES] NOT FOUND"	;
230)   021F 5D 2E 4E 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
230)   0223 54 2E 46 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
230)   0227 55 4E 44    		 DEFM "ERROR [FILES] NOT FOUND"	;
231)   022A 0D 0A 00    		 DB 13,10,0	;
232)   022D C3 67 05    		 JP BOOTMENU	;
233)   0230 CD 16 04    		PRG_NXT2: CALL LD_FILE	;
242)   0233 21 BC F0    		 LD HL,FILEBUFFER	;
243)   0236 CD 14 05    		 CALL FINDSECTION	;
244)   0239 42 41 4E 4B 		 DEFM "BANKS"	;
244)   023D 53          		 DEFM "BANKS"	;
245)   023E 00          		 DB 0	;
246)   023F 30 20       		 JR NC, PRG_NXT3	;
247)   0241 CD 57 06    		 CALL RS_MESG	;
248)   0244 45 52 52 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
248)   0248 52 20 5B 42 		 DEFM "ERROR [BANKS] NOT FOUND"	;
248)   024C 41 4E 4B 53 		 DEFM "ERROR [BANKS] NOT FOUND"	;
248)   0250 5D 2E 4E 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
248)   0254 54 2E 46 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
248)   0258 55 4E 44    		 DEFM "ERROR [BANKS] NOT FOUND"	;
249)   025B 0D 0A 00    		 DB 13,10,0	;
250)   025E C3 67 05    		 JP BOOTMENU	;
251)   0261 CD B6 03    		PRG_NXT3: CALL DO_BANKS	;
252)   0264 CD 57 06    		 CALL RS_MESG	;
253)   0267 42 41 4E 4B 		 DEFM "BANKS SAVED"	;
253)   026B 53 20 53 41 		 DEFM "BANKS SAVED"	;
253)   026F 56 45 44    		 DEFM "BANKS SAVED"	;
254)   0272 0D 0A 00    		 DB 13,10,0	;
255)   0275 21 BC F0    		 LD HL,FILEBUFFER	;
256)   0278 CD 14 05    		 CALL FINDSECTION	;
257)   027B 45 58 45 43 		 DEFM "EXECBNK"	;
257)   027F 42 4E 4B    		 DEFM "EXECBNK"	;
258)   0282 00          		 DB 0	;
259)   0283 30 22       		 JR NC, PRG_NXT4	;
260)   0285 CD 57 06    		 CALL RS_MESG	;
261)   0288 45 52 52 4F 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
261)   028C 52 20 5B 45 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
261)   0290 58 45 43 42 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
261)   0294 4E 4B 5D 2E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
261)   0298 4E 4F 54 2E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
261)   029C 46 4F 55 4E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
261)   02A0 44          		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
262)   02A1 0D 0A 00    		 DB 13,10,0	;
263)   02A4 C3 67 05    		 JP BOOTMENU	;
264)   02A7 CD E2 03    		PRG_NXT4: CALL DO_EXEC	;
265)   02AA CD 57 06    		 CALL RS_MESG	;
266)   02AD 2A 2A 2A 2A 		 DEFM "***********************************"	;
266)   02B1 2A 2A 2A 2A 		 DEFM "***********************************"	;
266)   02B5 2A 2A 2A 2A 		 DEFM "***********************************"	;
266)   02B9 2A 2A 2A 2A 		 DEFM "***********************************"	;
266)   02BD 2A 2A 2A 2A 		 DEFM "***********************************"	;
266)   02C1 2A 2A 2A 2A 		 DEFM "***********************************"	;
266)   02C5 2A 2A 2A 2A 		 DEFM "***********************************"	;
266)   02C9 2A 2A 2A 2A 		 DEFM "***********************************"	;
266)   02CD 2A 2A 2A    		 DEFM "***********************************"	;
267)   02D0 0D 0A       		 DB 13,10	;
268)   02D2 45 58 45 43 		 DEFM "EXECUTING..."	;
268)   02D6 55 54 49 4E 		 DEFM "EXECUTING..."	;
268)   02DA 47 2E 2E 2E 		 DEFM "EXECUTING..."	;
269)   02DE 0D 0A 00    		 DB 13,10,0	;
282)   02E1 0E 06       		 LD C,6	;
283)   02E3 21 01 F0    		PRG_NXTBNK: LD HL,OSBANKS	;
284)   02E6 06 00       		 LD B,0  	;
285)   02E8 09          		 ADD HL,BC	;
286)   02E9 41          		 LD B,C	;
287)   02EA 7E          		 LD A,(HL)	;
288)   02EB CD 40 03    		 CALL PUTTOBANKSV	;
289)   02EE 0D          		 DEC C	;
290)   02EF 20 F2       		 JR NZ,PRG_NXTBNK	;
291)   02F1 31 00 70    		 LD SP,$7000  ;NEW SP BANK 3 IS RAM ALWAYS	;NEW SP BANK 3 IS RAM ALWAYS
292)   02F4 21 01 F0    		 LD HL,OSBANKS	;
293)   02F7 7E          		 LD A,(HL)	;
294)   02F8 5F          		 LD E,A   ;PAGE TO BANK 0  	;PAGE TO BANK 0
295)   02F9 D5          		 PUSH DE   ;PUSH 0 BANK PAGE	;PUSH 0 BANK PAGE
296)   02FA CD 57 06    		 CALL RS_MESG	;
297)   02FD 45 58 45 43 		 DEFM "EXEC BANK="	;
297)   0301 20 42 41 4E 		 DEFM "EXEC BANK="	;
297)   0305 4B 3D       		 DEFM "EXEC BANK="	;
298)   0307 00          		 DB 0	;
299)   0308 3A 09 F0    		 LD A,(EXBANK)  ;THE BANK TO EXECUTE OS ENTRY POINT 	;THE BANK TO EXECUTE OS ENTRY POINT
300)   030B CD D9 04    		 CALL PRNNUM	;
301)   030E F5          		 PUSH AF   ;PUSH EXECUTE BANK 	;PUSH EXECUTE BANK
302)   030F 21 08 F0    		 LD HL,OSBANKS+7	;
303)   0312 7E          		 LD A,(HL)  ;PAGE TO BANK 7 	;PAGE TO BANK 7
304)   0313 06 07       		 LD B,7   	;
305)   0315 CD 67 03    		 CALL PUTTOBANK  ;NO MORE PARAMS ON PAGE 7   	;NO MORE PARAMS ON PAGE 7
307)   0318 11 00 60    		 LD DE,$6000	;
308)   031B 21 5C 03    		 LD HL,CPPUTTOBANK	;
309)   031E 01 1D 00    		 LD BC, ENPUTTOBANK-CPPUTTOBANK+1	;
310)   0321 ED B0       		 LDIR   ;TRANSFER CODE TO RAM	;TRANSFER CODE TO RAM
311)   0323 E1          		 POP HL   ;POP EXECUTE BANK H=A	;POP EXECUTE BANK H=A
312)   0324 AF          		 XOR A  	;
313)   0325 CB 24       		 SLA H   ;5 SHIFTS TO TRANSLATE BANK TO ADDRESS	;5 SHIFTS TO TRANSLATE BANK TO ADDRESS
314)   0327 CB 24       		 SLA H	;
315)   0329 CB 24       		 SLA H	;
316)   032B CB 24       		 SLA H	;
317)   032D CB 24       		 SLA H	;
318)   032F 2E 00       		  LD L,0	;
319)   0331 11 01 60    		 LD DE,$6001	;
320)   0334 7D          		 LD A,L	;
321)   0335 12          		 LD (DE),A	;
322)   0336 13          		 INC DE	;
323)   0337 7C          		 LD A,H	;
324)   0338 12          		 LD (DE),A	;
333)   0339 D1          		 POP DE   ;GET BANK 0 PAGE	;GET BANK 0 PAGE
334)   033A 7B          		 LD A,E   ;PUT PAGE OF BANK 0 TO A	;PUT PAGE OF BANK 0 TO A
335)   033B 06 00       		 LD B,0   ;BANK 0	;BANK 0
336)   033D C3 00 60    		 JP $6000  ;EXEC CODE IN RAM	;EXEC CODE IN RAM
342)   0340 21 1D F0    		PUTTOBANKSV: LD HL, BANKS	;
343)   0343 16 00       		 LD D,0	;
344)   0345 58          		 LD E,B	;
345)   0346 19          		 ADD HL,DE	;
346)   0347 77          		 LD (HL),A  ;SAVE PAGE TO BANK NO ON BANKS	;SAVE PAGE TO BANK NO ON BANKS
347)   0348 CD 67 03    		 CALL PUTTOBANK	;
348)   034B C5          		 PUSH BC	;
349)   034C F5          		 PUSH AF	;
350)   034D CD D9 04    		 CALL PRNNUM  ;IT MESSES WITH F0B4 ADDR SO ONLY FOR SV	;IT MESSES WITH F0B4 ADDR SO ONLY FOR SV
351)   0350 3E 3E       		 LD A,'>'	;
352)   0352 CD 3E 06    		 CALL RS_TX	;
353)   0355 78          		 LD A,B	;
354)   0356 CD D9 04    		 CALL PRNNUM	;
355)   0359 F1          		 POP AF	;
356)   035A C1          		 POP BC	;
357)   035B C9          		 RET	;
360)   035C 21 00 00    		CPPUTTOBANK:   LD HL,0000  ;CHANGE 0000 TO THE EXEC VALUE             	;CHANGE 0000 TO THE EXEC VALUE
361)   035F CD 0B 60    		 CALL 24576+PUTTOBANK-CPPUTTOBANK  ;$6000=24576 	;$6000=24576
362)   0362 3E 01       		 LD A,1	;
363)   0364 D3 63       		 OUT (99),A  ;FOR TEST    	;FOR TEST
364)   0366 E9          		 JP (HL)	;
367)   0367 C5          		PUTTOBANK: PUSH BC	;
368)   0368 0E 00       		 LD C,DEVMMU	;
370)   036A CB 20       		 SLA B	;
371)   036C CB 20       		 SLA B	;
372)   036E CB 20       		 SLA B	;
373)   0370 CB 20       		 SLA B	;
374)   0372 CB 20       		 SLA B 	;
375)   0374 ED 79       		 OUT (C),A	;
376)   0376 C1          		 POP BC	;
377)   0377 C9          		 RET	;
379)   0378 00          		ENPUTTOBANK: NOP	;
381)   0379 5C 45 50 52 		EPRM: DEFM "\EPRM.BIN"  	;
381)   037D 4D 2E 42 49 		EPRM: DEFM "\EPRM.BIN"  	;
381)   0381 4E          		EPRM: DEFM "\EPRM.BIN"  	;
382)   0382 00          		 DEFB 0	;
384)   0383 5C 45 50 52 		EPRM2: DEFM "\EPRM2.BIN"  	;
384)   0387 4D 32 2E 42 		EPRM2: DEFM "\EPRM2.BIN"  	;
384)   038B 49 4E       		EPRM2: DEFM "\EPRM2.BIN"  	;
385)   038D 00          		 DEFB 0	;
387)   038E 5C 45 50 52 		EPRM3: DEFM "\EPRM3.BIN"  	;
387)   0392 4D 33 2E 42 		EPRM3: DEFM "\EPRM3.BIN"  	;
387)   0396 49 4E       		EPRM3: DEFM "\EPRM3.BIN"  	;
388)   0398 00          		 DEFB 0	;
392)   0399 5C          		ROOTDIR: DEFM "\" 	;
393)   039A 00          		 DEFB 0	;
397)   039B E5          		DUMPMEM: PUSH HL	;
399)   039C 21 79 03    		DR_OPDIROK: LD HL,EPRM	;
401)   039F D1          		 POP DE	;
402)   03A0 CD 95 0C    		 CALL STRG_SAVEFILE	;
403)   03A3 C9          		 RET	;
405)   03A4 E5          		DUMPMEM2: PUSH HL	;
407)   03A5 21 83 03    		DR_OPDIROK: LD HL,EPRM2	;
409)   03A8 D1          		 POP DE	;
410)   03A9 CD 95 0C    		 CALL STRG_SAVEFILE	;
411)   03AC C9          		 RET  	;
413)   03AD E5          		DUMPMEM3: PUSH HL	;
415)   03AE 21 8E 03    		DR_OPDIROK: LD HL,EPRM3	;
417)   03B1 D1          		 POP DE	;
418)   03B2 CD 95 0C    		 CALL STRG_SAVEFILE	;
419)   03B5 C9          		 RET  	;
424)   03B6 CD 57 06    		DO_BANKS: CALL RS_MESG	;
425)   03B9 5B 42 41 4E 		 DEFM "[BANKS]"	;
425)   03BD 4B 53 5D    		 DEFM "[BANKS]"	;
426)   03C0 0D 0A 00    		 DB 13,10,0	;
427)   03C3 11 01 F0    		 LD DE,OSBANKS	;
428)   03C6 06 08       		 LD B,8	;
429)   03C8 C5          		NXTBNK: PUSH BC	;
430)   03C9 D5          		 PUSH DE	;
431)   03CA CD 79 04    		 CALL GETSTRNUM	;
432)   03CD CD 36 05    		 CALL SKIPNL	;
433)   03D0 E5          		 PUSH HL	;
434)   03D1 21 0A F0    		 LD HL,NUMSTR	;
435)   03D4 CD 39 16    		 CALL strtob	;
436)   03D7 E1          		 POP HL	;
437)   03D8 D1          		 POP DE	;
438)   03D9 CD D9 04    		 CALL PRNNUM	;
439)   03DC 12          		 LD (DE),A	;
440)   03DD 13          		 INC DE	;
441)   03DE C1          		 POP BC	;
442)   03DF 10 E7       		 DJNZ NXTBNK	;
443)   03E1 C9          		 RET	;
445)   03E2 CD 57 06    		DO_EXEC: CALL RS_MESG	;
446)   03E5 5B 45 58 45 		 DEFM "[EXEC]"	;
446)   03E9 43 5D       		 DEFM "[EXEC]"	;
447)   03EB 0D 0A 00    		 DB 13,10,0	;
448)   03EE CD 79 04    		 CALL GETSTRNUM	;
449)   03F1 21 0A F0    		 LD HL,NUMSTR	;
450)   03F4 CD 39 16    		 CALL strtob	;
451)   03F7 CD D9 04    		 CALL PRNNUM	;
452)   03FA 32 09 F0    		 LD (EXBANK),A	;
453)   03FD C9          		 RET	;
456)   03FE 11 0D F0    		COPYOSFILE: LD DE,OSFNAME	;
457)   0401 7E          		COPYOSFILE1: LD A,(HL)	;
458)   0402 FE 0D       		 CP 13	;
459)   0404 28 0D       		 JR Z, LDF_EXIT	;
460)   0406 FE 0A       		 CP 10	;
461)   0408 28 09       		 JR Z, LDF_EXIT	;
462)   040A FE 00       		 CP 0	;
463)   040C 28 05       		 JR Z, LDF_EXIT	;
464)   040E 12          		 LD (DE),A	;
465)   040F 13          		 INC DE	;
466)   0410 23          		 INC HL	;
467)   0411 18 EE       		 JR COPYOSFILE1;	;
468)   0413 AF          		LDF_EXIT: XOR A	;
469)   0414 12          		 LD (DE),A	;
470)   0415 C9          		 RET	;
472)   0416 CD 57 06    		LD_FILE: CALL RS_MESG	;
473)   0419 5B 46 49 4C 		 DEFM "[FILES]"	;
473)   041D 45 53 5D    		 DEFM "[FILES]"	;
474)   0420 0D 0A 00    		 DB 13,10,0	;
475)   0423 06 01       		 LD B,1   ;START FROM BANK 1 ;2 FOR TESTING	;START FROM BANK 1 ;2 FOR TESTING
476)   0425 CD FE 03    		 CALL COPYOSFILE	;
477)   0428 21 0D F0    		 LD HL,OSFNAME	;
478)   042B 01 00 80    		 LD BC,32768  ;MAX BYTES OF FILE IS 4 PAGES	;MAX BYTES OF FILE IS 4 PAGES
479)   042E 11 00 20    		 LD DE,$2000  ;$2000 FOR REAL	;$2000 FOR REAL
480)   0431 CD 56 0B    		 CALL STRG_LOADFILE	;
481)   0434 30 1B       		 JR NC, LDFILOK	;
482)   0436 CD 57 06    		 CALL RS_MESG	;
483)   0439 45 52 52 4F 		 DEFM "ERROR LOADING OSFILE"	;
483)   043D 52 20 4C 4F 		 DEFM "ERROR LOADING OSFILE"	;
483)   0441 41 44 49 4E 		 DEFM "ERROR LOADING OSFILE"	;
483)   0445 47 20 4F 53 		 DEFM "ERROR LOADING OSFILE"	;
483)   0449 46 49 4C 45 		 DEFM "ERROR LOADING OSFILE"	;
484)   044D 0D 0A 00    		 DB 13,10,0	;
485)   0450 C9          		 RET	;
486)   0451 CD 57 06    		LDFILOK: CALL RS_MESG	;
487)   0454 4F 53 20 46 		 DEFM "OS FILE LOADED!!!"	;
487)   0458 49 4C 45 20 		 DEFM "OS FILE LOADED!!!"	;
487)   045C 4C 4F 41 44 		 DEFM "OS FILE LOADED!!!"	;
487)   0460 45 44 21 21 		 DEFM "OS FILE LOADED!!!"	;
487)   0464 21          		 DEFM "OS FILE LOADED!!!"	;
488)   0465 0D 0A 00    		 DB 13,10,0	;
497)   0468 21 3C 00    		 LD HL, MYMMUBANK+1	;
498)   046B 06 01       		 LD B,1 ;START WITH BANK 1	;START WITH BANK 1
499)   046D 0E 04       		 LD C,4  ;PUT 4 BANKS	;PUT 4 BANKS
500)   046F 7E          		LDF_AGN1: LD A,(HL) ;GET DEFAULT PAGE FOR BOOTL   	;GET DEFAULT PAGE FOR BOOTL
501)   0470 CD 40 03    		 CALL PUTTOBANKSV	;
502)   0473 23          		 INC HL	;
503)   0474 04          		 INC B	;
504)   0475 0D          		 DEC C	;
505)   0476 20 F7       		 JR NZ, LDF_AGN1  	;
506)   0478 C9          		 RET	;
509)   0479 11 0A F0    		GETSTRNUM: LD DE,NUMSTR	;
510)   047C 7E          		GETSTRNUM1: LD A,(HL)	;
512)   047D FE 2C       		 CP ','	;
513)   047F 28 15       		 JR Z,GS_FIN	;
514)   0481 FE 3D       		 CP '='	;
515)   0483 28 11       		 JR Z,GS_FIN	;
516)   0485 FE 00       		 CP 0	;
517)   0487 28 0D       		 JR Z,GS_FIN	;
518)   0489 FE 0D       		 CP 13	;
519)   048B 28 09       		 JR Z,GS_FIN	;
520)   048D FE 0A       		 CP 10	;
521)   048F 28 05       		 JR Z,GS_FIN	;
522)   0491 12          		 LD (DE),A	;
523)   0492 13          		 INC DE	;
524)   0493 23          		 INC HL	;
525)   0494 18 E6       		 JR GETSTRNUM1	;
526)   0496 AF          		GS_FIN: XOR A	;
527)   0497 12          		 LD (DE),A  	;
528)   0498 C9          		 RET  	;
531)   0499 CD 57 06    		AN_PAGES: CALL RS_MESG	;
532)   049C 5B 50 41 47 		 DEFM "[PAGES]"	;
532)   04A0 45 53 5D    		 DEFM "[PAGES]"	;
533)   04A3 0D 0A 00    		 DB 13,10,0	;
534)   04A6 06 01       		 LD B,1   ;START FROM BANK 1 ;$2000	;START FROM BANK 1 ;$2000
535)   04A8 CD 79 04    		NXT_PG: CALL GETSTRNUM	;
536)   04AB E5          		 PUSH HL	;
537)   04AC C5          		 PUSH BC	;
538)   04AD 21 0A F0    		 LD HL,NUMSTR	;
539)   04B0 CD 4D 06    		 CALL RS_TXT	;
540)   04B3 3E 2D       		 LD A,'-'	;
541)   04B5 CD 3E 06    		 CALL RS_TX	;
542)   04B8 21 0A F0    		 LD HL,NUMSTR	;
543)   04BB CD 39 16    		 CALL strtob  ;A HAS THE PAGE TO PUT ON BANK 1,2,3,ETC	;A HAS THE PAGE TO PUT ON BANK 1,2,3,ETC
544)   04BE C1          		 POP BC	;
545)   04BF CD 40 03    		 CALL PUTTOBANKSV	;
546)   04C2 04          		 INC B	;
547)   04C3 C5          		 PUSH BC	;
548)   04C4 CD E8 16    		 CALL PRINTNUM	;
549)   04C7 C1          		 POP BC	;
550)   04C8 E1          		 POP HL	;
551)   04C9 7E          		 LD A,(HL)	;
552)   04CA FE 2C       		 CP ','	;
553)   04CC 23          		 INC HL	;
554)   04CD 28 D9       		 JR Z,NXT_PG	;
555)   04CF C9          		 RET	;
559)   04D0 7E          		FINDCHAR: LD A,(HL) 	;
560)   04D1 B8          		 CP B	;
561)   04D2 C8          		 RET Z	;
562)   04D3 FE 00       		 CP 0	;
563)   04D5 C8          		 RET Z	;
564)   04D6 23          		 INC HL	;
565)   04D7 18 F7       		 JR FINDCHAR	;
570)   04D9 F5          		PRNNUM: PUSH AF	;
571)   04DA E5          		 PUSH HL	;
572)   04DB C5          		 PUSH BC	;
573)   04DC D5          		 PUSH DE	;
574)   04DD CD E8 16    		 CALL PRINTNUM	;
575)   04E0 D1          		 POP DE	;
576)   04E1 C1          		 POP BC	;
577)   04E2 E1          		 POP HL	;
578)   04E3 F1          		 POP AF	;
579)   04E4 C9          		 RET	;
582)   04E5 F5          		PRNCHAR: PUSH AF	;
583)   04E6 E5          		 PUSH HL	;
584)   04E7 C5          		 PUSH BC	;
585)   04E8 D5          		 PUSH DE	;
586)   04E9 CD 3E 06    		 CALL RS_TX	;
587)   04EC F5          		 PUSH AF	;
588)   04ED 3E 3D       		 LD A,'='	;
589)   04EF CD 3E 06    		 CALL RS_TX	;
590)   04F2 F1          		 POP AF	;
591)   04F3 CD E8 16    		 CALL PRINTNUM	;
592)   04F6 D1          		 POP DE	;
593)   04F7 C1          		 POP BC	;
594)   04F8 E1          		 POP HL	;
595)   04F9 F1          		 POP AF	;
596)   04FA C9          		 RET	;
601)   04FB 1A          		STRCMP: LD A,(DE) ;STRING TO FIND CHAR	;STRING TO FIND CHAR
602)   04FC FE 00       		 CP 0  ;KEYWD ENDED	;KEYWD ENDED
603)   04FE 28 09       		 JR Z,STRFOUND	;
604)   0500 47          		 LD B,A	;
605)   0501 7E          		 LD A,(HL) ;STRING TESTING CHAR	;STRING TESTING CHAR
606)   0502 B8          		 CP B	;
607)   0503 20 06       		 JR NZ,STRNOTFOUND	;
608)   0505 13          		 INC DE	;
609)   0506 23          		 INC HL	;
610)   0507 18 F2       		 JR STRCMP	;
611)   0509 AF          		STRFOUND: XOR A ;CLEAR CARRY	;CLEAR CARRY
612)   050A C9          		 RET	;
613)   050B 37          		STRNOTFOUND: SCF	;
614)   050C C9          		 RET  	;
616)   050D 1A          		FNDRETADDR: LD A,(DE)	;
617)   050E 13          		 INC DE	;
618)   050F FE 00       		 CP 0  	;
619)   0511 C8          		 RET Z	;
620)   0512 18 F9       		 JR FNDRETADDR	;
624)   0514 D1          		FINDSECTION:   POP DE	;
625)   0515 D5          		 PUSH DE	;
626)   0516 CD 3D 05    		 CALL FINDASECTION	;
627)   0519 30 10       		 JR NC,SECFOUND	;
628)   051B D1          		 POP DE	;
629)   051C 7E          		 LD A,(HL)	;
630)   051D FE 00       		 CP 0	;
631)   051F 28 04       		 JR Z, SECNOEXIST ;END OF TEXT FILE REACHED	;END OF TEXT FILE REACHED
632)   0521 23          		 INC HL	;
633)   0522 D5          		 PUSH DE	;
634)   0523 18 EF       		 JR FINDSECTION ;KEEP SEARCHING	;KEEP SEARCHING
635)   0525 CD 0D 05    		SECNOEXIST:    CALL FNDRETADDR	;
636)   0528 D5          		 PUSH DE	;
637)   0529 37          		 SCF	;
638)   052A C9          		 RET	;
640)   052B 23          		SECFOUND: INC HL ;SKIP ']'	;SKIP ']'
641)   052C CD 36 05    		 CALL SKIPNL	;
642)   052F D1          		 POP DE	;
643)   0530 CD 0D 05    		 CALL FNDRETADDR	;
644)   0533 D5          		 PUSH DE	;
645)   0534 AF          		 XOR A	;
646)   0535 C9          		 RET	;
650)   0536 7E          		SKIPNL: LD A,(HL)	;
651)   0537 FE 1F       		 CP 31	;
652)   0539 D0          		 RET NC	;
653)   053A 23          		 INC HL	;
654)   053B 18 F9       		 JR SKIPNL	;
658)   053D 06 5B       		FINDASECTION: LD B,'['	;
659)   053F CD D0 04    		 CALL FINDCHAR	;
660)   0542 B7          		 OR A	;
661)   0543 28 0C       		 JR Z,ASECTNOTFND   ;NOT FOUND IF A=0 	;NOT FOUND IF A=0
662)   0545 23          		 INC HL ;HL POINTS TO THE STRING INSIDE []  	;HL POINTS TO THE STRING INSIDE []
663)   0546 CD FB 04    		 CALL STRCMP	;
664)   0549 D8          		 RET C	;
666)   054A 7E          		 LD A,(HL)	;
667)   054B FE 5D       		 CP ']'	;
668)   054D 20 02       		 JR NZ, ASECTNOTFND ;MORE LETTERS ON SECTION	;MORE LETTERS ON SECTION
669)   054F AF          		 XOR A  ;CLR CF	;CLR CF
670)   0550 C9          		 RET	;
671)   0551 37          		ASECTNOTFND: SCF	;
672)   0552 C9          		 RET 	;
674)   0553 5C 42 4F 4F 		BFILEINI DEFM "\BOOT.INI"	;
674)   0557 54 2E 49 4E 		BFILEINI DEFM "\BOOT.INI"	;
674)   055B 49          		BFILEINI DEFM "\BOOT.INI"	;
675)   055C 00          		 DB 0	;
676)   055D 5C 46 4F 4E 		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
676)   0561 54 2E 43 48 		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
676)   0565 52          		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
677)   0566 00          		 DB 0	;
680)   0567 21 CB 05    		BOOTMENU: LD HL, STRMN	;
681)   056A CD 4D 06    		 CALL RS_TXT        ;OUTPUT MENU COMMANDS AT RS232	;OUTPUT MENU COMMANDS AT RS232
685)   056D CD 75 06    		 CALL RS_RX ; WAIT FOR A CHAR IN RS232	; WAIT FOR A CHAR IN RS232
687)   0570 FE 55       		 CP 'U'         ;UPLOAD PROGRAM	;UPLOAD PROGRAM
688)   0572 CC 8B 05    		 CALL Z, UPLOD	;
689)   0575 FE 58       		 CP 'X'	;
690)   0577 CA 82 05    		 JP Z, EXEC	;
691)   057A FE 4A       		 CP 'J'	;
692)   057C CC B0 05    		 CALL Z, DNLOD	;
694)   057F C3 67 05    		 JP MENU	;
697)   0582 11 BD F0    		EXEC: LD DE, PRGEX	;
698)   0585 1A          		 LD A, (DE)	;
699)   0586 6F          		 LD L, A	;
700)   0587 13          		 INC DE	;
701)   0588 1A          		 LD A, (DE)	;
702)   0589 67          		 LD H, A	;
703)   058A E9          		 JP (HL)	;
705)   058B CD 75 06    		UPLOD: CALL RS_RX        ;HL HAS RAM ADDRESS	;HL HAS RAM ADDRESS
706)   058E 6F          		 LD L, A	;
707)   058F CD 75 06    		 CALL RS_RX	;
708)   0592 67          		 LD H, A	;
709)   0593 CD 75 06    		 CALL RS_RX        ;BC HAS TOTAL DATA TO BE SEND	;BC HAS TOTAL DATA TO BE SEND
710)   0596 4F          		 LD C, A	;
711)   0597 CD 75 06    		 CALL RS_RX	;
712)   059A 47          		 LD B, A	;
714)   059B 11 BD F0    		 LD DE, PRGEX        ;SAVE TO PRGEX THE PROG EXEC ADDR=HL	;SAVE TO PRGEX THE PROG EXEC ADDR=HL
715)   059E 7D          		 LD A, L	;
716)   059F 12          		 LD (DE), A	;
717)   05A0 13          		 INC DE	;
718)   05A1 7C          		 LD A, H	;
719)   05A2 12          		 LD (DE), A	;
721)   05A3 E5          		 PUSH HL	;
722)   05A4 CD 75 06    		NXB: CALL RS_RX	;
723)   05A7 77          		 LD (HL), A	;
724)   05A8 23          		 INC HL	;
725)   05A9 0B          		 DEC BC	;
726)   05AA 78          		 LD A, B	;
727)   05AB B1          		 OR C	;
728)   05AC 20 F6       		 JR NZ, NXB        ;LOOP ALL BYTES	;LOOP ALL BYTES
730)   05AE E1          		 POP HL	;
732)   05AF C9          		 RET	;
735)   05B0 CD 75 06    		DNLOD: CALL RS_RX        ;HL HAS RAM ADDRESS	;HL HAS RAM ADDRESS
736)   05B3 6F          		 LD L, A	;
737)   05B4 CD 75 06    		 CALL RS_RX	;
738)   05B7 67          		 LD H, A	;
739)   05B8 CD 75 06    		 CALL RS_RX        ;BC HAS TOTAL DATA TO BE SEND	;BC HAS TOTAL DATA TO BE SEND
740)   05BB 4F          		 LD C, A	;
741)   05BC CD 75 06    		 CALL RS_RX	;
742)   05BF 47          		 LD B, A	;
744)   05C0 7E          		NXB3: LD A, (HL)	;
745)   05C1 CD 3E 06    		 CALL RS_TX        ;SEND BYTE	;SEND BYTE
746)   05C4 23          		 INC HL	;
747)   05C5 0B          		 DEC BC	;
748)   05C6 78          		 LD A, B	;
749)   05C7 B1          		 OR C	;
750)   05C8 20 F6       		 JR NZ, NXB3        ;LOOP ALL BYTES   	;LOOP ALL BYTES
751)   05CA C9          		 RET	;
753)   05CB 55 3A 55 50 		STRMN: DEFM "U:UPL,X:RUN,J:DOWNL"	;
753)   05CF 4C 2C 58 3A 		STRMN: DEFM "U:UPL,X:RUN,J:DOWNL"	;
753)   05D3 52 55 4E 2C 		STRMN: DEFM "U:UPL,X:RUN,J:DOWNL"	;
753)   05D7 4A 3A 44 4F 		STRMN: DEFM "U:UPL,X:RUN,J:DOWNL"	;
753)   05DB 57 4E 4C    		STRMN: DEFM "U:UPL,X:RUN,J:DOWNL"	;
754)   05DE 0A 0D 00    		 DB 10,13,0	;
758)   05E1 7E          		@OS_PRMESSCRSFE: LD A,(HL)	;
759)   05E2 B7          		 OR A	;
760)   05E3 C8          		 RET Z	;
761)   05E4 CD 3E 06    		 CALL RS_TX	;
762)   05E7 18 F8       		 JR OS_PRMESSCRSFE	;
764)   05E9 CD 3E 06    		@OS_PRCHSCR: CALL RS_TX	;
765)   05EC C9          		 RET	;
771)   F000 00          		BLSTACKP DEFS 1	;
774)   F001 00 00 00 00 		 OSBANKS DEFS 8	;
774)   F005 00 00 00 00 		 OSBANKS DEFS 8	;
775)   F009 00          		 EXBANK DEFS 1	;
776)   F00A 00 00 00    		 NUMSTR: DEFS 3	;
777)   F00D 00 00 00 00 		 OSFNAME DEFS 14	;
777)   F011 00 00 00 00 		 OSFNAME DEFS 14	;
777)   F015 00 00 00 00 		 OSFNAME DEFS 14	;
777)   F019 00 00       		 OSFNAME DEFS 14	;
778)   F01B 00 00       		 FILEBTCNT DEFS 2 	;
780)   F01D 00 00 00 00 		 @BANKS  DEFS 8       ;8 PAGES FOR THE 8 BANKS 0..7	;8 PAGES FOR THE 8 BANKS 0..7
780)   F021 00 00 00 00 		 @BANKS  DEFS 8       ;8 PAGES FOR THE 8 BANKS 0..7	;8 PAGES FOR THE 8 BANKS 0..7
781)   F025 00 00 00 00 		 @TMPG   DEFS 4  ;TEMP PAGE FOR VIDEO VGA	;TEMP PAGE FOR VIDEO VGA
782)   F029 00 00 00 00 		 @PGSEM DEFS 4  ;PAGE SEMAPHORES TO KEEP TRACK OF PAGE CALLS	;PAGE SEMAPHORES TO KEEP TRACK OF PAGE CALLS
785)   F02D 00          		 @SERERR DEFS 1       ;	;
787)   F02E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F032 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F036 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F03A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F03E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F042 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F046 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F04A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F04E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F052 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F056 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F05A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
787)   F05E 00 00       		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
788)   F060 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
788)   F064 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
788)   F068 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
788)   F06C 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
788)   F070 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
788)   F074 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
788)   F078 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
788)   F07C 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
788)   F080 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
788)   F084 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
792)   F088 00          		 @SCRNST DEFS 1       ;SCREEN STATUS BIT 0 ON/OFF LCD,BIT 1 ON/OFF VGA	;SCREEN STATUS BIT 0 ON/OFF LCD, BIT 1 ON/OFF VGA
793)   F089 00          		 @VGAFCOL DEFS 1  ;VGA FORE COLOR	;VGA FORE COLOR
794)   F08A 00          		 @VGABCOL DEFS 1  ;VGA BACK COLOR	;VGA BACK COLOR
795)   F08B 00          		 @VGATX_X DEFS 1  ;VGA CURRENT X POS	;VGA CURRENT X POS
796)   F08C 00          		 @VGATX_Y DEFS 1  ;VGA CUR Y POS	;VGA CUR Y POS
797)   F08D 00          		 @VGAMAXX DEFS 1  ;MAX HORZ CHARS	;MAX HORZ CHARS
798)   F08E 00          		 @VGAMAXY DEFS 1  ;MAX VERT LINES	;MAX VERT LINES
799)   F08F 00          		 @VGATMPC DEFS 1  ;TMP CHAR FOR CURSOR	;TMP CHAR FOR CURSOR
800)   F090 00          		 @VGABUF DEFS 1  ;BUFFER TO WRITE-BIT 0 TO SELECT	;BUFFER TO WRITE - BIT 0 TO SELECT
801)   F091 00 00       		 @VGASTADR DEFS 2  ;START ADDRESS TO CALCULATE TEXT OUTPUT	;START ADDRESS TO CALCULATE TEXT OUTPUT
804)   F093 00 00 00 00 		 @B2DINV DEFS 8  ;BINARY NUMBER TO BE CONVERTED	;BINARY NUMBER TO BE CONVERTED
804)   F097 00 00 00 00 		 @B2DINV DEFS 8  ;BINARY NUMBER TO BE CONVERTED	;BINARY NUMBER TO BE CONVERTED
805)   F09B 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
805)   F09F 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
805)   F0A3 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
805)   F0A7 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
805)   F0AB 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
806)   F0AF 00          		 @B2DEND DEFS 1  ;0 FOR TERMINATE THE STRING	;0 FOR TERMINATE THE STRING
807)   F0B0 00 00       		 @LINESTR: DEFS 2 ;ADDRESS OF LINEBUF FOR PRINTING ON STRING	;ADDRESS OF LINEBUF FOR PRINTING ON STRING
808)   F0B2 00          		 @LINEPOS DEFS 1	;
809)   F0B3 00          		 @RNDseed DEFS 1  ;RANDOM SEED	;RANDOM SEED
810)   F0B4 00 00 00 00 		 @NUMBUF DEFS 7	;
810)   F0B8 00 00 00    		 @NUMBUF DEFS 7	;
811)   F0BB 00          		 @STRG_STAT DEFS 1	;
813)   F0BC 00          		 FILEBUFFER DEFS 1 ;ALL EXTRA SPACE TO BE USED FOR LOADING BOOT.INI ***THIS IS LAST***	;ALL EXTRA SPACE TO BE USED FOR LOADING BOOT.INI ***THIS IS LAST***
814)   F0BD 00 00       		 @PRGEX DEFS 2  ;PROGRAM EXECUTE ADDRESS	;PROGRAM EXECUTE ADDRESS
815)   F0BF 00 00 00 00 		 @DIRNM DEFS 20  ;DIRECTORY NAME	;DIRECTORY NAME
815)   F0C3 00 00 00 00 		 @DIRNM DEFS 20  ;DIRECTORY NAME	;DIRECTORY NAME
815)   F0C7 00 00 00 00 		 @DIRNM DEFS 20  ;DIRECTORY NAME	;DIRECTORY NAME
815)   F0CB 00 00 00 00 		 @DIRNM DEFS 20  ;DIRECTORY NAME	;DIRECTORY NAME
815)   F0CF 00 00 00 00 		 @DIRNM DEFS 20  ;DIRECTORY NAME	;DIRECTORY NAME
818)   05ED 00          		 NOP	;
 10)   05EE 21 1D F0    		INITMMU:       LD HL,BANKS	;
 11)   05F1 06 08       		               LD B,8	;
 12)   05F3 AF          		               XOR A	;
 13)   05F4 77          		INM_AGN:       LD (HL),A	;
 14)   05F5 3C          		               INC A	;
 15)   05F6 23          		 INC HL	;
 16)   05F7 10 FB       		               DJNZ INM_AGN	;
 17)   05F9 C9          		               RET                	;
 23)   05FA 4F          		PUTPGINBANK: LD C, A       ;SAVE PAGE	;SAVE PAGE
 24)   05FB 78          		 LD A, B                                                         ;BANK IN A	;BANK IN A
 25)   05FC FE 02       		 CP 2	;
 26)   05FE D8          		 RET C         ;BANK 0,1 WILL NEVER CHANGE	;BANK 0,1 WILL NEVER CHANGE
 27)   05FF FE 07       		 CP 7	;
 28)   0601 C8          		 RET Z         ;BANK 7 WILL NEVER CHANGE	;BANK 7 WILL NEVER CHANGE
 29)   0602 21 1D F0    		 LD HL, BANKS	;
 30)   0605 16 00       		 LD D, 0	;
 31)   0607 5F          		 LD E, A	;
 32)   0608 19          		 ADD HL, DE	;
 33)   0609 79          		 LD A, C        ;RESTORE PAGE	;RESTORE PAGE
 34)   060A 77          		 LD (HL), A        ;SAVE PG IN BANK B MEMORY	;SAVE PG IN BANK B MEMORY
 35)   060B 0E 00       		 LD C, DEVMMU	;
 36)   060D 58          		 LD E,B	;
 37)   060E CB 20       		 SLA B         ;SHIFT BANK TO A15..A13 FROM A2..A0 WE USE THESE PINS ON THE CPLD FOR BANK INPUT	;SHIFT BANK TO A15..A13 FROM A2..A0 WE USE THESE PINS ON THE CPLD FOR BANK INPUT
 38)   0610 CB 20       		 SLA B	;
 39)   0612 CB 20       		 SLA B	;
 40)   0614 CB 20       		 SLA B	;
 41)   0616 CB 20       		 SLA B         ;SET TO A15,A14,A13	;SET TO A15,A14,A13
 42)   0618 ED 79       		 OUT (C), A	;
 43)   061A 43          		 LD B,E	;
 44)   061B C9          		 RET	;
 49)   061C 21 1D F0    		GETPGINBANK:   LD HL,BANKS	;
 50)   061F 16 00       		               LD D,0	;
 51)   0621 58          		               LD E,B	;
 52)   0622 19          		               ADD HL,DE	;
 53)   0623 7E          		               LD A,(HL)	;
 54)   0624 C9          		               RET	;
 17)   0625 	            		 RBR EQU DEVSER+0      ;RECEIVER BUFFER REGISTER (READ ONLY) (DLAB = 0)	;RECEIVER BUFFER REGISTER (READ ONLY) (DLAB = 0)
 18)   0625 	            		 THR EQU DEVSER+0      ;TRANSMITER HOLDING REGISTER (WRITE ONLY) (DLAB = 0)	;TRANSMITER HOLDING REGISTER (WRITE ONLY) (DLAB = 0)
 19)   0625 	            		 IER EQU DEVSER+1      ;INTERRUPT ENABLE REGISTER (DLAB = 0)	;INTERRUPT ENABLE REGISTER (DLAB = 0)
 24)   0625 	            		 IIR EQU DEVSER+2      ;INTERRUPT IDENT. REGISTER (READ ONLY)	;INTERRUPT IDENT. REGISTER (READ ONLY)
 29)   0625 	            		 FCR EQU DEVSER+2      ;FIFO CONTROL REGISTER (WRITE ONLY)	;FIFO CONTROL REGISTER (WRITE ONLY)
 37)   0625 	            		 LCR EQU DEVSER+3      ;LINE CONTROL REGISTER	;LINE CONTROL REGISTER
 45)   0625 	            		 MCR EQU DEVSER+4      ;MODEM CONTROL REGISTER	;MODEM CONTROL REGISTER
 46)   0625 	            		 LSR EQU DEVSER+5      ;LINE STATUS REGISTER	;LINE STATUS REGISTER
 55)   0625 	            		 MSR EQU DEVSER+6      ;MODEM STATUS REGISTER	;MODEM STATUS REGISTER
 56)   0625 	            		 SCR EQU DEVSER+7      ;SCRATCH REGISTER	;SCRATCH REGISTER
 57)   0625 	            		 DLL EQU DEVSER+0      ;DIVISOR LATCH (LEAST SIGNIFICANT BYTE) (DLAB = 1)	;DIVISOR LATCH (LEAST SIGNIFICANT BYTE) (DLAB = 1)
 58)   0625 	            		 DLM EQU DEVSER+1      ;DIVISOR LATCH (MOST SIGNIFICANT BYTE) (DLAB = 1)	;DIVISOR LATCH (MOST SIGNIFICANT BYTE) (DLAB = 1)
 64)   0625 F5          		RS_INI: PUSH AF	;
 65)   0626 3E 80       		 LD A, $80        ; Mask to set DLAB on	; Mask to set DLAB on
 66)   0628 D3 1B       		 OUT (LCR), A        ; Send to LINe Control Register	; Send to LINe Control Register
 75)   062A F1          		 POP AF	;
 76)   062B D3 18       		 OUT (DLL), A        ; Set LSB of divisor	; Set LSB of divisor
 77)   062D 3E 00       		 LD A, 00        ; This will be the MSB of the divisior	; This will be the MSB of the divisior
 78)   062F D3 19       		 OUT (DLM), A        ; Send to the MSB register	; Send to the MSB register
 79)   0631 3E 03       		 LD A, $03        ; 8 bits, 1 stop, no parity (and clear DLAB)	; 8 bits, 1 stop, no parity (and clear DLAB)
 80)   0633 D3 1B       		 OUT (LCR), A        ; Write new value to LCR	; Write new value to LCR
 82)   0635 3E 00       		 LD A, 0	;
 83)   0637 D3 1A       		 OUT (FCR), A        ;//was commented	;//was commented
 84)   0639 3E 00       		 LD A, $00        ; 5 A=0 Disable all INterrupts	; 5 A=0 Disable all INterrupts
 85)   063B D3 19       		 OUT (IER), A        ; Send to INterrupt Enable Register	; Send to INterrupt Enable Register
 86)   063D C9          		 RET	;
 89)   063E CD 44 06    		RS_TX: CALL RSTXRD	;
 90)   0641 D3 18       		 OUT (THR), A	;
 92)   0643 C9          		 RET	;
 95)   0644 F5          		RSTXRD: PUSH AF	;
 96)   0645 DB 1D       		RSTXLP: IN A, (LSR)        ; fetch the control register	; fetch the control register
 97)   0647 CB 6F       		 BIT 5, A        ; bit will be set if UART is ready	; bit will be set if UART is ready
 98)   0649 28 FA       		 JR Z, RSTXLP	;
 99)   064B F1          		 POP AF	;
100)   064C C9          		 RET	;
104)   064D 7E          		RS_TXT: LD A, (HL)	;
105)   064E 23          		 INC HL	;
106)   064F FE 00       		 CP 0	;
107)   0651 C8          		 RET Z	;
108)   0652 CD 3E 06    		 CALL RS_TX	;
109)   0655 18 F6       		 JR RS_TXT	;
113)   0657 E5          		RS_MESG: PUSH HL	;
114)   0658 C5          		 PUSH BC	;
115)   0659 D5          		 PUSH DE	;
116)   065A F5          		 PUSH AF	;
117)   065B 21 09 00    		 LD HL,9 ;POINTS TO RET ADDRESS +10 FROM SP = OUR STRING	;POINTS TO RET ADDRESS +10 FROM SP = OUR STRING
118)   065E 39          		 ADD HL,SP	;
119)   065F 46          		 LD B,(HL)    	;
120)   0660 2B          		 DEC HL	;
121)   0661 4E          		 LD C,(HL)	;
122)   0662 60          		 LD H,B	;
123)   0663 69          		 LD L,C	;
124)   0664 CD 4D 06    		 CALL RS_TXT	;
125)   0667 F1          		 POP AF	;
126)   0668 D1          		 POP DE	;
127)   0669 44          		 LD B,H  ;NEW RET ADDRESS	;NEW RET ADDRESS
128)   066A 4D          		 LD C,L	;
129)   066B 21 05 00    		 LD HL,5 ;POINTS TO RET ADDRESS +6 FROM SP	;POINTS TO RET ADDRESS +6 FROM SP
130)   066E 39          		 ADD HL,SP  	;
131)   066F 70          		 LD (HL),B	;
132)   0670 2B          		 DEC HL	;
133)   0671 71          		 LD (HL),C  	;
134)   0672 C1          		 POP BC	;
135)   0673 E1          		 POP HL	;
136)   0674 C9          		 RET 	;
143)   0675 ED 57       		RS_RX: LD A,I        ;SETS PV IF INTS ARE ENABLED	;SETS PV IF INTS ARE ENABLED
144)   0677 F5          		 PUSH AF	;
145)   0678 D1          		 POP DE	;
146)   0679 F3          		 DI	;
147)   067A 3E 01       		 LD A, 1        ;ready to receive SIGNAL DSR 1	;ready to receive SIGNAL DSR 1
148)   067C D3 1C       		 OUT (MCR), A	;
149)   067E CD 9C 06    		 CALL RSRXRD	;
150)   0681 AF          		RS_GTCH: XOR A        ;NOT ready to receive SIGNAL DSR 0	;NOT ready to receive SIGNAL DSR 0
151)   0682 D3 1C       		 OUT (MCR), A	;
153)   0684 DB 18       		 IN A, (RBR)  	;
154)   0686 D5          		 PUSH DE	;
155)   0687 57          		 LD D,A	;
156)   0688 F1          		 POP AF	;
157)   0689 7A          		 LD A,D	;
158)   068A E0          		 RET PO  	;
159)   068B FB          		 EI	;
160)   068C C9          		 RET	;
162)   068D 3E 01       		RS_RXNW: LD A, 1       ;ready to receive SIGNAL DSR 1	;ready to receive SIGNAL DSR 1
163)   068F D3 1C       		 OUT (MCR), A	;
164)   0691 DB 1D       		 IN A, (LSR)        ; fetch the conrtol register	; fetch the conrtol register
165)   0693 CB 47       		 BIT 0, A	;
166)   0695 28 03       		 JR Z, RS_NOCHAR	;
167)   0697 F3          		 DI	;
168)   0698 18 E7       		 JR RS_GTCH	;
169)   069A AF          		RS_NOCHAR: XOR A        ;RETURN ZERO	;RETURN ZERO
170)   069B C9          		 RET	;
178)   069C F5          		 PUSH AF	;
184)   069D DB 1D       		 IN A, (LSR)        ; fetch the control register	; fetch the control register
185)   069F CB 47       		 BIT 0, A        ; bit will be set if UART has data	; bit will be set if UART has data
186)   06A1 28 FA       		 JR Z, RSRXLP	;
188)   06A3 F1          		 POP AF	;
190)   06A4 C9          		 RET	;
194)   06A5 DB 1D       		RS_KEYRD: IN A, (LSR)       ; fetch the conrtol register	; fetch the conrtol register
195)   06A7 CB 47       		 BIT 0, A        ; bit will be set if UART has data	; bit will be set if UART has data
196)   06A9 C9          		 RET	;
198)   06AA F5          		SHLCD: PUSH AF	;
200)   06AB F1          		 POP AF	;
202)   06AC C9          		 RET	;
204)   06AD F5          		RS_NEWLINE: PUSH AF	;
205)   06AE 3E 0D       		 LD A,13	;
206)   06B0 CD 3E 06    		 CALL RS_TX	;
207)   06B3 3E 0A       		 LD A,10	;
208)   06B5 CD 3E 06    		 CALL RS_TX	;
209)   06B8 F1          		 POP AF	;
210)   06B9 C9          		 RET  	;
213)   06BA F5          		CHKERR: PUSH AF	;
214)   06BB E5          		 PUSH HL	;
215)   06BC C5          		 PUSH BC	;
216)   06BD DB 1D       		 IN A, (LSR)        ;FETCH LINE STATUS REGISTER	;FETCH LINE STATUS REGISTER
217)   06BF CB 67       		 BIT 4, A	;
218)   06C1 28 04       		 JR Z, LBLPE	;
219)   06C3 3E 42       		 LD A, 'B'       ;$20  ;BREAK	;$20  ;BREAK
220)   06C5 18 1A       		 JR EXIT	;
221)   06C7 CB 57       		LBLPE: BIT 2, A	;
222)   06C9 28 04       		 JR Z, LBLFE	;
223)   06CB 3E 50       		 LD A, 'P'       ;$40  ;PARITY	;$40  ;PARITY
224)   06CD 18 12       		 JR EXIT	;
225)   06CF CB 5F       		LBLFE: BIT 3, A	;
226)   06D1 28 04       		 JR Z, LBLOE	;
227)   06D3 3E 46       		 LD A, 'F'       ;$60  ;FRAME	;$60  ;FRAME
228)   06D5 18 0A       		 JR EXIT	;
229)   06D7 CB 4F       		LBLOE: BIT 1, A	;
230)   06D9 28 04       		 JR Z, LBLNE	;
231)   06DB 3E 4F       		 LD A, 'O'        ;$80  ;OVERRUN	;$80  ;OVERRUN
232)   06DD 18 02       		 JR EXIT	;
233)   06DF 3E 4E       		LBLNE: LD A, 'N'        ;NO ERROR	;NO ERROR
234)   06E1 21 2D F0    		EXIT: LD HL, SERERR	;
235)   06E4 77          		 LD (HL), A	;
237)   06E5 C1          		 POP BC	;
238)   06E6 E1          		 POP HL	;
239)   06E7 F1          		 POP AF	;
240)   06E8 C9          		 RET	;
  3)   06E9 	            		INT376CMD EQU DEV376+1	;
  4)   06E9 	            		INT376DAT EQU DEV376	;
 90)   06E9 CD BD 07    		CH376_GETDATA: CALL CH376_DATARD	;
 91)   06EC FE 00       		 CP 0	;
 92)   06EE C8          		 RET Z   ;NO DATA AVAILABLE	;NO DATA AVAILABLE
 99)   06EF F5          		               PUSH AF	;
100)   06F0 11 2E F0    		 LD DE,USBBUF	;
101)   06F3 47          		 LD B,A	;
102)   06F4 CD BD 07    		UDC_NXT1: CALL CH376_DATARD	;
104)   06F7 12          		 LD (DE),A	;
105)   06F8 13          		 INC DE	;
109)   06F9 10 F9       		 DJNZ UDC_NXT1 	;
110)   06FB F1          		               POP AF	;
111)   06FC C9          		 RET	;
114)   06FD F5          		DISKERROR: PUSH AF	;
115)   06FE CD 57 06    		 CALL RS_MESG	;
116)   0701 46 41 54 41 		 DEFM "FATAL ERROR:" 	;
116)   0705 4C 20 45 52 		 DEFM "FATAL ERROR:" 	;
116)   0709 52 4F 52 3A 		 DEFM "FATAL ERROR:" 	;
117)   070D 00          		 DB 0  	;
118)   070E F1          		 POP AF	;
119)   070F CD E8 16    		 CALL PRINTNUM	;
120)   0712 21 1E 07    		 LD HL,ERR_PART	;
121)   0715 FE 92       		 CP ERR_TYPE_ERROR	;
122)   0717 28 01       		 JR Z,PRNMES	;
123)   0719 C9          		 RET	;
124)   071A CD 4D 06    		PRNMES: CALL RS_TXT 	;
125)   071D C9          		 RET	;
127)   071E 50 41 52 54 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
127)   0722 49 54 49 4F 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
127)   0726 4E 2E 4E 4F 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
127)   072A 54 2E 53 55 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
127)   072E 50 50 4F 52 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
127)   0732 54 45 44 21 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
127)   0736 21 21       		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
128)   0738 0A 0D 00    		 DB 10,13,0	;
138)   073B E5          		CH376_WTCMDEND: PUSH HL	;
139)   073C CD 49 07    		 CALL CH376_WAITINT	;
140)   073F E1          		 POP HL	;
141)   0740 C0          		               RET NZ	;
142)   0741 D8          		 RET C	;
143)   0742 AF          		 XOR A	;
144)   0743 CD 68 07    		 CALL CH376_GETSTAT	;
145)   0746 FE 14       		 CP USB_INT_SUCCESS  	;
146)   0748 C9          		 RET  ;NZ FLAG MEANS ERROR USUALLY	;NZ FLAG MEANS ERROR USUALLY
152)   0749 AF          		CH376_WAITINT: XOR A	;
153)   074A 01 32 00    		 LD BC,50	;
154)   074D CD BA 07    		C3AGN2: CALL CH376_INSTAT	;
155)   0750 CB 7F       		 BIT 7,A	;
156)   0752 C8          		 RET Z	;
157)   0753 F5          		 PUSH AF	;
158)   0754 C5          		 PUSH BC	;
159)   0755 06 14       		 LD B,20	;
160)   0757 CD 83 14    		 CALL DELAYMICRO	;
161)   075A C1          		 POP BC	;
162)   075B F1          		 POP AF	;
163)   075C 0B          		 DEC BC	;
164)   075D 5F          		 LD E,A	;
165)   075E 78          		 LD A,B	;
166)   075F B1          		 OR C	;
167)   0760 7B          		 LD A,E	;
168)   0761 20 EA       		 JR NZ, C3AGN2  	;
173)   0763 37          		 SCF ;TIMEOUT       	;TIMEOUT
174)   0764 06 02       		 LD B,2	;
175)   0766 05          		 DEC B  ;NZ FLAG	;NZ FLAG
176)   0767 C9          		 RET	;
178)   0768 3E 22       		CH376_GETSTAT: LD A,CMD_GET_STATUS	;
179)   076A CD AA 07    		 CALL CH376_COMMD	;
180)   076D CD BD 07    		 CALL CH376_DATARD	;
181)   0770 C9          		 RET	;
189)   0771 01 C4 09    		CH376_CHOK: LD BC,2500	;
190)   0774 CD BA 07    		C3AGN: CALL CH376_INSTAT	;
191)   0777 CB 67       		 BIT 4,A   ;CHECK BUSY	;CHECK BUSY
192)   0779 C8          		 RET Z   	;
193)   077A C5          		 PUSH BC	;
194)   077B F5          		 PUSH AF	;
195)   077C 06 32       		 LD B,50	;
196)   077E CD 83 14    		 CALL DELAYMICRO	;
197)   0781 F1          		 POP AF	;
198)   0782 C1          		 POP BC	;
199)   0783 0B          		 DEC BC	;
200)   0784 5F          		 LD E,A	;
201)   0785 78          		 LD A,B	;
202)   0786 B1          		 OR C	;
203)   0787 7B          		 LD A,E	;
204)   0788 20 EA       		 JR NZ,C3AGN	;
205)   078A F5          		 PUSH AF  	;
206)   078B CD E8 16    		 CALL PRINTNUM  	;
207)   078E F1          		 POP AF	;
208)   078F CD 57 06    		 CALL RS_MESG	;
209)   0792 2A 2A 2A 43 		 DEFM "***CMD TIMEOUT***"	;
209)   0796 4D 44 20 54 		 DEFM "***CMD TIMEOUT***"	;
209)   079A 49 4D 45 4F 		 DEFM "***CMD TIMEOUT***"	;
209)   079E 55 54 2A 2A 		 DEFM "***CMD TIMEOUT***"	;
209)   07A2 2A          		 DEFM "***CMD TIMEOUT***"	;
210)   07A3 0A 0D 00    		 DB 10,13,0       	;
211)   07A6 06 02       		 LD B,2	;
212)   07A8 05          		 DEC B  ;NZ FLAG	;NZ FLAG
213)   07A9 C9          		 RET	;
219)   07AA D3 31       		CH376_COMMD: OUT (INT376CMD),A	;
220)   07AC 18 02       		 JR C3D_CONT	;
223)   07AE D3 30       		CH376_DATAWR: OUT (INT376DAT),A 	;
224)   07B0 C5          		C3D_CONT: PUSH BC	;
225)   07B1 D5          		 PUSH DE	;
226)   07B2 E5          		 PUSH HL	;
227)   07B3 CD 71 07    		 CALL CH376_CHOK  ;CHECK NOT BUSY	;CHECK NOT BUSY
228)   07B6 E1          		 POP HL	;
229)   07B7 D1          		 POP DE	;
230)   07B8 C1          		 POP BC	;
231)   07B9 C9          		 RET	;
233)   07BA DB 31       		CH376_INSTAT: IN A,(INT376CMD)	;
235)   07BC C9          		 RET	;
238)   07BD DB 30       		CH376_DATARD: IN A,(INT376DAT)	;
243)   07BF C9          		 RET	;
246)   07C0 3E 01       		CH376_VERSION: LD A,CMD_GET_IC_VER 	;
247)   07C2 CD AA 07    		 CALL CH376_COMMD	;
248)   07C5 CD BD 07    		 CALL CH376_DATARD	;
249)   07C8 E6 0F       		 AND 00001111B	;
250)   07CA C9          		               RET	;
252)   07CB 3E 05       		CH376_INIT:    LD A,CMD_RESET_ALL	;
253)   07CD CD AA 07    		 CALL CH376_COMMD  	;
254)   07D0 3E 06       		 LD A,CMD_CHECK_EXIST 	;
255)   07D2 CD AA 07    		 CALL CH376_COMMD	;
256)   07D5 3E 57       		 LD A,87	;
257)   07D7 CD AE 07    		 CALL CH376_DATAWR	;
258)   07DA CD BD 07    		 CALL CH376_DATARD	;
259)   07DD FE A8       		 CP 255 - 87 	;
260)   07DF C9          		               RET               	;
264)   07E0 F5          		CH376_SETUSB: PUSH AF	;
265)   07E1 3E 15       		               LD A,CMD_SETUSB_MODE	;
266)   07E3 CD AA 07    		 CALL CH376_COMMD	;
267)   07E6 F1          		               POP AF	;
268)   07E7 CD AE 07    		 CALL CH376_DATAWR	;
270)   07EA 06 14       		 LD B,20	;
271)   07EC CD 83 14    		 CALL DELAYMICRO     ;WAIT A BIT	;WAIT A BIT
276)   07EF CD 68 07    		 CALL CH376_GETSTAT	;
277)   07F2 FE 15       		 CP USB_INT_CONNECT	;
278)   07F4 C8          		 RET Z	;
280)   07F5 F5          		 PUSH AF	;
281)   07F6 CD 57 06    		 CALL CH376_ERROR	;
282)   07F9 45 52 52 3A 		 DEFM "ERR: SETUSBMODE"	;
282)   07FD 20 53 45 54 		 DEFM "ERR: SETUSBMODE"	;
282)   0801 55 53 42 4D 		 DEFM "ERR: SETUSBMODE"	;
282)   0805 4F 44 45    		 DEFM "ERR: SETUSBMODE"	;
283)   0808 0A 0D 00    		 DB 10,13,0	;
284)   080B F1          		 POP AF	;
285)   080C CD E8 16    		 CALL PRINTNUM	;
286)   080F C9          		               RET	;
291)   0810 3E 30       		CH376_CONNECT: LD A, CMD_DISK_CONNECT	;
292)   0812 CD AA 07    		     CALL CH376_COMMD	;
293)   0815 CD 3B 07    		 CALL CH376_WTCMDEND	;
295)   0818 D8          		 RET C ;TIMEOUT	;TIMEOUT
296)   0819 C8          		 RET Z ;CONNECT OK	;CONNECT OK
301)   081A C9          		 RET ;NZ HERE	;NZ HERE
311)   081B 3E 31       		CH376_MOUNT:   LD A,CMD_DISK_MOUNT  	;
312)   081D CD AA 07    		 CALL CH376_COMMD	;
313)   0820 CD 3B 07    		 CALL CH376_WTCMDEND  	;
314)   0823 C9          		 RET	;
319)   0824 06 0A       		CH376_MOUNTDEV:   LD B,10  ;TRY TO MOUNT 10 TIMES	;TRY TO MOUNT 10 TIMES
320)   0826 C5          		CM_AGN1: PUSH BC	;
321)   0827 CD E0 07    		 CALL CH376_SETUSB	;
322)   082A 20 10       		 JR NZ,CM_ERROR	;
323)   082C CD 10 08    		 CALL CH376_CONNECT	;
324)   082F 20 0B       		 JR NZ,CM_ERROR	;
325)   0831 3E 31       		        LD A,CMD_DISK_MOUNT  	;
326)   0833 CD AA 07    		 CALL CH376_COMMD	;
327)   0836 CD 3B 07    		 CALL CH376_WTCMDEND	;
328)   0839 C1          		 POP BC	;
329)   083A C8          		 RET Z	;
330)   083B C5          		 PUSH BC	;
331)   083C 06 64       		CM_ERROR: LD B,100	;
332)   083E CD 98 14    		 CALL DELAYMILI     ;WAIT A BIT	;WAIT A BIT
333)   0841 C1          		 POP BC	;
334)   0842 10 E2       		 DJNZ CM_AGN1  	;
335)   0844 06 02       		 LD B,2	;
336)   0846 05          		 DEC B  ;NZ  	;NZ
337)   0847 F5          		 PUSH AF	;
338)   0848 CD 57 06    		 CALL CH376_ERROR	;
339)   084B 45 52 52 3A 		 DEFM "ERR: MOUNT DISK"	;
339)   084F 20 4D 4F 55 		 DEFM "ERR: MOUNT DISK"	;
339)   0853 4E 54 20 44 		 DEFM "ERR: MOUNT DISK"	;
339)   0857 49 53 4B    		 DEFM "ERR: MOUNT DISK"	;
340)   085A 0A 0D 00    		 DB 10,13,0	;
341)   085D F1          		     POP AF	;
342)   085E C9          		               RET	;
345)   085F 7E          		CH376_WRSTRING: LD A,(HL)	;
351)   0860 CD AE 07    		 CALL CH376_DATAWR	;
352)   0863 C0          		 RET NZ	;
353)   0864 7E          		 LD A,(HL)	;
354)   0865 B7          		 OR A	;
355)   0866 C8          		 RET Z	;
356)   0867 23          		 INC HL	;
357)   0868 18 F5       		 JR CH376_WRSTRING	;
 31)   086A 	            		@CH376_ERROR EQU RS_MESG	;
 41)   086A 57          		STRG_INIT: LD D,A	;
 42)   086B AF          		 XOR A  	;
 43)   086C 32 BB F0    		 LD (STRG_STAT),A  ;NOT CONNECTED, NOT EXISTS	;NOT CONNECTED, NOT EXISTS
 44)   086F CD CB 07    		 CALL CH376_INIT	;
 45)   0872 20 06       		 JR NZ,INIERR	;
 46)   0874 7A          		 LD A,D   ;SELECT USB DEVICE 3 FOR SDCARD, 6 FOR FLASH	;SELECT USB DEVICE 3 FOR SDCARD, 6 FOR FLASH
 47)   0875 CD E0 07    		 CALL CH376_SETUSB	;
 48)   0878 28 03       		 JR Z,INIOK	;
 49)   087A 3E 00       		INIERR: LD A,0  	;
 50)   087C C9          		 RET	;
 51)   087D CD C0 07    		INIOK: CALL CH376_VERSION	;
 52)   0880 BF          		 CP A  ;SET ZF	;SET ZF
 53)   0881 3E 80       		 LD A, $80  ;BIT 7 MEANS EXISTS	;BIT 7 MEANS EXISTS
 54)   0883 32 BB F0    		 LD (STRG_STAT),A  ;	;
 55)   0886 C9          		 RET	;
 58)   0887 3A BB F0    		STRG_EXISTS: LD A,(STRG_STAT)	;
 59)   088A CB 7F       		 BIT 7,A	;
 60)   088C C9          		 RET	;
 66)   088D CD 87 08    		STRG_CHECK: CALL STRG_EXISTS	;
 67)   0890 37          		 SCF	;
 68)   0891 C8          		 RET Z    ;Z MEANS NOT EXISTS	;Z MEANS NOT EXISTS
 69)   0892 06 05       		 LD B,5	;
 70)   0894 CD 10 08    		SC_AGN1: CALL CH376_CONNECT 	;
 71)   0897 28 06       		 JR Z,DOCON	;
 72)   0899 30 1C       		 JR NC,DODISC	;
 73)   089B 10 F7       		 DJNZ SC_AGN1    	;
 77)   089D AF          		 XOR A   	;
 78)   089E C9          		 RET   ;TIMEOUT	;TIMEOUT
 80)   089F AF          		DOCON: XOR A    ;CLCF	;CLCF
 81)   08A0 3A BB F0    		 LD A,(STRG_STAT)	;
 82)   08A3 CB 47       		 BIT 0,A	;
 83)   08A5 C0          		 RET NZ    ;ALREADY MOUNTED THE DRIVE	;ALREADY MOUNTED THE DRIVE
 87)   08A6 CD 1B 08    		 CALL CH376_MOUNT   ;MOUNT THE DRIVE	;MOUNT THE DRIVE
 88)   08A9 20 0C       		 JR NZ, DONOMNT	;
 92)   08AB 3A BB F0    		 LD A,(STRG_STAT)	;
 93)   08AE CB C7       		 SET 0,A	;
 94)   08B0 32 BB F0    		 LD (STRG_STAT),A	;
 95)   08B3 AF          		 XOR A    ;CLEAR CARRY FLAG MEANS WE ARE OK	;CLEAR CARRY FLAG MEANS WE ARE OK
 96)   08B4 3E 01       		 LD A,1    ;A=1 IS JUST CONNECTED	;A=1 IS JUST CONNECTED
 97)   08B6 C9          		 RET	;
105)   08B7 AF          		 XOR A 	;
106)   08B8 3A BB F0    		 LD A,(STRG_STAT)  	;
107)   08BB CB 47       		 BIT 0,A	;
108)   08BD C8          		 RET Z    ;ALREADY DISCONNECTED	;ALREADY DISCONNECTED
109)   08BE CB 87       		 RES 0,A    ;SET BIT 0 TO 0=DISCONNECTED	;SET BIT 0 TO 0=DISCONNECTED
110)   08C0 32 BB F0    		 LD (STRG_STAT),A  	;
111)   08C3 3E 02       		 LD A,2    ;A=2 IS JUST DISCONNECTED	;A=2 IS JUST DISCONNECTED
112)   08C5 C9          		 RET	;
118)   08C6 C3 24 08    		STRG_OPENCRD:  JP CH376_MOUNTDEV  	;
121)   08C9 2A 00       		SDIRTP  DEFB '*',0	;
123)   08CB CD FD 08    		STRG_DIRLIST: CALL STRG_OPENCDIR ;OPEN CURRENT DIR	;OPEN CURRENT DIR
124)   08CE 21 C9 08    		 LD HL,SDIRTP	;
125)   08D1 CD 76 09    		 CALL STRG_OPENFD	;
126)   08D4 C8          		DL_NXTFILE: RET Z   ;NO  MORE FILES	;NO  MORE FILES
127)   08D5 3E 27       		 LD A,CMD_RDUSB_DATA0	;
128)   08D7 CD AA 07    		 CALL CH376_COMMD	;
129)   08DA CD E9 06    		 CALL CH376_GETDATA ;DATA ON USBBUF A=BYTES TO READ	;DATA ON USBBUF A=BYTES TO READ
130)   08DD 3E 00       		 LD A,0	;
131)   08DF 12          		 LD (DE),A   ;ZT STRING	;ZT STRING
133)   08E0 21 2E F0    		 LD HL,USBBUF	;
134)   08E3 CD E1 05    		 CALL OS_PRMESSCRSFE	;
135)   08E6 3E 0D       		 LD A,$0D	;
136)   08E8 CD E9 05    		 CALL OS_PRCHSCR	;
138)   08EB 3E 33       		 LD A, CMD_FILEENUM_GO	;
139)   08ED CD AA 07    		 CALL CH376_COMMD	;
140)   08F0 CD 3B 07    		 CALL CH376_WTCMDEND	;
141)   08F3 FE 42       		 CP ERR_MISS_FILE	;
142)   08F5 18 DD       		 JR DL_NXTFILE	;
146)   08F7 7E          		NEXTDIR: LD A,(HL)	;
147)   08F8 23          		 INC HL	;
148)   08F9 B7          		 OR A	;
149)   08FA C8          		 RET Z	;
150)   08FB 18 FA       		 JR NEXTDIR	;
156)   08FD E5          		STRG_OPENCDIR: PUSH HL	;
157)   08FE D5          		 PUSH DE	;
158)   08FF C5          		 PUSH BC  	;
159)   0900 21 BF F0    		 LD HL,DIRNM	;
160)   0903 CD 0A 09    		 CALL STRG_OPENCDIR2	;
161)   0906 C1          		        POP BC	;
162)   0907 D1          		 POP DE	;
163)   0908 E1          		 POP HL	;
164)   0909 C9          		 RET	;
166)   090A 7E          		STRG_OPENCDIR2: LD A,(HL)	;
167)   090B B7          		 OR A	;
168)   090C C8          		 RET Z  ;WHEN ZERO MEANS NO MORE DIR TO OPEN	;WHEN ZERO MEANS NO MORE DIR TO OPEN
169)   090D E5          		 PUSH HL	;
170)   090E CD 76 09    		 CALL STRG_OPENFD	;
171)   0911 E1          		 POP HL	;
172)   0912 D8          		 RET C  ;ERROR	;ERROR
173)   0913 37          		 SCF	;
174)   0914 3E 96       		 LD A,150 ;MISSING FILENAME	;MISSING FILENAME
175)   0916 C8          		 RET Z  ;FILE MISSING	;FILE MISSING
177)   0917 CD F7 08    		 CALL NEXTDIR	;
178)   091A 18 EE       		 JR STRG_OPENCDIR2	;
182)   091C E5          		STRG_DIRNMCHG: PUSH HL 	;
183)   091D 7E          		 LD A,(HL)	;
184)   091E FE 2F       		 CP '/'	;
185)   0920 28 0A       		 JR Z,DNC_RESET	;
186)   0922 FE 2E       		 CP '.'	;
187)   0924 20 2D       		 JR NZ, DNC_ADD	;
188)   0926 FE 2E       		 CP '.'	;
189)   0928 28 0F       		 JR Z,DNC_RMV	;
190)   092A E1          		 POP HL	;
191)   092B C9          		 RET ;DO NOTHING IF . OR .\ OR .<x>	;DO NOTHING IF . OR .\ OR .<x>
192)   092C 21 BF F0    		DNC_RESET: LD HL,DIRNM	;
193)   092F 36 2F       		 LD (HL),'/'	;
194)   0931 23          		 INC HL	;
195)   0932 36 00       		 LD (HL),0	;
196)   0934 23          		 INC HL	;
197)   0935 36 00       		 LD (HL),0	;
198)   0937 E1          		 POP HL	;
199)   0938 C9          		 RET	;
202)   0939 21 BF F0    		DNC_RMV: LD HL,DIRNM	;
203)   093C CD F7 08    		 CALL NEXTDIR	;
204)   093F 7E          		 LD A,(HL)	;
205)   0940 B7          		 OR A	;
206)   0941 EB          		 EX DE,HL ;DE THE NEXT DIR	;DE THE NEXT DIR
207)   0942 E1          		 POP HL	;
208)   0943 C8          		 RET Z ;RET IF WE ARE ON 1ST DIRECTORY  	;RET IF WE ARE ON 1ST DIRECTORY
209)   0944 E5          		 PUSH HL	;
210)   0945 EB          		 EX DE,HL ;HL THE NEXT DIR	;HL THE NEXT DIR
211)   0946 44          		RMV_NXT: LD B,H	;
212)   0947 4D          		 LD C,L	;
213)   0948 CD F7 08    		 CALL NEXTDIR	;
214)   094B 7E          		 LD A,(HL)	;
215)   094C B7          		 OR A	;
216)   094D 20 F7       		 JR NZ,RMV_NXT ;GO TO NEXT DIR 	;GO TO NEXT DIR
219)   094F AF          		 XOR A	;
220)   0950 02          		 LD (BC),A	;
221)   0951 E1          		 POP HL	;
222)   0952 C9          		 RET	;
224)   0953 EB          		DNC_ADD: EX DE,HL ;DE THE NEW FILE	;DE THE NEW FILE
225)   0954 21 BF F0    		 LD HL,DIRNM	;
226)   0957 CD F7 08    		ADDNXT: CALL NEXTDIR	;
227)   095A 7E          		 LD A,(HL)	;
228)   095B B7          		 OR A	;
229)   095C 20 F9       		 JR NZ,ADDNXT	;
231)   095E EB          		 EX DE,HL	;
233)   095F 7E          		ADDNXT2: LD A,(HL)	;
234)   0960 12          		 LD (DE),A	;
235)   0961 23          		 INC HL	;
236)   0962 13          		 INC DE	;
237)   0963 B7          		 OR A	;
238)   0964 20 F9       		 JR NZ,ADDNXT2	;
240)   0966 EB          		 EX DE,HL	;
241)   0967 36 00       		 LD (HL),0 ;SIGNAL END OF DIRECTORIES WITH A SECOND ZERO	;SIGNAL END OF DIRECTORIES WITH A SECOND ZERO
242)   0969 E1          		 POP HL	;
243)   096A C9          		 RET	;
247)   096B F5          		TEMPPRMSG: PUSH AF	;
248)   096C CD E1 05    		 CALL OS_PRMESSCR	;
249)   096F 3E 0A       		 LD A,$0A	;
250)   0971 CD E9 05    		 CALL OS_PRCHSCR	;
251)   0974 F1          		 POP AF	;
252)   0975 C9          		 RET	;
261)   0976 E5          		STRG_DIRCHG: PUSH HL	;
265)   0977 3E 2F       		 LD A, CMD_SETFILENAME	;
266)   0979 CD AA 07    		     CALL CH376_COMMD  	;
267)   097C CD 5F 08    		     CALL CH376_WRSTRING	;
268)   097F 20 0E       		 JR NZ,DC_WSERR  	;
269)   0981 3E 32       		 LD A, CMD_FILE_OPEN	;
270)   0983 CD AA 07    		 CALL CH376_COMMD	;
271)   0986 CD 3B 07    		 CALL CH376_WTCMDEND   	;
272)   0989 E1          		 POP HL	;
273)   098A FE 42       		 CP ERR_MISS_FILE	;
274)   098C C8          		 RET Z	;
275)   098D B7          		 OR A  ;CLEAR CARRY	;CLEAR CARRY
276)   098E C9          		 RET	;
278)   098F E1          		DC_WSERR: POP HL	;
279)   0990 37          		 SCF	;
280)   0991 C9          		 RET  	;
282)   0992 C9          		STRG_TPFILE: RET	;
283)   0993 C9          		STRG_GETPOS: RET	;
287)   0994 D5          		STRG_SETPOS16: PUSH DE	;
288)   0995 11 00 00    		 LD DE,0	;
289)   0998 CD 9D 09    		 CALL STRG_SETPOS 	;
290)   099B D1          		 POP DE	;
291)   099C C9          		 RET	;
293)   099D 3E 39       		STRG_SETPOS: LD A,CMD_BYTE_LOCATE	;
294)   099F CD AA 07    		 CALL CH376_COMMD	;
295)   09A2 79          		 LD A,C                             ; 4 BYTES TO SET THE OFFSET LOW IN FRONT	; 4 BYTES TO SET THE OFFSET LOW IN FRONT
296)   09A3 CD AE 07    		     CALL CH376_DATAWR	;
297)   09A6 78          		 LD A,B	;
298)   09A7 CD AE 07    		 CALL CH376_DATAWR	;
299)   09AA 7B          		 LD A,E	;
300)   09AB CD AE 07    		 CALL CH376_DATAWR            ;LAST 2 BYTES 0 MAX 65535 SKIP	;LAST 2 BYTES 0 MAX 65535 SKIP
301)   09AE 7A          		 LD A,D	;
302)   09AF CD AE 07    		 CALL CH376_DATAWR	;
303)   09B2 CD 3B 07    		     CALL CH376_WTCMDEND	;
304)   09B5 C9          		 RET	;
307)   09B6 C9          		STRG_GETSIZE: RET	;
308)   09B7 C9          		STRG_GETEOF: RET	;
315)   09B8 3E 27       		STRG_PRDRVINFO: LD A,CMD_RDUSB_DATA0	;
316)   09BA CD AA 07    		 CALL CH376_COMMD	;
317)   09BD CD E9 06    		 CALL CH376_GETDATA	;
318)   09C0 F5          		 PUSH AF	;
319)   09C1 D6 08       		 SUB 8  	;
320)   09C3 47          		 LD B,A	;
321)   09C4 F1          		 POP AF   	;
322)   09C5 21 36 F0    		 LD HL,USBBUF+8  ;SKIP 8 BYTES	;SKIP 8 BYTES
323)   09C8 7E          		PDI_NXT: LD A,(HL)	;
324)   09C9 E5          		 PUSH HL	;
325)   09CA C5          		 PUSH BC	;
326)   09CB CD 9E 00    		 CALL OS_PRINTCHAR	;
327)   09CE C1          		 POP BC	;
328)   09CF E1          		 POP HL	;
329)   09D0 23          		 INC HL	;
330)   09D1 10 F5       		 DJNZ PDI_NXT  	;
331)   09D3 CD AD 06    		 CALL RS_NEWLINE	;
333)   09D6 3E 3F       		 LD A,CMD_DISK_QUERY   	;
334)   09D8 CD AA 07    		 CALL CH376_COMMD	;
335)   09DB CD 3B 07    		 CALL CH376_WTCMDEND	;
336)   09DE C0          		 RET NZ	;
337)   09DF 3E 27       		 LD A,CMD_RDUSB_DATA0	;
338)   09E1 CD AA 07    		 CALL CH376_COMMD  	;
339)   09E4 CD E9 06    		 CALL CH376_GETDATA	;
341)   09E7 DD 21 2E F0 		 LD IX,USBBUF 	;
342)   09EB DD E5       		 PUSH IX   	;
343)   09ED DD 56 03    		 LD D,(IX+3)	;
344)   09F0 DD 5E 02    		 LD E,(IX+2)	;
345)   09F3 DD 66 01    		 LD H,(IX+1)	;
346)   09F6 DD 6E 00    		 LD L,(IX+0)	;
347)   09F9 CD 5F 15    		 CALL B2D32    ;DE:HL RES ON B2DBUF	;DE:HL RES ON B2DBUF
348)   09FC 21 9B F0    		 LD HL,B2DBUF	;
349)   09FF CD EF 15    		 CALL SKIPSPC	;
350)   0A02 CD B1 00    		 CALL OS_PRINTTEXT	;
351)   0A05 CD BD 00    		 CALL OS_PRINTMSG	;
352)   0A08 20 53 45 43 		 DEFM " SECTORS"	;
352)   0A0C 54 4F 52 53 		 DEFM " SECTORS"	;
353)   0A10 0A 0D 00    		 DB 10,13 0	;
354)   0A13 DD E1       		 POP IX	;
356)   0A15 DD E5       		 PUSH IX     	;
357)   0A17 DD 56 07    		 LD D,(IX+7)	;
358)   0A1A DD 5E 06    		 LD E,(IX+6)	;
359)   0A1D DD 66 05    		 LD H,(IX+5)	;
360)   0A20 DD 6E 04    		 LD L,(IX+4)  	;
361)   0A23 CD 5F 15    		 CALL B2D32  ;DE:HL RES ON B2DBUF	;DE:HL RES ON B2DBUF
362)   0A26 21 9B F0    		 LD HL,B2DBUF	;
363)   0A29 CD EF 15    		 CALL SKIPSPC	;
364)   0A2C CD B1 00    		 CALL OS_PRINTTEXT	;
365)   0A2F CD BD 00    		 CALL OS_PRINTMSG	;
366)   0A32 20 53 45 43 		 DEFM " SECTORS FREE   "	;
366)   0A36 54 4F 52 53 		 DEFM " SECTORS FREE   "	;
366)   0A3A 20 46 52 45 		 DEFM " SECTORS FREE   "	;
366)   0A3E 45 20 20 20 		 DEFM " SECTORS FREE   "	;
367)   0A42 0A 0D 00    		 DB 10,13,0   	;
368)   0A45 DD E1       		 POP IX	;
370)   0A47 DD 7E 08    		FILESYSTEM: LD A,(IX+8) ;1-FAT12,2-FAT16,3-FAT32	;1-FAT12,2-FAT16,3-FAT32
371)   0A4A 3D          		 DEC A	;
372)   0A4B 28 08       		 JR Z,PDI_NXT0	;
373)   0A4D 3D          		 DEC A	;
374)   0A4E 28 18       		 JR Z,PDI_NXT1	;
375)   0A50 3D          		 DEC A	;
376)   0A51 28 28       		 JR Z,PDI_NXT2	;
377)   0A53 18 39       		 JR PDI_NXT3	;
379)   0A55 CD BD 00    		PDI_NXT0: CALL OS_PRINTMSG	;
380)   0A58 46 53 20 49 		 DEFM "FS IS FAT-12"	;
380)   0A5C 53 20 46 41 		 DEFM "FS IS FAT-12"	;
380)   0A60 54 2D 31 32 		 DEFM "FS IS FAT-12"	;
381)   0A64 0A 0D 00    		 DB 10,13,0	;
382)   0A67 C9          		 RET	;
383)   0A68 CD BD 00    		PDI_NXT1: CALL OS_PRINTMSG	;
384)   0A6B 46 53 20 49 		 DEFM "FS IS FAT-16"	;
384)   0A6F 53 20 46 41 		 DEFM "FS IS FAT-16"	;
384)   0A73 54 2D 31 36 		 DEFM "FS IS FAT-16"	;
385)   0A77 0A 0D 00    		 DB 10,13,0	;
386)   0A7A C9          		 RET	;
387)   0A7B CD BD 00    		PDI_NXT2: CALL OS_PRINTMSG	;
388)   0A7E 46 53 20 49 		 DEFM "FS IS FAT-32"	;
388)   0A82 53 20 46 41 		 DEFM "FS IS FAT-32"	;
388)   0A86 54 2D 33 32 		 DEFM "FS IS FAT-32"	;
389)   0A8A 0A 0D 00    		 DB 10,13,0	;
390)   0A8D C9          		 RET	;
391)   0A8E CD BD 00    		PDI_NXT3: CALL OS_PRINTMSG	;
392)   0A91 55 4E 4B 4E 		 DEFM "UNKNOWN FS"	;
392)   0A95 4F 57 4E 20 		 DEFM "UNKNOWN FS"	;
392)   0A99 46 53       		 DEFM "UNKNOWN FS"	;
393)   0A9B 0A 0D 00    		 DB 10,13,0	;
394)   0A9E DD 7E 08    		 LD A,(IX+8)  ;TO BE PRINTED MAYBE	;TO BE PRINTED MAYBE
395)   0AA1 C9          		 RET	;
400)   0AA2 F5          		STRG_OPNFILE: PUSH AF	;
401)   0AA3 3E 2F       		 LD A, CMD_SETFILENAME	;
402)   0AA5 CD AA 07    		     CALL CH376_COMMD	;
403)   0AA8 21 60 F0    		 LD HL, STRGBUFF	;
404)   0AAB CD 5F 08    		     CALL CH376_WRSTRING	;
405)   0AAE 28 1E       		 JR Z,OF_WSOK	;
406)   0AB0 F1          		 POP AF	;
407)   0AB1 CD BD 00    		 CALL OS_PRINTMSG	;
408)   0AB4 45 52 52 4F 		 DEFM "ERROR SETTING FILENAME"	;
408)   0AB8 52 20 53 45 		 DEFM "ERROR SETTING FILENAME"	;
408)   0ABC 54 54 49 4E 		 DEFM "ERROR SETTING FILENAME"	;
408)   0AC0 47 20 46 49 		 DEFM "ERROR SETTING FILENAME"	;
408)   0AC4 4C 45 4E 41 		 DEFM "ERROR SETTING FILENAME"	;
408)   0AC8 4D 45       		 DEFM "ERROR SETTING FILENAME"	;
409)   0ACA 0A 0D 00    		 DB 10,13,0  	;
410)   0ACD C9          		 RET	;
411)   0ACE F1          		OF_WSOK: POP AF	;
415)   0ACF B7          		 OR A  ;0 READ	;0 READ
416)   0AD0 28 0C       		 JR Z,OF_OPEN	;
417)   0AD2 D6 01       		 SUB 1  ;1 WRITE	;1 WRITE
418)   0AD4 28 08       		 JR Z,OF_OPEN	;
419)   0AD6 D6 01       		 SUB 1  ;2 READ/WRITE	;2 READ/WRITE
420)   0AD8 28 04       		 JR Z,OF_OPEN	;
430)   0ADA 3E 34       		 LD A, CMD_FILE_CREATE  	;
431)   0ADC 18 02       		 JR OF_EXEC	;
436)   0ADE 3E 32       		 LD A, CMD_FILE_OPEN	;
440)   0AE0 CD AA 07    		 CALL CH376_COMMD	;
441)   0AE3 CD 3B 07    		 CALL CH376_WTCMDEND	;
442)   0AE6 C9          		 RET	;
444)   0AE7 3E 36       		STRG_CLSFILE: LD A, CMD_FILE_CLOSE	;
445)   0AE9 CD AA 07    		     CALL CH376_COMMD	;
446)   0AEC 3E 01       		     LD A, 1                             ; 1 = update file size if necessary	; 1 = update file size if necessary
447)   0AEE CD AE 07    		     CALL CH376_DATAWR	;
448)   0AF1 CD 3B 07    		     CALL CH376_WTCMDEND	;
449)   0AF4 C9          		     RET	;
455)   0AF5 D5          		STRG_BLKREAD: PUSH DE	;
456)   0AF6 3E 3A       		 LD A, CMD_BYTE_READ	;
457)   0AF8 CD AA 07    		     CALL CH376_COMMD	;
458)   0AFB 79          		     LD A, C                           ; BYTES REQUEST ON BC	; BYTES REQUEST ON BC
459)   0AFC CD AE 07    		     CALL CH376_DATAWR	;
460)   0AFF 78          		     LD A, B	;
461)   0B00 CD AE 07    		     CALL CH376_DATAWR	;
462)   0B03 2F          		 CPL	;
463)   0B04 2F          		 CPL    	;
467)   0B05 D1          		 POP DE	;
468)   0B06 21 00 00    		 LD HL,0      ;BYTE RECEIVE COUNTER	;BYTE RECEIVE COUNTER
469)   0B09 E5          		STBR_DOREST: PUSH HL	;
470)   0B0A D5          		 PUSH DE	;
471)   0B0B CD 3B 07    		 CALL CH376_WTCMDEND	;
472)   0B0E D1          		 POP DE	;
473)   0B0F E1          		 POP HL	;
474)   0B10 28 1C       		 JR Z, FR_DONE   ;Z=NO MORE OR CANNOT READ	;Z=NO MORE OR CANNOT READ
475)   0B12 FE 1D       		 CP USB_INT_DISK_READ                    	;
476)   0B14 20 1C       		     JR NZ, FR_ERROR	;
478)   0B16 3E 27       		 LD A,CMD_RDUSB_DATA0	;
479)   0B18 CD AA 07    		 CALL CH376_COMMD 	;
480)   0B1B CD BD 07    		 CALL CH376_DATARD  ;A= BYTES TO READ TO BUFFER	;A= BYTES TO READ TO BUFFER
481)   0B1E 47          		 LD B,A	;
494)   0B1F CD BD 07    		STBR_NXT1: CALL CH376_DATARD ;READ THE BYTES TO BUFFER	;READ THE BYTES TO BUFFER
495)   0B22 12          		 LD (DE),A	;
496)   0B23 13          		 INC DE	;
497)   0B24 23          		 INC HL    ;TOTAL BYTES READ COUNTER	;TOTAL BYTES READ COUNTER
498)   0B25 10 F8       		 DJNZ STBR_NXT1  	;
499)   0B27 3E 3B       		 LD A, CMD_BYTE_RD_GO 	;
500)   0B29 CD AA 07    		 CALL CH376_COMMD 	;
501)   0B2C 18 DB       		 JR STBR_DOREST	;
507)   0B2E 44          		 LD B,H	;
508)   0B2F 4D          		 LD C,L	;
509)   0B30 AF          		 XOR A	;
510)   0B31 C9          		 RET	;
511)   0B32 F5          		FR_ERROR: PUSH AF	;
512)   0B33 CD E8 16    		 CALL PRINTNUM	;
513)   0B36 CD BD 00    		 CALL OS_PRINTMSG	;
514)   0B39 45 52 52 4F 		 DEFM "ERROR READING BLOCK!!! "	;
514)   0B3D 52 20 52 45 		 DEFM "ERROR READING BLOCK!!! "	;
514)   0B41 41 44 49 4E 		 DEFM "ERROR READING BLOCK!!! "	;
514)   0B45 47 20 42 4C 		 DEFM "ERROR READING BLOCK!!! "	;
514)   0B49 4F 43 4B 21 		 DEFM "ERROR READING BLOCK!!! "	;
514)   0B4D 21 21 20    		 DEFM "ERROR READING BLOCK!!! "	;
515)   0B50 00          		 DB 0 	;
516)   0B51 F1          		 POP AF	;
517)   0B52 06 02       		 LD B,2	;
518)   0B54 05          		 DEC B	;
519)   0B55 C9          		 RET  	;
526)   0B56 D5          		STRG_LOADFILE: PUSH DE	;
527)   0B57 C5          		 PUSH BC	;
533)   0B58 CD 1D 17    		 CALL COPYFNAME	;
534)   0B5B AF          		 XOR A   ;READ ONLY 	;READ ONLY
535)   0B5C CD A2 0A    		 CALL STRG_OPNFILE  	;
536)   0B5F 20 4B       		 JR NZ, FOPENERR	;
541)   0B61 C1          		 POP BC  ;BYTECOUNT	;BYTECOUNT
542)   0B62 D1          		 POP DE  ;DEST BUFFER	;DEST BUFFER
543)   0B63 CD F5 0A    		 CALL STRG_BLKREAD	;
544)   0B66 28 20       		 JR Z, FREADOK	;
545)   0B68 CD E8 16    		 CALL PRINTNUM	;
546)   0B6B CD BD 00    		 CALL OS_PRINTMSG	;
547)   0B6E 20 45 52 52 		 DEFM " ERROR READING FILE"	;
547)   0B72 4F 52 20 52 		 DEFM " ERROR READING FILE"	;
547)   0B76 45 41 44 49 		 DEFM " ERROR READING FILE"	;
547)   0B7A 4E 47 20 46 		 DEFM " ERROR READING FILE"	;
547)   0B7E 49 4C 45    		 DEFM " ERROR READING FILE"	;
548)   0B81 0A 0D 00    		 DB 10,13,0	;
549)   0B84 D5          		 PUSH DE	;
550)   0B85 C5          		 PUSH BC	;
551)   0B86 18 24       		 JR FOPENERR	;
552)   0B88 C5          		FREADOK: PUSH BC	;
553)   0B89 CD 5B 15    		 CALL B2D16	;
554)   0B8C 21 9B F0    		 LD HL,B2DBUF	;
555)   0B8F CD EF 15    		 CALL SKIPSPC	;
556)   0B92 CD 4D 06    		 CALL RS_TXT	;
557)   0B95 CD BD 00    		 CALL OS_PRINTMSG	;
558)   0B98 20 42 59 54 		 DEFM " BYTES READ"	;
558)   0B9C 45 53 20 52 		 DEFM " BYTES READ"	;
558)   0BA0 45 41 44    		 DEFM " BYTES READ"	;
559)   0BA3 0A 0D 00    		 DB 10,13,0	;
560)   0BA6 CD E7 0A    		 CALL STRG_CLSFILE	;
561)   0BA9 C1          		 POP BC   ;BYTES LOADED TO BUFFER	;BYTES LOADED TO BUFFER
562)   0BAA AF          		 XOR A	;
563)   0BAB C9          		 RET	;
564)   0BAC C1          		FOPENERR: POP BC	;
565)   0BAD D1          		 POP DE	;
566)   0BAE CD E8 16    		 CALL PRINTNUM	;
567)   0BB1 CD BD 00    		 CALL OS_PRINTMSG	;
568)   0BB4 2D 2D 3E 45 		 DEFM "-->ERROR AT LOADFILE"	;
568)   0BB8 52 52 4F 52 		 DEFM "-->ERROR AT LOADFILE"	;
568)   0BBC 20 41 54 20 		 DEFM "-->ERROR AT LOADFILE"	;
568)   0BC0 4C 4F 41 44 		 DEFM "-->ERROR AT LOADFILE"	;
568)   0BC4 46 49 4C 45 		 DEFM "-->ERROR AT LOADFILE"	;
569)   0BC8 0A 0D 00    		 DB 10,13,0	;
570)   0BCB 21 60 F0    		 LD HL,STRGBUFF	;
571)   0BCE CD 4D 06    		 CALL RS_TXT	;
572)   0BD1 CD AD 06    		 CALL RS_NEWLINE	;
573)   0BD4 37          		 SCF	;
574)   0BD5 C9          		 RET	;
582)   0BD6 D5          		STRG_READBUFR: PUSH DE	;
583)   0BD7 C5          		 PUSH BC	;
589)   0BD8 CD 1D 17    		 CALL COPYFNAME	;
590)   0BDB AF          		 XOR A   ;READ ONLY 	;READ ONLY
591)   0BDC CD A2 0A    		 CALL STRG_OPNFILE  	;
592)   0BDF 20 32       		 JR NZ, RB_FOPENERR	;
597)   0BE1 C1          		 POP BC  ;BYTE OFFSET	;BYTE OFFSET
598)   0BE2 CD 94 09    		 CALL STRG_SETPOS16	;
599)   0BE5 01 F4 01    		 LD BC, 500 ;READ 500 BYTES  	;READ 500 BYTES
600)   0BE8 D1          		 POP DE  ;DEST BUFFER	;DEST BUFFER
601)   0BE9 CD F5 0A    		 CALL STRG_BLKREAD	;
602)   0BEC 28 1E       		 JR Z, RB_FREADOK	;
603)   0BEE CD E8 16    		 CALL PRINTNUM	;
604)   0BF1 CD BD 00    		 CALL OS_PRINTMSG	;
605)   0BF4 20 45 52 52 		 DEFM " ERROR READING FILE"	;
605)   0BF8 4F 52 20 52 		 DEFM " ERROR READING FILE"	;
605)   0BFC 45 41 44 49 		 DEFM " ERROR READING FILE"	;
605)   0C00 4E 47 20 46 		 DEFM " ERROR READING FILE"	;
605)   0C04 49 4C 45    		 DEFM " ERROR READING FILE"	;
606)   0C07 0A 0D 00    		 DB 10,13,0	;
607)   0C0A 18 09       		 JR RB_FOPENERR2	;
608)   0C0C C5          		RB_FREADOK: PUSH BC	;
616)   0C0D CD E7 0A    		 CALL STRG_CLSFILE	;
617)   0C10 C1          		 POP BC   ;BYTES LOADED TO BUFFER	;BYTES LOADED TO BUFFER
618)   0C11 AF          		 XOR A	;
619)   0C12 C9          		 RET	;
620)   0C13 C1          		RB_FOPENERR: POP BC	;
621)   0C14 D1          		 POP DE	;
622)   0C15 CD E8 16    		RB_FOPENERR2: CALL PRINTNUM	;
623)   0C18 CD BD 00    		 CALL OS_PRINTMSG	;
624)   0C1B 2D 2D 3E 45 		 DEFM "-->ERROR OPENING FILE"	;
624)   0C1F 52 52 4F 52 		 DEFM "-->ERROR OPENING FILE"	;
624)   0C23 20 4F 50 45 		 DEFM "-->ERROR OPENING FILE"	;
624)   0C27 4E 49 4E 47 		 DEFM "-->ERROR OPENING FILE"	;
624)   0C2B 20 46 49 4C 		 DEFM "-->ERROR OPENING FILE"	;
624)   0C2F 45          		 DEFM "-->ERROR OPENING FILE"	;
625)   0C30 0A 0D 00    		 DB 10,13,0	;
626)   0C33 21 60 F0    		 LD HL,STRGBUFF	;
627)   0C36 CD 4D 06    		 CALL RS_TXT	;
628)   0C39 CD AD 06    		 CALL RS_NEWLINE	;
629)   0C3C 37          		 SCF	;
630)   0C3D C9          		 RET	;
635)   0C3E D5          		STRG_BLKWRITE: PUSH DE	;
636)   0C3F 3E 3C       		 LD A, CMD_BYTE_WRITE	;
637)   0C41 CD AA 07    		     CALL CH376_COMMD	;
638)   0C44 79          		     LD A, C                           ; BYTES REQUEST ON BC	; BYTES REQUEST ON BC
639)   0C45 CD AE 07    		     CALL CH376_DATAWR	;
640)   0C48 78          		     LD A, B	;
641)   0C49 CD AE 07    		     CALL CH376_DATAWR    	;
645)   0C4C E1          		 POP HL	;
646)   0C4D CD 3B 07    		STBW_DOREST: CALL CH376_WTCMDEND 	;
647)   0C50 28 1B       		 JR Z, WFR_DONE   ;Z=NO MORE OR CANNOT READ	;Z=NO MORE OR CANNOT READ
648)   0C52 FE 1E       		 CP USB_INT_DISK_WRITE                    	;
649)   0C54 20 19       		     JR NZ, WFR_ERROR	;
650)   0C56 3E 2D       		 LD A,CMD_WR_REQ_DATA	;
651)   0C58 CD AA 07    		 CALL CH376_COMMD 	;
653)   0C5B CD BD 07    		 CALL CH376_DATARD ;READ BYTE COUNT UP TO 255 BYTES	;READ BYTE COUNT UP TO 255 BYTES
654)   0C5E 47          		 LD B,A   	;
656)   0C5F 7E          		STBW_NXT1: LD A,(HL)	;
657)   0C60 CD AE 07    		 CALL CH376_DATAWR	;
658)   0C63 23          		 INC HL	;
659)   0C64 10 F9       		 DJNZ STBW_NXT1	;
660)   0C66 3E 3D       		 LD A, CMD_BYTE_WR_GO 	;
661)   0C68 CD AA 07    		 CALL CH376_COMMD 	;
662)   0C6B 18 E0       		 JR STBW_DOREST	;
668)   0C6D B7          		 OR A	;
669)   0C6E C9          		 RET	;
670)   0C6F F5          		WFR_ERROR: PUSH AF	;
671)   0C70 CD E8 16    		 CALL PRINTNUM	;
672)   0C73 CD BD 00    		 CALL OS_PRINTMSG	;
673)   0C76 45 52 52 4F 		 DEFM "ERROR WRITING BLOCK!!! "	;
673)   0C7A 52 20 57 52 		 DEFM "ERROR WRITING BLOCK!!! "	;
673)   0C7E 49 54 49 4E 		 DEFM "ERROR WRITING BLOCK!!! "	;
673)   0C82 47 20 42 4C 		 DEFM "ERROR WRITING BLOCK!!! "	;
673)   0C86 4F 43 4B 21 		 DEFM "ERROR WRITING BLOCK!!! "	;
673)   0C8A 21 21 20    		 DEFM "ERROR WRITING BLOCK!!! "	;
674)   0C8D 0D 0A 00    		 DB 13,10,0 	;
675)   0C90 F1          		 POP AF	;
676)   0C91 06 02       		 LD B,2	;
677)   0C93 05          		 DEC B	;
678)   0C94 C9          		 RET  	;
686)   0C95 D5          		STRG_SAVEFILE: PUSH DE	;
687)   0C96 C5          		 PUSH BC	;
688)   0C97 E5          		 PUSH HL  	;
689)   0C98 CD BD 00    		 CALL OS_PRINTMSG	;
690)   0C9B 0A 0D       		 DB 10,13	;
691)   0C9D 53 41 56 45 		 DEFM "SAVE FILE"	;
691)   0CA1 20 46 49 4C 		 DEFM "SAVE FILE"	;
691)   0CA5 45          		 DEFM "SAVE FILE"	;
692)   0CA6 0A 0D 0A 0D 		 DB 10,13,10,13,0	;
692)   0CAA 00          		 DB 10,13,10,13,0	;
693)   0CAB E1          		 POP HL	;
694)   0CAC CD 1D 17    		 CALL COPYFNAME	;
695)   0CAF 3E 04       		 LD A,4   ;CREATE THE FILE	;CREATE THE FILE
696)   0CB1 CD A2 0A    		 CALL STRG_OPNFILE  	;
697)   0CB4 20 4E       		 JR NZ, FSAVEERR	;
698)   0CB6 CD BD 00    		 CALL OS_PRINTMSG	;
699)   0CB9 0A 0D       		 DB 10,13	;
700)   0CBB 46 49 4C 45 		 DEFM "FILE CREATED OK"	;
700)   0CBF 20 43 52 45 		 DEFM "FILE CREATED OK"	;
700)   0CC3 41 54 45 44 		 DEFM "FILE CREATED OK"	;
700)   0CC7 20 4F 4B    		 DEFM "FILE CREATED OK"	;
701)   0CCA 0A 0D 00    		 DB 10,13,0	;
702)   0CCD C1          		 POP BC  ;BYTECOUNT	;BYTECOUNT
703)   0CCE D1          		 POP DE  ;SOURCE BUFFER	;SOURCE BUFFER
704)   0CCF CD 3E 0C    		 CALL STRG_BLKWRITE	;
705)   0CD2 28 19       		 JR Z, FWRITEOK	;
707)   0CD4 CD BD 00    		 CALL OS_PRINTMSG	;
708)   0CD7 20 45 52 52 		 DEFM " ERROR WRITING FILE"	;
708)   0CDB 4F 52 20 57 		 DEFM " ERROR WRITING FILE"	;
708)   0CDF 52 49 54 49 		 DEFM " ERROR WRITING FILE"	;
708)   0CE3 4E 47 20 46 		 DEFM " ERROR WRITING FILE"	;
708)   0CE7 49 4C 45    		 DEFM " ERROR WRITING FILE"	;
709)   0CEA 0A 0D 00    		 DB 10,13,0	;
710)   0CED CD BD 00    		FWRITEOK: CALL OS_PRINTMSG	;
711)   0CF0 42 59 54 45 		 DEFM "BYTE WRITTEN"	;
711)   0CF4 20 57 52 49 		 DEFM "BYTE WRITTEN"	;
711)   0CF8 54 54 45 4E 		 DEFM "BYTE WRITTEN"	;
712)   0CFC 0A 0D 00    		 DB 10,13,0	;
713)   0CFF CD E7 0A    		 CALL STRG_CLSFILE	;
714)   0D02 AF          		 XOR A	;
715)   0D03 C9          		 RET	;
716)   0D04 C1          		FSAVEERR: POP BC	;
717)   0D05 D1          		 POP DE	;
718)   0D06 CD E8 16    		 CALL PRINTNUM	;
719)   0D09 CD BD 00    		 CALL OS_PRINTMSG	;
720)   0D0C 2D 2D 3E 45 		 DEFM "-->ERROR CREATING FILE"	;
720)   0D10 52 52 4F 52 		 DEFM "-->ERROR CREATING FILE"	;
720)   0D14 20 43 52 45 		 DEFM "-->ERROR CREATING FILE"	;
720)   0D18 41 54 49 4E 		 DEFM "-->ERROR CREATING FILE"	;
720)   0D1C 47 20 46 49 		 DEFM "-->ERROR CREATING FILE"	;
720)   0D20 4C 45       		 DEFM "-->ERROR CREATING FILE"	;
721)   0D22 0A 0D 00    		 DB 10,13,0	;
722)   0D25 21 60 F0    		 LD HL,STRGBUFF	;
723)   0D28 CD 4D 06    		 CALL RS_TXT	;
724)   0D2B CD AD 06    		 CALL RS_NEWLINE	;
725)   0D2E 37          		 SCF	;
726)   0D2F C9          		 RET	;
736)   0D30 C5          		STRG_WRITEBUFR: PUSH BC	;
737)   0D31 D5          		 PUSH DE	;
738)   0D32 CD 1D 17    		 CALL COPYFNAME   ;HL NOT NEEDED AFTER THIS	;HL NOT NEEDED AFTER THIS
739)   0D35 3E 01       		 LD A,1    ;OPEN THE FILE FOR W	;OPEN THE FILE FOR W
740)   0D37 CD A2 0A    		 CALL STRG_OPNFILE  	;
741)   0D3A 20 0B       		 JR NZ,SWB_CREATE  ;ON ERROR TRY TO CREATE THE FILE	;ON ERROR TRY TO CREATE THE FILE
743)   0D3C 01 FF FF    		 LD BC,$FFFF	;
744)   0D3F 11 FF FF    		 LD DE,$FFFF 	;
745)   0D42 CD 9D 09    		 CALL STRG_SETPOS  ;GOTO EOF	;GOTO EOF
746)   0D45 18 09       		 JR SWB_WRITEBUF	;
748)   0D47 3E 04       		 LD A,4	;
749)   0D49 CD A2 0A    		 CALL STRG_OPNFILE  	;
750)   0D4C 3E 97       		 LD A,151   ;ERROR NUMBER	;ERROR NUMBER
751)   0D4E 20 0D       		 JR NZ, SWB_ERR	;
752)   0D50 D1          		SWB_WRITEBUF: POP DE	;
753)   0D51 C1          		 POP BC    ;THE BYTE COUNT  	;THE BYTE COUNT
754)   0D52 CD 3E 0C    		 CALL STRG_BLKWRITE  	;
755)   0D55 F5          		 PUSH AF	;
756)   0D56 CD E7 0A    		 CALL STRG_CLSFILE  ;ALWAYS CLOSE FILE	;ALWAYS CLOSE FILE
757)   0D59 F1          		 POP AF	;
758)   0D5A C0          		 RET NZ    ;NZ IF ERROR	;NZ IF ERROR
759)   0D5B AF          		 XOR A	;
760)   0D5C C9          		 RET	;
761)   0D5D D1          		SWB_ERR: POP DE	;
762)   0D5E C1          		 POP BC  	;
763)   0D5F 37          		 SCF	;
764)   0D60 C9          		 RET  	;
 76)   0D61 0E 03       		 LD C, 11B        ;HIRES TEXT SCREEN	;HIRES TEXT SCREEN
 77)   0D63 3E 04       		 LD A, VGA_NAVY	;
 78)   0D65 CB 27       		 SLA A	;
 79)   0D67 CB 27       		 SLA A	;
 80)   0D69 CB 27       		 SLA A	;
 81)   0D6B CB 27       		 SLA A	;
 82)   0D6D 06 0F       		 LD B, VGA_WHITE	;
 83)   0D6F B0          		 OR B	;
 84)   0D70 47          		 LD B, A	;
 85)   0D71 CD FF 0D    		 CALL VGA_SETCONF	;
 86)   0D74 C9          		 RET	;
 90)   0D75 F5          		VGA_SETLOWGR: PUSH AF	;
 91)   0D76 CD 31 0E    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
 92)   0D79 0E 00       		 LD C, 00B        ;LOW RES GRAPH SCREEN	;LOW RES GRAPH SCREEN
 93)   0D7B CD FF 0D    		 CALL VGA_SETCONF	;
 94)   0D7E F1          		 POP AF	;
 95)   0D7F C9          		 RET	;
 98)   0D80 F5          		VGA_SETLOWTX: PUSH AF	;
 99)   0D81 CD 31 0E    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
100)   0D84 0E 01       		 LD C, 01B        ;LOW RES TEXT SCREEN	;LOW RES TEXT SCREEN
101)   0D86 CD FF 0D    		 CALL VGA_SETCONF	;
102)   0D89 F1          		 POP AF	;
103)   0D8A C9          		 RET	;
105)   0D8B F5          		VGA_SETHIGR: PUSH AF	;
106)   0D8C CD 31 0E    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
107)   0D8F 0E 02       		 LD C, 10B        ;HI RES GRAPH SCREEN	;HI RES GRAPH SCREEN
108)   0D91 CD FF 0D    		 CALL VGA_SETCONF	;
109)   0D94 F1          		 POP AF	;
110)   0D95 C9          		 RET	;
112)   0D96 F5          		VGA_SETHITX: PUSH AF	;
113)   0D97 CD 31 0E    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
114)   0D9A 0E 03       		 LD C, 11B        ;HI RES TEXT SCREEN	;HI RES TEXT SCREEN
115)   0D9C CD FF 0D    		 CALL VGA_SETCONF	;
116)   0D9F F1          		 POP AF	;
117)   0DA0 C9          		 RET	;
122)   0DA1 0F          		VGA_SETVISBUFF: RRCA       ;BIT 1 > BIT 7	;BIT 1 > BIT 7
123)   0DA2 E5          		 PUSH HL	;
124)   0DA3 F5          		 PUSH AF	;
125)   0DA4 06 04       		 LD B, 4        ;8000h	;8000h
126)   0DA6 CD 1C 06    		 CALL GETPGINBANK	;
127)   0DA9 E1          		 POP HL        ;H THE BUFFER	;H THE BUFFER
128)   0DAA F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
129)   0DAB E5          		 PUSH HL	;
130)   0DAC 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
131)   0DAE CD FA 05    		 CALL PUTPGINBANK	;
132)   0DB1 21 F8 1F    		 LD HL, CONFADDR	;
133)   0DB4 11 00 80    		 LD DE, $8000	;
134)   0DB7 B7          		 OR A	;
135)   0DB8 ED 5A       		 ADC HL, DE	;
136)   0DBA C1          		 POP BC        ;B THE BUFFER 0 OR 1	;B THE BUFFER 0 OR 1
137)   0DBB 7E          		 LD A,(HL)	;
138)   0DBC 1F          		 RRA	;
139)   0DBD CB 18       		 RR B        ;BIT 0 ON CARRY	;BIT 0 ON CARRY
140)   0DBF 17          		 RLA	;
141)   0DC0 77          		 LD (HL),A	;
142)   0DC1 F1          		 POP AF        ;PREVIOUS PAGE NO	;PREVIOUS PAGE NO
143)   0DC2 06 04       		 LD B, 4	;
144)   0DC4 CD FA 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
145)   0DC7 E1          		 POP HL	;
146)   0DC8 C9          		 RET  	;
150)   0DC9 E5          		VGA_SWVISBUFF: PUSH HL	;
151)   0DCA 06 04       		 LD B, 4        ;8000h	;8000h
152)   0DCC CD 1C 06    		 CALL GETPGINBANK	;
153)   0DCF F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
154)   0DD0 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
155)   0DD2 CD FA 05    		 CALL PUTPGINBANK	;
156)   0DD5 21 F8 1F    		 LD HL, CONFADDR	;
157)   0DD8 11 00 80    		 LD DE, $8000	;
158)   0DDB B7          		 OR A	;
159)   0DDC ED 5A       		 ADC HL, DE	;
160)   0DDE 7E          		 LD A, (HL)        ;VIDEO CTRL REG1 VIDEO MODE	;VIDEO CTRL REG1 VIDEO MODE
161)   0DDF CB 7F       		 BIT 7,A 	;
162)   0DE1 28 04       		 JR Z,VSVB_SETBUF1	;
164)   0DE3 CB BF       		 RES 7,A	;
165)   0DE5 18 02       		 JR VSVB_CONT	;
166)   0DE7 CB FF       		VSVB_SETBUF1: SET 7,A       ;SET BIT 7	;SET BIT 7
169)   0DE9 77          		VSVB_CONT: LD (HL),A	;
170)   0DEA F1          		 POP AF	;
171)   0DEB 06 04       		 LD B, 4	;
172)   0DED CD FA 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
173)   0DF0 E1          		 POP HL	;
174)   0DF1 C9          		 RET  	;
178)   0DF2 32 90 F0    		VGA_SETWRKBUFF: LD (VGABUF),A	;
179)   0DF5 C9          		 RET	;
182)   0DF6 3A 90 F0    		VGA_SWWRKBUFF: LD A,(VGABUF)	;
183)   0DF9 EE 01       		 XOR 1	;
184)   0DFB 32 90 F0    		 LD (VGABUF),A	;
185)   0DFE C9          		 RET	;
192)   0DFF E5          		VGA_SETCONF: PUSH HL	;
193)   0E00 C5          		 PUSH BC	;
194)   0E01 06 04       		 LD B, 4        ;8000h	;8000h
195)   0E03 CD 1C 06    		 CALL GETPGINBANK	;
196)   0E06 C1          		 POP BC	;
197)   0E07 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
198)   0E08 C5          		 PUSH BC        ;SAVE SCREEN CODE	;SAVE SCREEN CODE
199)   0E09 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
200)   0E0B 06 04       		 LD B, 4	;
201)   0E0D CD FA 05    		 CALL PUTPGINBANK	;
202)   0E10 C1          		 POP BC	;
203)   0E11 79          		 LD A, C	;
204)   0E12 21 F8 1F    		 LD HL, CONFADDR	;
205)   0E15 11 00 80    		 LD DE, $8000	;
206)   0E18 B7          		 OR A	;
207)   0E19 ED 5A       		 ADC HL, DE	;
208)   0E1B 77          		 LD (HL), A        ;VIDEO CTRL REG1 VIDEO MODE	;VIDEO CTRL REG1 VIDEO MODE
209)   0E1C 23          		 INC HL	;
210)   0E1D 78          		 LD A, B        ;DEFAULT COLORS	;DEFAULT COLORS
211)   0E1E 77          		 LD (HL), A        ;VIDEO CTRL REG2 VIDEO DEF COLORS	;VIDEO CTRL REG2 VIDEO DEF COLORS
212)   0E1F F1          		 POP AF	;
213)   0E20 C5          		 PUSH BC	;
214)   0E21 06 04       		 LD B, 4	;
215)   0E23 CD FA 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
216)   0E26 C1          		 POP BC	;
217)   0E27 E1          		 POP HL	;
218)   0E28 79          		 LD A, C        ;SCREEN MODE	;SCREEN MODE
219)   0E29 CB 47       		 BIT 0, A	;
220)   0E2B C2 80 0F    		 JP NZ, VGA_TXTINIT	;
221)   0E2E C3 CC 11    		 JP VGA_GRPHINIT	;
228)   0E31 E5          		VGA_GETCONF: PUSH HL	;
229)   0E32 06 04       		 LD B, 4        ;8000h	;8000h
230)   0E34 CD 1C 06    		 CALL GETPGINBANK	;
231)   0E37 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
232)   0E38 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
233)   0E3A CD FA 05    		 CALL PUTPGINBANK	;
234)   0E3D 21 F8 1F    		 LD HL, CONFADDR	;
235)   0E40 11 00 80    		 LD DE, $8000	;
236)   0E43 B7          		 OR A	;
237)   0E44 ED 5A       		 ADC HL, DE	;
238)   0E46 7E          		 LD A, (HL)	;
239)   0E47 E6 03       		 AND 3        ;KEEP ONLY BITS 0,1	;KEEP ONLY BITS 0,1
240)   0E49 4F          		 LD C, A        ;SCREEN MODE	;SCREEN MODE
241)   0E4A 23          		 INC HL	;
242)   0E4B 7E          		 LD A, (HL)	;
243)   0E4C 47          		 LD B, A        ;DEFAULT COLORS	;DEFAULT COLORS
244)   0E4D F1          		 POP AF	;
245)   0E4E C5          		 PUSH BC	;
246)   0E4F 06 04       		 LD B, 4	;
247)   0E51 CD FA 05    		 CALL PUTPGINBANK	;
248)   0E54 C1          		 POP BC	;
249)   0E55 E1          		 POP HL	;
250)   0E56 79          		 LD A, C	;
251)   0E57 C9          		 RET	;
258)   0E58 CD 31 0E    		VGA_CLRSCR: CALL VGA_GETCONF	;
259)   0E5B CB 47       		 BIT 0,A	;
260)   0E5D C2 86 0F    		 JP NZ,VGA_TXTCLR	;
261)   0E60 C3 56 12    		 JP VGA_GRCLS	;
278)   0E63 F5          		 PUSH AF        ;SAVE FLAGS	;SAVE FLAGS
279)   0E64 D1          		 POP DE         ;FLAGS ON DE	;FLAGS ON DE
280)   0E65 FE 1F       		 CP 31	;
281)   0E67 DC 80 0E    		 CALL C, VGA_NOTVISCH	;
282)   0E6A 28 06       		 JR Z, PRCH_EX        ;EXIT IF CHAR WAS HANDLED	;EXIT IF CHAR WAS HANDLED
283)   0E6C CD 73 0E    		 CALL VGA_DOPRNCH       ;PRINT THE CHAR	;PRINT THE CHAR
284)   0E6F CD D1 0E    		 CALL VGA_TXFORW       ;TEXT FORWARD	;TEXT FORWARD
286)   0E72 C9          		 RET	;
291)   0E73 67          		VGA_DOPRNCH: LD H, A       ;SAVE A	;SAVE A
292)   0E74 CD 31 0E    		 CALL VGA_GETCONF	;
293)   0E77 CB 47       		 BIT 0, A	;
294)   0E79 7C          		 LD A, H        ;RESTORE A	;RESTORE A
295)   0E7A C2 1E 10    		 JP NZ, VGA_DOPRNCHTXT       ;NZ MEANS TEXT	;NZ MEANS TEXT
296)   0E7D C3 F0 12    		 JP VGA_DOPRNCHGRP	;
304)   0E80 F5          		VGA_NOTVISCH: PUSH AF	;
305)   0E81 D5          		 PUSH DE	;
306)   0E82 CD 8C 10    		 CALL VGA_RMVCURS      ;REMOVE CURSOR	;REMOVE CURSOR
307)   0E85 D1          		 POP DE	;
308)   0E86 F1          		 POP AF	;
309)   0E87 FE 08       		 CP 8         ;BACKSPACE	;BACKSPACE
310)   0E89 20 18       		 JR NZ, NX1	;
311)   0E8B 3A 8B F0    		 LD A, (VGATX_X)	;
312)   0E8E FE 00       		 CP 0         ;COL 0 HAS THE PROMPT	;COL 0 HAS THE PROMPT
313)   0E90 C8          		 RET Z         ;DO NOT PRINT ANYTHING	;DO NOT PRINT ANYTHING
314)   0E91 3D          		 DEC A	;
315)   0E92 32 8B F0    		 LD (VGATX_X), A	;
316)   0E95 D5          		 PUSH DE	;
317)   0E96 F1          		 POP AF         ;GET FLAGS BACK	;GET FLAGS BACK
318)   0E97 30 1B       		 JR NC, MVLEFT       ;IF C THEN DELETE THE CHAR ON THE LEFT	;IF C THEN DELETE THE CHAR ON THE LEFT
319)   0E99 3E 20       		 LD A, ' '        ;PRINT SPACE	;PRINT SPACE
320)   0E9B 32 8F F0    		 LD (VGATMPC),A	;
321)   0E9E CD 73 0E    		 CALL VGA_DOPRNCH       ;	;
322)   0EA1 AF          		 XOR A         ;CLEAR ZERO	;CLEAR ZERO
323)   0EA2 C9          		 RET	;
324)   0EA3 FE 0A       		NX1: CP 10         ;JUST IGNORE IT	;JUST IGNORE IT
325)   0EA5 C8          		 RET Z	;
326)   0EA6 FE 0D       		 CP 13         ;CR =NEW LINE	;CR =NEW LINE
327)   0EA8 20 11       		 JR NZ, NX2	;
328)   0EAA CD 8C 10    		 CALL VGA_RMVCURS	;
329)   0EAD CD E4 0E    		 CALL VGDOY        ;ADD 1 TO TY	;ADD 1 TO TY
330)   0EB0 32 8B F0    		 LD (VGATX_X), A       ;ZF IS SET	;ZF IS SET
331)   0EB3 C9          		 RET	;
332)   0EB4 CD 4F 10    		MVLEFT: CALL VGA_GETCHAR	;
333)   0EB7 7A          		 LD A, D	;
334)   0EB8 32 8F F0    		 LD (VGATMPC),A	;
335)   0EBB AF          		NX2: XOR A         ;NC MEANS WE DON'T PRINT	;NC MEANS WE DON'T PRINT
336)   0EBC C9          		 RET	;
340)   0EBD CD 05 0F    		VGA_PRINT: CALL VGA_GETPAGE	;
341)   0EC0 7E          		VGAP_AGN: LD A, (HL)	;
342)   0EC1 FE 00       		 CP 0	;
343)   0EC3 28 08       		 JR Z, VGAP_EX	;
344)   0EC5 E5          		 PUSH HL	;
345)   0EC6 CD 63 0E    		 CALL VGA_PRCH	;
346)   0EC9 E1          		 POP HL	;
347)   0ECA 23          		 INC HL	;
348)   0ECB 18 F3       		 JR VGAP_AGN	;
349)   0ECD CD 27 0F    		VGAP_EX: CALL VGA_RMVPAGE	;
350)   0ED0 C9          		 RET	;
353)   0ED1 F5          		VGA_TXFORW: PUSH AF	;
354)   0ED2 E5          		 PUSH HL	;
355)   0ED3 21 8D F0    		 LD HL, VGAMAXX	;
356)   0ED6 3A 8B F0    		 LD A, (VGATX_X)	;
357)   0ED9 3C          		 INC A	;
358)   0EDA BE          		 CP (HL)	;
359)   0EDB CC E4 0E    		 CALL Z, VGDOY	;
360)   0EDE 32 8B F0    		 LD (VGATX_X), A	;
361)   0EE1 E1          		 POP HL	;
362)   0EE2 F1          		 POP AF	;
363)   0EE3 C9          		 RET	;
364)   0EE4 21 8E F0    		VGDOY: LD HL, VGAMAXY	;
365)   0EE7 3A 8C F0    		 LD A, (VGATX_Y)	;
366)   0EEA 3C          		 INC A	;
367)   0EEB BE          		 CP (HL)	;
368)   0EEC CC F4 0E    		 CALL Z, DOSCRL	;
369)   0EEF 32 8C F0    		 LD (VGATX_Y), A	;
370)   0EF2 AF          		 XOR A	;
371)   0EF3 C9          		 RET	;
373)   0EF4 CD 31 0E    		DOSCRL: CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
374)   0EF7 CB 47       		 BIT 0, A	;
375)   0EF9 CA F3 12    		 JP Z, DOSCRLGR	;
376)   0EFC CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
377)   0EFE CC 0C 11    		 CALL Z, DOSCRL_COL       ;SCROLL COLORS IF BIT 1=0	;SCROLL COLORS IF BIT 1=0
378)   0F01 CD D6 10    		 CALL DOSCRL_TXT       ;SCROLL TEXT	;SCROLL TEXT
379)   0F04 C9          		 RET	;
389)   0F05 3A 29 F0    		VGA_GETPAGE: LD A, (PGSEM)	;
390)   0F08 3C          		 INC A	;
391)   0F09 32 29 F0    		 LD (PGSEM), A	;
392)   0F0C FE 01       		 CP 1	;
393)   0F0E C0          		 RET NZ	;
394)   0F0F E5          		 PUSH HL	;
395)   0F10 06 04       		 LD B, 4        ;8000h	;8000h
396)   0F12 CD 1C 06    		 CALL GETPGINBANK	;
397)   0F15 32 25 F0    		 LD (TMPG), A        ;SAVE OLD PAGE	;SAVE OLD PAGE
398)   0F18 3A 90 F0    		 LD A,(VGABUF)	;
399)   0F1B 1F          		 RRA         ;PUT BIT 0 ON CARRY FLAG	;PUT BIT 0 ON CARRY FLAG
400)   0F1C 3E 08       		 LD A, 8        ;PAGE 8  IS BUFFER 0	;PAGE 8  IS BUFFER 0
401)   0F1E 30 02       		 JR NC, VGP_SETPG	;
402)   0F20 3E 0C       		 LD A, 12        ;PAGE 12 IS BUFFER 1	;PAGE 12 IS BUFFER 1
403)   0F22 CD FA 05    		VGP_SETPG: CALL PUTPGINBANK	;
404)   0F25 E1          		 POP HL	;
405)   0F26 C9          		 RET	;
409)   0F27 3A 29 F0    		VGA_RMVPAGE: LD A, (PGSEM)	;
410)   0F2A 3D          		 DEC A	;
411)   0F2B 32 29 F0    		 LD (PGSEM), A	;
412)   0F2E FE 00       		 CP 0	;
413)   0F30 C0          		 RET NZ	;
414)   0F31 E5          		 PUSH HL	;
415)   0F32 06 04       		 LD B, 4	;
416)   0F34 3A 25 F0    		 LD A, (TMPG)	;
417)   0F37 CD FA 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
418)   0F3A E1          		 POP HL	;
419)   0F3B C9          		 RET	;
421)   0F3C CD 05 0F    		VGA_SETFONT: CALL VGA_GETPAGE	;
422)   0F3F 21 00 40    		 LD HL, FONT_ADDR	;
423)   0F42 11 00 90    		 LD DE, $9000        ;FONT ADDRESS ON VIDEO MEM AT $1000=4096 ON BANK 4=$8000	;FONT ADDRESS ON VIDEO MEM AT $1000=4096 ON BANK 4=$8000
424)   0F45 01 00 0A    		 LD BC, 2560	;
425)   0F48 ED B0       		 LDIR         ;TRANSFER	;TRANSFER
426)   0F4A CD 27 0F    		 CALL VGA_RMVPAGE	;
427)   0F4D C9          		 RET	;
430)   0F4E 79          		VGA_SETMAXS: LD A, C	;
431)   0F4F 16 28       		 LD D, 40	;
432)   0F51 1E 14       		 LD E, 20	;
433)   0F53 CB 4F       		 BIT 1,A        ;LOW RES MODE	;LOW RES MODE
434)   0F55 28 04       		 JR Z, VGSM_NX	;
436)   0F57 16 50       		 LD D, 80	;
437)   0F59 1E 28       		 LD E, 40	;
438)   0F5B 7A          		VGSM_NX: LD A, D	;
439)   0F5C 32 8D F0    		 LD (VGAMAXX), A	;
440)   0F5F 7B          		 LD A, E	;
441)   0F60 32 8E F0    		 LD (VGAMAXY), A	;
442)   0F63 C9          		 RET	;
445)   0F64 AF          		VGA_SETSCRDEFS: XOR A	;
446)   0F65 32 29 F0    		 LD (PGSEM), A	;
447)   0F68 32 25 F0    		 LD (TMPG), A	;
448)   0F6B 3E 0B       		 LD A, VGA_YELLOW	;
449)   0F6D 32 89 F0    		 LD (VGAFCOL), A	;
450)   0F70 3E 04       		 LD A, VGA_NAVY	;
451)   0F72 32 8A F0    		 LD (VGABCOL), A	;
452)   0F75 CD 4E 0F    		 CALL VGA_SETMAXS	;
453)   0F78 AF          		 XOR A	;
454)   0F79 32 8B F0    		 LD (VGATX_X), A	;
455)   0F7C 32 8C F0    		 LD (VGATX_Y), A	;
456)   0F7F C9          		 RET	;
458)   0F80 CD 64 0F    		VGA_TXTINIT: CALL VGA_SETSCRDEFS	;
459)   0F83 CD 3C 0F    		 CALL VGA_SETFONT       ;SET THE FONT ON VIDEO MEM	;SET THE FONT ON VIDEO MEM
462)   0F86 3A 8D F0    		VGA_TXTCLR: LD A, (VGAMAXX)	;
463)   0F89 67          		 LD H, A	;
464)   0F8A 3A 8E F0    		 LD A, (VGAMAXY)	;
465)   0F8D 5F          		 LD E, A	;
466)   0F8E CD 29 17    		 CALL MULT8	;
467)   0F91 E5          		 PUSH HL	;
468)   0F92 CD 05 0F    		 CALL VGA_GETPAGE	;
469)   0F95 CD 31 0E    		 CALL VGA_GETCONF	;
470)   0F98 C1          		 POP BC         ;TOTAL BYTES	;TOTAL BYTES
471)   0F99 CB 4F       		 BIT 1, A	;
472)   0F9B 28 0E       		 JR Z, ISLOWRES	;
474)   0F9D 21 00 80    		 LD HL, $8000	;
475)   0FA0 3E 20       		 LD A, 32	;
476)   0FA2 77          		 LD (HL), A	;
477)   0FA3 11 01 80    		 LD DE, $8001	;
478)   0FA6 ED B0       		 LDIR	;
479)   0FA8 C3 D0 0F    		 JP VGAC_EXIT	;
481)   0FAB 21 00 80    		ISLOWRES: LD HL, $8000       ;BANK4	;BANK4
482)   0FAE 11 00 84    		 LD DE, $8400        ;COLOR INFO	;COLOR INFO
483)   0FB1 C3 C0 0F    		 JP VGAC_AGN	;
488)   0FB4 CD 05 0F    		VGA_CLR: CALL VGA_GETPAGE	;
489)   0FB7 01 20 03    		 LD BC, 800	;
490)   0FBA 21 00 80    		 LD HL, $8000        ;DEL CHARS	;DEL CHARS
491)   0FBD 11 00 84    		 LD DE, $8400	;
494)   0FC0 3E 20       		VGAC_AGN: LD A, 32	;
495)   0FC2 77          		 LD (HL), A	;
496)   0FC3 C5          		 PUSH BC	;
497)   0FC4 CD E5 0F    		 CALL VGA_GETCOL	;
498)   0FC7 C1          		 POP BC	;
499)   0FC8 12          		 LD (DE), A	;
500)   0FC9 23          		 INC HL	;
501)   0FCA 13          		 INC DE	;
502)   0FCB 0B          		 DEC BC	;
503)   0FCC 78          		 LD A, B	;
504)   0FCD B1          		 OR C	;
505)   0FCE 20 F0       		 JR NZ, VGAC_AGN	;
506)   0FD0 AF          		VGAC_EXIT: XOR A	;
507)   0FD1 32 8B F0    		 LD (VGATX_X), A	;
508)   0FD4 32 8C F0    		 LD (VGATX_Y), A	;
509)   0FD7 CD 27 0F    		 CALL VGA_RMVPAGE	;
510)   0FDA C9          		 RET	;
514)   0FDB CB 20       		VGA_MIXCOLOR: SLA B	;
515)   0FDD CB 20       		 SLA B	;
516)   0FDF CB 20       		 SLA B	;
517)   0FE1 CB 20       		 SLA B	;
518)   0FE3 B0          		 OR B         ;BLEND COLOR 4 BITS FCOLOR AND 4 BITS BCOLOR	;BLEND COLOR 4 BITS FCOLOR AND 4 BITS BCOLOR
519)   0FE4 C9          		 RET	;
523)   0FE5 3A 8A F0    		VGA_GETCOL: LD A, (VGABCOL)      ;GET COLOR INFO	;GET COLOR INFO
524)   0FE8 47          		 LD B, A	;
525)   0FE9 3A 89 F0    		 LD A, (VGAFCOL)	;
526)   0FEC CD DB 0F    		 CALL VGA_MIXCOLOR	;
527)   0FEF C9          		 RET	;
531)   0FF0 F5          		VGA_SETCOL: PUSH AF	;
532)   0FF1 E6 0F       		 AND $0F	;
533)   0FF3 32 89 F0    		 LD (VGAFCOL), A       ;SET COLOR INFO	;SET COLOR INFO
534)   0FF6 F1          		 POP AF	;
535)   0FF7 CB 27       		 SLA A	;
536)   0FF9 CB 27       		 SLA A	;
537)   0FFB CB 27       		 SLA A	;
538)   0FFD CB 27       		 SLA A	;
539)   0FFF E6 0F       		 AND $0F	;
540)   1001 32 8A F0    		 LD (VGABCOL), A       ;SET BACK COLOR	;SET BACK COLOR
541)   1004 C9          		 RET	;
548)   1005 F5          		VGA_CALC_VIDAD: PUSH AF	;
549)   1006 3A 8C F0    		 LD A, (VGATX_Y)	;
550)   1009 67          		 LD H, A 	;
551)   100A 3A 8D F0    		 LD A, (VGAMAXX)	;
552)   100D 5F          		 LD E, A  	;
553)   100E CD 29 17    		 CALL Mult8	;
554)   1011 11 00 80    		 LD DE, $8000	;
555)   1014 19          		 ADD HL,DE	;
557)   1015 16 00       		 LD D, 0	;
558)   1017 3A 8B F0    		 LD A, (VGATX_X)	;
559)   101A 5F          		 LD E, A	;
560)   101B 19          		 ADD HL, DE	;
561)   101C F1          		 POP AF	;
562)   101D C9          		 RET	;
566)   101E E5          		VGA_DOPRNCHTXT: PUSH HL	;
567)   101F F5          		 PUSH AF	;
568)   1020 CD 05 0F    		 CALL VGA_GETPAGE	;
569)   1023 CD 05 10    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDRESS	;CALC VIDEO ADDRESS
570)   1026 F1          		 POP AF	;
571)   1027 77          		 LD (HL), A        ;PUT CHAR ON SCREEN	;PUT CHAR ON SCREEN
572)   1028 E5          		 PUSH HL	;
573)   1029 CD 31 0E    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
574)   102C CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
575)   102E E1          		 POP HL	;
576)   102F 20 08       		 JR NZ, DPC_EX	;
577)   1031 11 00 04    		 LD DE, $400	;
578)   1034 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
579)   1035 CD E5 0F    		 CALL VGA_GETCOL       ;GET CURRENT COLOR	;GET CURRENT COLOR
580)   1038 77          		 LD (HL), A        ;PUT COLOR INFO ON SCREEN	;PUT COLOR INFO ON SCREEN
581)   1039 E1          		DPC_EX: POP HL	;
582)   103A CD 27 0F    		 CALL VGA_RMVPAGE	;
583)   103D C9          		 RET	;
587)   103E F5          		VGA_DOCHCLR: PUSH AF	;
588)   103F CD 05 0F    		 CALL VGA_GETPAGE	;
589)   1042 CD 05 10    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDRESS	;CALC VIDEO ADDRESS
590)   1045 11 00 04    		 LD DE, $400	;
591)   1048 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
592)   1049 F1          		 POP AF	;
593)   104A 77          		 LD (HL), A        ;PUT COLOR INFO ON SCREEN	;PUT COLOR INFO ON SCREEN
594)   104B CD 27 0F    		 CALL VGA_RMVPAGE	;
595)   104E C9          		 RET	;
598)   104F CD 31 0E    		VGA_GETCHAR: CALL VGA_GETCONF      ;GET SCREEEN MODE	;GET SCREEEN MODE
599)   1052 CB 47       		 BIT 0,A	;
600)   1054 20 07       		 JR NZ,GC_DOIT       ;IF TEXT DOIT	;IF TEXT DOIT
602)   1056 16 93       		 LD D,  147 ;' '	;' '
603)   1058 3A 8A F0    		 LD A,(VGABCOL)	;
604)   105B 5F          		 LD E,A	;
605)   105C C9          		 RET	;
606)   105D CD 05 0F    		GC_DOIT: CALL VGA_GETPAGE	;
607)   1060 CD 05 10    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDR ON HL	;CALC VIDEO ADDR ON HL
608)   1063 7E          		 LD A, (HL)	;
609)   1064 F5          		 PUSH AF	;
610)   1065 CD 31 0E    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
611)   1068 FE 03       		 CP 3  ;TEXT HI      ; CHECK IF HIRES SO NO COLOR INFO	;TEXT HI      ; CHECK IF HIRES SO NO COLOR INFO
612)   106A D1          		 POP DE        ;AF ON DE TO PRESERVE FLAG  	;AF ON DE TO PRESERVE FLAG
613)   106B 28 0A       		 JR Z, GC_NOCOL	;
614)   106D 7A          		 LD A, D	;
615)   106E 11 00 04    		 LD DE, $400  ;TEXT LOW	;TEXT LOW
616)   1071 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
617)   1072 57          		 LD D, A        ;THE CHAR	;THE CHAR
618)   1073 7E          		 LD A, (HL)       ;THE COLOR	;THE COLOR
619)   1074 5F          		 LD E, A	;
620)   1075 18 02       		 JR GC_EX	;
622)   1077 1E 00       		 LD E, 0	;
623)   1079 62          		GC_EX: LD H,D	;
624)   107A 6B          		 LD L,E	;
625)   107B CD 27 0F    		 CALL VGA_RMVPAGE	;
626)   107E 54          		 LD D,H	;
627)   107F 5D          		 LD E,L	;
628)   1080 C9          		 RET	;
631)   1081 BB          		VGA_REVRCOLRS: CP E	;
632)   1082 C8          		 RET Z	;
633)   1083 7B          		 LD A, E	;
634)   1084 0F          		 RRCA         ;CHANGE FORE AND BACK COLOR INFO	;CHANGE FORE AND BACK COLOR INFO
635)   1085 0F          		 RRCA	;
636)   1086 0F          		 RRCA	;
637)   1087 0F          		 RRCA	;
638)   1088 CD 3E 10    		 CALL VGA_DOCHCLR     ;CHANGE THE COLOR OF THE CHAR	;CHANGE THE COLOR OF THE CHAR
639)   108B C9          		 RET	;
641)   108C CD 31 0E    		VGA_RMVCURS: CALL VGA_GETCONF      ;GET SCREEEN MODE	;GET SCREEEN MODE
642)   108F CB 47       		 BIT 0,A	;
643)   1091 28 04       		 JR Z, RC_GR       ;IF GRAPHICS	;IF GRAPHICS
644)   1093 CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
645)   1095 28 05       		 JR Z, RC_LOW	;
646)   1097 3A 8F F0    		RC_GR: LD A, (VGATMPC)	;
647)   109A 18 0A       		 JR RC_EX	;
648)   109C CD 4F 10    		RC_LOW: CALL VGA_GETCHAR      ;GET CURRENT COLORS	;GET CURRENT COLORS
649)   109F CD E5 0F    		 CALL VGA_GETCOL       ;GET DEFAULT COLORS	;GET DEFAULT COLORS
650)   10A2 CD 81 10    		 CALL VGA_REVRCOLRS      ;REVERSE IF NECESSARY	;REVERSE IF NECESSARY
651)   10A5 C9          		 RET	;
652)   10A6 CD 73 0E    		RC_EX: CALL VGA_DOPRNCH	;
653)   10A9 C9          		 RET	;
654)   10AA CD 4F 10    		VGA_PRNCURS: CALL VGA_GETCHAR      ; E HAS THE COLOR INFO	; E HAS THE COLOR INFO
655)   10AD D5          		 PUSH DE	;
656)   10AE CD 31 0E    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
657)   10B1 D1          		 POP DE	;
658)   10B2 CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO  	; CHECK IF HIRES SO NO COLOR INFO
659)   10B4 20 13       		 JR NZ, PC_NOCOL	;
660)   10B6 CB 47       		 BIT 0,A        ;CHECK IF GRAPH SO NO TEXT COLOR INFO	;CHECK IF GRAPH SO NO TEXT COLOR INFO
661)   10B8 28 0B       		 JR Z, PC_LORESGR	;
662)   10BA CD E5 0F    		 CALL VGA_GETCOL       ;GET CURRENT COLORS	;GET CURRENT COLORS
663)   10BD 0F          		 RRCA        ;REVERSE BACK & FORE	;REVERSE BACK & FORE
664)   10BE 0F          		 RRCA	;
665)   10BF 0F          		 RRCA	;
666)   10C0 0F          		 RRCA	;
667)   10C1 CD 81 10    		 CALL VGA_REVRCOLRS      ;LOWRES TEXT REVERSE COLORS	;LOWRES TEXT REVERSE COLORS
668)   10C4 C9          		 RET	;
669)   10C5 3E 93       		PC_LORESGR: LD A, VGA_CURSCHAR	;
670)   10C7 18 09       		 JR PC_EX	;
671)   10C9 7A          		PC_NOCOL: LD A,D	;
672)   10CA FE 93       		 CP VGA_CURSCHAR	;
673)   10CC C8          		 RET Z        ;ALREADY PRINTED	;ALREADY PRINTED
674)   10CD 32 8F F0    		 LD (VGATMPC), A	;
675)   10D0 3E 93       		 LD A, VGA_CURSCHAR        ;'_'	;'_'
676)   10D2 CD 73 0E    		PC_EX: CALL VGA_DOPRNCH  	;
677)   10D5 C9          		 RET	;
682)   10D6 CD 05 0F    		DOSCRL_TXT: CALL VGA_GETPAGE	;
683)   10D9 3A 8D F0    		 LD A, (VGAMAXX)	;
684)   10DC 26 00       		 LD H, 0	;
685)   10DE 6F          		 LD L, A	;
686)   10DF 11 00 80    		 LD DE, $8000	;
687)   10E2 19          		 ADD HL, DE	;
689)   10E3 E5          		 PUSH HL	;
690)   10E4 D5          		 PUSH DE	;
692)   10E5 67          		 LD H, A	;
693)   10E6 3A 8E F0    		 LD A, (VGAMAXY)	;
694)   10E9 3D          		 DEC A	;
695)   10EA 5F          		 LD E, A	;
696)   10EB CD 29 17    		 CALL Mult8	;
697)   10EE 44          		 LD B, H	;
698)   10EF 4D          		 LD C, L	;
699)   10F0 D1          		 POP DE	;
700)   10F1 E1          		 POP HL	;
701)   10F2 C5          		 PUSH BC	;
702)   10F3 ED B0       		 LDIR         ;SCROLL UP 39 LINES	;SCROLL UP 39 LINES
703)   10F5 D1          		 POP DE        ;DE = BC	;DE = BC
704)   10F6 21 00 80    		 LD HL, $8000	;
705)   10F9 19          		 ADD HL, DE        ;LINE 39 OR 19 ADDRESS TO BE CLEARED (0-39) (0-19)	;LINE 39 OR 19 ADDRESS TO BE CLEARED (0-39) (0-19)
706)   10FA 3A 8D F0    		 LD A, (VGAMAXX)       ;80 OR 40	;80 OR 40
707)   10FD 47          		 LD B, A	;
708)   10FE 3E 20       		 LD A, 32	;
709)   1100 77          		DST_AGN: LD (HL), A	;
710)   1101 23          		 INC HL	;
711)   1102 10 FC       		 DJNZ DST_AGN	;
712)   1104 CD 27 0F    		 CALL VGA_RMVPAGE	;
713)   1107 3A 8E F0    		 LD A, (VGAMAXY)	;
714)   110A 3D          		 DEC A	;
715)   110B C9          		 RET	;
717)   110C CD 05 0F    		DOSCRL_COL: CALL VGA_GETPAGE	;
718)   110F 21 28 84    		 LD HL, $8428        ;LINE 1	;LINE 1
719)   1112 11 00 84    		 LD DE, $8400        ;LINE 0	;LINE 0
720)   1115 01 F8 02    		 LD BC, 800 - 40       ;BYTES TO SCROLL UP	;BYTES TO SCROLL UP
721)   1118 ED B0       		 LDIR	;
722)   111A CD E5 0F    		 CALL VGA_GETCOL       ;SET DEFAULT COLOR	;SET DEFAULT COLOR
723)   111D 21 F8 86    		 LD HL, $86F8        ;LINE 19 = LAST LINE	;LINE 19 = LAST LINE
724)   1120 06 28       		 LD B, 40	;
725)   1122 77          		DOS_AGNCL: LD (HL), A       ;CLEAR LAST LINE	;CLEAR LAST LINE
726)   1123 23          		 INC HL	;
727)   1124 10 FC       		 DJNZ DOS_AGNCL	;
728)   1126 CD 27 0F    		 CALL VGA_RMVPAGE	;
729)   1129 C9          		 RET	;
739)   112A 3A 29 F0    		 LD A, (PGSEM)	;
740)   112D 3C          		 INC A	;
741)   112E 32 29 F0    		 LD (PGSEM), A	;
742)   1131 FE 01       		 CP 1	;
743)   1133 C0          		 RET NZ	;
744)   1134 E5          		 PUSH HL	;
745)   1135 06 02       		 LD B, 2        ;4000h	;4000h
746)   1137 CD 1C 06    		 CALL GETPGINBANK	;
747)   113A 32 25 F0    		 LD (TMPG), A	;
748)   113D 06 03       		 LD B, 3        ;6000h	;6000h
749)   113F CD 1C 06    		 CALL GETPGINBANK	;
750)   1142 32 26 F0    		 LD (TMPG + 1), A	;
751)   1145 3A 90 F0    		 LD A,(VGABUF)	;
752)   1148 1F          		 RRA        ;PUT SCREEN BUF ON CARRY FLAG	;PUT SCREEN BUF ON CARRY FLAG
753)   1149 38 10       		 JR C,VSPL_SETBUFONE	;
755)   114B 3E 08       		 LD A, 8	;
756)   114D 06 02       		 LD B, 2	;
757)   114F CD FA 05    		 CALL PUTPGINBANK	;
759)   1152 3E 09       		 LD A, 9	;
760)   1154 06 03       		 LD B, 3	;
761)   1156 CD FA 05    		 CALL PUTPGINBANK	;
762)   1159 E1          		 POP HL	;
763)   115A C9          		 RET	;
765)   115B 3E 0C       		 LD A, 12	;
766)   115D 06 02       		 LD B, 2	;
767)   115F CD FA 05    		 CALL PUTPGINBANK	;
769)   1162 3E 0D       		 LD A, 13	;
770)   1164 06 03       		 LD B, 3	;
771)   1166 CD FA 05    		 CALL PUTPGINBANK	;
772)   1169 E1          		 POP HL	;
773)   116A C9          		 RET	;
780)   116B 3A 29 F0    		 LD A, (PGSEM)	;
781)   116E 3C          		 INC A	;
782)   116F 32 29 F0    		 LD (PGSEM), A	;
783)   1172 FE 01       		 CP 1	;
784)   1174 C0          		 RET NZ	;
785)   1175 E5          		 PUSH HL	;
786)   1176 06 02       		 LD B, 2        ;4000h	;4000h
787)   1178 CD 1C 06    		 CALL GETPGINBANK	;
788)   117B 32 25 F0    		 LD (TMPG), A	;
789)   117E 06 03       		 LD B, 3        ;6000h	;6000h
790)   1180 CD 1C 06    		 CALL GETPGINBANK	;
791)   1183 32 26 F0    		 LD (TMPG + 1), A	;
792)   1186 3A 90 F0    		 LD A,(VGABUF)	;
793)   1189 1F          		 RRA        ;PUT SCREEN BUF ON CARRY FLAG	;PUT SCREEN BUF ON CARRY FLAG
794)   118A 38 10       		 JR C,VSPH_SETBUFONE	;
796)   118C 3E 0A       		 LD A, 10	;
797)   118E 06 02       		 LD B, 2	;
798)   1190 CD FA 05    		 CALL PUTPGINBANK	;
800)   1193 3E 0B       		 LD A, 11	;
801)   1195 06 03       		 LD B, 3	;
802)   1197 CD FA 05    		 CALL PUTPGINBANK	;
803)   119A E1          		 POP HL	;
804)   119B C9          		 RET	;
806)   119C 3E 0E       		 LD A, 14	;
807)   119E 06 02       		 LD B, 2	;
808)   11A0 CD FA 05    		 CALL PUTPGINBANK	;
810)   11A3 3E 0F       		 LD A, 15	;
811)   11A5 06 03       		 LD B, 3	;
812)   11A7 CD FA 05    		 CALL PUTPGINBANK	;
813)   11AA E1          		 POP HL	;
814)   11AB C9          		 RET	;
819)   11AC 3A 29 F0    		VGA_RMVGRPG: LD A, (PGSEM)	;
820)   11AF FE 00       		 CP 0	;
821)   11B1 C8          		 RET Z	;
822)   11B2 3D          		 DEC A	;
823)   11B3 32 29 F0    		 LD (PGSEM), A	;
824)   11B6 FE 00       		 CP 0	;
825)   11B8 C0          		 RET NZ	;
826)   11B9 E5          		 PUSH HL	;
827)   11BA 06 02       		 LD B, 2	;
828)   11BC 3A 25 F0    		 LD A, (TMPG)	;
829)   11BF CD FA 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
830)   11C2 06 03       		 LD B, 3	;
831)   11C4 3A 26 F0    		 LD A, (TMPG + 1)	;
832)   11C7 CD FA 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
833)   11CA E1          		 POP HL	;
834)   11CB C9          		 RET	;
837)   11CC CD 64 0F    		VGA_GRPHINIT: CALL VGA_SETSCRDEFS     ;SET SCREEN DEFAULTS	;SET SCREEN DEFAULTS
838)   11CF CD 56 12    		 CALL VGA_GRCLS	;
839)   11D2 AF          		 XOR A	;
840)   11D3 C9          		 RET	;
846)   11D4 F5          		VGA_CHECKXY32: PUSH AF	;
847)   11D5 E5          		 PUSH HL	;
848)   11D6 D5          		 PUSH DE	;
849)   11D7 B7          		 OR A	;
850)   11D8 11 40 01    		 LD DE, 320	;
851)   11DB ED 52       		 SBC HL, DE	;
852)   11DD 30 0F       		 JR NC, CXY3_ABEX	;
853)   11DF D1          		 POP DE	;
854)   11E0 D5          		 PUSH DE	;
855)   11E1 EB          		 EX DE, HL	;
856)   11E2 11 C8 00    		 LD DE, 200	;
857)   11E5 ED 52       		 SBC HL, DE	;
858)   11E7 30 05       		 JR NC, CXY3_ABEX	;
859)   11E9 D1          		 POP DE	;
860)   11EA E1          		 POP HL	;
861)   11EB F1          		 POP AF	;
862)   11EC 37          		 SCF         ;RETURN WITH C SET	;RETURN WITH C SET
863)   11ED C9          		 RET	;
865)   11EE D1          		CXY3_ABEX: POP DE        	;
866)   11EF E1          		 POP HL	;
867)   11F0 F1          		 POP AF	;
868)   11F1 B7          		 OR A	;
869)   11F2 C9          		 RET         ;RETURN WITH NC  	;RETURN WITH NC
875)   11F3 CD D4 11    		VGA_PLTPXL32: CALL VGA_CHECKXY32     ;CHECK BOUNDS	;CHECK BOUNDS
876)   11F6 D0          		 RET NC	;
877)   11F7 E5          		 PUSH HL        ;CHECK BOUNDS	;CHECK BOUNDS
878)   11F8 F5          		 PUSH AF	;
879)   11F9 7B          		 LD A, E	;
880)   11FA FE 66       		 CP 102	;
881)   11FC 38 27       		 JR C, PPNXT0        ;LESS THAN 102	;LESS THAN 102
882)   11FE 20 16       		 JR NZ, NXTBNK        ;MORE THAN 102	;MORE THAN 102
883)   1200 E5          		 PUSH HL        ;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES	;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
884)   1201 01 80 00    		 LD BC, 128	;
885)   1204 B7          		 OR A	;
886)   1205 ED 42       		 SBC HL, BC	;
887)   1207 47          		 LD B, A	;
888)   1208 7C          		 LD A, H	;
889)   1209 B7          		 OR A         ; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128	; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
890)   120A 78          		 LD A, B	;
891)   120B E1          		 POP HL	;
892)   120C 20 17       		 JR NZ, PPNXT0	;
894)   120E 3E 67       		 LD A, 103        ;WE ARE AT LINE ZERO ON 2ND BANK	;WE ARE AT LINE ZERO ON 2ND BANK
895)   1210 11 40 01    		 LD DE, 129 + 191	;
896)   1213 B7          		 OR A	;
897)   1214 ED 52       		 SBC HL, DE        ;	;
898)   1216 D6 67       		NXTBNK: SUB 103        ;SKIP 102 ROWS	;SKIP 102 ROWS
899)   1218 11 C0 00    		 LD DE, 192        ;320-128	;320-128
900)   121B B7          		 OR A	;
901)   121C ED 5A       		 ADC HL, DE	;
902)   121E F5          		 PUSH AF	;
904)   121F CD 6B 11    		 CALL VGA_SETGRPGHI	;
906)   1222 F1          		 POP AF         ;A HAS THE ROWS ON 2ND 16K	;A HAS THE ROWS ON 2ND 16K
907)   1223 18 05       		 JR PPNXT1	;
908)   1225 F5          		PPNXT0: PUSH AF        ;A=E=ROW=Y	;A=E=ROW=Y
909)   1226 CD 2A 11    		 CALL VGA_SETGRPGLO	;
910)   1229 F1          		 POP AF	;
911)   122A 11 00 40    		PPNXT1: LD DE, BASEADDR	;
913)   122D CB 3C       		 SRL H	;
914)   122F CB 1D       		 RR L	;
915)   1231 19          		 ADD HL, DE        ;FIND COLUMN	;FIND COLUMN
916)   1232 E5          		 PUSH HL	;
917)   1233 11 A0 00    		 LD DE, 160	;
919)   1236 CD 35 17    		 CALL Mult12	;
920)   1239 D1          		 POP DE	;
921)   123A 19          		 ADD HL, DE	;
922)   123B C1          		DOPLOTPX: POP BC        ;B HAS THE COLOR	;B HAS THE COLOR
923)   123C D1          		 POP DE         ;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL	;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
924)   123D 7E          		 LD A, (HL)        ;GET PIXEL BYTE	;GET PIXEL BYTE
925)   123E CB 43       		 BIT 0, E        ;CHECK X IS EVEN OR ODD	;CHECK X IS EVEN OR ODD
926)   1240 28 04       		 JR Z, DOEVEN        ;EVEN	;EVEN
928)   1242 E6 F0       		 AND $F0        ;CLEAR RIGHT 4 BITS	;CLEAR RIGHT 4 BITS
929)   1244 18 0A       		 JR DPEXIT	;
931)   1246 CB 00       		DOEVEN: RLC B	;
932)   1248 CB 00       		 RLC B	;
933)   124A CB 00       		 RLC B	;
934)   124C CB 00       		 RLC B	;
935)   124E E6 0F       		 AND $0F        ;ZERO LEFT	;ZERO LEFT
936)   1250 B0          		DPEXIT: OR B         ;MIX PIXELS	;MIX PIXELS
937)   1251 77          		 LD (HL), A	;
938)   1252 CD AC 11    		 CALL VGA_RMVGRPG	;
939)   1255 C9          		 RET	;
942)   1256 CD 2A 11    		VGA_GRCLS: CALL VGA_SETGRPGLO	;
943)   1259 21 00 40    		 LD HL, BASEADDR	;
944)   125C 11 01 40    		 LD DE, BASEADDR + 1	;
945)   125F 01 FF 3F    		 LD BC, 16384 - 1       ;BYTES ON 1ST 16K	;BYTES ON 1ST 16K
946)   1262 AF          		 XOR A	;
947)   1263 77          		 LD (HL), A	;
948)   1264 ED B0       		 LDIR         ;RED - RED	;RED - RED
950)   1266 CD AC 11    		 CALL VGA_RMVGRPG	;
951)   1269 CD 6B 11    		 CALL VGA_SETGRPGHI	;
952)   126C 21 00 40    		 LD HL, BASEADDR	;
953)   126F 11 01 40    		 LD DE, BASEADDR + 1	;
954)   1272 01 FF 3C    		 LD BC, 15616 - 1       ;BYTES ON 2ND 16K	;BYTES ON 2ND 16K
955)   1275 AF          		 XOR A	;
956)   1276 77          		 LD (HL), A	;
957)   1277 ED B0       		 LDIR	;
958)   1279 CD AC 11    		 CALL VGA_RMVGRPG	;
959)   127C AF          		 XOR A        ;RESET TEXT COORDS	;RESET TEXT COORDS
960)   127D 32 8B F0    		 LD (VGATX_X), A	;
961)   1280 32 8C F0    		 LD (VGATX_Y), A	;
962)   1283 C9          		 RET         ;TO MENU	;TO MENU
964)   1284 C5          		FILLBTS: PUSH BC	;
965)   1285 12          		AGN1: LD (DE), A	;
966)   1286 13          		 INC DE	;
967)   1287 0B          		 DEC BC	;
968)   1288 67          		 LD H, A	;
969)   1289 78          		 LD A, B	;
970)   128A B1          		 OR C	;
971)   128B 7C          		 LD A, H	;
972)   128C 20 F7       		 JR NZ, AGN1	;
973)   128E 2D          		 DEC L	;
974)   128F 7D          		 LD A, L	;
975)   1290 B7          		 OR A	;
976)   1291 7C          		 LD A, H	;
977)   1292 C1          		 POP BC	;
978)   1293 20 EF       		 JR NZ, FILLBTS	;
979)   1295 C9          		 RET	;
985)   1296 E5          		VGA_GETPXL32: PUSH HL	;
986)   1297 F5          		 PUSH AF	;
987)   1298 7B          		 LD A, E	;
988)   1299 FE 66       		 CP 102	;
989)   129B 38 25       		 JR C, GPNXT0        ;LESS THAN 102	;LESS THAN 102
990)   129D 20 16       		 JR NZ, GPNXTBNK       ;MORE THAN 102	;MORE THAN 102
991)   129F E5          		 PUSH HL        ;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES	;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
992)   12A0 01 80 00    		 LD BC, 128	;
993)   12A3 B7          		 OR A	;
994)   12A4 ED 42       		 SBC HL, BC	;
995)   12A6 47          		 LD B, A	;
996)   12A7 7C          		 LD A, H	;
997)   12A8 B7          		 OR A         ; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128	; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
998)   12A9 78          		 LD A, B	;
999)   12AA E1          		 POP HL	;
1000)   12AB 20 15       		 JR NZ, GPNXT0	;
1002)   12AD 3E 67       		 LD A, 103        ;WE ARE AT LINE ZERO ON 2ND BANK	;WE ARE AT LINE ZERO ON 2ND BANK
1003)   12AF 11 40 01    		 LD DE, 129 + 191	;
1004)   12B2 B7          		 OR A	;
1005)   12B3 ED 52       		 SBC HL, DE        ;	;
1006)   12B5 D6 67       		GPNXTBNK: SUB 103       ;SKIP 102 ROWS	;SKIP 102 ROWS
1007)   12B7 11 C0 00    		 LD DE, 192        ;320-128	;320-128
1008)   12BA 19          		 ADD HL, DE	;
1009)   12BB F5          		 PUSH AF	;
1011)   12BC CD 6B 11    		 CALL VGA_SETGRPGHI	;
1013)   12BF F1          		 POP AF         ;A HAS THE ROWS ON 2ND 16K	;A HAS THE ROWS ON 2ND 16K
1014)   12C0 18 05       		 JR GPNXT1	;
1015)   12C2 F5          		GPNXT0: PUSH AF        ;A=E=ROW=Y	;A=E=ROW=Y
1016)   12C3 CD 2A 11    		 CALL VGA_SETGRPGLO	;
1017)   12C6 F1          		 POP AF	;
1018)   12C7 11 00 40    		GPNXT1: LD DE, BASEADDR	;
1020)   12CA CB 3C       		 SRL H	;
1021)   12CC CB 1D       		 RR L	;
1022)   12CE 19          		 ADD HL, DE        ;FIND COLUMN	;FIND COLUMN
1023)   12CF 11 A0 00    		 LD DE, 160	;
1024)   12D2 CD 35 17    		 CALL Mult12        ;HL=A*DE	;HL=A*DE
1025)   12D5 C1          		GPDOGETPX: POP BC        ;B HAS THE COLOR	;B HAS THE COLOR
1026)   12D6 D1          		 POP DE         ;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL	;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
1027)   12D7 7E          		 LD A, (HL)        ;GET PIXEL BYTE	;GET PIXEL BYTE
1028)   12D8 CB 43       		 BIT 0, E        ;CHECK X IS EVEN OR ODD	;CHECK X IS EVEN OR ODD
1029)   12DA 28 04       		 JR Z, GPDOEVEN        ;EVEN	;EVEN
1031)   12DC E6 0F       		 AND $0F        ;CLEAR LEFT 4 BITS	;CLEAR LEFT 4 BITS
1032)   12DE 18 0A       		 JR GPDPEXIT	;
1034)   12E0 CB 07       		GPDOEVEN: RLC A	;
1035)   12E2 CB 07       		 RLC A	;
1036)   12E4 CB 07       		 RLC A	;
1037)   12E6 CB 07       		 RLC A	;
1038)   12E8 E6 0F       		 AND $0F        ;ZERO LEFT	;ZERO LEFT
1039)   12EA F5          		GPDPEXIT: PUSH AF       ;SAVE PIXEL	;SAVE PIXEL
1040)   12EB CD AC 11    		 CALL VGA_RMVGRPG	;
1041)   12EE F1          		 POP AF         ;RESTORE PIXEL	;RESTORE PIXEL
1042)   12EF C9          		 RET	;
1047)   12F0 C3 F9 13    		VGA_DOPRNCHGRP: JP VGA_PRNGRCH	;
1055)   12F3 C9          		 RET	;
1061)   12F4 06 02       		SETGRAPHPGS: LD B, 2	;
1062)   12F6 3A 29 F0    		 LD A, (PGSEM)        ;PG SEM FOR ALL 4 PAGES	;PG SEM FOR ALL 4 PAGES
1063)   12F9 3C          		 INC A	;
1064)   12FA 32 29 F0    		 LD (PGSEM), A	;
1065)   12FD FE 01       		 CP 1	;
1066)   12FF C0          		 RET NZ	;
1067)   1300 E5          		 PUSH HL	;
1068)   1301 0E 04       		 LD C, 4	;
1069)   1303 21 25 F0    		 LD HL, TMPG	;
1070)   1306 C5          		 PUSH BC	;
1071)   1307 E5          		SGP_NXT: PUSH HL	;
1072)   1308 CD 1C 06    		 CALL GETPGINBANK	;
1073)   130B E1          		 POP HL	;
1074)   130C 77          		 LD (HL), A	;
1075)   130D 23          		 INC HL	;
1076)   130E 04          		 INC B	;
1077)   130F 0D          		 DEC C	;
1078)   1310 20 F5       		 JR NZ, SGP_NXT	;
1079)   1312 C1          		 POP BC	;
1080)   1313 0E 04       		 LD C, 4	;
1081)   1315 3A 90 F0    		 LD A,(VGABUF)	;
1082)   1318 1F          		 RRA	;
1083)   1319 3E 08       		 LD A, 8       ;BUFFER 0	;BUFFER 0
1084)   131B 30 02       		 JR NC, SGP_NXT2	;
1085)   131D 3E 0C       		 LD A, 12      ;BUFFER 1	;BUFFER 1
1088)   131F C5          		SGP_NXT2: PUSH BC	;
1089)   1320 CD FA 05    		 CALL PUTPGINBANK	;
1090)   1323 C1          		 POP BC	;
1091)   1324 3C          		 INC A	;
1092)   1325 04          		 INC B	;
1093)   1326 0D          		 DEC C	;
1094)   1327 20 F6       		 JR NZ, SGP_NXT2	;
1095)   1329 E1          		 POP HL	;
1096)   132A C9          		 RET	;
1100)   132B 06 02       		RMVGRAPHPGS: LD B, 2	;
1101)   132D 3A 29 F0    		 LD A, (PGSEM)	;
1102)   1330 FE 00       		 CP 0	;
1103)   1332 C8          		 RET Z	;
1104)   1333 3D          		 DEC A	;
1105)   1334 32 29 F0    		 LD (PGSEM), A	;
1106)   1337 FE 00       		 CP 0	;
1107)   1339 C0          		 RET NZ	;
1108)   133A E5          		 PUSH HL	;
1109)   133B 21 25 F0    		 LD HL, TMPG	;
1110)   133E 0E 04       		 LD C, 4	;
1111)   1340 7E          		RGP_NXT: LD A, (HL)	;
1112)   1341 E5          		 PUSH HL	;
1113)   1342 C5          		 PUSH BC	;
1114)   1343 CD FA 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
1115)   1346 C1          		 POP BC	;
1116)   1347 E1          		 POP HL	;
1117)   1348 04          		 INC B	;
1118)   1349 23          		 INC HL	;
1119)   134A 0D          		 DEC C	;
1120)   134B 20 F3       		 JR NZ, RGP_NXT	;
1121)   134D E1          		 POP HL	;
1122)   134E C9          		 RET	;
1132)   134F 3E 50       		VGA_CALC_VA64: LD A, 80	;
1134)   1351 E5          		 PUSH HL	;
1135)   1352 CD 35 17    		 CALL Mult12        ;HL=A * DE=Y	;HL=A * DE=Y
1136)   1355 EB          		 EX DE, HL        ;DE=Y*80	;DE=Y*80
1137)   1356 E1          		 POP HL	;
1138)   1357 0E 08       		 LD C, 8	;
1139)   1359 CD 8B 17    		 CALL DIV16_8        ;HL=HL/C  A=REMAINDER	;HL=HL/C  A=REMAINDER
1140)   135C 19          		 ADD HL, DE        ;THE ADDRESS IN 32K VIDEO BUFFER	;THE ADDRESS IN 32K VIDEO BUFFER
1141)   135D 11 00 40    		 LD DE, $4000	;
1142)   1360 19          		 ADD HL, DE        ;THE ADDRESS IN Z80 RAM	;THE ADDRESS IN Z80 RAM
1144)   1361 4F          		 LD C,A	;
1145)   1362 3E 07       		 LD A,7	;
1146)   1364 91          		 SUB C        ;A=7-REM TO FIND THE BIT TO SET LEFT TO RIGHT	;A=7-REM TO FIND THE BIT TO SET LEFT TO RIGHT
1147)   1365 06 01       		 LD B, 1	;
1148)   1367 B7          		 OR A	;
1149)   1368 28 05       		VCVA_AGN: JR Z, VCVA_NXT	;
1150)   136A CB 10       		 RL B         ;MOVE B (THE MASK) TO THE RIGHT BIT	;MOVE B (THE MASK) TO THE RIGHT BIT
1151)   136C 3D          		 DEC A	;
1152)   136D 18 F9       		 JR VCVA_AGN	;
1153)   136F 78          		VCVA_NXT: LD A, B	;
1154)   1370 C9          		 RET	;
1161)   1371 F5          		VGA_CHECKXY64: PUSH AF	;
1162)   1372 E5          		 PUSH HL	;
1163)   1373 D5          		 PUSH DE	;
1164)   1374 B7          		 OR A	;
1165)   1375 11 80 02    		 LD DE, 640	;
1166)   1378 ED 52       		 SBC HL, DE	;
1167)   137A 30 0F       		 JR NC, CXY6_ABEX	;
1168)   137C D1          		 POP DE	;
1169)   137D D5          		 PUSH DE	;
1170)   137E EB          		 EX DE, HL	;
1171)   137F 11 90 01    		 LD DE, 400	;
1172)   1382 ED 52       		 SBC HL, DE	;
1173)   1384 D1          		 POP DE         ;ABNORMAL EXIT PIXEL CANT PUT TO SCREEN	;ABNORMAL EXIT PIXEL CANT PUT TO SCREEN
1174)   1385 E1          		 POP HL	;
1175)   1386 30 03       		 JR NC, CXY6_ABEX	;
1176)   1388 F1          		 POP AF	;
1177)   1389 37          		 SCF         ;RETURN WITH C SET	;RETURN WITH C SET
1178)   138A C9          		 RET	;
1179)   138B F1          		CXY6_ABEX: POP AF	;
1180)   138C AF          		 XOR A	;
1181)   138D C9          		 RET         ;RETURN WITH NC	;RETURN WITH NC
1186)   138E CD 71 13    		VGA_PLTPXL64: CALL VGA_CHECKXY64	;
1187)   1391 D0          		 RET NC         ;NOT VALID PARAMS	;NOT VALID PARAMS
1188)   1392 F5          		 PUSH AF	;
1189)   1393 E5          		 PUSH HL	;
1190)   1394 D5          		 PUSH DE	;
1191)   1395 CD F4 12    		 CALL SETGRAPHPGS       ;BRING VIDEO PAGES TO Z80	;BRING VIDEO PAGES TO Z80
1192)   1398 D1          		PP6_PAROK: POP DE	;
1193)   1399 E1          		 POP HL	;
1195)   139A CD 4F 13    		 CALL VGA_CALC_VA64       ;HL THE VGA ADDRESS AND A THE BIT MASK	;HL THE VGA ADDRESS AND A THE BIT MASK
1196)   139D D1          		 POP DE         ;D HAS THE COLOR 0 OR 1, RESET BIT OR SET	;D HAS THE COLOR 0 OR 1, RESET BIT OR SET
1197)   139E 5F          		 LD E, A	;
1198)   139F 3A 8A F0    		 LD A,(VGABCOL)	;
1199)   13A2 BA          		 CP D         ;CHECK IF COLOR IS SAME AS BACKG	;CHECK IF COLOR IS SAME AS BACKG
1200)   13A3 28 05       		 JR Z, PP6_RESET	;
1202)   13A5 7E          		 LD A, (HL)        ;GET THE BYTE	;GET THE BYTE
1203)   13A6 B3          		 OR E         ;SET THE BIT	;SET THE BIT
1204)   13A7 77          		 LD (HL), A        ;PUT THE BYTE BACK	;PUT THE BYTE BACK
1205)   13A8 18 06       		 JR PP6_EXIT	;
1208)   13AA 7B          		 LD A, E        ;MASK ON A	;MASK ON A
1209)   13AB 2F          		 CPL         ;INVERT ALL PIXELS	;INVERT ALL PIXELS
1210)   13AC 5F          		 LD E, A        ;MASK ON E	;MASK ON E
1211)   13AD 7E          		 LD A, (HL)        ;GET THE BYTE	;GET THE BYTE
1212)   13AE A3          		 AND E         ;RESET THE BIT	;RESET THE BIT
1213)   13AF 77          		 LD (HL), A        ;PUT THE BYTE BACK	;PUT THE BYTE BACK
1214)   13B0 CD 2B 13    		PP6_EXIT: CALL RMVGRAPHPGS      ;RESTORE PREVIOUS PAGES TO Z80	;RESTORE PREVIOUS PAGES TO Z80
1215)   13B3 C9          		 RET	;
1223)   13B4 CD 71 13    		VGA_GETPXL64: CALL VGA_CHECKXY64	;
1224)   13B7 D0          		 RET NC         ;NOT VALID PARAMS	;NOT VALID PARAMS
1225)   13B8 CD F4 12    		 CALL SETGRAPHPGS       ;BRING VIDEO PAGES TO Z80	;BRING VIDEO PAGES TO Z80
1226)   13BB D1          		 POP DE	;
1227)   13BC E1          		 POP HL	;
1228)   13BD F1          		 POP AF	;
1230)   13BE CD 4F 13    		 CALL VGA_CALC_VA64       ;HL THE VGA ADDRESS AND A THE BIT MASK	;HL THE VGA ADDRESS AND A THE BIT MASK
1231)   13C1 5F          		 LD E, A	;
1232)   13C2 7E          		 LD A, (HL)	;
1233)   13C3 A3          		 AND E	;
1234)   13C4 FE 00       		 CP 0	;
1235)   13C6 28 02       		 JR Z, GP6EXIT	;
1236)   13C8 3E 01       		 LD A, 1	;
1238)   13CA F5          		GP6EXIT: PUSH AF	;
1239)   13CB CD 2B 13    		 CALL RMVGRAPHPGS       ;RESTORE PREVIOUS PAGES TO Z80	;RESTORE PREVIOUS PAGES TO Z80
1240)   13CE F1          		 POP AF	;
1241)   13CF C9          		 RET	;
1249)   13D0 F5          		VGA_PLTPXL: PUSH AF	;
1250)   13D1 E5          		 PUSH HL	;
1251)   13D2 D5          		 PUSH DE        ;SAVE A	;SAVE A
1252)   13D3 CD 31 0E    		 CALL VGA_GETCONF	;
1253)   13D6 D1          		 POP DE	;
1254)   13D7 E1          		 POP HL	;
1255)   13D8 F1          		 POP AF	;
1256)   13D9 E5          		 PUSH HL	;
1257)   13DA D5          		 PUSH DE	;
1258)   13DB DD 21 E9 13 		 LD IX,VGA_PPEXIT	;
1259)   13DF DD E5       		 PUSH IX        ;RETURN ADDRESS  	;RETURN ADDRESS
1260)   13E1 CB 49       		 BIT 1, C        ;test low or hi	;test low or hi
1261)   13E3 C2 8E 13    		 JP NZ, VGA_PLTPXL64       ;NZ MEANS HI	;NZ MEANS HI
1262)   13E6 C3 F3 11    		 JP VGA_PLTPXL32	;
1263)   13E9 D1          		VGA_PPEXIT: POP DE	;
1264)   13EA E1          		 POP HL	;
1265)   13EB C9          		 RET	;
1271)   13EC D5          		VGA_GETPXL: PUSH DE	;
1272)   13ED CD 31 0E    		 CALL VGA_GETCONF	;
1273)   13F0 D1          		 POP DE	;
1274)   13F1 CB 49       		 BIT 1, C        ;test low or hi	;test low or hi
1275)   13F3 C2 B4 13    		 JP NZ, VGA_GETPXL64       ;NZ MEANS HI	;NZ MEANS HI
1276)   13F6 C3 96 12    		 JP VGA_GETPXL32	;
1282)   13F9 F5          		VGA_PRNGRCH:  PUSH AF	;
1288)   13FA 1E 08       		 LD E,FONT_WIDTH	;
1289)   13FC 3A 8B F0    		VPGC_NXT: LD A,(VGATX_X)	;
1290)   13FF 67          		 LD H,A	;
1292)   1400 CD 29 17    		 CALL MULT8	;
1293)   1403 E5          		 PUSH HL        ;SAVE RESULT	;SAVE RESULT
1294)   1404 1E 0A       		 LD E,FONT_HEIGHT	;
1295)   1406 3A 8C F0    		 LD A,(VGATX_Y)	;
1296)   1409 67          		 LD H,A	;
1297)   140A CD 29 17    		 CALL MULT8	;
1298)   140D D1          		 POP DE	;
1299)   140E EB          		 EX DE,HL	;
1301)   140F F1          		 POP AF        ;GET THE CHAR	;GET THE CHAR
1303)   1410 E5          		VGA_PRNGRCHAT: PUSH HL	;
1304)   1411 D5          		 PUSH DE	;
1305)   1412 B7          		 OR A	;
1306)   1413 21 00 40    		 LD HL, FONT_ADDR	;
1307)   1416 16 00       		 LD D, 0	;
1308)   1418 5F          		 LD E, A	;
1309)   1419 ED 5A       		 ADC HL, DE        ;HL THE START OF FONT	;HL THE START OF FONT
1310)   141B 0E 0A       		 LD C, FONT_HEIGHT       ; TOTAL FONT LINES	; TOTAL FONT LINES
1311)   141D EB          		 EX DE,HL       ;DE THE START OF FONT PATTERN	;DE THE START OF FONT PATTERN
1312)   141E 1A          		VPGC_AGN3: LD A, (DE)       ;FONT 8BIT PATTERN FOR A LINE	;FONT 8BIT PATTERN FOR A LINE
1313)   141F 06 08       		 LD B, FONT_WIDTH	;
1314)   1421 CB 27       		VPGC_AGN4: SLA A        ;CHECK BIT FOR 1=FCOLOR OR 0=BCOLOR	;CHECK BIT FOR 1=FCOLOR OR 0=BCOLOR
1315)   1423 67          		 LD H,A        ;SAVE A  	;SAVE A
1316)   1424 38 05       		 JR C, VPGC_FCOLOR	;
1317)   1426 3A 8A F0    		 LD A, (VGABCOL)	;
1318)   1429 18 03       		 JR VPGC_CONT	;
1319)   142B 3A 89 F0    		VPGC_FCOLOR: LD A, (VGAFCOL) 	;
1321)   142E D9          		VPGC_CONT: EXX 	;
1322)   142F D1          		 POP DE	;
1323)   1430 E1          		 POP HL	;
1324)   1431 CD D0 13    		 CALL VGA_PLTPXL	;
1325)   1434 23          		 INC HL        ;NEXT PIXEL ON VIDEO BUF	;NEXT PIXEL ON VIDEO BUF
1326)   1435 E5          		 PUSH HL	;
1327)   1436 D5          		 PUSH DE	;
1328)   1437 D9          		 EXX	;
1329)   1438 7C          		 LD A,H        ;RESTORE A	;RESTORE A
1330)   1439 10 E6       		 DJNZ VPGC_AGN4	;
1331)   143B D9          		 EXX	;
1332)   143C D1          		 POP DE	;
1333)   143D E1          		 POP HL	;
1334)   143E 06 00       		 LD B,0	;
1335)   1440 0E 08       		 LD C,FONT_WIDTH	;
1336)   1442 B7          		 OR A	;
1337)   1443 ED 42       		 SBC HL,BC       ;X=HL AT THE START	;X=HL AT THE START
1338)   1445 13          		 INC DE        ;Y=DE +1	;Y=DE +1
1339)   1446 E5          		 PUSH HL	;
1340)   1447 D5          		 PUSH DE	;
1341)   1448 D9          		 EXX	;
1342)   1449 14          		 INC D         ;ADD 256 FOR NEXT CHAR PATTERN	;ADD 256 FOR NEXT CHAR PATTERN
1343)   144A 0D          		 DEC C	;
1344)   144B 20 D1       		 JR NZ, VPGC_AGN3	;
1345)   144D D1          		 POP DE	;
1346)   144E E1          		 POP HL	;
1347)   144F C9          		 RET	;
1352)   1450 67          		VGA_CLRTXTLN: LD H,A	;
1353)   1451 3A 8C F0    		 LD A,(VGATX_Y)	;
1354)   1454 F5          		 PUSH AF	;
1355)   1455 7C          		 LD A,H	;
1356)   1456 32 8C F0    		 LD (VGATX_Y),A	;
1357)   1459 F5          		 PUSH AF	;
1358)   145A CD 31 0E    		 CALL VGA_GETCONF	;
1359)   145D F1          		 POP AF	;
1360)   145E CB 49       		 BIT 1, C 	;
1361)   1460 06 4E       		 LD B,78       ;test low or hi	;test low or hi
1362)   1462 20 02       		 JR NZ, DOCLRTXT;CLRTXT64    ;NZ MEANS HI	;CLRTXT64    ;NZ MEANS HI
1364)   1464 06 26       		 LD B,38	;
1365)   1466 3E 20       		DOCLRTXT: LD A,' '	;
1366)   1468 C5          		 PUSH BC	;
1367)   1469 CD 63 0E    		 CALL VGA_PRCH      ;PRINT AND FORWARDS	;PRINT AND FORWARDS
1368)   146C C1          		 POP BC	;
1369)   146D 10 F7       		 DJNZ DOCLRTXT	;
1370)   146F 3E 20       		 LD A,' '	;
1371)   1471 CD 73 0E    		 CALL VGA_DOPRNCH	;
1372)   1474 AF          		 XOR A	;
1373)   1475 32 8B F0    		 LD (VGATX_X),A	;
1374)   1478 F1          		 POP AF	;
1375)   1479 32 8C F0    		 LD LD (VGATX_Y),A	;
1376)   147C C9          		 RET	;
 37)   147D F5          		DELAYMICROSEC: PUSH AF	;
 38)   147E D5          		 PUSH DE	;
 39)   147F 1B          		 DEC DE	;
 40)   1480 D1          		 POP DE	;
 41)   1481 F1          		 POP AF	;
 42)   1482 C9          		 RET	;
 45)   1483 CD 7D 14    		S21: CALL DELAYMICROSEC	;
 46)   1486 10 FB       		 DJNZ S21	;
 47)   1488 C9          		 RET	;
 51)   1489 F5          		DELAYMILISEC: PUSH AF	;
 52)   148A D5          		 PUSH DE	;
 53)   148B 11 2C 01    		 LD DE, 300        ;2000 1 MILISEC =300 ON 8MHZ SO 30= 0.1 MILISECS = 100 MICROSECS	;2000 1 MILISEC =300 ON 8MHZ SO 30= 0.1 MILISECS = 100 MICROSECS
 54)   148E 1B          		DEL1: DEC DE	;
 55)   148F 7A          		 LD A, D        ;TEST FOR DE=00	;TEST FOR DE=00
 56)   1490 B3          		 OR E	;
 57)   1491 20 FB       		 JR NZ, DEL1	;
 58)   1493 D1          		 POP DE	;
 59)   1494 F1          		 POP AF	;
 60)   1495 C9          		 RET	;
 63)   1496 06 50       		 LD B, 80	;
 65)   1498 CD 89 14    		S1: CALL DELAYMILISEC	;
 66)   149B 10 FB       		 DJNZ S1	;
 67)   149D C9          		 RET	;
 72)   149E C5          		@DELAYSEC: PUSH BC	;
 73)   149F 01 E8 03    		 LD BC, 1000	;
 74)   14A2 C5          		MYDLAGN: PUSH BC	;
 75)   14A3 CD 89 14    		 CALL DELAY        ;1MS ON 8 MHZ	;1MS ON 8 MHZ
 76)   14A6 C1          		 POP BC	;
 77)   14A7 0B          		 DEC BC	;
 78)   14A8 78          		 LD A, B	;
 79)   14A9 B1          		 OR C	;
 80)   14AA 20 F6       		 JR NZ, MYDLAGN	;
 81)   14AC C1          		 POP BC	;
 82)   14AD 10 EF       		 DJNZ DELAYSEC	;
 83)   14AF C9          		 RET	;
 88)   14B0 F5          		OUTASC: PUSH AF	;
 89)   14B1 D5          		 PUSH DE	;
 90)   14B2 CD E5 14    		 CALL B2Bcd	;
 91)   14B5 D1          		 POP DE	;
 92)   14B6 CD 0B 15    		 CALL BCD2HA	;
 93)   14B9 F1          		 POP AF	;
 94)   14BA C9          		 RET	;
108)   14BB B7          		BCD2BN: OR A	;
109)   14BC 47          		 LD B, A	;
110)   14BD E6 F0       		 AND $F0	;
111)   14BF 0F          		 RRCA	;
112)   14C0 4F          		 LD C, A	;
113)   14C1 0F          		 RRCA	;
114)   14C2 0F          		 RRCA	;
115)   14C3 81          		 ADD A, C	;
116)   14C4 4F          		 LD C, A	;
117)   14C5 78          		 LD A, B	;
118)   14C6 E6 0F       		 AND $0F	;
119)   14C8 81          		 ADD A, C	;
120)   14C9 C9          		 RET	;
135)   14CA 26 FF       		BN2BCD: LD H, $FF	;
136)   14CC 24          		D100LP: INC H	;
137)   14CD D6 64       		 SUB 100	;
138)   14CF 30 FB       		 JR NC, D100LP	;
139)   14D1 C6 64       		 ADD A, 100	;
140)   14D3 2E FF       		 LD L, $FF	;
141)   14D5 2C          		D10LP: INC L	;
142)   14D6 D6 0A       		 SUB 10	;
143)   14D8 30 FB       		 JR NC, D10LP	;
144)   14DA C6 0A       		 ADD A, 10	;
145)   14DC 4F          		 LD C, A	;
146)   14DD 7D          		 LD A, L	;
147)   14DE 07          		 RLCA	;
148)   14DF 07          		 RLCA	;
149)   14E0 07          		 RLCA	;
150)   14E1 07          		 RLCA	;
151)   14E2 B1          		 OR C	;
152)   14E3 6F          		 LD L, A	;
153)   14E4 C9          		 RET	;
167)   14E5 01 00 10    		 LD BC, 16 * 256 + 0       ; handle 16 bits, one bit per iteration	; handle 16 bits, one bit per iteration
168)   14E8 11 00 00    		 LD DE, 0	;
170)   14EB 29          		 ADD HL, HL	;
171)   14EC 7B          		 LD A, E	;
172)   14ED 8F          		 ADC A, A	;
173)   14EE 27          		 DAA	;
174)   14EF 5F          		 LD E, A	;
175)   14F0 7A          		 LD A, D	;
176)   14F1 8F          		 ADC A, A	;
177)   14F2 27          		 DAA	;
178)   14F3 57          		 LD D, A	;
179)   14F4 79          		 LD A, C	;
180)   14F5 8F          		 ADC A, A	;
181)   14F6 27          		 DAA	;
182)   14F7 4F          		 LD C, A	;
183)   14F8 10 F1       		 DJNZ cvtLp	;
184)   14FA EB          		 EX DE, HL	;
185)   14FB C9          		 RET	;
199)   14FC B7          		BCD2BN: OR A	;
200)   14FD 47          		 LD B, A	;
201)   14FE E6 F0       		 AND $F0	;
202)   1500 0F          		 RRCA	;
203)   1501 4F          		 LD C, A	;
204)   1502 0F          		 RRCA	;
205)   1503 0F          		 RRCA	;
206)   1504 81          		 ADD A, C	;
207)   1505 4F          		 LD C, A	;
208)   1506 78          		 LD A, B	;
209)   1507 E6 0F       		 AND $0F	;
210)   1509 81          		 ADD A, C	;
211)   150A C9          		 RET	;
223)   150B 79          		 LD A, C	;
224)   150C CD 38 15    		 CALL cvtUN	;
225)   150F 79          		 LD A, C	;
226)   1510 CD 3C 15    		 CALL cvtLN	;
227)   1513 7C          		 LD A, H	;
228)   1514 CD 38 15    		 CALL cvtUN	;
229)   1517 7C          		 LD A, H	;
230)   1518 CD 3C 15    		 CALL cvtLN	;
231)   151B 7D          		 LD A, L	;
232)   151C CD 38 15    		 CALL cvtUN	;
233)   151F 7D          		 LD A, L	;
234)   1520 18 1A       		 JR cvtLN	;
236)   1522 1F          		 RRA         ; move upper nibble into lower nibble	; move upper nibble into lower nibble
237)   1523 1F          		 RRA	;
238)   1524 1F          		 RRA	;
239)   1525 1F          		 RRA	;
241)   1526 E6 0F       		 AND 0Fh        ; isolate lower nibble	; isolate lower nibble
242)   1528 C6 90       		 ADD A, 90h        ; old trick	; old trick
243)   152A 27          		 DAA         ; for converting	; for converting
244)   152B CE 40       		 ADC A, 40h        ; one nibble	; one nibble
245)   152D 27          		 DAA         ; to hex ASCII	; to hex ASCII
246)   152E 12          		 LD (DE), A	;
247)   152F 13          		 INC DE	;
248)   1530 C9          		 RET	;
260)   1531 7D          		 LD A, L	;
261)   1532 CD 22 15    		 CALL cvtUN	;
262)   1535 7D          		 LD A, L	;
263)   1536 18 EE       		 JR cvtLN	;
265)   1538 1F          		 RRA         ; move upper nibble into lower nibble	; move upper nibble into lower nibble
266)   1539 1F          		 RRA	;
267)   153A 1F          		 RRA	;
268)   153B 1F          		 RRA	;
270)   153C E6 0F       		 AND 0Fh        ; isolate lower nibble	; isolate lower nibble
271)   153E C6 90       		 ADD A, 90h        ; old trick	; old trick
272)   1540 27          		 DAA         ; for converting	; for converting
273)   1541 CE 40       		 ADC A, 40h        ; one nibble	; one nibble
274)   1543 27          		 DAA         ; to hex ASCII	; to hex ASCII
275)   1544 12          		 LD (DE), A	;
276)   1545 13          		 INC DE	;
277)   1546 C9          		 RET	;
294)   1547 F5          		 PUSH AF        ; 11 T-states	; 11 T-states
296)   1548 ED 44       		 NEG         ; 8 T-states	; 8 T-states
297)   154A ED 44       		 NEG         ; 8 T-states	; 8 T-states
298)   154C ED 44       		 NEG         ; 8 T-states	; 8 T-states
299)   154E ED 44       		 NEG         ; 8 T-states	; 8 T-states
300)   1550 0B          		 DEC BC         ; 6 T-states	; 6 T-states
301)   1551 79          		 LD A, C        ; 9 T-states	; 9 T-states
302)   1552 B0          		 OR B         ; 4 T-states	; 4 T-states
303)   1553 C2 48 15    		 JP NZ, pau_lp        ; 10 T-states	; 10 T-states
304)   1556 F1          		 POP AF         ; 10 T-states	; 10 T-states
305)   1557 C9          		 RET         ; Pause complete, RETurn	; Pause complete, RETurn
343)   1558 26 00       		@B2D8: LD H, 0	;
344)   155A 6F          		 LD L, A	;
345)   155B 1E 00       		@B2D16: LD E, 0	;
346)   155D 16 00       		@B2D24: LD D, 0	;
347)   155F 01 00 00    		@B2D32: LD BC, 0	;
348)   1562 DD 21 00 00 		@B2D48: LD IX, 0        ; zero all non-used bits	; zero all non-used bits
349)   1566 22 93 F0    		@B2D64: LD (B2DINV), HL	;
350)   1569 ED 53 95 F0 		 LD (B2DINV + 2), DE	;
351)   156D ED 43 97 F0 		 LD (B2DINV + 4), BC	;
352)   1571 DD 22 99 F0 		 LD (B2DINV + 6), IX       ; place full 64-bit input value in buffer	; place full 64-bit input value in buffer
353)   1575 21 9B F0    		 LD HL, B2DBUF	;
354)   1578 11 9C F0    		 LD DE, B2DBUF + 1	;
355)   157B 36 20       		 LD (HL), ' '	;
357)   157D 01 12 00    		 LD BC, 18	;
358)   1580 ED B0       		 LDIR         ; fill 1st 19 bytes of buffer with spaces	; fill 1st 19 bytes of buffer with spaces
359)   1582 ED 43 AE F0 		 LD (B2DEND - 1), BC       ;set BCD value to "0" & place terminating 0	;set BCD value to "0" & place terminating 0
360)   1586 1E 01       		 LD E, 1        ; no. of bytes in BCD value	; no. of bytes in BCD value
361)   1588 21 9B F0    		 LD HL, B2DINV + 8       ; (address MSB input)+1	; (address MSB input)+1
362)   158B 01 09 09    		 LD BC, 0x0909	;
363)   158E AF          		 XOR A	;
364)   158F 05          		B2DSKP0: DEC B	;
365)   1590 28 29       		 JR Z, B2DSIZ        ; all 0: continue with postprocessing	; all 0: continue with postprocessing
366)   1592 2B          		 DEC HL	;
367)   1593 B6          		 OR (HL)        ; find first byte <>0	; find first byte <>0
368)   1594 28 F9       		 JR Z, B2DSKP0	;
369)   1596 0D          		B2DFND1: DEC C	;
370)   1597 17          		 RLA	;
371)   1598 30 FC       		 JR NC, B2DFND1        ; determine no. of most significant 1-bit	; determine no. of most significant 1-bit
372)   159A 1F          		 RRA	;
373)   159B 57          		 LD D, A        ; byte from binary input value	; byte from binary input value
374)   159C E5          		B2DLUS2: PUSH HL	;
375)   159D C5          		 PUSH BC	;
376)   159E 21 AE F0    		B2DLUS1: LD HL, B2DEND - 1      ; address LSB of BCD value	; address LSB of BCD value
377)   15A1 43          		 LD B, E        ; current length of BCD value in bytes	; current length of BCD value in bytes
378)   15A2 CB 12       		 RL D         ; highest bit from input value -> carry	; highest bit from input value -> carry
379)   15A4 7E          		B2DLUS0: LD A, (HL)	;
380)   15A5 8F          		 ADC A, A	;
381)   15A6 27          		 DAA	;
382)   15A7 77          		 LD (HL), A        ; double 1 BCD byte from intermediate result	; double 1 BCD byte from intermediate result
383)   15A8 2B          		 DEC HL	;
384)   15A9 10 F9       		 DJNZ B2DLUS0        ; and go on to double entire BCD value (+carry!)	; and go on to double entire BCD value (+carry!)
385)   15AB 30 03       		 JR NC, B2DNXT	;
386)   15AD 1C          		 INC E         ; carry at MSB -> BCD value grew 1 byte larger	; carry at MSB -> BCD value grew 1 byte larger
387)   15AE 36 01       		 LD (HL), 1        ; initialize new MSB of BCD value	; initialize new MSB of BCD value
388)   15B0 0D          		B2DNXT: DEC C	;
389)   15B1 20 EB       		 JR NZ, B2DLUS1        ; repeat for remaining bits from 1 input byte	; repeat for remaining bits from 1 input byte
390)   15B3 C1          		 POP BC         ; no. of remaining bytes in input value	; no. of remaining bytes in input value
391)   15B4 0E 08       		 LD C, 8        ; reset bit-counter	; reset bit-counter
392)   15B6 E1          		 POP HL         ; pointer to byte from input value	; pointer to byte from input value
393)   15B7 2B          		 DEC HL	;
394)   15B8 56          		 LD D, (HL)        ; get next group of 8 bits	; get next group of 8 bits
395)   15B9 10 E1       		 DJNZ B2DLUS2        ; and repeat until last byte from input value	; and repeat until last byte from input value
396)   15BB 21 AF F0    		B2DSIZ: LD HL, B2DEND        ; address of terminating 0	; address of terminating 0
397)   15BE 4B          		 LD C, E        ; size of BCD value in bytes	; size of BCD value in bytes
398)   15BF B7          		 OR A	;
399)   15C0 ED 42       		 SBC HL, BC        ; calculate address of MSB BCD	; calculate address of MSB BCD
400)   15C2 54          		 LD D, H	;
401)   15C3 5D          		 LD E, L	;
402)   15C4 ED 42       		 SBC HL, BC	;
403)   15C6 EB          		 EX DE, HL        ; HL=address BCD value, DE=start of decimal value	; HL=address BCD value, DE=start of decimal value
404)   15C7 41          		 LD B, C        ; no. of bytes BCD	; no. of bytes BCD
405)   15C8 CB 21       		 SLA C         ; no. of bytes decimal (possibly 1 too high)	; no. of bytes decimal (possibly 1 too high)
406)   15CA 3E 30       		 LD A, '0'	;
407)   15CC ED 6F       		 RLD         ; shift bits 4-7 of (HL) into bit 0-3 of A	; shift bits 4-7 of (HL) into bit 0-3 of A
408)   15CE FE 30       		 CP '0'         ; (HL) was > 9h?	; (HL) was > 9h?
409)   15D0 20 06       		 JR NZ, B2DEXPH        ; if yes, start with recording high digit	; if yes, start with recording high digit
410)   15D2 0D          		 DEC C         ; correct number of decimals	; correct number of decimals
411)   15D3 13          		 INC DE         ; correct start address	; correct start address
412)   15D4 18 04       		 JR B2DEXPL        ; continue with converting low digit	; continue with converting low digit
413)   15D6 ED 6F       		B2DEXP: RLD         ; shift high digit (HL) into low digit of A	; shift high digit (HL) into low digit of A
414)   15D8 12          		B2DEXPH: LD (DE), A       ; record resulting ASCII-code	; record resulting ASCII-code
415)   15D9 13          		 INC DE	;
416)   15DA ED 6F       		B2DEXPL: RLD	;
417)   15DC 12          		 LD (DE), A	;
418)   15DD 13          		 INC DE	;
419)   15DE 23          		 INC HL         ; next BCD-byte	; next BCD-byte
420)   15DF 10 F5       		 DJNZ B2DEXP        ; and go on to convert each BCD-byte into 2 ASCII	; and go on to convert each BCD-byte into 2 ASCII
421)   15E1 ED 42       		 SBC HL, BC        ; return with HL pointing to 1st decimal	; return with HL pointing to 1st decimal
422)   15E3 C9          		 RET	;
426)   15E4 EB          		 ex de, hl        ; Get destination into DE	; Get destination into DE
427)   15E5 21 9B F0    		 ld hl, B2DBUF	;
428)   15E8 CD EF 15    		 call SkipWhitespace	;
429)   15EB ED B0       		 ldir	;
430)   15ED EB          		 ex de, hl        ; Get destination into DE	; Get destination into DE
431)   15EE C9          		 ret	;
436)   15EF 7E          		 ld a, (hl)	;
437)   15F0 FE 20       		 cp ' '	;
438)   15F2 C0          		 ret nz	;
439)   15F3 23          		 inc hl	;
440)   15F4 18 F9       		 jr SkipWhitespace	;
444)   15F6 06 08       		@REVBITS: ld b, 8	;
445)   15F8 6F          		 ld l, a	;
447)   15F9 CB 15       		 rl l	;
448)   15FB 1F          		 rra	;
449)   15FC 10 FB       		 djnz REVLOOP	;
450)   15FE C9          		 RET	;
460)   15FF E5          		 push hl	;
462)   1600 7E          		 ld a, (hl)	;
464)   1601 FE 00       		 cp  0	;
465)   1603 28 0E       		 jr z, IsStrDecTrue	;
467)   1605 FE 30       		 cp  '0'	;
468)   1607 38 06       		 jr c, IsStrDecFalse	;
470)   1609 FE 3A       		 cp  '9'+1	;
471)   160B 38 09       		 jr c, IsStrDecContinue	;
472)   160D FE 39       		 cp  '9'	;
475)   160F F6 01       		 or 1         ; Reset zero flag	; Reset zero flag
476)   1611 E1          		 pop hl	;
477)   1612 C9          		 ret	;
479)   1613 BF          		 cp a         ; Set zero flag	; Set zero flag
480)   1614 E1          		 pop hl	;
481)   1615 C9          		 ret	;
483)   1616 23          		 inc hl	;
484)   1617 18 E7       		 jr IsStrDec00	;
491)   1619 E5          		 push hl	;
493)   161A 7E          		 ld a, (hl)	;
495)   161B FE 00       		 cp  0	;
496)   161D 28 14       		 jr z, IsStrHexTrue	;
498)   161F FE 30       		 cp  '0'	;
499)   1621 38 0C       		 jr c, IsStrHexFalse	;
501)   1623 FE 3A       		 cp  '9'+1	;
502)   1625 38 0F       		 jr c, IsStrHexContinue	;
504)   1627 FE 30       		 cp  '0'	;
505)   1629 38 04       		 jr c, IsStrHexFalse	;
507)   162B FE 47       		 cp  'F'+1	;
508)   162D 38 07       		 jr c, IsStrHexContinue	;
511)   162F F6 01       		 or 1         ; Reset zero flag	; Reset zero flag
512)   1631 E1          		 pop hl	;
513)   1632 C9          		 ret	;
515)   1633 BF          		 cp a         ; Set zero flag	; Set zero flag
516)   1634 E1          		 pop hl	;
517)   1635 C9          		 ret	;
519)   1636 23          		 inc hl	;
520)   1637 18 E1       		 jr IsStrHex00	;
527)   1639 AF          		 xor a	;
528)   163A CD 3F 16    		 call loop	;
529)   163D 7A          		 ld a, d	;
530)   163E C9          		 ret	;
532)   163F 57          		 ld d, a	;
533)   1640 7E          		 ld a, (hl)	;
534)   1641 23          		 inc hl	;
535)   1642 D6 3A       		 sub '9' + 1	;
536)   1644 C6 0A       		 add 10	;
537)   1646 D0          		 ret nc	;
538)   1647 5F          		 ld e, a	;
539)   1648 7A          		 ld a, d	;
540)   1649 87          		 add a, a        ;double our accumulator	;double our accumulator
541)   164A 87          		 add a, a        ;double again (now x4)	;double again (now x4)
542)   164B 82          		 add a, d        ;add the original (now x5)	;add the original (now x5)
543)   164C 87          		 add a, a        ;double again (now x10)	;double again (now x10)
544)   164D 83          		 add a, e        ;add in the incoming digit	;add in the incoming digit
545)   164E 18 EF       		 jr loop	;
553)   1650 7E          		 ld a, (hl)        ; Copy first char to A	; Copy first char to A
554)   1651 CD 61 16    		 call Hex12        ; Convert first char	; Convert first char
555)   1654 87          		 add a, a        ; Multiply by 16...	; Multiply by 16...
556)   1655 87          		 add a, a        ; ...	; ...
557)   1656 87          		 add a, a        ; ...	; ...
558)   1657 87          		 add a, a        ; ...done!	; ...done!
559)   1658 57          		 ld d, a        ; Store top 4 bits in D	; Store top 4 bits in D
560)   1659 23          		 inc hl         ; Advance to next char	; Advance to next char
561)   165A 7E          		 ld a, (hl)	;
562)   165B CD 61 16    		 call Hex12        ; Convert second char	; Convert second char
563)   165E B2          		 or d         ; Add back top bits	; Add back top bits
564)   165F 23          		 inc hl         ; Advance for next guy	; Advance for next guy
565)   1660 C9          		 ret	;
566)   1661 D6 30       		Hex12: sub  '0'	;
567)   1663 FE 0A       		 cp 10	;
568)   1665 D8          		 ret c	;
569)   1666 D6 07       		 sub 'A' - '0' - 10	;
570)   1668 C9          		 ret	;
577)   1669 CD 50 16    		 call Read8bit	;
578)   166C 47          		 ld b, a	;
579)   166D CD 50 16    		 call Read8bit	;
580)   1670 4F          		 ld c, a	;
581)   1671 C9          		 ret	;
589)   1672 7E          		 ld a, (hl)	;
590)   1673 23          		 inc hl	;
591)   1674 D6 30       		 sub '0'	;
592)   1676 CB 27       		 sla a	;
593)   1678 CB 27       		 sla a	;
594)   167A CB 27       		 sla a	;
595)   167C CB 27       		 sla a	;
596)   167E 47          		 ld b, a	;
597)   167F 7E          		 ld a, (hl)	;
598)   1680 23          		 inc hl	;
599)   1681 D6 30       		 sub '0'	;
600)   1683 B0          		 or b	;
601)   1684 C9          		 ret	;
606)   1685 4F          		 ld c, a        ; a = number to convert	; a = number to convert
607)   1686 CD 92 16    		 call Num1	;
608)   1689 77          		 ld (hl), a	;
609)   168A 23          		 inc hl	;
610)   168B 79          		 ld a, c	;
611)   168C CD 96 16    		 call Num2	;
612)   168F 77          		 ld (hl), a	;
613)   1690 23          		 inc hl	;
614)   1691 C9          		 ret	;
615)   1692 1F          		Num1: rra	;
616)   1693 1F          		 rra	;
617)   1694 1F          		 rra	;
618)   1695 1F          		 rra	;
619)   1696 F6 F0       		Num2: or $F0	;
620)   1698 27          		 daa	;
621)   1699 C6 A0       		 add a, $A0	;
622)   169B CE 40       		 adc a, $40        ; Ascii hex at this point (0 to F)	; Ascii hex at this point (0 to F)
623)   169D C9          		 ret	;
634)   169E 22 B0 F0    		STR_SET: LD (LINESTR),HL	;
635)   16A1 C9          		 RET	;
638)   16A2 AF          		STR_CLR: XOR A	;
639)   16A3 32 B2 F0    		 LD (LINEPOS),A	;
640)   16A6 32 B0 F0    		 LD (LINESTR),A	;
641)   16A9 32 B1 F0    		 LD (LINESTR+1),A	;
642)   16AC C9          		 RET	;
645)   16AD 3A B0 F0    		STR_VALID: LD A,(LINESTR)	;
646)   16B0 47          		 LD B,A	;
647)   16B1 3A B1 F0    		 LD A,(LINESTR+1)	;
648)   16B4 80          		 ADD B	;
649)   16B5 B7          		 OR A	;
650)   16B6 C9          		 RET	;
656)   16B7 F5          		STR_CALCADDR: PUSH AF	;
657)   16B8 ED 5B B0 F0 		 LD DE,(LINESTR)	;
658)   16BC EB          		 EX DE,HL	;
659)   16BD 3A B2 F0    		 LD A,(LINEPOS)	;
660)   16C0 4F          		 LD C,A	;
661)   16C1 06 00       		 LD B,0	;
662)   16C3 09          		 ADD HL,BC	;
663)   16C4 EB          		 EX DE,HL	;
664)   16C5 F1          		 POP AF	;
665)   16C6 C9          		 RET	;
669)   16C7 3A B2 F0    		STR_NEXTPOS: LD A,(LINEPOS)	;
670)   16CA 3C          		 INC A	;
671)   16CB 32 B2 F0    		 LD (LINEPOS),A	;
672)   16CE C9          		 RET	;
676)   16CF CD B7 16    		STR_ADD: CALL STR_CALCADDR	;
677)   16D2 CD C7 16    		STRA_AGN: CALL STR_NEXTPOS	;
678)   16D5 7E          		 LD A,(HL)	;
679)   16D6 12          		 LD (DE),A	;
680)   16D7 23          		 INC HL	;
681)   16D8 13          		 INC DE	;
682)   16D9 B7          		 OR A	;
683)   16DA C8          		 RET Z	;
684)   16DB 18 F5       		 JR STRA_AGN	;
687)   16DD CD B7 16    		STR_ADDCHAR: CALL STR_CALCADDR	;
688)   16E0 12          		 LD (DE),A	;
689)   16E1 CD C7 16    		 CALL STR_NEXTPOS	;
690)   16E4 13          		 INC DE	;
691)   16E5 AF          		 XOR A	;
692)   16E6 12          		 LD (DE),A	;
693)   16E7 C9          		 RET	;
701)   16E8 26 00       		@PRINTNUM: LD H,0	;
702)   16EA 6F          		 LD L,A	;
703)   16EB F5          		@PRINTNUM16: PUSH AF	;
705)   16EC 11 B4 F0    		 LD DE,NUMBUF	;
706)   16EF CD 31 15    		 CALL Bcd2ASC  ;FOR HEX	;FOR HEX
707)   16F2 3E 68       		 LD A,'h'	;
708)   16F4 12          		 LD (DE),A  	;
709)   16F5 13          		 INC DE	;
710)   16F6 AF          		 XOR A	;
711)   16F7 12          		 LD (DE),A  	;
713)   16F8 21 B4 F0    		 LD HL,NUMBUF	;
714)   16FB CD 4D 06    		 CALL RS_TXT	;
715)   16FE CD AD 06    		 CALL RS_NEWLINE	;
716)   1701 F1          		 POP AF	;
717)   1702 C9          		 RET	;
725)   1703 E5          		@NUM_ADDZERO: PUSH HL	;
726)   1704 0E 00       		 LD C,0	;
727)   1706 7E          		AZ_AGN: LD A,(HL)   	;
728)   1707 23          		 INC HL	;
729)   1708 0C          		 INC C	;
730)   1709 FE 00       		 CP 0	;
731)   170B 20 F9       		 JR NZ,AZ_AGN	;
732)   170D 0D          		 DEC C ;EXCLUDE ZERO TERM	;EXCLUDE ZERO TERM
733)   170E E1          		 POP HL	;
734)   170F 79          		 LD A,C	;
735)   1710 B8          		 CP B	;
736)   1711 C8          		 RET Z	;
738)   1712 78          		 LD A,B	;
739)   1713 91          		 SUB C	;
740)   1714 D8          		 RET C ;RETURN IF CARRY MEANS WE HAVE MORE DIGITS	;RETURN IF CARRY MEANS WE HAVE MORE DIGITS
741)   1715 47          		 LD B,A	;
742)   1716 3E 30       		 LD A,'0'	;
743)   1718 2B          		AZ_AGN2: DEC HL	;
744)   1719 77          		 LD (HL),A	;
745)   171A 10 FC       		 DJNZ AZ_AGN2 	;
746)   171C C9          		 RET	;
752)   171D 11 60 F0    		@COPYFNAME: LD DE,STRGBUFF	;
753)   1720 7E          		@COPYSTRING:   LD A,(HL)	;
754)   1721 12          		 LD (DE),A	;
755)   1722 FE 00       		 CP 0	;
756)   1724 C8          		 RET Z  	;
757)   1725 13          		 INC DE	;
758)   1726 23          		 INC HL	;
759)   1727 18 F7       		 JR COPYSTRING	;
  7)   1729 16 00       		   ld d,0	;
  8)   172B 6A          		   ld l,d	;
  9)   172C 06 08       		   ld b,8	;
 11)   172E 29          		   add hl,hl	;
 12)   172F 30 01       		   jr nc,Mult8_NoAdd	;
 13)   1731 19          		   add hl,de	;
 15)   1732 10 FA       		   djnz Mult8_Loop	;
 16)   1734 C9          		   ret	;
 23)   1735 2E 00       		   ld l,0	;
 24)   1737 06 08       		   ld b,8	;
 26)   1739 29          		   add hl,hl	;
 27)   173A 87          		   add a,a	;
 28)   173B 30 01       		   jr nc,Mult12_NoAdd	;
 29)   173D 19          		   add hl,de	;
 31)   173E 10 F9       		   djnz Mult12_Loop	;
 32)   1740 C9          		   ret	;
 39)   1741 21 00 00    		@Mult16: ld hl, 0	;
 40)   1744 78          		 ld a, b	;
 41)   1745 06 10       		 ld b, 16	;
 43)   1747 29          		 add hl, hl	;
 44)   1748 CB 21       		 sla c	;
 45)   174A 17          		 rla	;
 46)   174B 30 01       		 jr nc, Mult16_NoAdd	;
 47)   174D 19          		 add hl, de	;
 49)   174E 10 F7       		 djnz Mult16_Loop	;
 50)   1750 C9          		 ret	;
 56)   1751 D5          		@Mult32: PUSH DE	;
 57)   1752 79          		 ld a, c	;
 58)   1753 48          		 ld c, b	;
 59)   1754 21 00 00    		 ld hl, 0	;
 60)   1757 06 10       		 ld b, 16	;
 62)   1759 29          		 add hl, hl	;
 63)   175A 17          		 rla	;
 64)   175B CB 11       		 rl c	;
 65)   175D 30 07       		 jr nc, Mult32_NoAdd	;
 66)   175F 19          		 add hl, de	;
 67)   1760 CE 00       		 adc a, 0	;
 68)   1762 D2 66 17    		 jp nc, Mult32_NoAdd	;
 69)   1765 0C          		 inc c	;
 71)   1766 10 F1       		 djnz Mult32_Loop	;
 72)   1768 41          		 ld b, c	;
 73)   1769 4F          		 ld c, a	;
 74)   176A D1          		 POP DE	;
 75)   176B C9          		 ret	;
 83)   176C AF          		   xor a	;
 84)   176D 06 08       		   ld b,8	;
 86)   176F CB 13       		   rl e	;
 87)   1771 17          		   rla	;
 88)   1772 91          		   sub c	;
 89)   1773 30 01       		   jr nc,Div8_NoAdd	;
 90)   1775 81          		   add a,c	;
 92)   1776 10 F7       		   djnz Div8_Loop	;
 93)   1778 47          		   ld b,a	;
 94)   1779 7B          		   ld a,e	;
 95)   177A 17          		   rla	;
 96)   177B 2F          		   cpl	;
 97)   177C C9          		   ret	;
103)   177D AF          		  xor a	;
104)   177E 06 08       		  ld b, 8	;
107)   1780 CB 22       		  sla d	;
108)   1782 17          		  rla	;
109)   1783 BB          		  cp e	;
110)   1784 38 02       		  jr c, $+4	;
111)   1786 93          		  sub e	;
112)   1787 14          		  inc d	;
114)   1788 10 F6       		  djnz DIV8_8_loop	;
116)   178A C9          		  ret	;
122)   178B AF          		  xor a	;
123)   178C 06 10       		  ld b, 16	;
126)   178E 29          		  add hl, hl	;
127)   178F 17          		  rla	;
128)   1790 38 03       		  jr c, $+5	;
129)   1792 B9          		  cp c	;
130)   1793 38 02       		  jr c, $+4	;
132)   1795 91          		  sub c	;
133)   1796 2C          		  inc l	;
135)   1797 10 F5       		  djnz DIV16_8_loop	;
137)   1799 C9          		  ret	;
145)   179A 21 00 00    		   ld hl,0	;
146)   179D 78          		   ld a,b	;
147)   179E 06 08       		   ld b,8	;
149)   17A0 17          		   rla	;
150)   17A1 ED 6A       		   adc hl,hl	;
151)   17A3 ED 52       		   sbc hl,de	;
152)   17A5 30 01       		   jr nc,Div16_NoAdd1	;
153)   17A7 19          		   add hl,de	;
155)   17A8 10 F6       		   djnz Div16_Loop1	;
156)   17AA 17          		   rla	;
157)   17AB 2F          		   cpl	;
158)   17AC 47          		   ld b,a	;
159)   17AD 79          		   ld a,c	;
160)   17AE 48          		   ld c,b	;
161)   17AF 06 08       		   ld b,8	;
163)   17B1 17          		   rla	;
164)   17B2 ED 6A       		   adc hl,hl	;
165)   17B4 ED 52       		   sbc hl,de	;
166)   17B6 30 01       		   jr nc,Div16_NoAdd2	;
167)   17B8 19          		   add hl,de	;
169)   17B9 10 F6       		   djnz Div16_Loop2	;
170)   17BB 17          		   rla	;
171)   17BC 2F          		   cpl	;
172)   17BD 41          		   ld b,c	;
173)   17BE 4F          		   ld c,a	;
174)   17BF C9          		   ret  	;
181)   17C0 19          		 ADD HL, DE        ; 16-BIT ADD OF HL AND DE	; 16-BIT ADD OF HL AND DE
182)   17C1 D9          		 EXX	;
183)   17C2 ED 5A       		 ADC HL, DE        ; 16-BIT ADD OF HL AND DE WITH CARRY	; 16-BIT ADD OF HL AND DE WITH CARRY
184)   17C4 D9          		 EXX	;
187)   17C5 C9          		 RET	;
197)   17C6 11 40 00    		 ld de, $0040	;
198)   17C9 7D          		 ld a, l	;
199)   17CA 6C          		 ld l, h	;
200)   17CB 62          		 ld h, d	;
201)   17CC B7          		 or a	;
202)   17CD 06 08       		 ld b, 8	;
204)   17CF ED 52       		 sbc hl, de	;
205)   17D1 30 01       		 jr nc, Sqr16_Skip	;
206)   17D3 19          		 add hl, de	;
208)   17D4 3F          		 ccf	;
209)   17D5 CB 12       		 rl d	;
210)   17D7 87          		 add a, a	;
211)   17D8 ED 6A       		 adc hl, hl	;
212)   17DA 87          		 add a, a	;
213)   17DB ED 6A       		 adc hl, hl	;
214)   17DD 10 F0       		 djnz Sqr16_Loop	;
215)   17DF C9          		 ret	;
235)   17E0 3A B3 F0    		 ld a, (RNDseed)	;
236)   17E3 47          		 ld b, a 	;
238)   17E4 0F          		 rrca ; multiply by 32	; multiply by 32
239)   17E5 0F          		 rrca	;
240)   17E6 0F          		 rrca	;
241)   17E7 EE 1F       		 xor 0x1f	;
243)   17E9 80          		 add a, b	;
244)   17EA DE FF       		 sbc a, 255 ; carry	; carry
246)   17EC 32 B3 F0    		 ld (RNDseed), a	;
247)   17EF C9          		 ret	;
