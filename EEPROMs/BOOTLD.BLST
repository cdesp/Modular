 15)   0000 	            		 CH376_ERROR EQU RS_MESG	;
 18)   0000 F3          		 DI  	;
 19)   0001 31 00 F0    		 LD SP, BLSTACKP 	;
 20)   0004 C3 F9 00    		 JP BOOTLOADER	;
 22)   0007 41 54 4C 41 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 22)   000B 53 20 42 4F 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 22)   000F 4F 54 4C 4F 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 22)   0013 41 44 45 52 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 22)   0017 20          		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 23)   0018 56 65 72 73 		 DEFM "Version "  	;
 23)   001C 69 6F 6E 20 		 DEFM "Version "  	;
 24)   0020 30 2E 30 33 		 DEFM "0.03"	;
 25)   0024 0A 0D       		 DEFB 0AH,0DH	;
 26)   0026 43 44 65 73 		 DEFM "CDesp 2022"	;
 26)   002A 70 20 32 30 		 DEFM "CDesp 2022"	;
 26)   002E 32 32       		 DEFM "CDesp 2022"	;
 27)   0030 0A 0D       		 DEFB 0AH,0DH    	;
 28)   0032 00          		 DEFB 00H	;
 33)   0033 C3 61 05    		 JP RS_MESG	;
 35)   0036 00 01 0A 0B 		MYMMUBANK:     DB 0,1,10,11,4,5,6,7	;
 35)   003A 04 05 06 07 		MYMMUBANK:     DB 0,1,10,11,4,5,6,7	;
 37)   003E 0E 00       		SETUPMMU: LD C,DEVMMU	;
 38)   0040 AF          		  XOR A   ;BANK	;BANK
 39)   0041 06 00       		 LD B,0.SHL.5  ;PAGE	;PAGE
 41)   0043 3C          		 INC A	;
 42)   0044 06 20       		 LD B,1.SHL.5	;
 43)   0046 ED 79       		 OUT (C),A  	;
 45)   0048 3E 0A       		 LD A,10   ;VID MEM RAM	;VID MEM RAM
 46)   004A 06 40       		 LD B,2.SHL.5  	;
 47)   004C ED 79       		 OUT (C),A  	;
 49)   004E 3E 0B       		 LD A,11   ;VID MEM RAM	;VID MEM RAM
 50)   0050 06 60       		 LD B,3.SHL.5  	;
 51)   0052 ED 79       		 OUT (C),A  	;
 53)   0054 3E 04       		 LD A,4	;
 54)   0056 06 80       		 LD B,4.SHL.5	;
 55)   0058 ED 79       		 OUT (C),A  	;
 56)   005A 3C          		 INC A	;
 57)   005B 06 A0       		 LD B,5.SHL.5	;
 58)   005D ED 79       		 OUT (C),A  	;
 59)   005F 3C          		 INC A	;
 60)   0060 06 C0       		 LD B,6.SHL.5	;
 61)   0062 ED 79       		 OUT (C),A  	;
 62)   0064 3C          		 INC A	;
 63)   0065 06 E0       		 LD B,7.SHL.5	;
 64)   0067 ED 79       		 OUT (C),A 	;
 65)   0069 CD F8 04    		 CALL INITMMU       ;PUT PAGES 0..7 IN RAM BANKS 0..7	;PUT PAGES 0..7 IN RAM BANKS 0..7
 66)   006C 21 36 00    		 LD HL,MYMMUBANK	;
 67)   006F 11 1D F0    		 LD DE,BANKS	;
 68)   0072 01 08 00    		 LD BC,8	;
 69)   0075 ED B0       		 LDIR        ;TO RAM PAGE 7 OS VARS	;TO RAM PAGE 7 OS VARS
 70)   0077 C9          		 RET	;
 73)   0078 3E 07       		SETUPFFPS: LD A,7	;
 74)   007A D3 68       		SFFAGN: OUT (DEVINT), A	;
 75)   007C 3D          		 DEC A	;
 76)   007D C2 7A 00    		 JP NZ, SFFAGN    	;
 77)   0080 C9          		 RET	;
 79)   0081 21 01 F0    		SETUPVARS: LD HL,OSVARS      ;ZERO OS VARIABLES	;ZERO OS VARIABLES
 80)   0084 AF          		SI_AGN: XOR A	;
 81)   0085 77          		 LD (HL),A	;
 82)   0086 23          		 INC HL	;
 83)   0087 7C          		 LD A,H	;
 84)   0088 B5          		 OR L	;
 85)   0089 20 F9       		 JR NZ,SI_AGN       ;HL=0000 WHEN OVERFLOW FROM FFFF 	;HL=0000 WHEN OVERFLOW FROM FFFF
 86)   008B C9          		 RET	;
 89)   008C 00          		INITVGA: NOP	;
 91)   008D 21 88 F0    		 LD HL,SCRNST	;
 92)   0090 CB 86       		 RES 0,(HL) ;DISABLE LCD	;DISABLE LCD
 93)   0092 CB CE       		 SET 1,(HL) ;ENABLE VGA	;ENABLE VGA
 95)   0094 21 ED 04    		 LD HL, CHARSETFILE  	;
 96)   0097 01 B8 0B    		 LD BC, 3000  ;MAX FILE SIZE	;MAX FILE SIZE
 97)   009A 11 00 40    		 LD DE, FONT_ADDR 	;
 98)   009D CD CB 09    		 CALL STRG_LOADFILE	;
 99)   00A0 30 1C       		 JR NC, CHFILOK	;
100)   00A2 CD 61 05    		 CALL RS_MESG	;
101)   00A5 45 52 52 4F 		 DEFM "ERROR LOADING CHARSET"	;
101)   00A9 52 20 4C 4F 		 DEFM "ERROR LOADING CHARSET"	;
101)   00AD 41 44 49 4E 		 DEFM "ERROR LOADING CHARSET"	;
101)   00B1 47 20 43 48 		 DEFM "ERROR LOADING CHARSET"	;
101)   00B5 41 52 53 45 		 DEFM "ERROR LOADING CHARSET"	;
101)   00B9 54          		 DEFM "ERROR LOADING CHARSET"	;
102)   00BA 0D 0A 00    		 DB 13,10,0	;
103)   00BD 76          		 HALT	;
104)   00BE CD 83 0B    		CHFILOK: CALL VGA_INIT	;
105)   00C1 CD 61 05    		 CALL RS_MESG	;
106)   00C4 56 47 41 20 		 DEFM "VGA CARD OK"	;
106)   00C8 43 41 52 44 		 DEFM "VGA CARD OK"	;
106)   00CC 20 4F 4B    		 DEFM "VGA CARD OK"	;
107)   00CF 0A 0D 00    		 DB 10,13,0	;
108)   00D2 C9          		 RET	;
113)   00D3 F5          		@OS_PRINTCHAR: PUSH AF	;
114)   00D4 D1          		OSPCNX: POP DE	;
115)   00D5 3A 88 F0    		 LD A,(SCRNST)	;
116)   00D8 E6 02       		 AND 2	;
117)   00DA C8          		 RET Z	;
118)   00DB D5          		 PUSH DE	;
119)   00DC F1          		 POP AF    ;GET THE FLAGS BACK AND THE CHAR	;GET THE FLAGS BACK AND THE CHAR
120)   00DD F5          		 PUSH AF	;
121)   00DE CD 48 05    		 CALL RS_TX	;
122)   00E1 F1          		 POP AF	;
123)   00E2 CD 85 0C    		 CALL VGA_PRCH ;** FIX THIS WRITES TO 0 PAGE INSTEAD OF VGA BUFFER	;** FIX THIS WRITES TO 0 PAGE INSTEAD OF VGA BUFFER
124)   00E5 C9          		 RET	;
127)   00E6 7E          		@OS_PRINTTEXT: LD A,(HL)	;
128)   00E7 FE 00       		 CP 0	;
129)   00E9 C8          		 RET Z	;
130)   00EA E5          		 PUSH HL	;
131)   00EB CD D3 00    		 CALL OS_PRINTCHAR	;
132)   00EE E1          		 POP HL	;
133)   00EF 23          		 INC HL	;
134)   00F0 18 F4       		 JR OS_PRINTTEXT 	;
136)   00F2 E1          		@OS_PRINTMSG: POP HL	;
137)   00F3 CD E6 00    		               CALL OS_PRINTTEXT 	;
138)   00F6 23          		 INC HL	;
139)   00F7 E5          		 PUSH HL   ;CONTINUE AFTER THE MESG 	;CONTINUE AFTER THE MESG
140)   00F8 C9          		 RET	;
142)   00F9 00          		BOOTLOADER: NOP 	;
145)   00FA CD 81 00    		 CALL SETUPVARS	;
146)   00FD CD 3E 00    		 CALL SETUPMMU	;
148)   0100 3E 01       		 LD A, 1 ;12        ;12=9600 BPS, 1=115200BPS	;12        ;12=9600 BPS, 1=115200BPS
149)   0102 CD 2F 05    		 CALL RS_INI        ;RS232 INITIALIZE	;RS232 INITIALIZE
150)   0105 CD 61 05    		 CALL RS_MESG	;
151)   0108 53 45 52 49 		 DEFM "SERIAL INITIALIZED OK"	;
151)   010C 41 4C 20 49 		 DEFM "SERIAL INITIALIZED OK"	;
151)   0110 4E 49 54 49 		 DEFM "SERIAL INITIALIZED OK"	;
151)   0114 41 4C 49 5A 		 DEFM "SERIAL INITIALIZED OK"	;
151)   0118 45 44 20 4F 		 DEFM "SERIAL INITIALIZED OK"	;
151)   011C 4B          		 DEFM "SERIAL INITIALIZED OK"	;
152)   011D 0A 0D 00    		 DB 10,13,0	;
153)   0120 F3          		 DI	;
155)   0121 3E 06       		 LD A,6	;
156)   0123 CD 7D 07    		 CALL STRG_INIT	;
157)   0126 28 1F       		 JR Z, STINIOK	;
158)   0128 CD 61 05    		 CALL RS_MESG	;
159)   012B 45 52 52 4F 		 DEFM "ERROR INITILIZING CH376S"	;
159)   012F 52 20 49 4E 		 DEFM "ERROR INITILIZING CH376S"	;
159)   0133 49 54 49 4C 		 DEFM "ERROR INITILIZING CH376S"	;
159)   0137 49 5A 49 4E 		 DEFM "ERROR INITILIZING CH376S"	;
159)   013B 47 20 43 48 		 DEFM "ERROR INITILIZING CH376S"	;
159)   013F 33 37 36 53 		 DEFM "ERROR INITILIZING CH376S"	;
160)   0143 0A 0D 00    		 DB 10,13,0	;
161)   0146 76          		 HALT	;
162)   0147 CD 61 05    		STINIOK: CALL RS_MESG	;
163)   014A 53 54 4F 52 		 DEFM "STORAGE DEVICE OK"	;
163)   014E 41 47 45 20 		 DEFM "STORAGE DEVICE OK"	;
163)   0152 44 45 56 49 		 DEFM "STORAGE DEVICE OK"	;
163)   0156 43 45 20 4F 		 DEFM "STORAGE DEVICE OK"	;
163)   015A 4B          		 DEFM "STORAGE DEVICE OK"	;
164)   015B 0A 0D 00    		 DB 10,13,0	;
165)   015E 3E 06       		 LD A,6    ;USB DRIVE	;USB DRIVE
166)   0160 CD D9 07    		 CALL STRG_OPENCRD  ;MOUNT THE DRIVE	;MOUNT THE DRIVE
167)   0163 28 22       		 JR Z, STOPNOK	;
168)   0165 CD 61 05    		 CALL RS_MESG	;
169)   0168 45 52 52 4F 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   016C 52 20 4D 4F 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   0170 55 4E 54 49 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   0174 4E 47 20 54 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   0178 48 45 20 44 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   017C 52 49 56 45 		 DEFM "ERROR MOUNTING THE DRIVE"	;
170)   0180 0A 0D 00    		 DB 10,13,0	;
171)   0183 76          		 HALT	;
172)   0184 C3 84 01    		 JP $	;
173)   0187 CD E4 07    		STOPNOK: CALL STRG_PRDRVINFO ;PRINT DRIVE INFO	;PRINT DRIVE INFO
174)   018A CD AE 05    		 CALL RS_NEWLINE	;
175)   018D CD 8C 00    		 CALL INITVGA	;
183)   0190 21 07 00    		 LD HL,OSVERMES	;
184)   0193 CD E6 00    		 CALL OS_PRINTTEXT	;
190)   0196 21 E3 04    		 LD HL,BFILEINI	;
191)   0199 01 A0 0F    		 LD BC,4000  ;MAX BYTES OF FILE	;MAX BYTES OF FILE
192)   019C 11 BC F0    		 LD DE,FILEBUFFER 	;
193)   019F CD CB 09    		 CALL STRG_LOADFILE	;
194)   01A2 30 1D       		 JR NC, FILOK	;
195)   01A4 CD 61 05    		 CALL RS_MESG	;
196)   01A7 45 52 52 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01AB 52 20 4C 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01AF 41 44 49 4E 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01B3 47 20 42 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01B7 4F 54 2E 49 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01BB 4E 49       		 DEFM "ERROR LOADING BOOT.INI"	;
197)   01BD 0D 0A 00    		 DB 13,10,0	;
198)   01C0 76          		 HALT	;
211)   01C1 ED 43 1B F0 		FILOK: LD (FILEBTCNT),BC	;
212)   01C5 21 BC F0    		 LD HL,FILEBUFFER	;
213)   01C8 09          		 ADD HL,BC	;
214)   01C9 23          		 INC HL	;
215)   01CA 36 00       		 LD (HL),0	;
216)   01CC 21 BC F0    		 LD HL,FILEBUFFER	;
217)   01CF CD A4 04    		 CALL FINDSECTION	;
218)   01D2 50 41 47 45 		 DEFM "PAGES"	;
218)   01D6 53          		 DEFM "PAGES"	;
219)   01D7 00          		 DB 0	;
220)   01D8 30 1E       		 JR NC, PRG_NXT1	;
221)   01DA CD 61 05    		 CALL RS_MESG	;
222)   01DD 45 52 52 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01E1 52 20 5B 50 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01E5 41 47 45 53 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01E9 5D 2E 4E 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01ED 54 2E 46 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01F1 55 4E 44    		 DEFM "ERROR [PAGES] NOT FOUND"	;
223)   01F4 0D 0A 00    		 DB 13,10,0	;
224)   01F7 76          		 HALT	;
225)   01F8 CD 29 04    		PRG_NXT1: CALL AN_PAGES	;
226)   01FB 21 BC F0    		 LD HL,FILEBUFFER	;
227)   01FE CD A4 04    		 CALL FINDSECTION	;
228)   0201 46 49 4C 45 		 DEFM "FILES"	;
228)   0205 53          		 DEFM "FILES"	;
229)   0206 00          		 DB 0	;
230)   0207 30 1E       		 JR NC, PRG_NXT2	;
231)   0209 CD 61 05    		 CALL RS_MESG	;
232)   020C 45 52 52 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   0210 52 20 5B 46 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   0214 49 4C 45 53 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   0218 5D 2E 4E 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   021C 54 2E 46 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   0220 55 4E 44    		 DEFM "ERROR [FILES] NOT FOUND"	;
233)   0223 0D 0A 00    		 DB 13,10,0	;
234)   0226 76          		 HALT	;
235)   0227 CD B6 03    		PRG_NXT2: CALL LD_FILE	;
236)   022A 21 BC F0    		 LD HL,FILEBUFFER	;
237)   022D CD A4 04    		 CALL FINDSECTION	;
238)   0230 42 41 4E 4B 		 DEFM "BANKS"	;
238)   0234 53          		 DEFM "BANKS"	;
239)   0235 00          		 DB 0	;
240)   0236 30 1E       		 JR NC, PRG_NXT3	;
241)   0238 CD 61 05    		 CALL RS_MESG	;
242)   023B 45 52 52 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
242)   023F 52 20 5B 42 		 DEFM "ERROR [BANKS] NOT FOUND"	;
242)   0243 41 4E 4B 53 		 DEFM "ERROR [BANKS] NOT FOUND"	;
242)   0247 5D 2E 4E 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
242)   024B 54 2E 46 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
242)   024F 55 4E 44    		 DEFM "ERROR [BANKS] NOT FOUND"	;
243)   0252 0D 0A 00    		 DB 13,10,0	;
244)   0255 76          		 HALT	;
245)   0256 CD 59 03    		PRG_NXT3: CALL DO_BANKS	;
246)   0259 CD 61 05    		 CALL RS_MESG	;
247)   025C 42 41 4E 4B 		 DEFM "BANKS SAVED"	;
247)   0260 53 20 53 41 		 DEFM "BANKS SAVED"	;
247)   0264 56 45 44    		 DEFM "BANKS SAVED"	;
248)   0267 0D 0A 00    		 DB 13,10,0	;
249)   026A 21 BC F0    		 LD HL,FILEBUFFER	;
250)   026D CD A4 04    		 CALL FINDSECTION	;
251)   0270 45 58 45 43 		 DEFM "EXECBNK"	;
251)   0274 42 4E 4B    		 DEFM "EXECBNK"	;
252)   0277 00          		 DB 0	;
253)   0278 30 20       		 JR NC, PRG_NXT4	;
254)   027A CD 61 05    		 CALL RS_MESG	;
255)   027D 45 52 52 4F 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
255)   0281 52 20 5B 45 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
255)   0285 58 45 43 42 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
255)   0289 4E 4B 5D 2E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
255)   028D 4E 4F 54 2E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
255)   0291 46 4F 55 4E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
255)   0295 44          		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
256)   0296 0D 0A 00    		 DB 13,10,0	;
257)   0299 76          		 HALT	;
258)   029A CD 85 03    		PRG_NXT4: CALL DO_EXEC	;
259)   029D CD 61 05    		 CALL RS_MESG	;
260)   02A0 2A 2A 2A 2A 		 DEFM "***********************************"	;
260)   02A4 2A 2A 2A 2A 		 DEFM "***********************************"	;
260)   02A8 2A 2A 2A 2A 		 DEFM "***********************************"	;
260)   02AC 2A 2A 2A 2A 		 DEFM "***********************************"	;
260)   02B0 2A 2A 2A 2A 		 DEFM "***********************************"	;
260)   02B4 2A 2A 2A 2A 		 DEFM "***********************************"	;
260)   02B8 2A 2A 2A 2A 		 DEFM "***********************************"	;
260)   02BC 2A 2A 2A 2A 		 DEFM "***********************************"	;
260)   02C0 2A 2A 2A    		 DEFM "***********************************"	;
261)   02C3 0D 0A       		 DB 13,10	;
262)   02C5 45 58 45 43 		 DEFM "EXECUTING..."	;
262)   02C9 55 54 49 4E 		 DEFM "EXECUTING..."	;
262)   02CD 47 2E 2E 2E 		 DEFM "EXECUTING..."	;
263)   02D1 0D 0A 00    		 DB 13,10,0	;
277)   02D4 0E 06       		 LD C,6	;
278)   02D6 21 01 F0    		PRG_NXTBNK: LD HL,OSBANKS	;
279)   02D9 06 00       		 LD B,0  	;
280)   02DB 09          		 ADD HL,BC	;
281)   02DC 41          		 LD B,C	;
282)   02DD 7E          		 LD A,(HL)	;
283)   02DE CD 24 03    		 CALL PUTTOBANK	;
284)   02E1 0D          		 DEC C	;
285)   02E2 20 F2       		 JR NZ,PRG_NXTBNK	;
286)   02E4 31 00 70    		 LD SP,$7000  ;NEW SP BANK 3 IS RAM ALWAYS	;NEW SP BANK 3 IS RAM ALWAYS
287)   02E7 21 01 F0    		 LD HL,OSBANKS	;
288)   02EA 7E          		 LD A,(HL)	;
289)   02EB 5F          		 LD E,A   ;PAGE TO BANK 0  	;PAGE TO BANK 0
290)   02EC D5          		 PUSH DE	;
291)   02ED 21 08 F0    		 LD HL,OSBANKS+7	;
292)   02F0 7E          		 LD A,(HL)  ;PAGE TO BANK 7 	;PAGE TO BANK 7
293)   02F1 06 07       		 LD B,7   	;
294)   02F3 CD 24 03    		 CALL PUTTOBANK  ;NO MORE PARAMS ON PAGE 7 	;NO MORE PARAMS ON PAGE 7
296)   02F6 11 00 60    		 LD DE,$6000	;
297)   02F9 21 1B 03    		 LD HL,CPPUTTOBANK	;
298)   02FC 01 29 00    		 LD BC, ENPUTTOBANK-CPPUTTOBANK+1	;
299)   02FF ED B0       		 LDIR   ;TRANSFER CODE TO RAM	;TRANSFER CODE TO RAM
300)   0301 3A 09 F0    		 LD A,(EXBANK)  ;THE BANK TO EXECUTE OS ENTRY POINT 	;THE BANK TO EXECUTE OS ENTRY POINT
301)   0304 67          		 LD H,A	;
302)   0305 AF          		 XOR A  	;
303)   0306 06 05       		 LD B,5   ;5 SHIFTS	;5 SHIFTS
304)   0308 CB 24       		SHIFTLEFT: SLA H	;
305)   030A 10 FC       		 DJNZ SHIFTLEFT  ;FIND ENTRY POINT  	;FIND ENTRY POINT
306)   030C 2E 00       		  LD L,0	;
307)   030E 11 01 60    		 LD DE,$6001	;
308)   0311 7D          		 LD A,L	;
309)   0312 12          		 LD (DE),A	;
310)   0313 13          		 INC DE	;
311)   0314 7C          		 LD A,H	;
312)   0315 12          		 LD (DE),A	;
319)   0316 D1          		 POP DE	;
320)   0317 7B          		 LD A,E   ;PUT PAGE OF BANK 0 TO A  	;PUT PAGE OF BANK 0 TO A
321)   0318 C3 00 60    		 JP $6000  ;EXEC CODE IN RAM	;EXEC CODE IN RAM
324)   031B 21 00 00    		CPPUTTOBANK:   LD HL,0000  ;CHANGE 0000 TO THE EXEC VALUE    	;CHANGE 0000 TO THE EXEC VALUE
325)   031E 06 00       		 LD B,0	;
326)   0320 CD 09 60    		 CALL 24576+PUTTOBANK-CPPUTTOBANK  ;$6000=24576  	;$6000=24576
327)   0323 E9          		 JP (HL)	;
330)   0324 C5          		PUTTOBANK: PUSH BC	;
331)   0325 0E 00       		 LD C,DEVMMU	;
333)   0327 CB 20       		 SLA B	;
334)   0329 CB 20       		 SLA B	;
335)   032B CB 20       		 SLA B	;
336)   032D CB 20       		 SLA B	;
337)   032F CB 20       		 SLA B 	;
338)   0331 F5          		 PUSH AF	;
339)   0332 CD 69 04    		 CALL PRNNUM	;
340)   0335 3E 3E       		 LD A,'>'	;
341)   0337 CD 48 05    		 CALL RS_TX	;
342)   033A 78          		 LD A,B	;
343)   033B CD 69 04    		 CALL PRNNUM	;
344)   033E F1          		 POP AF	;
345)   033F ED 79       		 OUT (C),A	;
346)   0341 C1          		 POP BC	;
347)   0342 C9          		 RET	;
349)   0343 00          		ENPUTTOBANK: NOP	;
351)   0344 5C 45 50 52 		EPRM: DEFM "\EPRM.BIN"  	;
351)   0348 4D 2E 42 49 		EPRM: DEFM "\EPRM.BIN"  	;
351)   034C 4E          		EPRM: DEFM "\EPRM.BIN"  	;
352)   034D 00          		 DEFB 0	;
354)   034E 5C          		ROOTDIR: DEFM "\" 	;
355)   034F 00          		 DEFB 0	;
359)   0350 E5          		DUMPMEM: PUSH HL	;
373)   0351 21 44 03    		DR_OPDIROK: LD HL,EPRM	;
375)   0354 D1          		 POP DE	;
376)   0355 CD E8 0A    		 CALL STRG_SAVEFILE	;
377)   0358 C9          		 RET	;
382)   0359 CD 61 05    		DO_BANKS: CALL RS_MESG	;
383)   035C 5B 42 41 4E 		 DEFM "[BANKS]"	;
383)   0360 4B 53 5D    		 DEFM "[BANKS]"	;
384)   0363 0D 0A 00    		 DB 13,10,0	;
385)   0366 11 01 F0    		 LD DE,OSBANKS	;
386)   0369 06 08       		 LD B,8	;
387)   036B C5          		NXTBNK: PUSH BC	;
388)   036C D5          		 PUSH DE	;
389)   036D CD 09 04    		 CALL GETSTRNUM	;
390)   0370 CD C6 04    		 CALL SKIPNL	;
391)   0373 E5          		 PUSH HL	;
392)   0374 21 0A F0    		 LD HL,NUMSTR	;
393)   0377 CD 5C 14    		 CALL strtob	;
394)   037A E1          		 POP HL	;
395)   037B D1          		 POP DE	;
396)   037C CD 69 04    		 CALL PRNNUM	;
397)   037F 12          		 LD (DE),A	;
398)   0380 13          		 INC DE	;
399)   0381 C1          		 POP BC	;
400)   0382 10 E7       		 DJNZ NXTBNK	;
401)   0384 C9          		 RET	;
403)   0385 CD 61 05    		DO_EXEC: CALL RS_MESG	;
404)   0388 5B 45 58 45 		 DEFM "[EXEC]"	;
404)   038C 43 5D       		 DEFM "[EXEC]"	;
405)   038E 0D 0A 00    		 DB 13,10,0	;
406)   0391 CD 09 04    		 CALL GETSTRNUM	;
407)   0394 21 0A F0    		 LD HL,NUMSTR	;
408)   0397 CD 5C 14    		 CALL strtob	;
409)   039A 32 09 F0    		 LD (EXBANK),A	;
410)   039D C9          		 RET	;
413)   039E 11 0D F0    		COPYOSFILE: LD DE,OSFNAME	;
414)   03A1 7E          		COPYOSFILE1: LD A,(HL)	;
415)   03A2 FE 0D       		 CP 13	;
416)   03A4 28 0D       		 JR Z, LDF_EXIT	;
417)   03A6 FE 0A       		 CP 10	;
418)   03A8 28 09       		 JR Z, LDF_EXIT	;
419)   03AA FE 00       		 CP 0	;
420)   03AC 28 05       		 JR Z, LDF_EXIT	;
421)   03AE 12          		 LD (DE),A	;
422)   03AF 13          		 INC DE	;
423)   03B0 23          		 INC HL	;
424)   03B1 18 EE       		 JR COPYOSFILE1;	;
425)   03B3 AF          		LDF_EXIT: XOR A	;
426)   03B4 12          		 LD (DE),A	;
427)   03B5 C9          		 RET	;
429)   03B6 CD 61 05    		LD_FILE: CALL RS_MESG	;
430)   03B9 5B 46 49 4C 		 DEFM "[FILES]"	;
430)   03BD 45 53 5D    		 DEFM "[FILES]"	;
431)   03C0 0D 0A 00    		 DB 13,10,0	;
432)   03C3 06 01       		 LD B,1   ;START FROM BANK 1 ;2 FOR TESTING	;START FROM BANK 1 ;2 FOR TESTING
433)   03C5 CD 9E 03    		 CALL COPYOSFILE	;
434)   03C8 21 0D F0    		 LD HL,OSFNAME	;
435)   03CB 01 00 80    		 LD BC,32768  ;MAX BYTES OF FILE IS 4 PAGES	;MAX BYTES OF FILE IS 4 PAGES
436)   03CE 11 00 20    		 LD DE,$2000  ;$2000 FOR REAL	;$2000 FOR REAL
437)   03D1 CD CB 09    		 CALL STRG_LOADFILE	;
438)   03D4 30 1B       		 JR NC, LDFILOK	;
439)   03D6 CD 61 05    		 CALL RS_MESG	;
440)   03D9 45 52 52 4F 		 DEFM "ERROR LOADING OSFILE"	;
440)   03DD 52 20 4C 4F 		 DEFM "ERROR LOADING OSFILE"	;
440)   03E1 41 44 49 4E 		 DEFM "ERROR LOADING OSFILE"	;
440)   03E5 47 20 4F 53 		 DEFM "ERROR LOADING OSFILE"	;
440)   03E9 46 49 4C 45 		 DEFM "ERROR LOADING OSFILE"	;
441)   03ED 0D 0A 00    		 DB 13,10,0	;
442)   03F0 C9          		 RET	;
443)   03F1 CD 61 05    		LDFILOK: CALL RS_MESG	;
444)   03F4 4F 53 20 46 		 DEFM "OS FILE LOADED!!!"	;
444)   03F8 49 4C 45 20 		 DEFM "OS FILE LOADED!!!"	;
444)   03FC 4C 4F 41 44 		 DEFM "OS FILE LOADED!!!"	;
444)   0400 45 44 21 21 		 DEFM "OS FILE LOADED!!!"	;
444)   0404 21          		 DEFM "OS FILE LOADED!!!"	;
445)   0405 0D 0A 00    		 DB 13,10,0	;
452)   0408 C9          		 RET	;
455)   0409 11 0A F0    		GETSTRNUM: LD DE,NUMSTR	;
456)   040C 7E          		GETSTRNUM1: LD A,(HL)	;
458)   040D FE 2C       		 CP ','	;
459)   040F 28 15       		 JR Z,GS_FIN	;
460)   0411 FE 3D       		 CP '='	;
461)   0413 28 11       		 JR Z,GS_FIN	;
462)   0415 FE 00       		 CP 0	;
463)   0417 28 0D       		 JR Z,GS_FIN	;
464)   0419 FE 0D       		 CP 13	;
465)   041B 28 09       		 JR Z,GS_FIN	;
466)   041D FE 0A       		 CP 10	;
467)   041F 28 05       		 JR Z,GS_FIN	;
468)   0421 12          		 LD (DE),A	;
469)   0422 13          		 INC DE	;
470)   0423 23          		 INC HL	;
471)   0424 18 E6       		 JR GETSTRNUM1	;
472)   0426 AF          		GS_FIN: XOR A	;
473)   0427 12          		 LD (DE),A  	;
474)   0428 C9          		 RET  	;
477)   0429 CD 61 05    		AN_PAGES: CALL RS_MESG	;
478)   042C 5B 50 41 47 		 DEFM "[PAGES]"	;
478)   0430 45 53 5D    		 DEFM "[PAGES]"	;
479)   0433 0D 0A 00    		 DB 13,10,0	;
480)   0436 06 01       		 LD B,1   ;START FROM BANK 1 ;$2000	;START FROM BANK 1 ;$2000
481)   0438 CD 09 04    		NXT_PG: CALL GETSTRNUM	;
482)   043B E5          		 PUSH HL	;
483)   043C C5          		 PUSH BC	;
484)   043D 21 0A F0    		 LD HL,NUMSTR	;
485)   0440 CD 57 05    		 CALL RS_TXT	;
486)   0443 3E 2D       		 LD A,'-'	;
487)   0445 CD 48 05    		 CALL RS_TX	;
488)   0448 21 0A F0    		 LD HL,NUMSTR	;
489)   044B CD 5C 14    		 CALL strtob  ;A HAS THE PAGE TO PUT ON BANK 1,2,3,ETC	;A HAS THE PAGE TO PUT ON BANK 1,2,3,ETC
490)   044E C1          		 POP BC	;
491)   044F CD 24 03    		 CALL PUTTOBANK	;
492)   0452 04          		 INC B	;
493)   0453 C5          		 PUSH BC	;
494)   0454 CD 0B 15    		 CALL PRINTNUM	;
495)   0457 C1          		 POP BC	;
496)   0458 E1          		 POP HL	;
497)   0459 7E          		 LD A,(HL)	;
498)   045A FE 2C       		 CP ','	;
499)   045C 23          		 INC HL	;
500)   045D 28 D9       		 JR Z,NXT_PG	;
501)   045F C9          		 RET	;
505)   0460 7E          		FINDCHAR: LD A,(HL) 	;
506)   0461 B8          		 CP B	;
507)   0462 C8          		 RET Z	;
508)   0463 FE 00       		 CP 0	;
509)   0465 C8          		 RET Z	;
510)   0466 23          		 INC HL	;
511)   0467 18 F7       		 JR FINDCHAR	;
515)   0469 F5          		PRNNUM: PUSH AF	;
516)   046A E5          		 PUSH HL	;
517)   046B C5          		 PUSH BC	;
518)   046C D5          		 PUSH DE	;
519)   046D CD 0B 15    		 CALL PRINTNUM	;
520)   0470 D1          		 POP DE	;
521)   0471 C1          		 POP BC	;
522)   0472 E1          		 POP HL	;
523)   0473 F1          		 POP AF	;
524)   0474 C9          		 RET	;
527)   0475 F5          		PRNCHAR: PUSH AF	;
528)   0476 E5          		 PUSH HL	;
529)   0477 C5          		 PUSH BC	;
530)   0478 D5          		 PUSH DE	;
531)   0479 CD 48 05    		 CALL RS_TX	;
532)   047C F5          		 PUSH AF	;
533)   047D 3E 3D       		 LD A,'='	;
534)   047F CD 48 05    		 CALL RS_TX	;
535)   0482 F1          		 POP AF	;
536)   0483 CD 0B 15    		 CALL PRINTNUM	;
537)   0486 D1          		 POP DE	;
538)   0487 C1          		 POP BC	;
539)   0488 E1          		 POP HL	;
540)   0489 F1          		 POP AF	;
541)   048A C9          		 RET	;
546)   048B 1A          		STRCMP: LD A,(DE) ;STRING TO FIND CHAR	;STRING TO FIND CHAR
547)   048C FE 00       		 CP 0  ;KEYWD ENDED	;KEYWD ENDED
548)   048E 28 09       		 JR Z,STRFOUND	;
549)   0490 47          		 LD B,A	;
550)   0491 7E          		 LD A,(HL) ;STRING TESTING CHAR	;STRING TESTING CHAR
551)   0492 B8          		 CP B	;
552)   0493 20 06       		 JR NZ,STRNOTFOUND	;
553)   0495 13          		 INC DE	;
554)   0496 23          		 INC HL	;
555)   0497 18 F2       		 JR STRCMP	;
556)   0499 AF          		STRFOUND: XOR A ;CLEAR CARRY	;CLEAR CARRY
557)   049A C9          		 RET	;
558)   049B 37          		STRNOTFOUND: SCF	;
559)   049C C9          		 RET  	;
561)   049D 1A          		FNDRETADDR: LD A,(DE)	;
562)   049E 13          		 INC DE	;
563)   049F FE 00       		 CP 0  	;
564)   04A1 C8          		 RET Z	;
565)   04A2 18 F9       		 JR FNDRETADDR	;
569)   04A4 D1          		FINDSECTION:   POP DE	;
570)   04A5 D5          		 PUSH DE	;
571)   04A6 CD CD 04    		 CALL FINDASECTION	;
572)   04A9 30 10       		 JR NC,SECFOUND	;
573)   04AB D1          		 POP DE	;
574)   04AC 7E          		 LD A,(HL)	;
575)   04AD FE 00       		 CP 0	;
576)   04AF 28 04       		 JR Z, SECNOEXIST ;END OF TEXT FILE REACHED	;END OF TEXT FILE REACHED
577)   04B1 23          		 INC HL	;
578)   04B2 D5          		 PUSH DE	;
579)   04B3 18 EF       		 JR FINDSECTION ;KEEP SEARCHING	;KEEP SEARCHING
580)   04B5 CD 9D 04    		SECNOEXIST:    CALL FNDRETADDR	;
581)   04B8 D5          		 PUSH DE	;
582)   04B9 37          		 SCF	;
583)   04BA C9          		 RET	;
585)   04BB 23          		SECFOUND: INC HL ;SKIP ']'	;SKIP ']'
586)   04BC CD C6 04    		 CALL SKIPNL	;
587)   04BF D1          		 POP DE	;
588)   04C0 CD 9D 04    		 CALL FNDRETADDR	;
589)   04C3 D5          		 PUSH DE	;
590)   04C4 AF          		 XOR A	;
591)   04C5 C9          		 RET	;
595)   04C6 7E          		SKIPNL: LD A,(HL)	;
596)   04C7 FE 1F       		 CP 31	;
597)   04C9 D0          		 RET NC	;
598)   04CA 23          		 INC HL	;
599)   04CB 18 F9       		 JR SKIPNL	;
603)   04CD 06 5B       		FINDASECTION: LD B,'['	;
604)   04CF CD 60 04    		 CALL FINDCHAR	;
605)   04D2 B7          		 OR A	;
606)   04D3 28 0C       		 JR Z,ASECTNOTFND   ;NOT FOUND IF A=0 	;NOT FOUND IF A=0
607)   04D5 23          		 INC HL ;HL POINTS TO THE STRING INSIDE []  	;HL POINTS TO THE STRING INSIDE []
608)   04D6 CD 8B 04    		 CALL STRCMP	;
609)   04D9 D8          		 RET C	;
611)   04DA 7E          		 LD A,(HL)	;
612)   04DB FE 5D       		 CP ']'	;
613)   04DD 20 02       		 JR NZ, ASECTNOTFND ;MORE LETTERS ON SECTION	;MORE LETTERS ON SECTION
614)   04DF AF          		 XOR A  ;CLR CF	;CLR CF
615)   04E0 C9          		 RET	;
616)   04E1 37          		ASECTNOTFND: SCF	;
617)   04E2 C9          		 RET 	;
619)   04E3 5C 42 4F 4F 		BFILEINI DEFM "\BOOT.INI"	;
619)   04E7 54 2E 49 4E 		BFILEINI DEFM "\BOOT.INI"	;
619)   04EB 49          		BFILEINI DEFM "\BOOT.INI"	;
620)   04EC 00          		 DB 0	;
621)   04ED 5C 46 4F 4E 		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
621)   04F1 54 2E 43 48 		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
621)   04F5 52          		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
622)   04F6 00          		 DB 0	;
628)   F000 00          		BLSTACKP DEFS 1	;
631)   F001 00 00 00 00 		 OSBANKS DEFS 8	;
631)   F005 00 00 00 00 		 OSBANKS DEFS 8	;
632)   F009 00          		 EXBANK DEFS 1	;
633)   F00A 00 00 00    		 NUMSTR: DEFS 3	;
634)   F00D 00 00 00 00 		 OSFNAME DEFS 14	;
634)   F011 00 00 00 00 		 OSFNAME DEFS 14	;
634)   F015 00 00 00 00 		 OSFNAME DEFS 14	;
634)   F019 00 00       		 OSFNAME DEFS 14	;
635)   F01B 00 00       		 FILEBTCNT DEFS 2 	;
637)   F01D 00 00 00 00 		 @BANKS  DEFS 8       ;8 PAGES FOR THE 8 BANKS 0..7	;8 PAGES FOR THE 8 BANKS 0..7
637)   F021 00 00 00 00 		 @BANKS  DEFS 8       ;8 PAGES FOR THE 8 BANKS 0..7	;8 PAGES FOR THE 8 BANKS 0..7
638)   F025 00 00 00 00 		 @TMPG   DEFS 4  ;TEMP PAGE FOR VIDEO VGA	;TEMP PAGE FOR VIDEO VGA
639)   F029 00 00 00 00 		 @PGSEM DEFS 4  ;PAGE SEMAPHORES TO KEEP TRACK OF PAGE CALLS	;PAGE SEMAPHORES TO KEEP TRACK OF PAGE CALLS
642)   F02D 00          		 @SERERR DEFS 1       ;	;
644)   F02E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F032 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F036 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F03A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F03E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F042 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F046 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F04A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F04E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F052 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F056 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F05A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
644)   F05E 00 00       		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
645)   F060 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
645)   F064 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
645)   F068 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
645)   F06C 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
645)   F070 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
645)   F074 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
645)   F078 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
645)   F07C 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
645)   F080 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
645)   F084 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
649)   F088 00          		 @SCRNST DEFS 1       ;SCREEN STATUS BIT 0 ON/OFF LCD,BIT 1 ON/OFF VGA	;SCREEN STATUS BIT 0 ON/OFF LCD, BIT 1 ON/OFF VGA
650)   F089 00          		 @VGAFCOL DEFS 1  ;VGA FORE COLOR	;VGA FORE COLOR
651)   F08A 00          		 @VGABCOL DEFS 1  ;VGA BACK COLOR	;VGA BACK COLOR
652)   F08B 00          		 @VGATX_X DEFS 1  ;VGA CURRENT X POS	;VGA CURRENT X POS
653)   F08C 00          		 @VGATX_Y DEFS 1  ;VGA CUR Y POS	;VGA CUR Y POS
654)   F08D 00          		 @VGAMAXX DEFS 1  ;MAX HORZ CHARS	;MAX HORZ CHARS
655)   F08E 00          		 @VGAMAXY DEFS 1  ;MAX VERT LINES	;MAX VERT LINES
656)   F08F 00          		 @VGATMPC DEFS 1  ;TMP CHAR FOR CURSOR	;TMP CHAR FOR CURSOR
657)   F090 00          		 @VGABUF DEFS 1  ;BUFFER TO WRITE-BIT 0 TO SELECT	;BUFFER TO WRITE - BIT 0 TO SELECT
658)   F091 00 00       		 @VGASTADR DEFS 2  ;START ADDRESS TO CALCULATE TEXT OUTPUT	;START ADDRESS TO CALCULATE TEXT OUTPUT
661)   F093 00 00 00 00 		 @B2DINV DEFS 8  ;BINARY NUMBER TO BE CONVERTED	;BINARY NUMBER TO BE CONVERTED
661)   F097 00 00 00 00 		 @B2DINV DEFS 8  ;BINARY NUMBER TO BE CONVERTED	;BINARY NUMBER TO BE CONVERTED
662)   F09B 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
662)   F09F 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
662)   F0A3 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
662)   F0A7 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
662)   F0AB 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
663)   F0AF 00          		 @B2DEND DEFS 1  ;0 FOR TERMINATE THE STRING	;0 FOR TERMINATE THE STRING
664)   F0B0 00 00       		 @LINESTR: DEFS 2 ;ADDRESS OF LINEBUF FOR PRINTING ON STRING	;ADDRESS OF LINEBUF FOR PRINTING ON STRING
665)   F0B2 00          		 @LINEPOS DEFS 1	;
666)   F0B3 00          		 @RNDseed DEFS 1  ;RANDOM SEED	;RANDOM SEED
667)   F0B4 00 00 00 00 		 @NUMBUF DEFS 7	;
667)   F0B8 00 00 00    		 @NUMBUF DEFS 7	;
668)   F0BB 00          		 @STRG_STAT DEFS 1	;
670)   F0BC 00          		 FILEBUFFER DEFS 1 ;ALL EXTRA SPACE TO BE USED FOR LOADING BOOT.INI ***THIS IS LAST***	;ALL EXTRA SPACE TO BE USED FOR LOADING BOOT.INI ***THIS IS LAST***
674)   04F7 00          		 NOP	;
  9)   04F8 21 1D F0    		INITMMU:       LD HL,BANKS	;
 10)   04FB 06 08       		               LD B,8	;
 11)   04FD AF          		               XOR A	;
 12)   04FE 77          		INM_AGN:       LD (HL),A	;
 13)   04FF 3C          		               INC A	;
 14)   0500 23          		 INC HL	;
 15)   0501 10 FB       		               DJNZ INM_AGN	;
 16)   0503 C9          		               RET                	;
 22)   0504 4F          		PUTPGINBANK: LD C, A       ;SAVE PAGE	;SAVE PAGE
 23)   0505 78          		 LD A, B                                                         ;BANK IN A	;BANK IN A
 24)   0506 FE 02       		 CP 2	;
 25)   0508 D8          		 RET C         ;BANK 0,1 WILL NEVER CHANGE	;BANK 0,1 WILL NEVER CHANGE
 26)   0509 FE 07       		 CP 7	;
 27)   050B C8          		 RET Z         ;BANK 7 WILL NEVER CHANGE	;BANK 7 WILL NEVER CHANGE
 28)   050C 21 1D F0    		 LD HL, BANKS	;
 29)   050F 16 00       		 LD D, 0	;
 30)   0511 5F          		 LD E, A	;
 31)   0512 19          		 ADD HL, DE	;
 32)   0513 79          		 LD A, C        ;RESTORE PAGE	;RESTORE PAGE
 33)   0514 77          		 LD (HL), A        ;SAVE PG IN BANK B MEMORY	;SAVE PG IN BANK B MEMORY
 34)   0515 0E 00       		 LD C, DEVMMU	;
 35)   0517 58          		 LD E,B	;
 36)   0518 CB 20       		 SLA B         ;SHIFT BANK TO A15..A13 FROM A2..A0 WE USE THESE PINS ON THE CPLD FOR BANK INPUT	;SHIFT BANK TO A15..A13 FROM A2..A0 WE USE THESE PINS ON THE CPLD FOR BANK INPUT
 37)   051A CB 20       		 SLA B	;
 38)   051C CB 20       		 SLA B	;
 39)   051E CB 20       		 SLA B	;
 40)   0520 CB 20       		 SLA B         ;SET TO A15,A14,A13	;SET TO A15,A14,A13
 41)   0522 ED 79       		 OUT (C), A	;
 42)   0524 43          		 LD B,E	;
 43)   0525 C9          		 RET	;
 48)   0526 21 1D F0    		GETPGINBANK:   LD HL,BANKS	;
 49)   0529 16 00       		               LD D,0	;
 50)   052B 58          		               LD E,B	;
 51)   052C 19          		               ADD HL,DE	;
 52)   052D 7E          		               LD A,(HL)	;
 53)   052E C9          		               RET	;
 17)   052F 	            		 RBR EQU DEVSER+0      ;RECEIVER BUFFER REGISTER (READ ONLY) (DLAB = 0)	;RECEIVER BUFFER REGISTER (READ ONLY) (DLAB = 0)
 18)   052F 	            		 THR EQU DEVSER+0      ;TRANSMITER HOLDING REGISTER (WRITE ONLY) (DLAB = 0)	;TRANSMITER HOLDING REGISTER (WRITE ONLY) (DLAB = 0)
 19)   052F 	            		 IER EQU DEVSER+1      ;INTERRUPT ENABLE REGISTER (DLAB = 0)	;INTERRUPT ENABLE REGISTER (DLAB = 0)
 24)   052F 	            		 IIR EQU DEVSER+2      ;INTERRUPT IDENT. REGISTER (READ ONLY)	;INTERRUPT IDENT. REGISTER (READ ONLY)
 29)   052F 	            		 FCR EQU DEVSER+2      ;FIFO CONTROL REGISTER (WRITE ONLY)	;FIFO CONTROL REGISTER (WRITE ONLY)
 37)   052F 	            		 LCR EQU DEVSER+3      ;LINE CONTROL REGISTER	;LINE CONTROL REGISTER
 45)   052F 	            		 MCR EQU DEVSER+4      ;MODEM CONTROL REGISTER	;MODEM CONTROL REGISTER
 46)   052F 	            		 LSR EQU DEVSER+5      ;LINE STATUS REGISTER	;LINE STATUS REGISTER
 55)   052F 	            		 MSR EQU DEVSER+6      ;MODEM STATUS REGISTER	;MODEM STATUS REGISTER
 56)   052F 	            		 SCR EQU DEVSER+7      ;SCRATCH REGISTER	;SCRATCH REGISTER
 57)   052F 	            		 DLL EQU DEVSER+0      ;DIVISOR LATCH (LEAST SIGNIFICANT BYTE) (DLAB = 1)	;DIVISOR LATCH (LEAST SIGNIFICANT BYTE) (DLAB = 1)
 58)   052F 	            		 DLM EQU DEVSER+1      ;DIVISOR LATCH (MOST SIGNIFICANT BYTE) (DLAB = 1)	;DIVISOR LATCH (MOST SIGNIFICANT BYTE) (DLAB = 1)
 64)   052F F5          		RS_INI: PUSH AF	;
 65)   0530 3E 80       		 LD A, $80        ; Mask to set DLAB on	; Mask to set DLAB on
 66)   0532 D3 1B       		 OUT (LCR), A        ; Send to LINe Control Register	; Send to LINe Control Register
 75)   0534 F1          		 POP AF	;
 76)   0535 D3 18       		 OUT (DLL), A        ; Set LSB of divisor	; Set LSB of divisor
 77)   0537 3E 00       		 LD A, 00        ; This will be the MSB of the divisior	; This will be the MSB of the divisior
 78)   0539 D3 19       		 OUT (DLM), A        ; Send to the MSB register	; Send to the MSB register
 79)   053B 3E 03       		 LD A, $03        ; 8 bits, 1 stop, no parity (and clear DLAB)	; 8 bits, 1 stop, no parity (and clear DLAB)
 80)   053D D3 1B       		 OUT (LCR), A        ; Write new value to LCR	; Write new value to LCR
 82)   053F 3E 00       		 LD A, 0	;
 83)   0541 D3 1A       		 OUT (FCR), A        ;//was commented	;//was commented
 84)   0543 3E 00       		 LD A, $00        ; 5 A=0 Disable all INterrupts	; 5 A=0 Disable all INterrupts
 85)   0545 D3 19       		 OUT (IER), A        ; Send to INterrupt Enable Register	; Send to INterrupt Enable Register
 86)   0547 C9          		 RET	;
 89)   0548 CD 4E 05    		RS_TX: CALL RSTXRD	;
 90)   054B D3 18       		 OUT (THR), A	;
 92)   054D C9          		 RET	;
 95)   054E F5          		RSTXRD: PUSH AF	;
 96)   054F DB 1D       		RSTXLP: IN A, (LSR)        ; fetch the control register	; fetch the control register
 97)   0551 CB 6F       		 BIT 5, A        ; bit will be set if UART is ready	; bit will be set if UART is ready
 98)   0553 28 FA       		 JR Z, RSTXLP	;
 99)   0555 F1          		 POP AF	;
100)   0556 C9          		 RET	;
104)   0557 7E          		RS_TXT: LD A, (HL)	;
105)   0558 23          		 INC HL	;
106)   0559 FE 00       		 CP 0	;
107)   055B C8          		 RET Z	;
108)   055C CD 48 05    		 CALL RS_TX	;
109)   055F 18 F6       		 JR RS_TXT	;
113)   0561 E5          		RS_MESG: PUSH HL	;
114)   0562 C5          		 PUSH BC	;
115)   0563 D5          		 PUSH DE	;
116)   0564 F5          		 PUSH AF	;
117)   0565 21 09 00    		 LD HL,9 ;POINTS TO RET ADDRESS +10 FROM SP = OUR STRING	;POINTS TO RET ADDRESS +10 FROM SP = OUR STRING
118)   0568 39          		 ADD HL,SP	;
119)   0569 46          		 LD B,(HL)    	;
120)   056A 2B          		 DEC HL	;
121)   056B 4E          		 LD C,(HL)	;
122)   056C 60          		 LD H,B	;
123)   056D 69          		 LD L,C	;
124)   056E CD 57 05    		 CALL RS_TXT	;
125)   0571 F1          		 POP AF	;
126)   0572 D1          		 POP DE	;
127)   0573 44          		 LD B,H  ;NEW RET ADDRESS	;NEW RET ADDRESS
128)   0574 4D          		 LD C,L	;
129)   0575 21 05 00    		 LD HL,5 ;POINTS TO RET ADDRESS +6 FROM SP	;POINTS TO RET ADDRESS +6 FROM SP
130)   0578 39          		 ADD HL,SP  	;
131)   0579 70          		 LD (HL),B	;
132)   057A 2B          		 DEC HL	;
133)   057B 71          		 LD (HL),C  	;
134)   057C C1          		 POP BC	;
135)   057D E1          		 POP HL	;
136)   057E C9          		 RET 	;
142)   057F F3          		RS_RX: DI	;
143)   0580 3E 01       		 LD A, 1        ;ready to receive SIGNAL DSR 1	;ready to receive SIGNAL DSR 1
144)   0582 D3 1C       		 OUT (MCR), A	;
145)   0584 CD 9D 05    		 CALL RSRXRD	;
146)   0587 AF          		RS_GTCH: XOR A        ;NOT ready to receive SIGNAL DSR 0	;NOT ready to receive SIGNAL DSR 0
147)   0588 D3 1C       		 OUT (MCR), A	;
149)   058A DB 18       		 IN A, (RBR)	;
150)   058C FB          		 EI	;
151)   058D C9          		 RET	;
153)   058E 3E 01       		RS_RXNW: LD A, 1       ;ready to receive SIGNAL DSR 1	;ready to receive SIGNAL DSR 1
154)   0590 D3 1C       		 OUT (MCR), A	;
155)   0592 DB 1D       		 IN A, (LSR)        ; fetch the conrtol register	; fetch the conrtol register
156)   0594 CB 47       		 BIT 0, A	;
157)   0596 28 03       		 JR Z, RS_NOCHAR	;
158)   0598 F3          		 DI	;
159)   0599 18 EC       		 JR RS_GTCH	;
160)   059B AF          		RS_NOCHAR: XOR A        ;RETURN ZERO	;RETURN ZERO
161)   059C C9          		 RET	;
169)   059D F5          		 PUSH AF	;
175)   059E DB 1D       		 IN A, (LSR)        ; fetch the control register	; fetch the control register
176)   05A0 CB 47       		 BIT 0, A        ; bit will be set if UART has data	; bit will be set if UART has data
177)   05A2 28 FA       		 JR Z, RSRXLP	;
179)   05A4 F1          		 POP AF	;
181)   05A5 C9          		 RET	;
185)   05A6 DB 1D       		RS_KEYRD: IN A, (LSR)       ; fetch the conrtol register	; fetch the conrtol register
186)   05A8 CB 47       		 BIT 0, A        ; bit will be set if UART has data	; bit will be set if UART has data
187)   05AA C9          		 RET	;
189)   05AB F5          		SHLCD: PUSH AF	;
191)   05AC F1          		 POP AF	;
193)   05AD C9          		 RET	;
195)   05AE F5          		RS_NEWLINE: PUSH AF	;
196)   05AF 3E 0D       		 LD A,13	;
197)   05B1 CD 48 05    		 CALL RS_TX	;
198)   05B4 3E 0A       		 LD A,10	;
199)   05B6 CD 48 05    		 CALL RS_TX	;
200)   05B9 F1          		 POP AF	;
201)   05BA C9          		 RET  	;
204)   05BB F5          		CHKERR: PUSH AF	;
205)   05BC E5          		 PUSH HL	;
206)   05BD C5          		 PUSH BC	;
207)   05BE DB 1D       		 IN A, (LSR)        ;FETCH LINE STATUS REGISTER	;FETCH LINE STATUS REGISTER
208)   05C0 CB 67       		 BIT 4, A	;
209)   05C2 28 04       		 JR Z, LBLPE	;
210)   05C4 3E 42       		 LD A, 'B'       ;$20  ;BREAK	;$20  ;BREAK
211)   05C6 18 1A       		 JR EXIT	;
212)   05C8 CB 57       		LBLPE: BIT 2, A	;
213)   05CA 28 04       		 JR Z, LBLFE	;
214)   05CC 3E 50       		 LD A, 'P'       ;$40  ;PARITY	;$40  ;PARITY
215)   05CE 18 12       		 JR EXIT	;
216)   05D0 CB 5F       		LBLFE: BIT 3, A	;
217)   05D2 28 04       		 JR Z, LBLOE	;
218)   05D4 3E 46       		 LD A, 'F'       ;$60  ;FRAME	;$60  ;FRAME
219)   05D6 18 0A       		 JR EXIT	;
220)   05D8 CB 4F       		LBLOE: BIT 1, A	;
221)   05DA 28 04       		 JR Z, LBLNE	;
222)   05DC 3E 4F       		 LD A, 'O'        ;$80  ;OVERRUN	;$80  ;OVERRUN
223)   05DE 18 02       		 JR EXIT	;
224)   05E0 3E 4E       		LBLNE: LD A, 'N'        ;NO ERROR	;NO ERROR
225)   05E2 21 2D F0    		EXIT: LD HL, SERERR	;
226)   05E5 77          		 LD (HL), A	;
228)   05E6 C1          		 POP BC	;
229)   05E7 E1          		 POP HL	;
230)   05E8 F1          		 POP AF	;
231)   05E9 C9          		 RET	;
  3)   05EA 	            		INT376CMD EQU DEV376+1	;
  4)   05EA 	            		INT376DAT EQU DEV376	;
 89)   05EA CD C8 06    		CH376_GETDATA: CALL CH376_DATARD	;
 90)   05ED FE 00       		 CP 0	;
 91)   05EF C8          		 RET Z   ;NO DATA AVAILABLE	;NO DATA AVAILABLE
 98)   05F0 F5          		               PUSH AF	;
 99)   05F1 11 2E F0    		 LD DE,USBBUF	;
100)   05F4 47          		 LD B,A	;
101)   05F5 CD C8 06    		UDC_NXT1: CALL CH376_DATARD	;
103)   05F8 12          		 LD (DE),A	;
104)   05F9 13          		 INC DE	;
108)   05FA 10 F9       		 DJNZ UDC_NXT1 	;
109)   05FC F1          		               POP AF	;
110)   05FD C9          		 RET	;
113)   05FE F5          		DISKERROR: PUSH AF	;
114)   05FF CD 61 05    		 CALL RS_MESG	;
115)   0602 46 41 54 41 		 DEFM "FATAL ERROR:" 	;
115)   0606 4C 20 45 52 		 DEFM "FATAL ERROR:" 	;
115)   060A 52 4F 52 3A 		 DEFM "FATAL ERROR:" 	;
116)   060E 00          		 DB 0  	;
117)   060F F1          		 POP AF	;
118)   0610 CD 0B 15    		 CALL PRINTNUM	;
119)   0613 21 1F 06    		 LD HL,ERR_PART	;
120)   0616 FE 92       		 CP ERR_TYPE_ERROR	;
121)   0618 28 01       		 JR Z,PRNMES	;
122)   061A C9          		 RET	;
123)   061B CD 57 05    		PRNMES: CALL RS_TXT 	;
124)   061E C9          		 RET	;
126)   061F 50 41 52 54 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0623 49 54 49 4F 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0627 4E 2E 4E 4F 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   062B 54 2E 53 55 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   062F 50 50 4F 52 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0633 54 45 44 21 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0637 21 21       		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
127)   0639 0A 0D 00    		 DB 10,13,0	;
136)   063C CD 4C 06    		CH376_WTCMDEND: CALL CH376_WAITINT	;
137)   063F C0          		               RET NZ	;
138)   0640 D8          		 RET C	;
139)   0641 AF          		 XOR A	;
140)   0642 CD 6B 06    		 CALL CH376_GETSTAT	;
141)   0645 FE 14       		 CP USB_INT_SUCCESS	;
142)   0647 C8          		 RET Z	;
153)   0648 06 02       		 LD B,2	;
154)   064A 05          		 DEC B  ;NZ FLAG	;NZ FLAG
155)   064B C9          		 RET	;
161)   064C AF          		CH376_WAITINT: XOR A	;
162)   064D 01 32 00    		 LD BC,50	;
163)   0650 CD B9 06    		C3AGN2: CALL CH376_INSTAT	;
164)   0653 CB 7F       		 BIT 7,A	;
165)   0655 C8          		 RET Z	;
166)   0656 F5          		 PUSH AF	;
167)   0657 C5          		 PUSH BC	;
168)   0658 06 14       		 LD B,20	;
169)   065A CD A6 12    		 CALL DELAYMICRO	;
170)   065D C1          		 POP BC	;
171)   065E F1          		 POP AF	;
172)   065F 0B          		 DEC BC	;
173)   0660 5F          		 LD E,A	;
174)   0661 78          		 LD A,B	;
175)   0662 B1          		 OR C	;
176)   0663 7B          		 LD A,E	;
177)   0664 20 EA       		 JR NZ, C3AGN2  	;
182)   0666 37          		 SCF ;TIMEOUT       	;TIMEOUT
183)   0667 06 02       		 LD B,2	;
184)   0669 05          		 DEC B  ;NZ FLAG	;NZ FLAG
185)   066A C9          		 RET	;
187)   066B 3E 22       		CH376_GETSTAT: LD A,CMD_GET_STATUS	;
188)   066D CD AD 06    		 CALL CH376_COMMD	;
189)   0670 CD C8 06    		 CALL CH376_DATARD	;
190)   0673 C9          		 RET	;
198)   0674 01 C4 09    		CH376_CHOK: LD BC,2500	;
199)   0677 CD B9 06    		C3AGN: CALL CH376_INSTAT	;
200)   067A CB 67       		 BIT 4,A   ;CHECK BUSY	;CHECK BUSY
201)   067C C8          		 RET Z   	;
202)   067D C5          		 PUSH BC	;
203)   067E F5          		 PUSH AF	;
204)   067F 06 32       		 LD B,50	;
205)   0681 CD A6 12    		 CALL DELAYMICRO	;
206)   0684 F1          		 POP AF	;
207)   0685 C1          		 POP BC	;
208)   0686 0B          		 DEC BC	;
209)   0687 5F          		 LD E,A	;
210)   0688 78          		 LD A,B	;
211)   0689 B1          		 OR C	;
212)   068A 7B          		 LD A,E	;
213)   068B 20 EA       		 JR NZ,C3AGN	;
214)   068D F5          		 PUSH AF  	;
215)   068E CD 0B 15    		 CALL PRINTNUM  	;
216)   0691 F1          		 POP AF	;
217)   0692 CD 61 05    		 CALL RS_MESG	;
218)   0695 2A 2A 2A 43 		 DEFM "***CMD TIMEOUT***"	;
218)   0699 4D 44 20 54 		 DEFM "***CMD TIMEOUT***"	;
218)   069D 49 4D 45 4F 		 DEFM "***CMD TIMEOUT***"	;
218)   06A1 55 54 2A 2A 		 DEFM "***CMD TIMEOUT***"	;
218)   06A5 2A          		 DEFM "***CMD TIMEOUT***"	;
219)   06A6 0A 0D 00    		 DB 10,13,0       	;
220)   06A9 06 02       		 LD B,2	;
221)   06AB 05          		 DEC B  ;NZ FLAG	;NZ FLAG
222)   06AC C9          		 RET	;
228)   06AD D3 31       		CH376_COMMD: OUT (INT376CMD),A	;
229)   06AF C5          		 PUSH BC	;
230)   06B0 D5          		 PUSH DE	;
231)   06B1 E5          		 PUSH HL	;
232)   06B2 CD 74 06    		 CALL CH376_CHOK  ;CHECK NOT BUSY	;CHECK NOT BUSY
233)   06B5 E1          		 POP HL	;
234)   06B6 D1          		 POP DE	;
235)   06B7 C1          		 POP BC	;
236)   06B8 C9          		 RET	;
238)   06B9 DB 31       		CH376_INSTAT: IN A,(INT376CMD)	;
240)   06BB C9          		 RET	;
245)   06BC D3 30       		CH376_DATAWR: OUT (INT376DAT),A 	;
246)   06BE D5          		 PUSH DE	;
247)   06BF E5          		 PUSH HL 	;
248)   06C0 C5          		 PUSH BC	;
249)   06C1 CD 74 06    		 CALL CH376_CHOK  ;CHECK NOT BUSY	;CHECK NOT BUSY
250)   06C4 C1          		 POP BC	;
251)   06C5 E1          		 POP HL	;
252)   06C6 D1          		 POP DE	;
253)   06C7 C9          		 RET	;
256)   06C8 DB 30       		CH376_DATARD: IN A,(INT376DAT)	;
261)   06CA C9          		 RET	;
264)   06CB 3E 01       		CH376_VERSION: LD A,CMD_GET_IC_VER 	;
265)   06CD CD AD 06    		 CALL CH376_COMMD	;
266)   06D0 CD C8 06    		 CALL CH376_DATARD	;
267)   06D3 E6 0F       		 AND 00001111B	;
268)   06D5 C9          		               RET	;
270)   06D6 3E 05       		CH376_INIT:    LD A,CMD_RESET_ALL	;
271)   06D8 CD AD 06    		 CALL CH376_COMMD  	;
272)   06DB 3E 06       		 LD A,CMD_CHECK_EXIST 	;
273)   06DD CD AD 06    		 CALL CH376_COMMD	;
274)   06E0 3E 57       		 LD A,87	;
275)   06E2 CD BC 06    		 CALL CH376_DATAWR	;
276)   06E5 CD C8 06    		 CALL CH376_DATARD	;
277)   06E8 FE A8       		 CP 255 - 87 	;
278)   06EA C9          		               RET               	;
282)   06EB F5          		CH376_SETUSB: PUSH AF	;
283)   06EC 3E 15       		               LD A,CMD_SETUSB_MODE	;
284)   06EE CD AD 06    		 CALL CH376_COMMD	;
285)   06F1 F1          		               POP AF	;
286)   06F2 CD BC 06    		 CALL CH376_DATAWR	;
288)   06F5 06 14       		 LD B,20	;
289)   06F7 CD A6 12    		 CALL DELAYMICRO     ;WAIT A BIT	;WAIT A BIT
294)   06FA CD 6B 06    		 CALL CH376_GETSTAT	;
295)   06FD FE 15       		 CP USB_INT_CONNECT	;
296)   06FF C8          		 RET Z	;
298)   0700 F5          		 PUSH AF	;
299)   0701 CD 61 05    		 CALL CH376_ERROR	;
300)   0704 45 52 52 3A 		 DEFM "ERR: SETUSBMODE"	;
300)   0708 20 53 45 54 		 DEFM "ERR: SETUSBMODE"	;
300)   070C 55 53 42 4D 		 DEFM "ERR: SETUSBMODE"	;
300)   0710 4F 44 45    		 DEFM "ERR: SETUSBMODE"	;
301)   0713 0A 0D 00    		 DB 10,13,0	;
302)   0716 F1          		 POP AF	;
303)   0717 CD 0B 15    		 CALL PRINTNUM	;
304)   071A C9          		               RET	;
309)   071B 3E 30       		CH376_CONNECT: LD A, CMD_DISK_CONNECT	;
310)   071D CD AD 06    		     CALL CH376_COMMD	;
311)   0720 CD 3C 06    		 CALL CH376_WTCMDEND	;
313)   0723 D8          		 RET C ;TIMEOUT	;TIMEOUT
314)   0724 C8          		 RET Z ;CONNECT OK	;CONNECT OK
319)   0725 C9          		 RET ;NZ HERE	;NZ HERE
329)   0726 3E 31       		CH376_MOUNT:   LD A,CMD_DISK_MOUNT  	;
330)   0728 CD AD 06    		 CALL CH376_COMMD	;
331)   072B CD 3C 06    		 CALL CH376_WTCMDEND  	;
332)   072E C9          		 RET	;
337)   072F 06 0A       		CH376_MOUNTDEV:   LD B,10  ;TRY TO MOUNT 10 TIMES	;TRY TO MOUNT 10 TIMES
338)   0731 C5          		CM_AGN1: PUSH BC	;
339)   0732 CD EB 06    		 CALL CH376_SETUSB	;
340)   0735 20 10       		 JR NZ,CM_ERROR	;
341)   0737 CD 1B 07    		 CALL CH376_CONNECT	;
342)   073A 20 0B       		 JR NZ,CM_ERROR	;
343)   073C 3E 31       		        LD A,CMD_DISK_MOUNT  	;
344)   073E CD AD 06    		 CALL CH376_COMMD	;
345)   0741 CD 3C 06    		 CALL CH376_WTCMDEND	;
346)   0744 C1          		 POP BC	;
347)   0745 C8          		 RET Z	;
348)   0746 C5          		 PUSH BC	;
349)   0747 06 64       		CM_ERROR: LD B,100	;
350)   0749 CD BB 12    		 CALL DELAYMILI     ;WAIT A BIT	;WAIT A BIT
351)   074C C1          		 POP BC	;
352)   074D 10 E2       		 DJNZ CM_AGN1  	;
353)   074F 06 02       		 LD B,2	;
354)   0751 05          		 DEC B  ;NZ  	;NZ
355)   0752 F5          		 PUSH AF	;
356)   0753 CD 61 05    		 CALL CH376_ERROR	;
357)   0756 45 52 52 3A 		 DEFM "ERR: MOUNT DISK"	;
357)   075A 20 4D 4F 55 		 DEFM "ERR: MOUNT DISK"	;
357)   075E 4E 54 20 44 		 DEFM "ERR: MOUNT DISK"	;
357)   0762 49 53 4B    		 DEFM "ERR: MOUNT DISK"	;
358)   0765 0A 0D 00    		 DB 10,13,0	;
359)   0768 F1          		     POP AF	;
360)   0769 C9          		               RET	;
363)   076A 7E          		CH376_WRSTRING: LD A,(HL)	;
364)   076B F5          		 PUSH AF	;
365)   076C E5          		 PUSH HL	;
366)   076D CD 48 05    		 CALL RS_TX	;
367)   0770 E1          		 POP HL	;
368)   0771 F1          		 POP AF	;
369)   0772 CD BC 06    		 CALL CH376_DATAWR	;
370)   0775 C0          		 RET NZ	;
371)   0776 7E          		 LD A,(HL)	;
372)   0777 FE 00       		 CP 0	;
373)   0779 C8          		 RET Z	;
374)   077A 23          		 INC HL	;
375)   077B 18 ED       		 JR CH376_WRSTRING	;
 31)   077D 	            		@CH376_ERROR EQU RS_MESG	;
 41)   077D 57          		STRG_INIT: LD D,A	;
 42)   077E AF          		 XOR A  	;
 43)   077F 32 BB F0    		 LD (STRG_STAT),A  ;NOT CONNECTED, NOT EXISTS	;NOT CONNECTED, NOT EXISTS
 44)   0782 CD D6 06    		 CALL CH376_INIT	;
 45)   0785 20 06       		 JR NZ,INIERR	;
 46)   0787 7A          		 LD A,D   ;SELECT USB DEVICE 3 FOR SDCARD, 6 FOR FLASH	;SELECT USB DEVICE 3 FOR SDCARD, 6 FOR FLASH
 47)   0788 CD EB 06    		 CALL CH376_SETUSB	;
 48)   078B 28 03       		 JR Z,INIOK	;
 49)   078D 3E 00       		INIERR: LD A,0  	;
 50)   078F C9          		 RET	;
 51)   0790 CD CB 06    		INIOK: CALL CH376_VERSION	;
 52)   0793 BF          		 CP A  ;SET ZF	;SET ZF
 53)   0794 3E 80       		 LD A, $80  ;BIT 7 MEANS EXISTS	;BIT 7 MEANS EXISTS
 54)   0796 32 BB F0    		 LD (STRG_STAT),A  ;	;
 55)   0799 C9          		 RET	;
 58)   079A 3A BB F0    		STRG_EXISTS: LD A,(STRG_STAT)	;
 59)   079D CB 7F       		 BIT 7,A	;
 60)   079F C9          		 RET	;
 66)   07A0 CD 9A 07    		STRG_CHECK: CALL STRG_EXISTS	;
 67)   07A3 37          		 SCF	;
 68)   07A4 C8          		 RET Z    ;Z MEANS NOT EXISTS	;Z MEANS NOT EXISTS
 69)   07A5 06 05       		 LD B,5	;
 70)   07A7 CD 1B 07    		SC_AGN1: CALL CH376_CONNECT 	;
 71)   07AA 28 06       		 JR Z,DOCON	;
 72)   07AC 30 1C       		 JR NC,DODISC	;
 73)   07AE 10 F7       		 DJNZ SC_AGN1    	;
 77)   07B0 AF          		 XOR A   	;
 78)   07B1 C9          		 RET   ;TIMEOUT	;TIMEOUT
 80)   07B2 AF          		DOCON: XOR A    ;CLCF	;CLCF
 81)   07B3 3A BB F0    		 LD A,(STRG_STAT)	;
 82)   07B6 CB 47       		 BIT 0,A	;
 83)   07B8 C0          		 RET NZ    ;ALREADY MOUNTED THE DRIVE	;ALREADY MOUNTED THE DRIVE
 87)   07B9 CD 26 07    		 CALL CH376_MOUNT   ;MOUNT THE DRIVE	;MOUNT THE DRIVE
 88)   07BC 20 0C       		 JR NZ, DONOMNT	;
 92)   07BE 3A BB F0    		 LD A,(STRG_STAT)	;
 93)   07C1 CB C7       		 SET 0,A	;
 94)   07C3 32 BB F0    		 LD (STRG_STAT),A	;
 95)   07C6 AF          		 XOR A    ;CLEAR CARRY FLAG MEANS WE ARE OK	;CLEAR CARRY FLAG MEANS WE ARE OK
 96)   07C7 3E 01       		 LD A,1    ;A=1 IS JUST CONNECTED	;A=1 IS JUST CONNECTED
 97)   07C9 C9          		 RET	;
105)   07CA AF          		 XOR A 	;
106)   07CB 3A BB F0    		 LD A,(STRG_STAT)  	;
107)   07CE CB 47       		 BIT 0,A	;
108)   07D0 C8          		 RET Z    ;ALREADY DISCONNECTED	;ALREADY DISCONNECTED
109)   07D1 CB 87       		 RES 0,A    ;SET BIT 0 TO 0=DISCONNECTED	;SET BIT 0 TO 0=DISCONNECTED
110)   07D3 32 BB F0    		 LD (STRG_STAT),A  	;
111)   07D6 3E 02       		 LD A,2    ;A=2 IS JUST DISCONNECTED	;A=2 IS JUST DISCONNECTED
112)   07D8 C9          		 RET	;
118)   07D9 CD 2F 07    		STRG_OPENCRD:  CALL CH376_MOUNTDEV	;
119)   07DC C9          		 RET 	;
122)   07DD C9          		STRG_DIRLIST: RET	;
123)   07DE C9          		STRG_DIRCHG: RET	;
124)   07DF C9          		STRG_TPFILE: RET	;
125)   07E0 C9          		STRG_GETPOS: RET	;
126)   07E1 C9          		STRG_SETPOS: RET	;
127)   07E2 C9          		STRG_GETSIZE: RET	;
128)   07E3 C9          		STRG_GETEOF: RET	;
135)   07E4 3E 27       		STRG_PRDRVINFO: LD A,CMD_RDUSB_DATA0	;
136)   07E6 CD AD 06    		 CALL CH376_COMMD	;
137)   07E9 CD EA 05    		 CALL CH376_GETDATA	;
138)   07EC F5          		 PUSH AF	;
139)   07ED D6 08       		 SUB 8  	;
140)   07EF 47          		 LD B,A	;
141)   07F0 F1          		 POP AF   	;
142)   07F1 21 36 F0    		 LD HL,USBBUF+8  ;SKIP 8 BYTES	;SKIP 8 BYTES
143)   07F4 7E          		PDI_NXT: LD A,(HL)	;
144)   07F5 E5          		 PUSH HL	;
145)   07F6 C5          		 PUSH BC	;
146)   07F7 CD D3 00    		 CALL OS_PRINTCHAR	;
147)   07FA C1          		 POP BC	;
148)   07FB E1          		 POP HL	;
149)   07FC 23          		 INC HL	;
150)   07FD 10 F5       		 DJNZ PDI_NXT  	;
151)   07FF CD AE 05    		 CALL RS_NEWLINE	;
153)   0802 3E 3F       		 LD A,CMD_DISK_QUERY   	;
154)   0804 CD AD 06    		 CALL CH376_COMMD	;
155)   0807 CD 3C 06    		 CALL CH376_WTCMDEND	;
156)   080A C0          		 RET NZ	;
157)   080B 3E 27       		 LD A,CMD_RDUSB_DATA0	;
158)   080D CD AD 06    		 CALL CH376_COMMD  	;
159)   0810 CD EA 05    		 CALL CH376_GETDATA	;
161)   0813 DD 21 2E F0 		 LD IX,USBBUF 	;
162)   0817 DD E5       		 PUSH IX   	;
163)   0819 DD 56 03    		 LD D,(IX+3)	;
164)   081C DD 5E 02    		 LD E,(IX+2)	;
165)   081F DD 66 01    		 LD H,(IX+1)	;
166)   0822 DD 6E 00    		 LD L,(IX+0)	;
167)   0825 CD 82 13    		 CALL B2D32    ;DE:HL RES ON B2DBUF	;DE:HL RES ON B2DBUF
168)   0828 21 9B F0    		 LD HL,B2DBUF	;
169)   082B CD 12 14    		 CALL SKIPSPC	;
170)   082E CD E6 00    		 CALL OS_PRINTTEXT	;
171)   0831 CD F2 00    		 CALL OS_PRINTMSG	;
172)   0834 20 53 45 43 		 DEFM " SECTORS"	;
172)   0838 54 4F 52 53 		 DEFM " SECTORS"	;
173)   083C 0A 0D 00    		 DB 10,13 0	;
174)   083F DD E1       		 POP IX	;
176)   0841 DD E5       		 PUSH IX     	;
177)   0843 DD 56 07    		 LD D,(IX+7)	;
178)   0846 DD 5E 06    		 LD E,(IX+6)	;
179)   0849 DD 66 05    		 LD H,(IX+5)	;
180)   084C DD 6E 04    		 LD L,(IX+4)  	;
181)   084F CD 82 13    		 CALL B2D32  ;DE:HL RES ON B2DBUF	;DE:HL RES ON B2DBUF
182)   0852 21 9B F0    		 LD HL,B2DBUF	;
183)   0855 CD 12 14    		 CALL SKIPSPC	;
184)   0858 CD E6 00    		 CALL OS_PRINTTEXT	;
185)   085B CD F2 00    		 CALL OS_PRINTMSG	;
186)   085E 20 53 45 43 		 DEFM " SECTORS FREE   "	;
186)   0862 54 4F 52 53 		 DEFM " SECTORS FREE   "	;
186)   0866 20 46 52 45 		 DEFM " SECTORS FREE   "	;
186)   086A 45 20 20 20 		 DEFM " SECTORS FREE   "	;
187)   086E 0A 0D 00    		 DB 10,13,0   	;
188)   0871 DD E1       		 POP IX	;
190)   0873 DD 7E 08    		FILESYSTEM: LD A,(IX+8) ;1-FAT12,2-FAT16,3-FAT32	;1-FAT12,2-FAT16,3-FAT32
191)   0876 3D          		 DEC A	;
192)   0877 28 08       		 JR Z,PDI_NXT0	;
193)   0879 3D          		 DEC A	;
194)   087A 28 18       		 JR Z,PDI_NXT1	;
195)   087C 3D          		 DEC A	;
196)   087D 28 28       		 JR Z,PDI_NXT2	;
197)   087F 18 39       		 JR PDI_NXT3	;
199)   0881 CD F2 00    		PDI_NXT0: CALL OS_PRINTMSG	;
200)   0884 46 53 20 49 		 DEFM "FS IS FAT-12"	;
200)   0888 53 20 46 41 		 DEFM "FS IS FAT-12"	;
200)   088C 54 2D 31 32 		 DEFM "FS IS FAT-12"	;
201)   0890 0A 0D 00    		 DB 10,13,0	;
202)   0893 C9          		 RET	;
203)   0894 CD F2 00    		PDI_NXT1: CALL OS_PRINTMSG	;
204)   0897 46 53 20 49 		 DEFM "FS IS FAT-16"	;
204)   089B 53 20 46 41 		 DEFM "FS IS FAT-16"	;
204)   089F 54 2D 31 36 		 DEFM "FS IS FAT-16"	;
205)   08A3 0A 0D 00    		 DB 10,13,0	;
206)   08A6 C9          		 RET	;
207)   08A7 CD F2 00    		PDI_NXT2: CALL OS_PRINTMSG	;
208)   08AA 46 53 20 49 		 DEFM "FS IS FAT-32"	;
208)   08AE 53 20 46 41 		 DEFM "FS IS FAT-32"	;
208)   08B2 54 2D 33 32 		 DEFM "FS IS FAT-32"	;
209)   08B6 0A 0D 00    		 DB 10,13,0	;
210)   08B9 C9          		 RET	;
211)   08BA CD F2 00    		PDI_NXT3: CALL OS_PRINTMSG	;
212)   08BD 55 4E 4B 4E 		 DEFM "UNKNOWN FS"	;
212)   08C1 4F 57 4E 20 		 DEFM "UNKNOWN FS"	;
212)   08C5 46 53       		 DEFM "UNKNOWN FS"	;
213)   08C7 0A 0D 00    		 DB 10,13,0	;
214)   08CA DD 7E 08    		 LD A,(IX+8)  ;TO BE PRINTED MAYBE	;TO BE PRINTED MAYBE
215)   08CD C9          		 RET	;
220)   08CE F5          		STRG_OPNFILE: PUSH AF	;
221)   08CF 3E 2F       		 LD A, CMD_SETFILENAME	;
222)   08D1 CD AD 06    		     CALL CH376_COMMD	;
223)   08D4 21 60 F0    		 LD HL, STRGBUFF	;
224)   08D7 CD 6A 07    		     CALL CH376_WRSTRING	;
225)   08DA 28 1E       		 JR Z,OF_WSOK	;
226)   08DC F1          		 POP AF	;
227)   08DD CD F2 00    		 CALL OS_PRINTMSG	;
228)   08E0 45 52 52 4F 		 DEFM "ERROR SETTING FILENAME"	;
228)   08E4 52 20 53 45 		 DEFM "ERROR SETTING FILENAME"	;
228)   08E8 54 54 49 4E 		 DEFM "ERROR SETTING FILENAME"	;
228)   08EC 47 20 46 49 		 DEFM "ERROR SETTING FILENAME"	;
228)   08F0 4C 45 4E 41 		 DEFM "ERROR SETTING FILENAME"	;
228)   08F4 4D 45       		 DEFM "ERROR SETTING FILENAME"	;
229)   08F6 0A 0D 00    		 DB 10,13,0  	;
230)   08F9 C9          		 RET	;
231)   08FA F1          		OF_WSOK: POP AF	;
235)   08FB B7          		 OR A  ;0 READ	;0 READ
236)   08FC 28 1F       		 JR Z,OF_OPEN	;
237)   08FE D6 01       		 SUB 1  ;1 WRITE	;1 WRITE
238)   0900 28 1B       		 JR Z,OF_OPEN	;
239)   0902 D6 01       		 SUB 1  ;2 READ/WRITE	;2 READ/WRITE
240)   0904 28 17       		 JR Z,OF_OPEN	;
246)   0906 CD F2 00    		OF_CREATE: CALL OS_PRINTMSG	;
247)   0909 0A 0D       		 DB 10,13	;
248)   090B 43 52 45 41 		 DEFM "CREATING..."	;
248)   090F 54 49 4E 47 		 DEFM "CREATING..."	;
248)   0913 2E 2E 2E    		 DEFM "CREATING..."	;
249)   0916 0A 0D 00    		 DB 10,13,0    	;
250)   0919 3E 34       		 LD A, CMD_FILE_CREATE  	;
251)   091B 18 14       		 JR OF_EXEC	;
252)   091D CD F2 00    		OF_OPEN: CALL OS_PRINTMSG	;
253)   0920 0A 0D       		 DB 10,13	;
254)   0922 4F 50 45 4E 		 DEFM "OPENING..."	;
254)   0926 49 4E 47 2E 		 DEFM "OPENING..."	;
254)   092A 2E 2E       		 DEFM "OPENING..."	;
255)   092C 0A 0D 00    		 DB 10,13,0 	;
256)   092F 3E 32       		 LD A, CMD_FILE_OPEN	;
260)   0931 CD AD 06    		 CALL CH376_COMMD	;
261)   0934 CD 3C 06    		 CALL CH376_WTCMDEND	;
262)   0937 C9          		 RET	;
264)   0938 3E 36       		STRG_CLSFILE: LD A, CMD_FILE_CLOSE	;
265)   093A CD AD 06    		     CALL CH376_COMMD	;
266)   093D 3E 01       		     LD A, 1                             ; 1 = update file size if necessary	; 1 = update file size if necessary
267)   093F CD BC 06    		     CALL CH376_DATAWR	;
268)   0942 CD 3C 06    		     CALL CH376_WTCMDEND	;
269)   0945 C9          		     RET	;
275)   0946 D5          		STRG_BLKREAD: PUSH DE	;
276)   0947 3E 3A       		 LD A, CMD_BYTE_READ	;
277)   0949 CD AD 06    		     CALL CH376_COMMD	;
278)   094C 79          		     LD A, C                           ; BYTES REQUEST ON BC	; BYTES REQUEST ON BC
279)   094D CD BC 06    		     CALL CH376_DATAWR	;
280)   0950 78          		     LD A, B	;
281)   0951 CD BC 06    		     CALL CH376_DATAWR    	;
282)   0954 CD F2 00    		 CALL OS_PRINTMSG	;
283)   0957 42 4C 4F 43 		 DEFM "BLOCK READING"	;
283)   095B 4B 20 52 45 		 DEFM "BLOCK READING"	;
283)   095F 41 44 49 4E 		 DEFM "BLOCK READING"	;
283)   0963 47          		 DEFM "BLOCK READING"	;
284)   0964 0A 0D 00    		 DB 10,13,0	;
285)   0967 D1          		 POP DE	;
286)   0968 21 00 00    		 LD HL,0      ;BYTE RECEIVE COUNTER	;BYTE RECEIVE COUNTER
287)   096B E5          		STBR_DOREST: PUSH HL	;
288)   096C D5          		 PUSH DE	;
289)   096D CD 3C 06    		 CALL CH376_WTCMDEND	;
290)   0970 D1          		 POP DE	;
291)   0971 E1          		 POP HL	;
292)   0972 28 1C       		 JR Z, FR_DONE   ;Z=NO MORE OR CANNOT READ	;Z=NO MORE OR CANNOT READ
293)   0974 FE 1D       		 CP USB_INT_DISK_READ                    	;
294)   0976 20 32       		     JR NZ, FR_ERROR	;
296)   0978 3E 27       		 LD A,CMD_RDUSB_DATA0	;
297)   097A CD AD 06    		 CALL CH376_COMMD 	;
298)   097D CD C8 06    		 CALL CH376_DATARD  ;A= BYTES TO READ TO BUFFER	;A= BYTES TO READ TO BUFFER
299)   0980 47          		 LD B,A	;
312)   0981 CD C8 06    		STBR_NXT1: CALL CH376_DATARD ;READ THE BYTES TO BUFFER	;READ THE BYTES TO BUFFER
313)   0984 12          		 LD (DE),A	;
314)   0985 13          		 INC DE	;
315)   0986 23          		 INC HL    ;TOTAL BYTES READ COUNTER	;TOTAL BYTES READ COUNTER
316)   0987 10 F8       		 DJNZ STBR_NXT1  	;
317)   0989 3E 3B       		 LD A, CMD_BYTE_RD_GO 	;
318)   098B CD AD 06    		 CALL CH376_COMMD 	;
319)   098E 18 DB       		 JR STBR_DOREST	;
320)   0990 E5          		FR_DONE: PUSH HL	;
321)   0991 CD F2 00    		 CALL OS_PRINTMSG	;
322)   0994 52 45 41 44 		 DEFM "READING DONE!!! "	;
322)   0998 49 4E 47 20 		 DEFM "READING DONE!!! "	;
322)   099C 44 4F 4E 45 		 DEFM "READING DONE!!! "	;
322)   09A0 21 21 21 20 		 DEFM "READING DONE!!! "	;
323)   09A4 00          		 DB 0 	;
324)   09A5 E1          		 POP HL	;
325)   09A6 44          		 LD B,H	;
326)   09A7 4D          		 LD C,L	;
327)   09A8 B7          		 OR A	;
328)   09A9 C9          		 RET	;
329)   09AA F5          		FR_ERROR: PUSH AF	;
330)   09AB CD F2 00    		 CALL OS_PRINTMSG	;
331)   09AE 45 52 52 4F 		 DEFM "ERROR READING BLOCK!!! "	;
331)   09B2 52 20 52 45 		 DEFM "ERROR READING BLOCK!!! "	;
331)   09B6 41 44 49 4E 		 DEFM "ERROR READING BLOCK!!! "	;
331)   09BA 47 20 42 4C 		 DEFM "ERROR READING BLOCK!!! "	;
331)   09BE 4F 43 4B 21 		 DEFM "ERROR READING BLOCK!!! "	;
331)   09C2 21 21 20    		 DEFM "ERROR READING BLOCK!!! "	;
332)   09C5 00          		 DB 0 	;
333)   09C6 F1          		 POP AF	;
334)   09C7 06 02       		 LD B,2	;
335)   09C9 05          		 DEC B	;
336)   09CA C9          		 RET  	;
343)   09CB D5          		STRG_LOADFILE: PUSH DE	;
344)   09CC C5          		 PUSH BC	;
345)   09CD E5          		 PUSH HL  	;
346)   09CE CD F2 00    		 CALL OS_PRINTMSG	;
347)   09D1 4F 50 45 4E 		 DEFM "OPEN FILE"	;
347)   09D5 20 46 49 4C 		 DEFM "OPEN FILE"	;
347)   09D9 45          		 DEFM "OPEN FILE"	;
348)   09DA 0A 0D 00    		 DB 10,13,0	;
349)   09DD E1          		 POP HL	;
350)   09DE CD 40 15    		 CALL COPYFNAME	;
351)   09E1 AF          		 XOR A   ;READ ONLY 	;READ ONLY
352)   09E2 CD CE 08    		 CALL STRG_OPNFILE  	;
353)   09E5 20 58       		 JR NZ, FOPENERR	;
354)   09E7 CD F2 00    		 CALL OS_PRINTMSG	;
355)   09EA 0A 0D       		 DB 10,13	;
356)   09EC 46 49 4C 45 		 DEFM "FILE OPEN OK"	;
356)   09F0 20 4F 50 45 		 DEFM "FILE OPEN OK"	;
356)   09F4 4E 20 4F 4B 		 DEFM "FILE OPEN OK"	;
357)   09F8 0A 0D 00    		 DB 10,13,0	;
359)   09FB C1          		 POP BC  ;BYTECOUNT	;BYTECOUNT
360)   09FC D1          		 POP DE  ;DEST BUFFER	;DEST BUFFER
361)   09FD CD 46 09    		 CALL STRG_BLKREAD	;
362)   0A00 28 19       		 JR Z, FREADOK	;
364)   0A02 CD F2 00    		 CALL OS_PRINTMSG	;
365)   0A05 20 45 52 52 		 DEFM " ERROR READING FILE"	;
365)   0A09 4F 52 20 52 		 DEFM " ERROR READING FILE"	;
365)   0A0D 45 41 44 49 		 DEFM " ERROR READING FILE"	;
365)   0A11 4E 47 20 46 		 DEFM " ERROR READING FILE"	;
365)   0A15 49 4C 45    		 DEFM " ERROR READING FILE"	;
366)   0A18 0A 0D 00    		 DB 10,13,0	;
367)   0A1B C5          		FREADOK: PUSH BC	;
368)   0A1C CD 7E 13    		 CALL B2D16	;
369)   0A1F 21 9B F0    		 LD HL,B2DBUF	;
370)   0A22 CD 12 14    		 CALL SKIPSPC	;
371)   0A25 CD 57 05    		 CALL RS_TXT	;
372)   0A28 CD F2 00    		 CALL OS_PRINTMSG	;
373)   0A2B 20 42 59 54 		 DEFM " BYTES READ"	;
373)   0A2F 45 53 20 52 		 DEFM " BYTES READ"	;
373)   0A33 45 41 44    		 DEFM " BYTES READ"	;
374)   0A36 0A 0D 00    		 DB 10,13,0	;
375)   0A39 CD 38 09    		 CALL STRG_CLSFILE	;
376)   0A3C C1          		 POP BC   ;BYTES LOADED TO BUFFER	;BYTES LOADED TO BUFFER
377)   0A3D AF          		 XOR A	;
378)   0A3E C9          		 RET	;
379)   0A3F C1          		FOPENERR: POP BC	;
380)   0A40 D1          		 POP DE	;
382)   0A41 CD F2 00    		 CALL OS_PRINTMSG	;
383)   0A44 2D 2D 3E 45 		 DEFM "-->ERROR OPENING FILE"	;
383)   0A48 52 52 4F 52 		 DEFM "-->ERROR OPENING FILE"	;
383)   0A4C 20 4F 50 45 		 DEFM "-->ERROR OPENING FILE"	;
383)   0A50 4E 49 4E 47 		 DEFM "-->ERROR OPENING FILE"	;
383)   0A54 20 46 49 4C 		 DEFM "-->ERROR OPENING FILE"	;
383)   0A58 45          		 DEFM "-->ERROR OPENING FILE"	;
384)   0A59 0A 0D 00    		 DB 10,13,0	;
385)   0A5C 21 60 F0    		 LD HL,STRGBUFF	;
386)   0A5F CD 57 05    		 CALL RS_TXT	;
387)   0A62 CD AE 05    		 CALL RS_NEWLINE	;
388)   0A65 37          		 SCF	;
389)   0A66 C9          		 RET	;
393)   0A67 D5          		STRG_BLKWRITE: PUSH DE	;
394)   0A68 3E 3C       		 LD A, CMD_BYTE_WRITE	;
395)   0A6A CD AD 06    		     CALL CH376_COMMD	;
396)   0A6D 79          		     LD A, C                           ; BYTES REQUEST ON BC	; BYTES REQUEST ON BC
397)   0A6E CD BC 06    		     CALL CH376_DATAWR	;
398)   0A71 78          		     LD A, B	;
399)   0A72 CD BC 06    		     CALL CH376_DATAWR    	;
400)   0A75 CD F2 00    		 CALL OS_PRINTMSG	;
401)   0A78 42 4C 4F 43 		 DEFM "BLOCK WRITING"	;
401)   0A7C 4B 20 57 52 		 DEFM "BLOCK WRITING"	;
401)   0A80 49 54 49 4E 		 DEFM "BLOCK WRITING"	;
401)   0A84 47          		 DEFM "BLOCK WRITING"	;
402)   0A85 0A 0D 00    		 DB 10,13,0	;
403)   0A88 E1          		 POP HL	;
404)   0A89 E5          		STBW_DOREST: PUSH HL	;
405)   0A8A CD 3C 06    		 CALL CH376_WTCMDEND	;
406)   0A8D E1          		 POP HL	;
407)   0A8E 28 1B       		 JR Z, WFR_DONE   ;Z=NO MORE OR CANNOT READ	;Z=NO MORE OR CANNOT READ
408)   0A90 FE 1E       		 CP USB_INT_DISK_WRITE                    	;
409)   0A92 20 31       		     JR NZ, WFR_ERROR	;
410)   0A94 3E 2D       		 LD A,CMD_WR_REQ_DATA	;
411)   0A96 CD AD 06    		 CALL CH376_COMMD 	;
413)   0A99 CD C8 06    		 CALL CH376_DATARD ;READ BYTE COUNT UP TO 255 BYTES	;READ BYTE COUNT UP TO 255 BYTES
414)   0A9C 47          		 LD B,A   	;
416)   0A9D 7E          		STBW_NXT1: LD A,(HL)	;
417)   0A9E CD BC 06    		 CALL CH376_DATAWR	;
418)   0AA1 23          		 INC HL	;
419)   0AA2 10 F9       		 DJNZ STBW_NXT1	;
420)   0AA4 3E 3D       		 LD A, CMD_BYTE_WR_GO 	;
421)   0AA6 CD AD 06    		 CALL CH376_COMMD 	;
422)   0AA9 18 DE       		 JR STBW_DOREST	;
423)   0AAB E5          		WFR_DONE: PUSH HL	;
424)   0AAC CD F2 00    		 CALL OS_PRINTMSG	;
425)   0AAF 57 52 49 54 		 DEFM "WRITING DONE!!! "	;
425)   0AB3 49 4E 47 20 		 DEFM "WRITING DONE!!! "	;
425)   0AB7 44 4F 4E 45 		 DEFM "WRITING DONE!!! "	;
425)   0ABB 21 21 21 20 		 DEFM "WRITING DONE!!! "	;
426)   0ABF 0D 0A 00    		 DB 13,10,0 	;
427)   0AC2 E1          		 POP HL	;
428)   0AC3 B7          		 OR A	;
429)   0AC4 C9          		 RET	;
430)   0AC5 F5          		WFR_ERROR: PUSH AF	;
431)   0AC6 CD F2 00    		 CALL OS_PRINTMSG	;
432)   0AC9 45 52 52 4F 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0ACD 52 20 57 52 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0AD1 49 54 49 4E 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0AD5 47 20 42 4C 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0AD9 4F 43 4B 21 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0ADD 21 21 20    		 DEFM "ERROR WRITING BLOCK!!! "	;
433)   0AE0 0D 0A 00    		 DB 13,10,0 	;
434)   0AE3 F1          		 POP AF	;
435)   0AE4 06 02       		 LD B,2	;
436)   0AE6 05          		 DEC B	;
437)   0AE7 C9          		 RET  	;
445)   0AE8 D5          		STRG_SAVEFILE: PUSH DE	;
446)   0AE9 C5          		 PUSH BC	;
447)   0AEA E5          		 PUSH HL  	;
448)   0AEB CD F2 00    		 CALL OS_PRINTMSG	;
449)   0AEE 0A 0D       		 DB 10,13	;
450)   0AF0 53 41 56 45 		 DEFM "SAVE FILE"	;
450)   0AF4 20 46 49 4C 		 DEFM "SAVE FILE"	;
450)   0AF8 45          		 DEFM "SAVE FILE"	;
451)   0AF9 0A 0D 0A 0D 		 DB 10,13,10,13,0	;
451)   0AFD 00          		 DB 10,13,10,13,0	;
452)   0AFE E1          		 POP HL	;
453)   0AFF CD 40 15    		 CALL COPYFNAME	;
454)   0B02 3E 04       		 LD A,4   ;CREATE THE FILE	;CREATE THE FILE
455)   0B04 CD CE 08    		 CALL STRG_OPNFILE  	;
456)   0B07 20 4E       		 JR NZ, FSAVEERR	;
457)   0B09 CD F2 00    		 CALL OS_PRINTMSG	;
458)   0B0C 0A 0D       		 DB 10,13	;
459)   0B0E 46 49 4C 45 		 DEFM "FILE CREATED OK"	;
459)   0B12 20 43 52 45 		 DEFM "FILE CREATED OK"	;
459)   0B16 41 54 45 44 		 DEFM "FILE CREATED OK"	;
459)   0B1A 20 4F 4B    		 DEFM "FILE CREATED OK"	;
460)   0B1D 0A 0D 00    		 DB 10,13,0	;
461)   0B20 C1          		 POP BC  ;BYTECOUNT	;BYTECOUNT
462)   0B21 D1          		 POP DE  ;SOURCE BUFFER	;SOURCE BUFFER
463)   0B22 CD 67 0A    		 CALL STRG_BLKWRITE	;
464)   0B25 28 19       		 JR Z, FWRITEOK	;
466)   0B27 CD F2 00    		 CALL OS_PRINTMSG	;
467)   0B2A 20 45 52 52 		 DEFM " ERROR WRITING FILE"	;
467)   0B2E 4F 52 20 57 		 DEFM " ERROR WRITING FILE"	;
467)   0B32 52 49 54 49 		 DEFM " ERROR WRITING FILE"	;
467)   0B36 4E 47 20 46 		 DEFM " ERROR WRITING FILE"	;
467)   0B3A 49 4C 45    		 DEFM " ERROR WRITING FILE"	;
468)   0B3D 0A 0D 00    		 DB 10,13,0	;
469)   0B40 CD F2 00    		FWRITEOK: CALL OS_PRINTMSG	;
470)   0B43 42 59 54 45 		 DEFM "BYTE WRITTEN"	;
470)   0B47 20 57 52 49 		 DEFM "BYTE WRITTEN"	;
470)   0B4B 54 54 45 4E 		 DEFM "BYTE WRITTEN"	;
471)   0B4F 0A 0D 00    		 DB 10,13,0	;
472)   0B52 CD 38 09    		 CALL STRG_CLSFILE	;
473)   0B55 AF          		 XOR A	;
474)   0B56 C9          		 RET	;
475)   0B57 C1          		FSAVEERR: POP BC	;
476)   0B58 D1          		 POP DE	;
477)   0B59 CD 0B 15    		 CALL PRINTNUM	;
478)   0B5C CD F2 00    		 CALL OS_PRINTMSG	;
479)   0B5F 2D 2D 3E 45 		 DEFM "-->ERROR CREATING FILE"	;
479)   0B63 52 52 4F 52 		 DEFM "-->ERROR CREATING FILE"	;
479)   0B67 20 43 52 45 		 DEFM "-->ERROR CREATING FILE"	;
479)   0B6B 41 54 49 4E 		 DEFM "-->ERROR CREATING FILE"	;
479)   0B6F 47 20 46 49 		 DEFM "-->ERROR CREATING FILE"	;
479)   0B73 4C 45       		 DEFM "-->ERROR CREATING FILE"	;
480)   0B75 0A 0D 00    		 DB 10,13,0	;
481)   0B78 21 60 F0    		 LD HL,STRGBUFF	;
482)   0B7B CD 57 05    		 CALL RS_TXT	;
483)   0B7E CD AE 05    		 CALL RS_NEWLINE	;
484)   0B81 37          		 SCF	;
485)   0B82 C9          		 RET	;
 76)   0B83 0E 03       		 LD C, 11B        ;HIRES TEXT SCREEN	;HIRES TEXT SCREEN
 77)   0B85 3E 04       		 LD A, VGA_NAVY	;
 78)   0B87 CB 27       		 SLA A	;
 79)   0B89 CB 27       		 SLA A	;
 80)   0B8B CB 27       		 SLA A	;
 81)   0B8D CB 27       		 SLA A	;
 82)   0B8F 06 0F       		 LD B, VGA_WHITE	;
 83)   0B91 B0          		 OR B	;
 84)   0B92 47          		 LD B, A	;
 85)   0B93 CD 21 0C    		 CALL VGA_SETCONF	;
 86)   0B96 C9          		 RET	;
 90)   0B97 F5          		VGA_SETLOWGR: PUSH AF	;
 91)   0B98 CD 53 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
 92)   0B9B 0E 00       		 LD C, 00B        ;LOW RES GRAPH SCREEN	;LOW RES GRAPH SCREEN
 93)   0B9D CD 21 0C    		 CALL VGA_SETCONF	;
 94)   0BA0 F1          		 POP AF	;
 95)   0BA1 C9          		 RET	;
 98)   0BA2 F5          		VGA_SETLOWTX: PUSH AF	;
 99)   0BA3 CD 53 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
100)   0BA6 0E 01       		 LD C, 01B        ;LOW RES TEXT SCREEN	;LOW RES TEXT SCREEN
101)   0BA8 CD 21 0C    		 CALL VGA_SETCONF	;
102)   0BAB F1          		 POP AF	;
103)   0BAC C9          		 RET	;
105)   0BAD F5          		VGA_SETHIGR: PUSH AF	;
106)   0BAE CD 53 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
107)   0BB1 0E 02       		 LD C, 10B        ;HI RES GRAPH SCREEN	;HI RES GRAPH SCREEN
108)   0BB3 CD 21 0C    		 CALL VGA_SETCONF	;
109)   0BB6 F1          		 POP AF	;
110)   0BB7 C9          		 RET	;
112)   0BB8 F5          		VGA_SETHITX: PUSH AF	;
113)   0BB9 CD 53 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
114)   0BBC 0E 03       		 LD C, 11B        ;HI RES TEXT SCREEN	;HI RES TEXT SCREEN
115)   0BBE CD 21 0C    		 CALL VGA_SETCONF	;
116)   0BC1 F1          		 POP AF	;
117)   0BC2 C9          		 RET	;
122)   0BC3 0F          		VGA_SETVISBUFF: RRCA       ;BIT 1 > BIT 7	;BIT 1 > BIT 7
123)   0BC4 E5          		 PUSH HL	;
124)   0BC5 F5          		 PUSH AF	;
125)   0BC6 06 04       		 LD B, 4        ;8000h	;8000h
126)   0BC8 CD 26 05    		 CALL GETPGINBANK	;
127)   0BCB E1          		 POP HL        ;H THE BUFFER	;H THE BUFFER
128)   0BCC F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
129)   0BCD E5          		 PUSH HL	;
130)   0BCE 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
131)   0BD0 CD 04 05    		 CALL PUTPGINBANK	;
132)   0BD3 21 F8 1F    		 LD HL, CONFADDR	;
133)   0BD6 11 00 80    		 LD DE, $8000	;
134)   0BD9 B7          		 OR A	;
135)   0BDA ED 5A       		 ADC HL, DE	;
136)   0BDC C1          		 POP BC        ;B THE BUFFER 0 OR 1	;B THE BUFFER 0 OR 1
137)   0BDD 7E          		 LD A,(HL)	;
138)   0BDE 1F          		 RRA	;
139)   0BDF CB 18       		 RR B        ;BIT 0 ON CARRY	;BIT 0 ON CARRY
140)   0BE1 17          		 RLA	;
141)   0BE2 77          		 LD (HL),A	;
142)   0BE3 F1          		 POP AF        ;PREVIOUS PAGE NO	;PREVIOUS PAGE NO
143)   0BE4 06 04       		 LD B, 4	;
144)   0BE6 CD 04 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
145)   0BE9 E1          		 POP HL	;
146)   0BEA C9          		 RET  	;
150)   0BEB E5          		VGA_SWVISBUFF: PUSH HL	;
151)   0BEC 06 04       		 LD B, 4        ;8000h	;8000h
152)   0BEE CD 26 05    		 CALL GETPGINBANK	;
153)   0BF1 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
154)   0BF2 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
155)   0BF4 CD 04 05    		 CALL PUTPGINBANK	;
156)   0BF7 21 F8 1F    		 LD HL, CONFADDR	;
157)   0BFA 11 00 80    		 LD DE, $8000	;
158)   0BFD B7          		 OR A	;
159)   0BFE ED 5A       		 ADC HL, DE	;
160)   0C00 7E          		 LD A, (HL)        ;VIDEO CTRL REG1 VIDEO MODE	;VIDEO CTRL REG1 VIDEO MODE
161)   0C01 CB 7F       		 BIT 7,A 	;
162)   0C03 28 04       		 JR Z,VSVB_SETBUF1	;
164)   0C05 CB BF       		 RES 7,A	;
165)   0C07 18 02       		 JR VSVB_CONT	;
166)   0C09 CB FF       		VSVB_SETBUF1: SET 7,A       ;SET BIT 7	;SET BIT 7
169)   0C0B 77          		VSVB_CONT: LD (HL),A	;
170)   0C0C F1          		 POP AF	;
171)   0C0D 06 04       		 LD B, 4	;
172)   0C0F CD 04 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
173)   0C12 E1          		 POP HL	;
174)   0C13 C9          		 RET  	;
178)   0C14 32 90 F0    		VGA_SETWRKBUFF: LD (VGABUF),A	;
179)   0C17 C9          		 RET	;
182)   0C18 3A 90 F0    		VGA_SWWRKBUFF: LD A,(VGABUF)	;
183)   0C1B EE 01       		 XOR 1	;
184)   0C1D 32 90 F0    		 LD (VGABUF),A	;
185)   0C20 C9          		 RET	;
192)   0C21 E5          		VGA_SETCONF: PUSH HL	;
193)   0C22 C5          		 PUSH BC	;
194)   0C23 06 04       		 LD B, 4        ;8000h	;8000h
195)   0C25 CD 26 05    		 CALL GETPGINBANK	;
196)   0C28 C1          		 POP BC	;
197)   0C29 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
198)   0C2A C5          		 PUSH BC        ;SAVE SCREEN CODE	;SAVE SCREEN CODE
199)   0C2B 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
200)   0C2D 06 04       		 LD B, 4	;
201)   0C2F CD 04 05    		 CALL PUTPGINBANK	;
202)   0C32 C1          		 POP BC	;
203)   0C33 79          		 LD A, C	;
204)   0C34 21 F8 1F    		 LD HL, CONFADDR	;
205)   0C37 11 00 80    		 LD DE, $8000	;
206)   0C3A B7          		 OR A	;
207)   0C3B ED 5A       		 ADC HL, DE	;
208)   0C3D 77          		 LD (HL), A        ;VIDEO CTRL REG1 VIDEO MODE	;VIDEO CTRL REG1 VIDEO MODE
209)   0C3E 23          		 INC HL	;
210)   0C3F 78          		 LD A, B        ;DEFAULT COLORS	;DEFAULT COLORS
211)   0C40 77          		 LD (HL), A        ;VIDEO CTRL REG2 VIDEO DEF COLORS	;VIDEO CTRL REG2 VIDEO DEF COLORS
212)   0C41 F1          		 POP AF	;
213)   0C42 C5          		 PUSH BC	;
214)   0C43 06 04       		 LD B, 4	;
215)   0C45 CD 04 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
216)   0C48 C1          		 POP BC	;
217)   0C49 E1          		 POP HL	;
218)   0C4A 79          		 LD A, C        ;SCREEN MODE	;SCREEN MODE
219)   0C4B CB 47       		 BIT 0, A	;
220)   0C4D C2 A2 0D    		 JP NZ, VGA_TXTINIT	;
221)   0C50 C3 EE 0F    		 JP VGA_GRPHINIT	;
228)   0C53 E5          		VGA_GETCONF: PUSH HL	;
229)   0C54 06 04       		 LD B, 4        ;8000h	;8000h
230)   0C56 CD 26 05    		 CALL GETPGINBANK	;
231)   0C59 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
232)   0C5A 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
233)   0C5C CD 04 05    		 CALL PUTPGINBANK	;
234)   0C5F 21 F8 1F    		 LD HL, CONFADDR	;
235)   0C62 11 00 80    		 LD DE, $8000	;
236)   0C65 B7          		 OR A	;
237)   0C66 ED 5A       		 ADC HL, DE	;
238)   0C68 7E          		 LD A, (HL)	;
239)   0C69 E6 03       		 AND 3        ;KEEP ONLY BITS 0,1	;KEEP ONLY BITS 0,1
240)   0C6B 4F          		 LD C, A        ;SCREEN MODE	;SCREEN MODE
241)   0C6C 23          		 INC HL	;
242)   0C6D 7E          		 LD A, (HL)	;
243)   0C6E 47          		 LD B, A        ;DEFAULT COLORS	;DEFAULT COLORS
244)   0C6F F1          		 POP AF	;
245)   0C70 C5          		 PUSH BC	;
246)   0C71 06 04       		 LD B, 4	;
247)   0C73 CD 04 05    		 CALL PUTPGINBANK	;
248)   0C76 C1          		 POP BC	;
249)   0C77 E1          		 POP HL	;
250)   0C78 79          		 LD A, C	;
251)   0C79 C9          		 RET	;
258)   0C7A CD 53 0C    		VGA_CLRSCR: CALL VGA_GETCONF	;
259)   0C7D CB 47       		 BIT 0,A	;
260)   0C7F C2 A8 0D    		 JP NZ,VGA_TXTCLR	;
261)   0C82 C3 78 10    		 JP VGA_GRCLS	;
278)   0C85 F5          		 PUSH AF        ;SAVE FLAGS	;SAVE FLAGS
279)   0C86 D1          		 POP DE         ;FLAGS ON DE	;FLAGS ON DE
280)   0C87 FE 1F       		 CP 31	;
281)   0C89 DC A2 0C    		 CALL C, VGA_NOTVISCH	;
282)   0C8C 28 06       		 JR Z, PRCH_EX        ;EXIT IF CHAR WAS HANDLED	;EXIT IF CHAR WAS HANDLED
283)   0C8E CD 95 0C    		 CALL VGA_DOPRNCH       ;PRINT THE CHAR	;PRINT THE CHAR
284)   0C91 CD F3 0C    		 CALL VGA_TXFORW       ;TEXT FORWARD	;TEXT FORWARD
286)   0C94 C9          		 RET	;
291)   0C95 67          		VGA_DOPRNCH: LD H, A       ;SAVE A	;SAVE A
292)   0C96 CD 53 0C    		 CALL VGA_GETCONF	;
293)   0C99 CB 47       		 BIT 0, A	;
294)   0C9B 7C          		 LD A, H        ;RESTORE A	;RESTORE A
295)   0C9C C2 40 0E    		 JP NZ, VGA_DOPRNCHTXT       ;NZ MEANS TEXT	;NZ MEANS TEXT
296)   0C9F C3 12 11    		 JP VGA_DOPRNCHGRP	;
304)   0CA2 F5          		VGA_NOTVISCH: PUSH AF	;
305)   0CA3 D5          		 PUSH DE	;
306)   0CA4 CD AE 0E    		 CALL VGA_RMVCURS      ;REMOVE CURSOR	;REMOVE CURSOR
307)   0CA7 D1          		 POP DE	;
308)   0CA8 F1          		 POP AF	;
309)   0CA9 FE 08       		 CP 8         ;BACKSPACE	;BACKSPACE
310)   0CAB 20 18       		 JR NZ, NX1	;
311)   0CAD 3A 8B F0    		 LD A, (VGATX_X)	;
312)   0CB0 FE 00       		 CP 0         ;COL 0 HAS THE PROMPT	;COL 0 HAS THE PROMPT
313)   0CB2 C8          		 RET Z         ;DO NOT PRINT ANYTHING	;DO NOT PRINT ANYTHING
314)   0CB3 3D          		 DEC A	;
315)   0CB4 32 8B F0    		 LD (VGATX_X), A	;
316)   0CB7 D5          		 PUSH DE	;
317)   0CB8 F1          		 POP AF         ;GET FLAGS BACK	;GET FLAGS BACK
318)   0CB9 30 1B       		 JR NC, MVLEFT       ;IF C THEN DELETE THE CHAR ON THE LEFT	;IF C THEN DELETE THE CHAR ON THE LEFT
319)   0CBB 3E 20       		 LD A, ' '        ;PRINT SPACE	;PRINT SPACE
320)   0CBD 32 8F F0    		 LD (VGATMPC),A	;
321)   0CC0 CD 95 0C    		 CALL VGA_DOPRNCH       ;	;
322)   0CC3 AF          		 XOR A         ;CLEAR ZERO	;CLEAR ZERO
323)   0CC4 C9          		 RET	;
324)   0CC5 FE 0A       		NX1: CP 10         ;JUST IGNORE IT	;JUST IGNORE IT
325)   0CC7 C8          		 RET Z	;
326)   0CC8 FE 0D       		 CP 13         ;CR =NEW LINE	;CR =NEW LINE
327)   0CCA 20 11       		 JR NZ, NX2	;
328)   0CCC CD AE 0E    		 CALL VGA_RMVCURS	;
329)   0CCF CD 06 0D    		 CALL VGDOY        ;ADD 1 TO TY	;ADD 1 TO TY
330)   0CD2 32 8B F0    		 LD (VGATX_X), A       ;ZF IS SET	;ZF IS SET
331)   0CD5 C9          		 RET	;
332)   0CD6 CD 71 0E    		MVLEFT: CALL VGA_GETCHAR	;
333)   0CD9 7A          		 LD A, D	;
334)   0CDA 32 8F F0    		 LD (VGATMPC),A	;
335)   0CDD AF          		NX2: XOR A         ;NC MEANS WE DON'T PRINT	;NC MEANS WE DON'T PRINT
336)   0CDE C9          		 RET	;
340)   0CDF CD 27 0D    		VGA_PRINT: CALL VGA_GETPAGE	;
341)   0CE2 7E          		VGAP_AGN: LD A, (HL)	;
342)   0CE3 FE 00       		 CP 0	;
343)   0CE5 28 08       		 JR Z, VGAP_EX	;
344)   0CE7 E5          		 PUSH HL	;
345)   0CE8 CD 85 0C    		 CALL VGA_PRCH	;
346)   0CEB E1          		 POP HL	;
347)   0CEC 23          		 INC HL	;
348)   0CED 18 F3       		 JR VGAP_AGN	;
349)   0CEF CD 49 0D    		VGAP_EX: CALL VGA_RMVPAGE	;
350)   0CF2 C9          		 RET	;
353)   0CF3 F5          		VGA_TXFORW: PUSH AF	;
354)   0CF4 E5          		 PUSH HL	;
355)   0CF5 21 8D F0    		 LD HL, VGAMAXX	;
356)   0CF8 3A 8B F0    		 LD A, (VGATX_X)	;
357)   0CFB 3C          		 INC A	;
358)   0CFC BE          		 CP (HL)	;
359)   0CFD CC 06 0D    		 CALL Z, VGDOY	;
360)   0D00 32 8B F0    		 LD (VGATX_X), A	;
361)   0D03 E1          		 POP HL	;
362)   0D04 F1          		 POP AF	;
363)   0D05 C9          		 RET	;
364)   0D06 21 8E F0    		VGDOY: LD HL, VGAMAXY	;
365)   0D09 3A 8C F0    		 LD A, (VGATX_Y)	;
366)   0D0C 3C          		 INC A	;
367)   0D0D BE          		 CP (HL)	;
368)   0D0E CC 16 0D    		 CALL Z, DOSCRL	;
369)   0D11 32 8C F0    		 LD (VGATX_Y), A	;
370)   0D14 AF          		 XOR A	;
371)   0D15 C9          		 RET	;
373)   0D16 CD 53 0C    		DOSCRL: CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
374)   0D19 CB 47       		 BIT 0, A	;
375)   0D1B CA 15 11    		 JP Z, DOSCRLGR	;
376)   0D1E CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
377)   0D20 CC 2E 0F    		 CALL Z, DOSCRL_COL       ;SCROLL COLORS IF BIT 1=0	;SCROLL COLORS IF BIT 1=0
378)   0D23 CD F8 0E    		 CALL DOSCRL_TXT       ;SCROLL TEXT	;SCROLL TEXT
379)   0D26 C9          		 RET	;
389)   0D27 3A 29 F0    		VGA_GETPAGE: LD A, (PGSEM)	;
390)   0D2A 3C          		 INC A	;
391)   0D2B 32 29 F0    		 LD (PGSEM), A	;
392)   0D2E FE 01       		 CP 1	;
393)   0D30 C0          		 RET NZ	;
394)   0D31 E5          		 PUSH HL	;
395)   0D32 06 04       		 LD B, 4        ;8000h	;8000h
396)   0D34 CD 26 05    		 CALL GETPGINBANK	;
397)   0D37 32 25 F0    		 LD (TMPG), A        ;SAVE OLD PAGE	;SAVE OLD PAGE
398)   0D3A 3A 90 F0    		 LD A,(VGABUF)	;
399)   0D3D 1F          		 RRA         ;PUT BIT 0 ON CARRY FLAG	;PUT BIT 0 ON CARRY FLAG
400)   0D3E 3E 08       		 LD A, 8        ;PAGE 8  IS BUFFER 0	;PAGE 8  IS BUFFER 0
401)   0D40 30 02       		 JR NC, VGP_SETPG	;
402)   0D42 3E 0C       		 LD A, 12        ;PAGE 12 IS BUFFER 1	;PAGE 12 IS BUFFER 1
403)   0D44 CD 04 05    		VGP_SETPG: CALL PUTPGINBANK	;
404)   0D47 E1          		 POP HL	;
405)   0D48 C9          		 RET	;
409)   0D49 3A 29 F0    		VGA_RMVPAGE: LD A, (PGSEM)	;
410)   0D4C 3D          		 DEC A	;
411)   0D4D 32 29 F0    		 LD (PGSEM), A	;
412)   0D50 FE 00       		 CP 0	;
413)   0D52 C0          		 RET NZ	;
414)   0D53 E5          		 PUSH HL	;
415)   0D54 06 04       		 LD B, 4	;
416)   0D56 3A 25 F0    		 LD A, (TMPG)	;
417)   0D59 CD 04 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
418)   0D5C E1          		 POP HL	;
419)   0D5D C9          		 RET	;
421)   0D5E CD 27 0D    		VGA_SETFONT: CALL VGA_GETPAGE	;
422)   0D61 21 00 40    		 LD HL, FONT_ADDR	;
423)   0D64 11 00 90    		 LD DE, $9000        ;FONT ADDRESS ON VIDEO MEM AT $1000=4096 ON BANK 4=$8000	;FONT ADDRESS ON VIDEO MEM AT $1000=4096 ON BANK 4=$8000
424)   0D67 01 00 0A    		 LD BC, 2560	;
425)   0D6A ED B0       		 LDIR         ;TRANSFER	;TRANSFER
426)   0D6C CD 49 0D    		 CALL VGA_RMVPAGE	;
427)   0D6F C9          		 RET	;
430)   0D70 79          		VGA_SETMAXS: LD A, C	;
431)   0D71 16 28       		 LD D, 40	;
432)   0D73 1E 14       		 LD E, 20	;
433)   0D75 CB 4F       		 BIT 1,A        ;LOW RES MODE	;LOW RES MODE
434)   0D77 28 04       		 JR Z, VGSM_NX	;
436)   0D79 16 50       		 LD D, 80	;
437)   0D7B 1E 28       		 LD E, 40	;
438)   0D7D 7A          		VGSM_NX: LD A, D	;
439)   0D7E 32 8D F0    		 LD (VGAMAXX), A	;
440)   0D81 7B          		 LD A, E	;
441)   0D82 32 8E F0    		 LD (VGAMAXY), A	;
442)   0D85 C9          		 RET	;
445)   0D86 AF          		VGA_SETSCRDEFS: XOR A	;
446)   0D87 32 29 F0    		 LD (PGSEM), A	;
447)   0D8A 32 25 F0    		 LD (TMPG), A	;
448)   0D8D 3E 0B       		 LD A, VGA_YELLOW	;
449)   0D8F 32 89 F0    		 LD (VGAFCOL), A	;
450)   0D92 3E 04       		 LD A, VGA_NAVY	;
451)   0D94 32 8A F0    		 LD (VGABCOL), A	;
452)   0D97 CD 70 0D    		 CALL VGA_SETMAXS	;
453)   0D9A AF          		 XOR A	;
454)   0D9B 32 8B F0    		 LD (VGATX_X), A	;
455)   0D9E 32 8C F0    		 LD (VGATX_Y), A	;
456)   0DA1 C9          		 RET	;
458)   0DA2 CD 86 0D    		VGA_TXTINIT: CALL VGA_SETSCRDEFS	;
459)   0DA5 CD 5E 0D    		 CALL VGA_SETFONT       ;SET THE FONT ON VIDEO MEM	;SET THE FONT ON VIDEO MEM
462)   0DA8 3A 8D F0    		VGA_TXTCLR: LD A, (VGAMAXX)	;
463)   0DAB 67          		 LD H, A	;
464)   0DAC 3A 8E F0    		 LD A, (VGAMAXY)	;
465)   0DAF 5F          		 LD E, A	;
466)   0DB0 CD 4C 15    		 CALL MULT8	;
467)   0DB3 E5          		 PUSH HL	;
468)   0DB4 CD 27 0D    		 CALL VGA_GETPAGE	;
469)   0DB7 CD 53 0C    		 CALL VGA_GETCONF	;
470)   0DBA C1          		 POP BC         ;TOTAL BYTES	;TOTAL BYTES
471)   0DBB CB 4F       		 BIT 1, A	;
472)   0DBD 28 0E       		 JR Z, ISLOWRES	;
474)   0DBF 21 00 80    		 LD HL, $8000	;
475)   0DC2 3E 20       		 LD A, 32	;
476)   0DC4 77          		 LD (HL), A	;
477)   0DC5 11 01 80    		 LD DE, $8001	;
478)   0DC8 ED B0       		 LDIR	;
479)   0DCA C3 F2 0D    		 JP VGAC_EXIT	;
481)   0DCD 21 00 80    		ISLOWRES: LD HL, $8000       ;BANK4	;BANK4
482)   0DD0 11 00 84    		 LD DE, $8400        ;COLOR INFO	;COLOR INFO
483)   0DD3 C3 E2 0D    		 JP VGAC_AGN	;
488)   0DD6 CD 27 0D    		VGA_CLR: CALL VGA_GETPAGE	;
489)   0DD9 01 20 03    		 LD BC, 800	;
490)   0DDC 21 00 80    		 LD HL, $8000        ;DEL CHARS	;DEL CHARS
491)   0DDF 11 00 84    		 LD DE, $8400	;
494)   0DE2 3E 20       		VGAC_AGN: LD A, 32	;
495)   0DE4 77          		 LD (HL), A	;
496)   0DE5 C5          		 PUSH BC	;
497)   0DE6 CD 07 0E    		 CALL VGA_GETCOL	;
498)   0DE9 C1          		 POP BC	;
499)   0DEA 12          		 LD (DE), A	;
500)   0DEB 23          		 INC HL	;
501)   0DEC 13          		 INC DE	;
502)   0DED 0B          		 DEC BC	;
503)   0DEE 78          		 LD A, B	;
504)   0DEF B1          		 OR C	;
505)   0DF0 20 F0       		 JR NZ, VGAC_AGN	;
506)   0DF2 AF          		VGAC_EXIT: XOR A	;
507)   0DF3 32 8B F0    		 LD (VGATX_X), A	;
508)   0DF6 32 8C F0    		 LD (VGATX_Y), A	;
509)   0DF9 CD 49 0D    		 CALL VGA_RMVPAGE	;
510)   0DFC C9          		 RET	;
514)   0DFD CB 20       		VGA_MIXCOLOR: SLA B	;
515)   0DFF CB 20       		 SLA B	;
516)   0E01 CB 20       		 SLA B	;
517)   0E03 CB 20       		 SLA B	;
518)   0E05 B0          		 OR B         ;BLEND COLOR 4 BITS FCOLOR AND 4 BITS BCOLOR	;BLEND COLOR 4 BITS FCOLOR AND 4 BITS BCOLOR
519)   0E06 C9          		 RET	;
523)   0E07 3A 8A F0    		VGA_GETCOL: LD A, (VGABCOL)      ;GET COLOR INFO	;GET COLOR INFO
524)   0E0A 47          		 LD B, A	;
525)   0E0B 3A 89 F0    		 LD A, (VGAFCOL)	;
526)   0E0E CD FD 0D    		 CALL VGA_MIXCOLOR	;
527)   0E11 C9          		 RET	;
531)   0E12 F5          		VGA_SETCOL: PUSH AF	;
532)   0E13 E6 0F       		 AND $0F	;
533)   0E15 32 89 F0    		 LD (VGAFCOL), A       ;SET COLOR INFO	;SET COLOR INFO
534)   0E18 F1          		 POP AF	;
535)   0E19 CB 27       		 SLA A	;
536)   0E1B CB 27       		 SLA A	;
537)   0E1D CB 27       		 SLA A	;
538)   0E1F CB 27       		 SLA A	;
539)   0E21 E6 0F       		 AND $0F	;
540)   0E23 32 8A F0    		 LD (VGABCOL), A       ;SET BACK COLOR	;SET BACK COLOR
541)   0E26 C9          		 RET	;
548)   0E27 F5          		VGA_CALC_VIDAD: PUSH AF	;
549)   0E28 3A 8C F0    		 LD A, (VGATX_Y)	;
550)   0E2B 67          		 LD H, A 	;
551)   0E2C 3A 8D F0    		 LD A, (VGAMAXX)	;
552)   0E2F 5F          		 LD E, A  	;
553)   0E30 CD 4C 15    		 CALL Mult8	;
554)   0E33 11 00 80    		 LD DE, $8000	;
555)   0E36 19          		 ADD HL,DE	;
557)   0E37 16 00       		 LD D, 0	;
558)   0E39 3A 8B F0    		 LD A, (VGATX_X)	;
559)   0E3C 5F          		 LD E, A	;
560)   0E3D 19          		 ADD HL, DE	;
561)   0E3E F1          		 POP AF	;
562)   0E3F C9          		 RET	;
566)   0E40 E5          		VGA_DOPRNCHTXT: PUSH HL	;
567)   0E41 F5          		 PUSH AF	;
568)   0E42 CD 27 0D    		 CALL VGA_GETPAGE	;
569)   0E45 CD 27 0E    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDRESS	;CALC VIDEO ADDRESS
570)   0E48 F1          		 POP AF	;
571)   0E49 77          		 LD (HL), A        ;PUT CHAR ON SCREEN	;PUT CHAR ON SCREEN
572)   0E4A E5          		 PUSH HL	;
573)   0E4B CD 53 0C    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
574)   0E4E CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
575)   0E50 E1          		 POP HL	;
576)   0E51 20 08       		 JR NZ, DPC_EX	;
577)   0E53 11 00 04    		 LD DE, $400	;
578)   0E56 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
579)   0E57 CD 07 0E    		 CALL VGA_GETCOL       ;GET CURRENT COLOR	;GET CURRENT COLOR
580)   0E5A 77          		 LD (HL), A        ;PUT COLOR INFO ON SCREEN	;PUT COLOR INFO ON SCREEN
581)   0E5B E1          		DPC_EX: POP HL	;
582)   0E5C CD 49 0D    		 CALL VGA_RMVPAGE	;
583)   0E5F C9          		 RET	;
587)   0E60 F5          		VGA_DOCHCLR: PUSH AF	;
588)   0E61 CD 27 0D    		 CALL VGA_GETPAGE	;
589)   0E64 CD 27 0E    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDRESS	;CALC VIDEO ADDRESS
590)   0E67 11 00 04    		 LD DE, $400	;
591)   0E6A 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
592)   0E6B F1          		 POP AF	;
593)   0E6C 77          		 LD (HL), A        ;PUT COLOR INFO ON SCREEN	;PUT COLOR INFO ON SCREEN
594)   0E6D CD 49 0D    		 CALL VGA_RMVPAGE	;
595)   0E70 C9          		 RET	;
598)   0E71 CD 53 0C    		VGA_GETCHAR: CALL VGA_GETCONF      ;GET SCREEEN MODE	;GET SCREEEN MODE
599)   0E74 CB 47       		 BIT 0,A	;
600)   0E76 20 07       		 JR NZ,GC_DOIT       ;IF TEXT DOIT	;IF TEXT DOIT
602)   0E78 16 93       		 LD D,  147 ;' '	;' '
603)   0E7A 3A 8A F0    		 LD A,(VGABCOL)	;
604)   0E7D 5F          		 LD E,A	;
605)   0E7E C9          		 RET	;
606)   0E7F CD 27 0D    		GC_DOIT: CALL VGA_GETPAGE	;
607)   0E82 CD 27 0E    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDR ON HL	;CALC VIDEO ADDR ON HL
608)   0E85 7E          		 LD A, (HL)	;
609)   0E86 F5          		 PUSH AF	;
610)   0E87 CD 53 0C    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
611)   0E8A FE 03       		 CP 3  ;TEXT HI      ; CHECK IF HIRES SO NO COLOR INFO	;TEXT HI      ; CHECK IF HIRES SO NO COLOR INFO
612)   0E8C D1          		 POP DE        ;AF ON DE TO PRESERVE FLAG  	;AF ON DE TO PRESERVE FLAG
613)   0E8D 28 0A       		 JR Z, GC_NOCOL	;
614)   0E8F 7A          		 LD A, D	;
615)   0E90 11 00 04    		 LD DE, $400  ;TEXT LOW	;TEXT LOW
616)   0E93 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
617)   0E94 57          		 LD D, A        ;THE CHAR	;THE CHAR
618)   0E95 7E          		 LD A, (HL)       ;THE COLOR	;THE COLOR
619)   0E96 5F          		 LD E, A	;
620)   0E97 18 02       		 JR GC_EX	;
622)   0E99 1E 00       		 LD E, 0	;
623)   0E9B 62          		GC_EX: LD H,D	;
624)   0E9C 6B          		 LD L,E	;
625)   0E9D CD 49 0D    		 CALL VGA_RMVPAGE	;
626)   0EA0 54          		 LD D,H	;
627)   0EA1 5D          		 LD E,L	;
628)   0EA2 C9          		 RET	;
631)   0EA3 BB          		VGA_REVRCOLRS: CP E	;
632)   0EA4 C8          		 RET Z	;
633)   0EA5 7B          		 LD A, E	;
634)   0EA6 0F          		 RRCA         ;CHANGE FORE AND BACK COLOR INFO	;CHANGE FORE AND BACK COLOR INFO
635)   0EA7 0F          		 RRCA	;
636)   0EA8 0F          		 RRCA	;
637)   0EA9 0F          		 RRCA	;
638)   0EAA CD 60 0E    		 CALL VGA_DOCHCLR     ;CHANGE THE COLOR OF THE CHAR	;CHANGE THE COLOR OF THE CHAR
639)   0EAD C9          		 RET	;
641)   0EAE CD 53 0C    		VGA_RMVCURS: CALL VGA_GETCONF      ;GET SCREEEN MODE	;GET SCREEEN MODE
642)   0EB1 CB 47       		 BIT 0,A	;
643)   0EB3 28 04       		 JR Z, RC_GR       ;IF GRAPHICS	;IF GRAPHICS
644)   0EB5 CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
645)   0EB7 28 05       		 JR Z, RC_LOW	;
646)   0EB9 3A 8F F0    		RC_GR: LD A, (VGATMPC)	;
647)   0EBC 18 0A       		 JR RC_EX	;
648)   0EBE CD 71 0E    		RC_LOW: CALL VGA_GETCHAR      ;GET CURRENT COLORS	;GET CURRENT COLORS
649)   0EC1 CD 07 0E    		 CALL VGA_GETCOL       ;GET DEFAULT COLORS	;GET DEFAULT COLORS
650)   0EC4 CD A3 0E    		 CALL VGA_REVRCOLRS      ;REVERSE IF NECESSARY	;REVERSE IF NECESSARY
651)   0EC7 C9          		 RET	;
652)   0EC8 CD 95 0C    		RC_EX: CALL VGA_DOPRNCH	;
653)   0ECB C9          		 RET	;
654)   0ECC CD 71 0E    		VGA_PRNCURS: CALL VGA_GETCHAR      ; E HAS THE COLOR INFO	; E HAS THE COLOR INFO
655)   0ECF D5          		 PUSH DE	;
656)   0ED0 CD 53 0C    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
657)   0ED3 D1          		 POP DE	;
658)   0ED4 CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO  	; CHECK IF HIRES SO NO COLOR INFO
659)   0ED6 20 13       		 JR NZ, PC_NOCOL	;
660)   0ED8 CB 47       		 BIT 0,A        ;CHECK IF GRAPH SO NO TEXT COLOR INFO	;CHECK IF GRAPH SO NO TEXT COLOR INFO
661)   0EDA 28 0B       		 JR Z, PC_LORESGR	;
662)   0EDC CD 07 0E    		 CALL VGA_GETCOL       ;GET CURRENT COLORS	;GET CURRENT COLORS
663)   0EDF 0F          		 RRCA        ;REVERSE BACK & FORE	;REVERSE BACK & FORE
664)   0EE0 0F          		 RRCA	;
665)   0EE1 0F          		 RRCA	;
666)   0EE2 0F          		 RRCA	;
667)   0EE3 CD A3 0E    		 CALL VGA_REVRCOLRS      ;LOWRES TEXT REVERSE COLORS	;LOWRES TEXT REVERSE COLORS
668)   0EE6 C9          		 RET	;
669)   0EE7 3E 93       		PC_LORESGR: LD A, VGA_CURSCHAR	;
670)   0EE9 18 09       		 JR PC_EX	;
671)   0EEB 7A          		PC_NOCOL: LD A,D	;
672)   0EEC FE 93       		 CP VGA_CURSCHAR	;
673)   0EEE C8          		 RET Z        ;ALREADY PRINTED	;ALREADY PRINTED
674)   0EEF 32 8F F0    		 LD (VGATMPC), A	;
675)   0EF2 3E 93       		 LD A, VGA_CURSCHAR        ;'_'	;'_'
676)   0EF4 CD 95 0C    		PC_EX: CALL VGA_DOPRNCH  	;
677)   0EF7 C9          		 RET	;
682)   0EF8 CD 27 0D    		DOSCRL_TXT: CALL VGA_GETPAGE	;
683)   0EFB 3A 8D F0    		 LD A, (VGAMAXX)	;
684)   0EFE 26 00       		 LD H, 0	;
685)   0F00 6F          		 LD L, A	;
686)   0F01 11 00 80    		 LD DE, $8000	;
687)   0F04 19          		 ADD HL, DE	;
689)   0F05 E5          		 PUSH HL	;
690)   0F06 D5          		 PUSH DE	;
692)   0F07 67          		 LD H, A	;
693)   0F08 3A 8E F0    		 LD A, (VGAMAXY)	;
694)   0F0B 3D          		 DEC A	;
695)   0F0C 5F          		 LD E, A	;
696)   0F0D CD 4C 15    		 CALL Mult8	;
697)   0F10 44          		 LD B, H	;
698)   0F11 4D          		 LD C, L	;
699)   0F12 D1          		 POP DE	;
700)   0F13 E1          		 POP HL	;
701)   0F14 C5          		 PUSH BC	;
702)   0F15 ED B0       		 LDIR         ;SCROLL UP 39 LINES	;SCROLL UP 39 LINES
703)   0F17 D1          		 POP DE        ;DE = BC	;DE = BC
704)   0F18 21 00 80    		 LD HL, $8000	;
705)   0F1B 19          		 ADD HL, DE        ;LINE 39 OR 19 ADDRESS TO BE CLEARED (0-39) (0-19)	;LINE 39 OR 19 ADDRESS TO BE CLEARED (0-39) (0-19)
706)   0F1C 3A 8D F0    		 LD A, (VGAMAXX)       ;80 OR 40	;80 OR 40
707)   0F1F 47          		 LD B, A	;
708)   0F20 3E 20       		 LD A, 32	;
709)   0F22 77          		DST_AGN: LD (HL), A	;
710)   0F23 23          		 INC HL	;
711)   0F24 10 FC       		 DJNZ DST_AGN	;
712)   0F26 CD 49 0D    		 CALL VGA_RMVPAGE	;
713)   0F29 3A 8E F0    		 LD A, (VGAMAXY)	;
714)   0F2C 3D          		 DEC A	;
715)   0F2D C9          		 RET	;
717)   0F2E CD 27 0D    		DOSCRL_COL: CALL VGA_GETPAGE	;
718)   0F31 21 28 84    		 LD HL, $8428        ;LINE 1	;LINE 1
719)   0F34 11 00 84    		 LD DE, $8400        ;LINE 0	;LINE 0
720)   0F37 01 F8 02    		 LD BC, 800 - 40       ;BYTES TO SCROLL UP	;BYTES TO SCROLL UP
721)   0F3A ED B0       		 LDIR	;
722)   0F3C CD 07 0E    		 CALL VGA_GETCOL       ;SET DEFAULT COLOR	;SET DEFAULT COLOR
723)   0F3F 21 F8 86    		 LD HL, $86F8        ;LINE 19 = LAST LINE	;LINE 19 = LAST LINE
724)   0F42 06 28       		 LD B, 40	;
725)   0F44 77          		DOS_AGNCL: LD (HL), A       ;CLEAR LAST LINE	;CLEAR LAST LINE
726)   0F45 23          		 INC HL	;
727)   0F46 10 FC       		 DJNZ DOS_AGNCL	;
728)   0F48 CD 49 0D    		 CALL VGA_RMVPAGE	;
729)   0F4B C9          		 RET	;
739)   0F4C 3A 29 F0    		 LD A, (PGSEM)	;
740)   0F4F 3C          		 INC A	;
741)   0F50 32 29 F0    		 LD (PGSEM), A	;
742)   0F53 FE 01       		 CP 1	;
743)   0F55 C0          		 RET NZ	;
744)   0F56 E5          		 PUSH HL	;
745)   0F57 06 02       		 LD B, 2        ;4000h	;4000h
746)   0F59 CD 26 05    		 CALL GETPGINBANK	;
747)   0F5C 32 25 F0    		 LD (TMPG), A	;
748)   0F5F 06 03       		 LD B, 3        ;6000h	;6000h
749)   0F61 CD 26 05    		 CALL GETPGINBANK	;
750)   0F64 32 26 F0    		 LD (TMPG + 1), A	;
751)   0F67 3A 90 F0    		 LD A,(VGABUF)	;
752)   0F6A 1F          		 RRA        ;PUT SCREEN BUF ON CARRY FLAG	;PUT SCREEN BUF ON CARRY FLAG
753)   0F6B 38 10       		 JR C,VSPL_SETBUFONE	;
755)   0F6D 3E 08       		 LD A, 8	;
756)   0F6F 06 02       		 LD B, 2	;
757)   0F71 CD 04 05    		 CALL PUTPGINBANK	;
759)   0F74 3E 09       		 LD A, 9	;
760)   0F76 06 03       		 LD B, 3	;
761)   0F78 CD 04 05    		 CALL PUTPGINBANK	;
762)   0F7B E1          		 POP HL	;
763)   0F7C C9          		 RET	;
765)   0F7D 3E 0C       		 LD A, 12	;
766)   0F7F 06 02       		 LD B, 2	;
767)   0F81 CD 04 05    		 CALL PUTPGINBANK	;
769)   0F84 3E 0D       		 LD A, 13	;
770)   0F86 06 03       		 LD B, 3	;
771)   0F88 CD 04 05    		 CALL PUTPGINBANK	;
772)   0F8B E1          		 POP HL	;
773)   0F8C C9          		 RET	;
780)   0F8D 3A 29 F0    		 LD A, (PGSEM)	;
781)   0F90 3C          		 INC A	;
782)   0F91 32 29 F0    		 LD (PGSEM), A	;
783)   0F94 FE 01       		 CP 1	;
784)   0F96 C0          		 RET NZ	;
785)   0F97 E5          		 PUSH HL	;
786)   0F98 06 02       		 LD B, 2        ;4000h	;4000h
787)   0F9A CD 26 05    		 CALL GETPGINBANK	;
788)   0F9D 32 25 F0    		 LD (TMPG), A	;
789)   0FA0 06 03       		 LD B, 3        ;6000h	;6000h
790)   0FA2 CD 26 05    		 CALL GETPGINBANK	;
791)   0FA5 32 26 F0    		 LD (TMPG + 1), A	;
792)   0FA8 3A 90 F0    		 LD A,(VGABUF)	;
793)   0FAB 1F          		 RRA        ;PUT SCREEN BUF ON CARRY FLAG	;PUT SCREEN BUF ON CARRY FLAG
794)   0FAC 38 10       		 JR C,VSPH_SETBUFONE	;
796)   0FAE 3E 0A       		 LD A, 10	;
797)   0FB0 06 02       		 LD B, 2	;
798)   0FB2 CD 04 05    		 CALL PUTPGINBANK	;
800)   0FB5 3E 0B       		 LD A, 11	;
801)   0FB7 06 03       		 LD B, 3	;
802)   0FB9 CD 04 05    		 CALL PUTPGINBANK	;
803)   0FBC E1          		 POP HL	;
804)   0FBD C9          		 RET	;
806)   0FBE 3E 0E       		 LD A, 14	;
807)   0FC0 06 02       		 LD B, 2	;
808)   0FC2 CD 04 05    		 CALL PUTPGINBANK	;
810)   0FC5 3E 0F       		 LD A, 15	;
811)   0FC7 06 03       		 LD B, 3	;
812)   0FC9 CD 04 05    		 CALL PUTPGINBANK	;
813)   0FCC E1          		 POP HL	;
814)   0FCD C9          		 RET	;
819)   0FCE 3A 29 F0    		VGA_RMVGRPG: LD A, (PGSEM)	;
820)   0FD1 FE 00       		 CP 0	;
821)   0FD3 C8          		 RET Z	;
822)   0FD4 3D          		 DEC A	;
823)   0FD5 32 29 F0    		 LD (PGSEM), A	;
824)   0FD8 FE 00       		 CP 0	;
825)   0FDA C0          		 RET NZ	;
826)   0FDB E5          		 PUSH HL	;
827)   0FDC 06 02       		 LD B, 2	;
828)   0FDE 3A 25 F0    		 LD A, (TMPG)	;
829)   0FE1 CD 04 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
830)   0FE4 06 03       		 LD B, 3	;
831)   0FE6 3A 26 F0    		 LD A, (TMPG + 1)	;
832)   0FE9 CD 04 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
833)   0FEC E1          		 POP HL	;
834)   0FED C9          		 RET	;
837)   0FEE CD 86 0D    		VGA_GRPHINIT: CALL VGA_SETSCRDEFS     ;SET SCREEN DEFAULTS	;SET SCREEN DEFAULTS
838)   0FF1 CD 78 10    		 CALL VGA_GRCLS	;
839)   0FF4 AF          		 XOR A	;
840)   0FF5 C9          		 RET	;
846)   0FF6 F5          		VGA_CHECKXY32: PUSH AF	;
847)   0FF7 E5          		 PUSH HL	;
848)   0FF8 D5          		 PUSH DE	;
849)   0FF9 B7          		 OR A	;
850)   0FFA 11 40 01    		 LD DE, 320	;
851)   0FFD ED 52       		 SBC HL, DE	;
852)   0FFF 30 0F       		 JR NC, CXY3_ABEX	;
853)   1001 D1          		 POP DE	;
854)   1002 D5          		 PUSH DE	;
855)   1003 EB          		 EX DE, HL	;
856)   1004 11 C8 00    		 LD DE, 200	;
857)   1007 ED 52       		 SBC HL, DE	;
858)   1009 30 05       		 JR NC, CXY3_ABEX	;
859)   100B D1          		 POP DE	;
860)   100C E1          		 POP HL	;
861)   100D F1          		 POP AF	;
862)   100E 37          		 SCF         ;RETURN WITH C SET	;RETURN WITH C SET
863)   100F C9          		 RET	;
865)   1010 D1          		CXY3_ABEX: POP DE        	;
866)   1011 E1          		 POP HL	;
867)   1012 F1          		 POP AF	;
868)   1013 B7          		 OR A	;
869)   1014 C9          		 RET         ;RETURN WITH NC  	;RETURN WITH NC
875)   1015 CD F6 0F    		VGA_PLTPXL32: CALL VGA_CHECKXY32     ;CHECK BOUNDS	;CHECK BOUNDS
876)   1018 D0          		 RET NC	;
877)   1019 E5          		 PUSH HL        ;CHECK BOUNDS	;CHECK BOUNDS
878)   101A F5          		 PUSH AF	;
879)   101B 7B          		 LD A, E	;
880)   101C FE 66       		 CP 102	;
881)   101E 38 27       		 JR C, PPNXT0        ;LESS THAN 102	;LESS THAN 102
882)   1020 20 16       		 JR NZ, NXTBNK        ;MORE THAN 102	;MORE THAN 102
883)   1022 E5          		 PUSH HL        ;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES	;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
884)   1023 01 80 00    		 LD BC, 128	;
885)   1026 B7          		 OR A	;
886)   1027 ED 42       		 SBC HL, BC	;
887)   1029 47          		 LD B, A	;
888)   102A 7C          		 LD A, H	;
889)   102B B7          		 OR A         ; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128	; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
890)   102C 78          		 LD A, B	;
891)   102D E1          		 POP HL	;
892)   102E 20 17       		 JR NZ, PPNXT0	;
894)   1030 3E 67       		 LD A, 103        ;WE ARE AT LINE ZERO ON 2ND BANK	;WE ARE AT LINE ZERO ON 2ND BANK
895)   1032 11 40 01    		 LD DE, 129 + 191	;
896)   1035 B7          		 OR A	;
897)   1036 ED 52       		 SBC HL, DE        ;	;
898)   1038 D6 67       		NXTBNK: SUB 103        ;SKIP 102 ROWS	;SKIP 102 ROWS
899)   103A 11 C0 00    		 LD DE, 192        ;320-128	;320-128
900)   103D B7          		 OR A	;
901)   103E ED 5A       		 ADC HL, DE	;
902)   1040 F5          		 PUSH AF	;
904)   1041 CD 8D 0F    		 CALL VGA_SETGRPGHI	;
906)   1044 F1          		 POP AF         ;A HAS THE ROWS ON 2ND 16K	;A HAS THE ROWS ON 2ND 16K
907)   1045 18 05       		 JR PPNXT1	;
908)   1047 F5          		PPNXT0: PUSH AF        ;A=E=ROW=Y	;A=E=ROW=Y
909)   1048 CD 4C 0F    		 CALL VGA_SETGRPGLO	;
910)   104B F1          		 POP AF	;
911)   104C 11 00 40    		PPNXT1: LD DE, BASEADDR	;
913)   104F CB 3C       		 SRL H	;
914)   1051 CB 1D       		 RR L	;
915)   1053 19          		 ADD HL, DE        ;FIND COLUMN	;FIND COLUMN
916)   1054 E5          		 PUSH HL	;
917)   1055 11 A0 00    		 LD DE, 160	;
919)   1058 CD 58 15    		 CALL Mult12	;
920)   105B D1          		 POP DE	;
921)   105C 19          		 ADD HL, DE	;
922)   105D C1          		DOPLOTPX: POP BC        ;B HAS THE COLOR	;B HAS THE COLOR
923)   105E D1          		 POP DE         ;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL	;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
924)   105F 7E          		 LD A, (HL)        ;GET PIXEL BYTE	;GET PIXEL BYTE
925)   1060 CB 43       		 BIT 0, E        ;CHECK X IS EVEN OR ODD	;CHECK X IS EVEN OR ODD
926)   1062 28 04       		 JR Z, DOEVEN        ;EVEN	;EVEN
928)   1064 E6 F0       		 AND $F0        ;CLEAR RIGHT 4 BITS	;CLEAR RIGHT 4 BITS
929)   1066 18 0A       		 JR DPEXIT	;
931)   1068 CB 00       		DOEVEN: RLC B	;
932)   106A CB 00       		 RLC B	;
933)   106C CB 00       		 RLC B	;
934)   106E CB 00       		 RLC B	;
935)   1070 E6 0F       		 AND $0F        ;ZERO LEFT	;ZERO LEFT
936)   1072 B0          		DPEXIT: OR B         ;MIX PIXELS	;MIX PIXELS
937)   1073 77          		 LD (HL), A	;
938)   1074 CD CE 0F    		 CALL VGA_RMVGRPG	;
939)   1077 C9          		 RET	;
942)   1078 CD 4C 0F    		VGA_GRCLS: CALL VGA_SETGRPGLO	;
943)   107B 21 00 40    		 LD HL, BASEADDR	;
944)   107E 11 01 40    		 LD DE, BASEADDR + 1	;
945)   1081 01 FF 3F    		 LD BC, 16384 - 1       ;BYTES ON 1ST 16K	;BYTES ON 1ST 16K
946)   1084 AF          		 XOR A	;
947)   1085 77          		 LD (HL), A	;
948)   1086 ED B0       		 LDIR         ;RED - RED	;RED - RED
950)   1088 CD CE 0F    		 CALL VGA_RMVGRPG	;
951)   108B CD 8D 0F    		 CALL VGA_SETGRPGHI	;
952)   108E 21 00 40    		 LD HL, BASEADDR	;
953)   1091 11 01 40    		 LD DE, BASEADDR + 1	;
954)   1094 01 FF 3C    		 LD BC, 15616 - 1       ;BYTES ON 2ND 16K	;BYTES ON 2ND 16K
955)   1097 AF          		 XOR A	;
956)   1098 77          		 LD (HL), A	;
957)   1099 ED B0       		 LDIR	;
958)   109B CD CE 0F    		 CALL VGA_RMVGRPG	;
959)   109E AF          		 XOR A        ;RESET TEXT COORDS	;RESET TEXT COORDS
960)   109F 32 8B F0    		 LD (VGATX_X), A	;
961)   10A2 32 8C F0    		 LD (VGATX_Y), A	;
962)   10A5 C9          		 RET         ;TO MENU	;TO MENU
964)   10A6 C5          		FILLBTS: PUSH BC	;
965)   10A7 12          		AGN1: LD (DE), A	;
966)   10A8 13          		 INC DE	;
967)   10A9 0B          		 DEC BC	;
968)   10AA 67          		 LD H, A	;
969)   10AB 78          		 LD A, B	;
970)   10AC B1          		 OR C	;
971)   10AD 7C          		 LD A, H	;
972)   10AE 20 F7       		 JR NZ, AGN1	;
973)   10B0 2D          		 DEC L	;
974)   10B1 7D          		 LD A, L	;
975)   10B2 B7          		 OR A	;
976)   10B3 7C          		 LD A, H	;
977)   10B4 C1          		 POP BC	;
978)   10B5 20 EF       		 JR NZ, FILLBTS	;
979)   10B7 C9          		 RET	;
985)   10B8 E5          		VGA_GETPXL32: PUSH HL	;
986)   10B9 F5          		 PUSH AF	;
987)   10BA 7B          		 LD A, E	;
988)   10BB FE 66       		 CP 102	;
989)   10BD 38 25       		 JR C, GPNXT0        ;LESS THAN 102	;LESS THAN 102
990)   10BF 20 16       		 JR NZ, GPNXTBNK       ;MORE THAN 102	;MORE THAN 102
991)   10C1 E5          		 PUSH HL        ;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES	;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
992)   10C2 01 80 00    		 LD BC, 128	;
993)   10C5 B7          		 OR A	;
994)   10C6 ED 42       		 SBC HL, BC	;
995)   10C8 47          		 LD B, A	;
996)   10C9 7C          		 LD A, H	;
997)   10CA B7          		 OR A         ; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128	; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
998)   10CB 78          		 LD A, B	;
999)   10CC E1          		 POP HL	;
1000)   10CD 20 15       		 JR NZ, GPNXT0	;
1002)   10CF 3E 67       		 LD A, 103        ;WE ARE AT LINE ZERO ON 2ND BANK	;WE ARE AT LINE ZERO ON 2ND BANK
1003)   10D1 11 40 01    		 LD DE, 129 + 191	;
1004)   10D4 B7          		 OR A	;
1005)   10D5 ED 52       		 SBC HL, DE        ;	;
1006)   10D7 D6 67       		GPNXTBNK: SUB 103       ;SKIP 102 ROWS	;SKIP 102 ROWS
1007)   10D9 11 C0 00    		 LD DE, 192        ;320-128	;320-128
1008)   10DC 19          		 ADD HL, DE	;
1009)   10DD F5          		 PUSH AF	;
1011)   10DE CD 8D 0F    		 CALL VGA_SETGRPGHI	;
1013)   10E1 F1          		 POP AF         ;A HAS THE ROWS ON 2ND 16K	;A HAS THE ROWS ON 2ND 16K
1014)   10E2 18 05       		 JR GPNXT1	;
1015)   10E4 F5          		GPNXT0: PUSH AF        ;A=E=ROW=Y	;A=E=ROW=Y
1016)   10E5 CD 4C 0F    		 CALL VGA_SETGRPGLO	;
1017)   10E8 F1          		 POP AF	;
1018)   10E9 11 00 40    		GPNXT1: LD DE, BASEADDR	;
1020)   10EC CB 3C       		 SRL H	;
1021)   10EE CB 1D       		 RR L	;
1022)   10F0 19          		 ADD HL, DE        ;FIND COLUMN	;FIND COLUMN
1023)   10F1 11 A0 00    		 LD DE, 160	;
1024)   10F4 CD 58 15    		 CALL Mult12        ;HL=A*DE	;HL=A*DE
1025)   10F7 C1          		GPDOGETPX: POP BC        ;B HAS THE COLOR	;B HAS THE COLOR
1026)   10F8 D1          		 POP DE         ;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL	;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
1027)   10F9 7E          		 LD A, (HL)        ;GET PIXEL BYTE	;GET PIXEL BYTE
1028)   10FA CB 43       		 BIT 0, E        ;CHECK X IS EVEN OR ODD	;CHECK X IS EVEN OR ODD
1029)   10FC 28 04       		 JR Z, GPDOEVEN        ;EVEN	;EVEN
1031)   10FE E6 0F       		 AND $0F        ;CLEAR LEFT 4 BITS	;CLEAR LEFT 4 BITS
1032)   1100 18 0A       		 JR GPDPEXIT	;
1034)   1102 CB 07       		GPDOEVEN: RLC A	;
1035)   1104 CB 07       		 RLC A	;
1036)   1106 CB 07       		 RLC A	;
1037)   1108 CB 07       		 RLC A	;
1038)   110A E6 0F       		 AND $0F        ;ZERO LEFT	;ZERO LEFT
1039)   110C F5          		GPDPEXIT: PUSH AF       ;SAVE PIXEL	;SAVE PIXEL
1040)   110D CD CE 0F    		 CALL VGA_RMVGRPG	;
1041)   1110 F1          		 POP AF         ;RESTORE PIXEL	;RESTORE PIXEL
1042)   1111 C9          		 RET	;
1047)   1112 C3 1B 12    		VGA_DOPRNCHGRP: JP VGA_PRNGRCH	;
1055)   1115 C9          		 RET	;
1061)   1116 06 02       		SETGRAPHPGS: LD B, 2	;
1062)   1118 3A 29 F0    		 LD A, (PGSEM)        ;PG SEM FOR ALL 4 PAGES	;PG SEM FOR ALL 4 PAGES
1063)   111B 3C          		 INC A	;
1064)   111C 32 29 F0    		 LD (PGSEM), A	;
1065)   111F FE 01       		 CP 1	;
1066)   1121 C0          		 RET NZ	;
1067)   1122 E5          		 PUSH HL	;
1068)   1123 0E 04       		 LD C, 4	;
1069)   1125 21 25 F0    		 LD HL, TMPG	;
1070)   1128 C5          		 PUSH BC	;
1071)   1129 E5          		SGP_NXT: PUSH HL	;
1072)   112A CD 26 05    		 CALL GETPGINBANK	;
1073)   112D E1          		 POP HL	;
1074)   112E 77          		 LD (HL), A	;
1075)   112F 23          		 INC HL	;
1076)   1130 04          		 INC B	;
1077)   1131 0D          		 DEC C	;
1078)   1132 20 F5       		 JR NZ, SGP_NXT	;
1079)   1134 C1          		 POP BC	;
1080)   1135 0E 04       		 LD C, 4	;
1081)   1137 3A 90 F0    		 LD A,(VGABUF)	;
1082)   113A 1F          		 RRA	;
1083)   113B 3E 08       		 LD A, 8       ;BUFFER 0	;BUFFER 0
1084)   113D 30 02       		 JR NC, SGP_NXT2	;
1085)   113F 3E 0C       		 LD A, 12      ;BUFFER 1	;BUFFER 1
1088)   1141 C5          		SGP_NXT2: PUSH BC	;
1089)   1142 CD 04 05    		 CALL PUTPGINBANK	;
1090)   1145 C1          		 POP BC	;
1091)   1146 3C          		 INC A	;
1092)   1147 04          		 INC B	;
1093)   1148 0D          		 DEC C	;
1094)   1149 20 F6       		 JR NZ, SGP_NXT2	;
1095)   114B E1          		 POP HL	;
1096)   114C C9          		 RET	;
1100)   114D 06 02       		RMVGRAPHPGS: LD B, 2	;
1101)   114F 3A 29 F0    		 LD A, (PGSEM)	;
1102)   1152 FE 00       		 CP 0	;
1103)   1154 C8          		 RET Z	;
1104)   1155 3D          		 DEC A	;
1105)   1156 32 29 F0    		 LD (PGSEM), A	;
1106)   1159 FE 00       		 CP 0	;
1107)   115B C0          		 RET NZ	;
1108)   115C E5          		 PUSH HL	;
1109)   115D 21 25 F0    		 LD HL, TMPG	;
1110)   1160 0E 04       		 LD C, 4	;
1111)   1162 7E          		RGP_NXT: LD A, (HL)	;
1112)   1163 E5          		 PUSH HL	;
1113)   1164 C5          		 PUSH BC	;
1114)   1165 CD 04 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
1115)   1168 C1          		 POP BC	;
1116)   1169 E1          		 POP HL	;
1117)   116A 04          		 INC B	;
1118)   116B 23          		 INC HL	;
1119)   116C 0D          		 DEC C	;
1120)   116D 20 F3       		 JR NZ, RGP_NXT	;
1121)   116F E1          		 POP HL	;
1122)   1170 C9          		 RET	;
1132)   1171 3E 50       		VGA_CALC_VA64: LD A, 80	;
1134)   1173 E5          		 PUSH HL	;
1135)   1174 CD 58 15    		 CALL Mult12        ;HL=A * DE=Y	;HL=A * DE=Y
1136)   1177 EB          		 EX DE, HL        ;DE=Y*80	;DE=Y*80
1137)   1178 E1          		 POP HL	;
1138)   1179 0E 08       		 LD C, 8	;
1139)   117B CD AE 15    		 CALL DIV16_8        ;HL=HL/C  A=REMAINDER	;HL=HL/C  A=REMAINDER
1140)   117E 19          		 ADD HL, DE        ;THE ADDRESS IN 32K VIDEO BUFFER	;THE ADDRESS IN 32K VIDEO BUFFER
1141)   117F 11 00 40    		 LD DE, $4000	;
1142)   1182 19          		 ADD HL, DE        ;THE ADDRESS IN Z80 RAM	;THE ADDRESS IN Z80 RAM
1144)   1183 4F          		 LD C,A	;
1145)   1184 3E 07       		 LD A,7	;
1146)   1186 91          		 SUB C        ;A=7-REM TO FIND THE BIT TO SET LEFT TO RIGHT	;A=7-REM TO FIND THE BIT TO SET LEFT TO RIGHT
1147)   1187 06 01       		 LD B, 1	;
1148)   1189 B7          		 OR A	;
1149)   118A 28 05       		VCVA_AGN: JR Z, VCVA_NXT	;
1150)   118C CB 10       		 RL B         ;MOVE B (THE MASK) TO THE RIGHT BIT	;MOVE B (THE MASK) TO THE RIGHT BIT
1151)   118E 3D          		 DEC A	;
1152)   118F 18 F9       		 JR VCVA_AGN	;
1153)   1191 78          		VCVA_NXT: LD A, B	;
1154)   1192 C9          		 RET	;
1161)   1193 F5          		VGA_CHECKXY64: PUSH AF	;
1162)   1194 E5          		 PUSH HL	;
1163)   1195 D5          		 PUSH DE	;
1164)   1196 B7          		 OR A	;
1165)   1197 11 80 02    		 LD DE, 640	;
1166)   119A ED 52       		 SBC HL, DE	;
1167)   119C 30 0F       		 JR NC, CXY6_ABEX	;
1168)   119E D1          		 POP DE	;
1169)   119F D5          		 PUSH DE	;
1170)   11A0 EB          		 EX DE, HL	;
1171)   11A1 11 90 01    		 LD DE, 400	;
1172)   11A4 ED 52       		 SBC HL, DE	;
1173)   11A6 D1          		 POP DE         ;ABNORMAL EXIT PIXEL CANT PUT TO SCREEN	;ABNORMAL EXIT PIXEL CANT PUT TO SCREEN
1174)   11A7 E1          		 POP HL	;
1175)   11A8 30 03       		 JR NC, CXY6_ABEX	;
1176)   11AA F1          		 POP AF	;
1177)   11AB 37          		 SCF         ;RETURN WITH C SET	;RETURN WITH C SET
1178)   11AC C9          		 RET	;
1179)   11AD F1          		CXY6_ABEX: POP AF	;
1180)   11AE AF          		 XOR A	;
1181)   11AF C9          		 RET         ;RETURN WITH NC	;RETURN WITH NC
1186)   11B0 CD 93 11    		VGA_PLTPXL64: CALL VGA_CHECKXY64	;
1187)   11B3 D0          		 RET NC         ;NOT VALID PARAMS	;NOT VALID PARAMS
1188)   11B4 F5          		 PUSH AF	;
1189)   11B5 E5          		 PUSH HL	;
1190)   11B6 D5          		 PUSH DE	;
1191)   11B7 CD 16 11    		 CALL SETGRAPHPGS       ;BRING VIDEO PAGES TO Z80	;BRING VIDEO PAGES TO Z80
1192)   11BA D1          		PP6_PAROK: POP DE	;
1193)   11BB E1          		 POP HL	;
1195)   11BC CD 71 11    		 CALL VGA_CALC_VA64       ;HL THE VGA ADDRESS AND A THE BIT MASK	;HL THE VGA ADDRESS AND A THE BIT MASK
1196)   11BF D1          		 POP DE         ;D HAS THE COLOR 0 OR 1, RESET BIT OR SET	;D HAS THE COLOR 0 OR 1, RESET BIT OR SET
1197)   11C0 5F          		 LD E, A	;
1198)   11C1 3A 8A F0    		 LD A,(VGABCOL)	;
1199)   11C4 BA          		 CP D         ;CHECK IF COLOR IS SAME AS BACKG	;CHECK IF COLOR IS SAME AS BACKG
1200)   11C5 28 05       		 JR Z, PP6_RESET	;
1202)   11C7 7E          		 LD A, (HL)        ;GET THE BYTE	;GET THE BYTE
1203)   11C8 B3          		 OR E         ;SET THE BIT	;SET THE BIT
1204)   11C9 77          		 LD (HL), A        ;PUT THE BYTE BACK	;PUT THE BYTE BACK
1205)   11CA 18 06       		 JR PP6_EXIT	;
1208)   11CC 7B          		 LD A, E        ;MASK ON A	;MASK ON A
1209)   11CD 2F          		 CPL         ;INVERT ALL PIXELS	;INVERT ALL PIXELS
1210)   11CE 5F          		 LD E, A        ;MASK ON E	;MASK ON E
1211)   11CF 7E          		 LD A, (HL)        ;GET THE BYTE	;GET THE BYTE
1212)   11D0 A3          		 AND E         ;RESET THE BIT	;RESET THE BIT
1213)   11D1 77          		 LD (HL), A        ;PUT THE BYTE BACK	;PUT THE BYTE BACK
1214)   11D2 CD 4D 11    		PP6_EXIT: CALL RMVGRAPHPGS      ;RESTORE PREVIOUS PAGES TO Z80	;RESTORE PREVIOUS PAGES TO Z80
1215)   11D5 C9          		 RET	;
1223)   11D6 CD 93 11    		VGA_GETPXL64: CALL VGA_CHECKXY64	;
1224)   11D9 D0          		 RET NC         ;NOT VALID PARAMS	;NOT VALID PARAMS
1225)   11DA CD 16 11    		 CALL SETGRAPHPGS       ;BRING VIDEO PAGES TO Z80	;BRING VIDEO PAGES TO Z80
1226)   11DD D1          		 POP DE	;
1227)   11DE E1          		 POP HL	;
1228)   11DF F1          		 POP AF	;
1230)   11E0 CD 71 11    		 CALL VGA_CALC_VA64       ;HL THE VGA ADDRESS AND A THE BIT MASK	;HL THE VGA ADDRESS AND A THE BIT MASK
1231)   11E3 5F          		 LD E, A	;
1232)   11E4 7E          		 LD A, (HL)	;
1233)   11E5 A3          		 AND E	;
1234)   11E6 FE 00       		 CP 0	;
1235)   11E8 28 02       		 JR Z, GP6EXIT	;
1236)   11EA 3E 01       		 LD A, 1	;
1238)   11EC F5          		GP6EXIT: PUSH AF	;
1239)   11ED CD 4D 11    		 CALL RMVGRAPHPGS       ;RESTORE PREVIOUS PAGES TO Z80	;RESTORE PREVIOUS PAGES TO Z80
1240)   11F0 F1          		 POP AF	;
1241)   11F1 C9          		 RET	;
1249)   11F2 F5          		VGA_PLTPXL: PUSH AF	;
1250)   11F3 E5          		 PUSH HL	;
1251)   11F4 D5          		 PUSH DE        ;SAVE A	;SAVE A
1252)   11F5 CD 53 0C    		 CALL VGA_GETCONF	;
1253)   11F8 D1          		 POP DE	;
1254)   11F9 E1          		 POP HL	;
1255)   11FA F1          		 POP AF	;
1256)   11FB E5          		 PUSH HL	;
1257)   11FC D5          		 PUSH DE	;
1258)   11FD DD 21 0B 12 		 LD IX,VGA_PPEXIT	;
1259)   1201 DD E5       		 PUSH IX        ;RETURN ADDRESS  	;RETURN ADDRESS
1260)   1203 CB 49       		 BIT 1, C        ;test low or hi	;test low or hi
1261)   1205 C2 B0 11    		 JP NZ, VGA_PLTPXL64       ;NZ MEANS HI	;NZ MEANS HI
1262)   1208 C3 15 10    		 JP VGA_PLTPXL32	;
1263)   120B D1          		VGA_PPEXIT: POP DE	;
1264)   120C E1          		 POP HL	;
1265)   120D C9          		 RET	;
1271)   120E D5          		VGA_GETPXL: PUSH DE	;
1272)   120F CD 53 0C    		 CALL VGA_GETCONF	;
1273)   1212 D1          		 POP DE	;
1274)   1213 CB 49       		 BIT 1, C        ;test low or hi	;test low or hi
1275)   1215 C2 D6 11    		 JP NZ, VGA_GETPXL64       ;NZ MEANS HI	;NZ MEANS HI
1276)   1218 C3 B8 10    		 JP VGA_GETPXL32	;
1282)   121B F5          		VGA_PRNGRCH:  PUSH AF	;
1288)   121C 1E 08       		 LD E,FONT_WIDTH	;
1289)   121E 3A 8B F0    		VPGC_NXT: LD A,(VGATX_X)	;
1290)   1221 67          		 LD H,A	;
1292)   1222 CD 4C 15    		 CALL MULT8	;
1293)   1225 E5          		 PUSH HL        ;SAVE RESULT	;SAVE RESULT
1294)   1226 1E 0A       		 LD E,FONT_HEIGHT	;
1295)   1228 3A 8C F0    		 LD A,(VGATX_Y)	;
1296)   122B 67          		 LD H,A	;
1297)   122C CD 4C 15    		 CALL MULT8	;
1298)   122F D1          		 POP DE	;
1299)   1230 EB          		 EX DE,HL	;
1301)   1231 F1          		 POP AF        ;GET THE CHAR	;GET THE CHAR
1303)   1232 E5          		VGA_PRNGRCHAT: PUSH HL	;
1304)   1233 D5          		 PUSH DE	;
1305)   1234 B7          		 OR A	;
1306)   1235 21 00 40    		 LD HL, FONT_ADDR	;
1307)   1238 16 00       		 LD D, 0	;
1308)   123A 5F          		 LD E, A	;
1309)   123B ED 5A       		 ADC HL, DE        ;HL THE START OF FONT	;HL THE START OF FONT
1310)   123D 0E 0A       		 LD C, FONT_HEIGHT       ; TOTAL FONT LINES	; TOTAL FONT LINES
1311)   123F EB          		 EX DE,HL       ;DE THE START OF FONT PATTERN	;DE THE START OF FONT PATTERN
1312)   1240 1A          		VPGC_AGN3: LD A, (DE)       ;FONT 8BIT PATTERN FOR A LINE	;FONT 8BIT PATTERN FOR A LINE
1313)   1241 06 08       		 LD B, FONT_WIDTH	;
1314)   1243 CB 27       		VPGC_AGN4: SLA A        ;CHECK BIT FOR 1=FCOLOR OR 0=BCOLOR	;CHECK BIT FOR 1=FCOLOR OR 0=BCOLOR
1315)   1245 67          		 LD H,A        ;SAVE A  	;SAVE A
1316)   1246 38 05       		 JR C, VPGC_FCOLOR	;
1317)   1248 3A 8A F0    		 LD A, (VGABCOL)	;
1318)   124B 18 03       		 JR VPGC_CONT	;
1319)   124D 3A 89 F0    		VPGC_FCOLOR: LD A, (VGAFCOL) 	;
1321)   1250 D9          		VPGC_CONT: EXX 	;
1322)   1251 D1          		 POP DE	;
1323)   1252 E1          		 POP HL	;
1324)   1253 CD F2 11    		 CALL VGA_PLTPXL	;
1325)   1256 23          		 INC HL        ;NEXT PIXEL ON VIDEO BUF	;NEXT PIXEL ON VIDEO BUF
1326)   1257 E5          		 PUSH HL	;
1327)   1258 D5          		 PUSH DE	;
1328)   1259 D9          		 EXX	;
1329)   125A 7C          		 LD A,H        ;RESTORE A	;RESTORE A
1330)   125B 10 E6       		 DJNZ VPGC_AGN4	;
1331)   125D D9          		 EXX	;
1332)   125E D1          		 POP DE	;
1333)   125F E1          		 POP HL	;
1334)   1260 06 00       		 LD B,0	;
1335)   1262 0E 08       		 LD C,FONT_WIDTH	;
1336)   1264 B7          		 OR A	;
1337)   1265 ED 42       		 SBC HL,BC       ;X=HL AT THE START	;X=HL AT THE START
1338)   1267 13          		 INC DE        ;Y=DE +1	;Y=DE +1
1339)   1268 E5          		 PUSH HL	;
1340)   1269 D5          		 PUSH DE	;
1341)   126A D9          		 EXX	;
1342)   126B 14          		 INC D         ;ADD 256 FOR NEXT CHAR PATTERN	;ADD 256 FOR NEXT CHAR PATTERN
1343)   126C 0D          		 DEC C	;
1344)   126D 20 D1       		 JR NZ, VPGC_AGN3	;
1345)   126F D1          		 POP DE	;
1346)   1270 E1          		 POP HL	;
1347)   1271 C9          		 RET	;
1352)   1272 67          		VGA_CLRTXTLN: LD H,A	;
1353)   1273 3A 8C F0    		 LD A,(VGATX_Y)	;
1354)   1276 F5          		 PUSH AF	;
1355)   1277 7C          		 LD A,H	;
1356)   1278 32 8C F0    		 LD (VGATX_Y),A	;
1357)   127B F5          		 PUSH AF	;
1358)   127C CD 53 0C    		 CALL VGA_GETCONF	;
1359)   127F F1          		 POP AF	;
1360)   1280 CB 49       		 BIT 1, C 	;
1361)   1282 06 4E       		 LD B,78       ;test low or hi	;test low or hi
1362)   1284 20 02       		 JR NZ, DOCLRTXT;CLRTXT64    ;NZ MEANS HI	;CLRTXT64    ;NZ MEANS HI
1364)   1286 06 26       		 LD B,38	;
1365)   1288 3E 20       		DOCLRTXT: LD A,' '	;
1366)   128A C5          		 PUSH BC	;
1367)   128B CD 85 0C    		 CALL VGA_PRCH      ;PRINT AND FORWARDS	;PRINT AND FORWARDS
1368)   128E C1          		 POP BC	;
1369)   128F 10 F7       		 DJNZ DOCLRTXT	;
1370)   1291 3E 20       		 LD A,' '	;
1371)   1293 CD 95 0C    		 CALL VGA_DOPRNCH	;
1372)   1296 AF          		 XOR A	;
1373)   1297 32 8B F0    		 LD (VGATX_X),A	;
1374)   129A F1          		 POP AF	;
1375)   129B 32 8C F0    		 LD LD (VGATX_Y),A	;
1376)   129E C9          		 RET	;
 34)   129F C9          		 RET	;
 37)   12A0 F5          		DELAYMICROSEC: PUSH AF	;
 38)   12A1 D5          		 PUSH DE	;
 39)   12A2 1B          		 DEC DE	;
 40)   12A3 D1          		 POP DE	;
 41)   12A4 F1          		 POP AF	;
 42)   12A5 C9          		 RET	;
 45)   12A6 CD A0 12    		S21: CALL DELAYMICROSEC	;
 46)   12A9 10 FB       		 DJNZ S21	;
 47)   12AB C9          		 RET	;
 51)   12AC F5          		DELAYMILISEC: PUSH AF	;
 52)   12AD D5          		 PUSH DE	;
 53)   12AE 11 2C 01    		 LD DE, 300        ;2000 1 MILISEC =300 ON 8MHZ SO 30= 0.1 MILISECS = 100 MICROSECS	;2000 1 MILISEC =300 ON 8MHZ SO 30= 0.1 MILISECS = 100 MICROSECS
 54)   12B1 1B          		DEL1: DEC DE	;
 55)   12B2 7A          		 LD A, D        ;TEST FOR DE=00	;TEST FOR DE=00
 56)   12B3 B3          		 OR E	;
 57)   12B4 20 FB       		 JR NZ, DEL1	;
 58)   12B6 D1          		 POP DE	;
 59)   12B7 F1          		 POP AF	;
 60)   12B8 C9          		 RET	;
 63)   12B9 06 50       		 LD B, 80	;
 65)   12BB CD AC 12    		S1: CALL DELAYMILISEC	;
 66)   12BE 10 FB       		 DJNZ S1	;
 67)   12C0 C9          		 RET	;
 72)   12C1 C5          		@DELAYSEC: PUSH BC	;
 73)   12C2 01 E8 03    		 LD BC, 1000	;
 74)   12C5 C5          		MYDLAGN: PUSH BC	;
 75)   12C6 CD AC 12    		 CALL DELAY        ;1MS ON 8 MHZ	;1MS ON 8 MHZ
 76)   12C9 C1          		 POP BC	;
 77)   12CA 0B          		 DEC BC	;
 78)   12CB 78          		 LD A, B	;
 79)   12CC B1          		 OR C	;
 80)   12CD 20 F6       		 JR NZ, MYDLAGN	;
 81)   12CF C1          		 POP BC	;
 82)   12D0 10 EF       		 DJNZ DELAYSEC	;
 83)   12D2 C9          		 RET	;
 88)   12D3 F5          		OUTASC: PUSH AF	;
 89)   12D4 D5          		 PUSH DE	;
 90)   12D5 CD 08 13    		 CALL B2Bcd	;
 91)   12D8 D1          		 POP DE	;
 92)   12D9 CD 2E 13    		 CALL BCD2HA	;
 93)   12DC F1          		 POP AF	;
 94)   12DD C9          		 RET	;
108)   12DE B7          		BCD2BN: OR A	;
109)   12DF 47          		 LD B, A	;
110)   12E0 E6 F0       		 AND $F0	;
111)   12E2 0F          		 RRCA	;
112)   12E3 4F          		 LD C, A	;
113)   12E4 0F          		 RRCA	;
114)   12E5 0F          		 RRCA	;
115)   12E6 81          		 ADD A, C	;
116)   12E7 4F          		 LD C, A	;
117)   12E8 78          		 LD A, B	;
118)   12E9 E6 0F       		 AND $0F	;
119)   12EB 81          		 ADD A, C	;
120)   12EC C9          		 RET	;
135)   12ED 26 FF       		BN2BCD: LD H, $FF	;
136)   12EF 24          		D100LP: INC H	;
137)   12F0 D6 64       		 SUB 100	;
138)   12F2 30 FB       		 JR NC, D100LP	;
139)   12F4 C6 64       		 ADD A, 100	;
140)   12F6 2E FF       		 LD L, $FF	;
141)   12F8 2C          		D10LP: INC L	;
142)   12F9 D6 0A       		 SUB 10	;
143)   12FB 30 FB       		 JR NC, D10LP	;
144)   12FD C6 0A       		 ADD A, 10	;
145)   12FF 4F          		 LD C, A	;
146)   1300 7D          		 LD A, L	;
147)   1301 07          		 RLCA	;
148)   1302 07          		 RLCA	;
149)   1303 07          		 RLCA	;
150)   1304 07          		 RLCA	;
151)   1305 B1          		 OR C	;
152)   1306 6F          		 LD L, A	;
153)   1307 C9          		 RET	;
167)   1308 01 00 10    		 LD BC, 16 * 256 + 0       ; handle 16 bits, one bit per iteration	; handle 16 bits, one bit per iteration
168)   130B 11 00 00    		 LD DE, 0	;
170)   130E 29          		 ADD HL, HL	;
171)   130F 7B          		 LD A, E	;
172)   1310 8F          		 ADC A, A	;
173)   1311 27          		 DAA	;
174)   1312 5F          		 LD E, A	;
175)   1313 7A          		 LD A, D	;
176)   1314 8F          		 ADC A, A	;
177)   1315 27          		 DAA	;
178)   1316 57          		 LD D, A	;
179)   1317 79          		 LD A, C	;
180)   1318 8F          		 ADC A, A	;
181)   1319 27          		 DAA	;
182)   131A 4F          		 LD C, A	;
183)   131B 10 F1       		 DJNZ cvtLp	;
184)   131D EB          		 EX DE, HL	;
185)   131E C9          		 RET	;
199)   131F B7          		BCD2BN: OR A	;
200)   1320 47          		 LD B, A	;
201)   1321 E6 F0       		 AND $F0	;
202)   1323 0F          		 RRCA	;
203)   1324 4F          		 LD C, A	;
204)   1325 0F          		 RRCA	;
205)   1326 0F          		 RRCA	;
206)   1327 81          		 ADD A, C	;
207)   1328 4F          		 LD C, A	;
208)   1329 78          		 LD A, B	;
209)   132A E6 0F       		 AND $0F	;
210)   132C 81          		 ADD A, C	;
211)   132D C9          		 RET	;
223)   132E 79          		 LD A, C	;
224)   132F CD 5B 13    		 CALL cvtUN	;
225)   1332 79          		 LD A, C	;
226)   1333 CD 5F 13    		 CALL cvtLN	;
227)   1336 7C          		 LD A, H	;
228)   1337 CD 5B 13    		 CALL cvtUN	;
229)   133A 7C          		 LD A, H	;
230)   133B CD 5F 13    		 CALL cvtLN	;
231)   133E 7D          		 LD A, L	;
232)   133F CD 5B 13    		 CALL cvtUN	;
233)   1342 7D          		 LD A, L	;
234)   1343 18 1A       		 JR cvtLN	;
236)   1345 1F          		 RRA         ; move upper nibble into lower nibble	; move upper nibble into lower nibble
237)   1346 1F          		 RRA	;
238)   1347 1F          		 RRA	;
239)   1348 1F          		 RRA	;
241)   1349 E6 0F       		 AND 0Fh        ; isolate lower nibble	; isolate lower nibble
242)   134B C6 90       		 ADD A, 90h        ; old trick	; old trick
243)   134D 27          		 DAA         ; for converting	; for converting
244)   134E CE 40       		 ADC A, 40h        ; one nibble	; one nibble
245)   1350 27          		 DAA         ; to hex ASCII	; to hex ASCII
246)   1351 12          		 LD (DE), A	;
247)   1352 13          		 INC DE	;
248)   1353 C9          		 RET	;
260)   1354 7D          		 LD A, L	;
261)   1355 CD 45 13    		 CALL cvtUN	;
262)   1358 7D          		 LD A, L	;
263)   1359 18 EE       		 JR cvtLN	;
265)   135B 1F          		 RRA         ; move upper nibble into lower nibble	; move upper nibble into lower nibble
266)   135C 1F          		 RRA	;
267)   135D 1F          		 RRA	;
268)   135E 1F          		 RRA	;
270)   135F E6 0F       		 AND 0Fh        ; isolate lower nibble	; isolate lower nibble
271)   1361 C6 90       		 ADD A, 90h        ; old trick	; old trick
272)   1363 27          		 DAA         ; for converting	; for converting
273)   1364 CE 40       		 ADC A, 40h        ; one nibble	; one nibble
274)   1366 27          		 DAA         ; to hex ASCII	; to hex ASCII
275)   1367 12          		 LD (DE), A	;
276)   1368 13          		 INC DE	;
277)   1369 C9          		 RET	;
294)   136A F5          		 PUSH AF        ; 11 T-states	; 11 T-states
296)   136B ED 44       		 NEG         ; 8 T-states	; 8 T-states
297)   136D ED 44       		 NEG         ; 8 T-states	; 8 T-states
298)   136F ED 44       		 NEG         ; 8 T-states	; 8 T-states
299)   1371 ED 44       		 NEG         ; 8 T-states	; 8 T-states
300)   1373 0B          		 DEC BC         ; 6 T-states	; 6 T-states
301)   1374 79          		 LD A, C        ; 9 T-states	; 9 T-states
302)   1375 B0          		 OR B         ; 4 T-states	; 4 T-states
303)   1376 C2 6B 13    		 JP NZ, pau_lp        ; 10 T-states	; 10 T-states
304)   1379 F1          		 POP AF         ; 10 T-states	; 10 T-states
305)   137A C9          		 RET         ; Pause complete, RETurn	; Pause complete, RETurn
343)   137B 26 00       		@B2D8: LD H, 0	;
344)   137D 6F          		 LD L, A	;
345)   137E 1E 00       		@B2D16: LD E, 0	;
346)   1380 16 00       		@B2D24: LD D, 0	;
347)   1382 01 00 00    		@B2D32: LD BC, 0	;
348)   1385 DD 21 00 00 		@B2D48: LD IX, 0        ; zero all non-used bits	; zero all non-used bits
349)   1389 22 93 F0    		@B2D64: LD (B2DINV), HL	;
350)   138C ED 53 95 F0 		 LD (B2DINV + 2), DE	;
351)   1390 ED 43 97 F0 		 LD (B2DINV + 4), BC	;
352)   1394 DD 22 99 F0 		 LD (B2DINV + 6), IX       ; place full 64-bit input value in buffer	; place full 64-bit input value in buffer
353)   1398 21 9B F0    		 LD HL, B2DBUF	;
354)   139B 11 9C F0    		 LD DE, B2DBUF + 1	;
355)   139E 36 20       		 LD (HL), ' '	;
357)   13A0 01 12 00    		 LD BC, 18	;
358)   13A3 ED B0       		 LDIR         ; fill 1st 19 bytes of buffer with spaces	; fill 1st 19 bytes of buffer with spaces
359)   13A5 ED 43 AE F0 		 LD (B2DEND - 1), BC       ;set BCD value to "0" & place terminating 0	;set BCD value to "0" & place terminating 0
360)   13A9 1E 01       		 LD E, 1        ; no. of bytes in BCD value	; no. of bytes in BCD value
361)   13AB 21 9B F0    		 LD HL, B2DINV + 8       ; (address MSB input)+1	; (address MSB input)+1
362)   13AE 01 09 09    		 LD BC, 0x0909	;
363)   13B1 AF          		 XOR A	;
364)   13B2 05          		B2DSKP0: DEC B	;
365)   13B3 28 29       		 JR Z, B2DSIZ        ; all 0: continue with postprocessing	; all 0: continue with postprocessing
366)   13B5 2B          		 DEC HL	;
367)   13B6 B6          		 OR (HL)        ; find first byte <>0	; find first byte <>0
368)   13B7 28 F9       		 JR Z, B2DSKP0	;
369)   13B9 0D          		B2DFND1: DEC C	;
370)   13BA 17          		 RLA	;
371)   13BB 30 FC       		 JR NC, B2DFND1        ; determine no. of most significant 1-bit	; determine no. of most significant 1-bit
372)   13BD 1F          		 RRA	;
373)   13BE 57          		 LD D, A        ; byte from binary input value	; byte from binary input value
374)   13BF E5          		B2DLUS2: PUSH HL	;
375)   13C0 C5          		 PUSH BC	;
376)   13C1 21 AE F0    		B2DLUS1: LD HL, B2DEND - 1      ; address LSB of BCD value	; address LSB of BCD value
377)   13C4 43          		 LD B, E        ; current length of BCD value in bytes	; current length of BCD value in bytes
378)   13C5 CB 12       		 RL D         ; highest bit from input value -> carry	; highest bit from input value -> carry
379)   13C7 7E          		B2DLUS0: LD A, (HL)	;
380)   13C8 8F          		 ADC A, A	;
381)   13C9 27          		 DAA	;
382)   13CA 77          		 LD (HL), A        ; double 1 BCD byte from intermediate result	; double 1 BCD byte from intermediate result
383)   13CB 2B          		 DEC HL	;
384)   13CC 10 F9       		 DJNZ B2DLUS0        ; and go on to double entire BCD value (+carry!)	; and go on to double entire BCD value (+carry!)
385)   13CE 30 03       		 JR NC, B2DNXT	;
386)   13D0 1C          		 INC E         ; carry at MSB -> BCD value grew 1 byte larger	; carry at MSB -> BCD value grew 1 byte larger
387)   13D1 36 01       		 LD (HL), 1        ; initialize new MSB of BCD value	; initialize new MSB of BCD value
388)   13D3 0D          		B2DNXT: DEC C	;
389)   13D4 20 EB       		 JR NZ, B2DLUS1        ; repeat for remaining bits from 1 input byte	; repeat for remaining bits from 1 input byte
390)   13D6 C1          		 POP BC         ; no. of remaining bytes in input value	; no. of remaining bytes in input value
391)   13D7 0E 08       		 LD C, 8        ; reset bit-counter	; reset bit-counter
392)   13D9 E1          		 POP HL         ; pointer to byte from input value	; pointer to byte from input value
393)   13DA 2B          		 DEC HL	;
394)   13DB 56          		 LD D, (HL)        ; get next group of 8 bits	; get next group of 8 bits
395)   13DC 10 E1       		 DJNZ B2DLUS2        ; and repeat until last byte from input value	; and repeat until last byte from input value
396)   13DE 21 AF F0    		B2DSIZ: LD HL, B2DEND        ; address of terminating 0	; address of terminating 0
397)   13E1 4B          		 LD C, E        ; size of BCD value in bytes	; size of BCD value in bytes
398)   13E2 B7          		 OR A	;
399)   13E3 ED 42       		 SBC HL, BC        ; calculate address of MSB BCD	; calculate address of MSB BCD
400)   13E5 54          		 LD D, H	;
401)   13E6 5D          		 LD E, L	;
402)   13E7 ED 42       		 SBC HL, BC	;
403)   13E9 EB          		 EX DE, HL        ; HL=address BCD value, DE=start of decimal value	; HL=address BCD value, DE=start of decimal value
404)   13EA 41          		 LD B, C        ; no. of bytes BCD	; no. of bytes BCD
405)   13EB CB 21       		 SLA C         ; no. of bytes decimal (possibly 1 too high)	; no. of bytes decimal (possibly 1 too high)
406)   13ED 3E 30       		 LD A, '0'	;
407)   13EF ED 6F       		 RLD         ; shift bits 4-7 of (HL) into bit 0-3 of A	; shift bits 4-7 of (HL) into bit 0-3 of A
408)   13F1 FE 30       		 CP '0'         ; (HL) was > 9h?	; (HL) was > 9h?
409)   13F3 20 06       		 JR NZ, B2DEXPH        ; if yes, start with recording high digit	; if yes, start with recording high digit
410)   13F5 0D          		 DEC C         ; correct number of decimals	; correct number of decimals
411)   13F6 13          		 INC DE         ; correct start address	; correct start address
412)   13F7 18 04       		 JR B2DEXPL        ; continue with converting low digit	; continue with converting low digit
413)   13F9 ED 6F       		B2DEXP: RLD         ; shift high digit (HL) into low digit of A	; shift high digit (HL) into low digit of A
414)   13FB 12          		B2DEXPH: LD (DE), A       ; record resulting ASCII-code	; record resulting ASCII-code
415)   13FC 13          		 INC DE	;
416)   13FD ED 6F       		B2DEXPL: RLD	;
417)   13FF 12          		 LD (DE), A	;
418)   1400 13          		 INC DE	;
419)   1401 23          		 INC HL         ; next BCD-byte	; next BCD-byte
420)   1402 10 F5       		 DJNZ B2DEXP        ; and go on to convert each BCD-byte into 2 ASCII	; and go on to convert each BCD-byte into 2 ASCII
421)   1404 ED 42       		 SBC HL, BC        ; return with HL pointing to 1st decimal	; return with HL pointing to 1st decimal
422)   1406 C9          		 RET	;
426)   1407 EB          		 ex de, hl        ; Get destination into DE	; Get destination into DE
427)   1408 21 9B F0    		 ld hl, B2DBUF	;
428)   140B CD 12 14    		 call SkipWhitespace	;
429)   140E ED B0       		 ldir	;
430)   1410 EB          		 ex de, hl        ; Get destination into DE	; Get destination into DE
431)   1411 C9          		 ret	;
436)   1412 7E          		 ld a, (hl)	;
437)   1413 FE 20       		 cp ' '	;
438)   1415 C0          		 ret nz	;
439)   1416 23          		 inc hl	;
440)   1417 18 F9       		 jr SkipWhitespace	;
444)   1419 06 08       		@REVBITS: ld b, 8	;
445)   141B 6F          		 ld l, a	;
447)   141C CB 15       		 rl l	;
448)   141E 1F          		 rra	;
449)   141F 10 FB       		 djnz REVLOOP	;
450)   1421 C9          		 RET	;
460)   1422 E5          		 push hl	;
462)   1423 7E          		 ld a, (hl)	;
464)   1424 FE 00       		 cp  0	;
465)   1426 28 0E       		 jr z, IsStrDecTrue	;
467)   1428 FE 30       		 cp  '0'	;
468)   142A 38 06       		 jr c, IsStrDecFalse	;
470)   142C FE 3A       		 cp  '9'+1	;
471)   142E 38 09       		 jr c, IsStrDecContinue	;
472)   1430 FE 39       		 cp  '9'	;
475)   1432 F6 01       		 or 1         ; Reset zero flag	; Reset zero flag
476)   1434 E1          		 pop hl	;
477)   1435 C9          		 ret	;
479)   1436 BF          		 cp a         ; Set zero flag	; Set zero flag
480)   1437 E1          		 pop hl	;
481)   1438 C9          		 ret	;
483)   1439 23          		 inc hl	;
484)   143A 18 E7       		 jr IsStrDec00	;
491)   143C E5          		 push hl	;
493)   143D 7E          		 ld a, (hl)	;
495)   143E FE 00       		 cp  0	;
496)   1440 28 14       		 jr z, IsStrHexTrue	;
498)   1442 FE 30       		 cp  '0'	;
499)   1444 38 0C       		 jr c, IsStrHexFalse	;
501)   1446 FE 3A       		 cp  '9'+1	;
502)   1448 38 0F       		 jr c, IsStrHexContinue	;
504)   144A FE 30       		 cp  '0'	;
505)   144C 38 04       		 jr c, IsStrHexFalse	;
507)   144E FE 47       		 cp  'F'+1	;
508)   1450 38 07       		 jr c, IsStrHexContinue	;
511)   1452 F6 01       		 or 1         ; Reset zero flag	; Reset zero flag
512)   1454 E1          		 pop hl	;
513)   1455 C9          		 ret	;
515)   1456 BF          		 cp a         ; Set zero flag	; Set zero flag
516)   1457 E1          		 pop hl	;
517)   1458 C9          		 ret	;
519)   1459 23          		 inc hl	;
520)   145A 18 E1       		 jr IsStrHex00	;
527)   145C AF          		 xor a	;
528)   145D CD 62 14    		 call loop	;
529)   1460 7A          		 ld a, d	;
530)   1461 C9          		 ret	;
532)   1462 57          		 ld d, a	;
533)   1463 7E          		 ld a, (hl)	;
534)   1464 23          		 inc hl	;
535)   1465 D6 3A       		 sub '9' + 1	;
536)   1467 C6 0A       		 add 10	;
537)   1469 D0          		 ret nc	;
538)   146A 5F          		 ld e, a	;
539)   146B 7A          		 ld a, d	;
540)   146C 87          		 add a, a        ;double our accumulator	;double our accumulator
541)   146D 87          		 add a, a        ;double again (now x4)	;double again (now x4)
542)   146E 82          		 add a, d        ;add the original (now x5)	;add the original (now x5)
543)   146F 87          		 add a, a        ;double again (now x10)	;double again (now x10)
544)   1470 83          		 add a, e        ;add in the incoming digit	;add in the incoming digit
545)   1471 18 EF       		 jr loop	;
553)   1473 7E          		 ld a, (hl)        ; Copy first char to A	; Copy first char to A
554)   1474 CD 84 14    		 call Hex12        ; Convert first char	; Convert first char
555)   1477 87          		 add a, a        ; Multiply by 16...	; Multiply by 16...
556)   1478 87          		 add a, a        ; ...	; ...
557)   1479 87          		 add a, a        ; ...	; ...
558)   147A 87          		 add a, a        ; ...done!	; ...done!
559)   147B 57          		 ld d, a        ; Store top 4 bits in D	; Store top 4 bits in D
560)   147C 23          		 inc hl         ; Advance to next char	; Advance to next char
561)   147D 7E          		 ld a, (hl)	;
562)   147E CD 84 14    		 call Hex12        ; Convert second char	; Convert second char
563)   1481 B2          		 or d         ; Add back top bits	; Add back top bits
564)   1482 23          		 inc hl         ; Advance for next guy	; Advance for next guy
565)   1483 C9          		 ret	;
566)   1484 D6 30       		Hex12: sub  '0'	;
567)   1486 FE 0A       		 cp 10	;
568)   1488 D8          		 ret c	;
569)   1489 D6 07       		 sub 'A' - '0' - 10	;
570)   148B C9          		 ret	;
577)   148C CD 73 14    		 call Read8bit	;
578)   148F 47          		 ld b, a	;
579)   1490 CD 73 14    		 call Read8bit	;
580)   1493 4F          		 ld c, a	;
581)   1494 C9          		 ret	;
589)   1495 7E          		 ld a, (hl)	;
590)   1496 23          		 inc hl	;
591)   1497 D6 30       		 sub '0'	;
592)   1499 CB 27       		 sla a	;
593)   149B CB 27       		 sla a	;
594)   149D CB 27       		 sla a	;
595)   149F CB 27       		 sla a	;
596)   14A1 47          		 ld b, a	;
597)   14A2 7E          		 ld a, (hl)	;
598)   14A3 23          		 inc hl	;
599)   14A4 D6 30       		 sub '0'	;
600)   14A6 B0          		 or b	;
601)   14A7 C9          		 ret	;
606)   14A8 4F          		 ld c, a        ; a = number to convert	; a = number to convert
607)   14A9 CD B5 14    		 call Num1	;
608)   14AC 77          		 ld (hl), a	;
609)   14AD 23          		 inc hl	;
610)   14AE 79          		 ld a, c	;
611)   14AF CD B9 14    		 call Num2	;
612)   14B2 77          		 ld (hl), a	;
613)   14B3 23          		 inc hl	;
614)   14B4 C9          		 ret	;
615)   14B5 1F          		Num1: rra	;
616)   14B6 1F          		 rra	;
617)   14B7 1F          		 rra	;
618)   14B8 1F          		 rra	;
619)   14B9 F6 F0       		Num2: or $F0	;
620)   14BB 27          		 daa	;
621)   14BC C6 A0       		 add a, $A0	;
622)   14BE CE 40       		 adc a, $40        ; Ascii hex at this point (0 to F)	; Ascii hex at this point (0 to F)
623)   14C0 C9          		 ret	;
634)   14C1 22 B0 F0    		STR_SET: LD (LINESTR),HL	;
635)   14C4 C9          		 RET	;
638)   14C5 AF          		STR_CLR: XOR A	;
639)   14C6 32 B2 F0    		 LD (LINEPOS),A	;
640)   14C9 32 B0 F0    		 LD (LINESTR),A	;
641)   14CC 32 B1 F0    		 LD (LINESTR+1),A	;
642)   14CF C9          		 RET	;
645)   14D0 3A B0 F0    		STR_VALID: LD A,(LINESTR)	;
646)   14D3 47          		 LD B,A	;
647)   14D4 3A B1 F0    		 LD A,(LINESTR+1)	;
648)   14D7 80          		 ADD B	;
649)   14D8 B7          		 OR A	;
650)   14D9 C9          		 RET	;
656)   14DA F5          		STR_CALCADDR: PUSH AF	;
657)   14DB ED 5B B0 F0 		 LD DE,(LINESTR)	;
658)   14DF EB          		 EX DE,HL	;
659)   14E0 3A B2 F0    		 LD A,(LINEPOS)	;
660)   14E3 4F          		 LD C,A	;
661)   14E4 06 00       		 LD B,0	;
662)   14E6 09          		 ADD HL,BC	;
663)   14E7 EB          		 EX DE,HL	;
664)   14E8 F1          		 POP AF	;
665)   14E9 C9          		 RET	;
669)   14EA 3A B2 F0    		STR_NEXTPOS: LD A,(LINEPOS)	;
670)   14ED 3C          		 INC A	;
671)   14EE 32 B2 F0    		 LD (LINEPOS),A	;
672)   14F1 C9          		 RET	;
676)   14F2 CD DA 14    		STR_ADD: CALL STR_CALCADDR	;
677)   14F5 CD EA 14    		STRA_AGN: CALL STR_NEXTPOS	;
678)   14F8 7E          		 LD A,(HL)	;
679)   14F9 12          		 LD (DE),A	;
680)   14FA 23          		 INC HL	;
681)   14FB 13          		 INC DE	;
682)   14FC B7          		 OR A	;
683)   14FD C8          		 RET Z	;
684)   14FE 18 F5       		 JR STRA_AGN	;
687)   1500 CD DA 14    		STR_ADDCHAR: CALL STR_CALCADDR	;
688)   1503 12          		 LD (DE),A	;
689)   1504 CD EA 14    		 CALL STR_NEXTPOS	;
690)   1507 13          		 INC DE	;
691)   1508 AF          		 XOR A	;
692)   1509 12          		 LD (DE),A	;
693)   150A C9          		 RET	;
701)   150B 26 00       		@PRINTNUM: LD H,0	;
702)   150D 6F          		 LD L,A	;
703)   150E F5          		@PRINTNUM16: PUSH AF	;
705)   150F 11 B4 F0    		 LD DE,NUMBUF	;
706)   1512 CD 54 13    		 CALL Bcd2ASC  ;FOR HEX	;FOR HEX
707)   1515 3E 68       		 LD A,'h'	;
708)   1517 12          		 LD (DE),A  	;
709)   1518 13          		 INC DE	;
710)   1519 AF          		 XOR A	;
711)   151A 12          		 LD (DE),A  	;
713)   151B 21 B4 F0    		 LD HL,NUMBUF	;
714)   151E CD 57 05    		 CALL RS_TXT	;
715)   1521 CD AE 05    		 CALL RS_NEWLINE	;
716)   1524 F1          		 POP AF	;
717)   1525 C9          		 RET	;
725)   1526 E5          		@NUM_ADDZERO: PUSH HL	;
726)   1527 0E 00       		 LD C,0	;
727)   1529 7E          		AZ_AGN: LD A,(HL)   	;
728)   152A 23          		 INC HL	;
729)   152B 0C          		 INC C	;
730)   152C FE 00       		 CP 0	;
731)   152E 20 F9       		 JR NZ,AZ_AGN	;
732)   1530 0D          		 DEC C ;EXCLUDE ZERO TERM	;EXCLUDE ZERO TERM
733)   1531 E1          		 POP HL	;
734)   1532 79          		 LD A,C	;
735)   1533 B8          		 CP B	;
736)   1534 C8          		 RET Z	;
738)   1535 78          		 LD A,B	;
739)   1536 91          		 SUB C	;
740)   1537 D8          		 RET C ;RETURN IF CARRY MEANS WE HAVE MORE DIGITS	;RETURN IF CARRY MEANS WE HAVE MORE DIGITS
741)   1538 47          		 LD B,A	;
742)   1539 3E 30       		 LD A,'0'	;
743)   153B 2B          		AZ_AGN2: DEC HL	;
744)   153C 77          		 LD (HL),A	;
745)   153D 10 FC       		 DJNZ AZ_AGN2 	;
746)   153F C9          		 RET	;
752)   1540 11 60 F0    		@COPYFNAME: LD DE,STRGBUFF	;
753)   1543 7E          		@COPYSTRING:   LD A,(HL)	;
754)   1544 12          		 LD (DE),A	;
755)   1545 FE 00       		 CP 0	;
756)   1547 C8          		 RET Z  	;
757)   1548 13          		 INC DE	;
758)   1549 23          		 INC HL	;
759)   154A 18 F7       		 JR COPYSTRING	;
  7)   154C 16 00       		   ld d,0	;
  8)   154E 6A          		   ld l,d	;
  9)   154F 06 08       		   ld b,8	;
 11)   1551 29          		   add hl,hl	;
 12)   1552 30 01       		   jr nc,Mult8_NoAdd	;
 13)   1554 19          		   add hl,de	;
 15)   1555 10 FA       		   djnz Mult8_Loop	;
 16)   1557 C9          		   ret	;
 23)   1558 2E 00       		   ld l,0	;
 24)   155A 06 08       		   ld b,8	;
 26)   155C 29          		   add hl,hl	;
 27)   155D 87          		   add a,a	;
 28)   155E 30 01       		   jr nc,Mult12_NoAdd	;
 29)   1560 19          		   add hl,de	;
 31)   1561 10 F9       		   djnz Mult12_Loop	;
 32)   1563 C9          		   ret	;
 39)   1564 21 00 00    		@Mult16: ld hl, 0	;
 40)   1567 78          		 ld a, b	;
 41)   1568 06 10       		 ld b, 16	;
 43)   156A 29          		 add hl, hl	;
 44)   156B CB 21       		 sla c	;
 45)   156D 17          		 rla	;
 46)   156E 30 01       		 jr nc, Mult16_NoAdd	;
 47)   1570 19          		 add hl, de	;
 49)   1571 10 F7       		 djnz Mult16_Loop	;
 50)   1573 C9          		 ret	;
 56)   1574 D5          		@Mult32: PUSH DE	;
 57)   1575 79          		 ld a, c	;
 58)   1576 48          		 ld c, b	;
 59)   1577 21 00 00    		 ld hl, 0	;
 60)   157A 06 10       		 ld b, 16	;
 62)   157C 29          		 add hl, hl	;
 63)   157D 17          		 rla	;
 64)   157E CB 11       		 rl c	;
 65)   1580 30 07       		 jr nc, Mult32_NoAdd	;
 66)   1582 19          		 add hl, de	;
 67)   1583 CE 00       		 adc a, 0	;
 68)   1585 D2 89 15    		 jp nc, Mult32_NoAdd	;
 69)   1588 0C          		 inc c	;
 71)   1589 10 F1       		 djnz Mult32_Loop	;
 72)   158B 41          		 ld b, c	;
 73)   158C 4F          		 ld c, a	;
 74)   158D D1          		 POP DE	;
 75)   158E C9          		 ret	;
 83)   158F AF          		   xor a	;
 84)   1590 06 08       		   ld b,8	;
 86)   1592 CB 13       		   rl e	;
 87)   1594 17          		   rla	;
 88)   1595 91          		   sub c	;
 89)   1596 30 01       		   jr nc,Div8_NoAdd	;
 90)   1598 81          		   add a,c	;
 92)   1599 10 F7       		   djnz Div8_Loop	;
 93)   159B 47          		   ld b,a	;
 94)   159C 7B          		   ld a,e	;
 95)   159D 17          		   rla	;
 96)   159E 2F          		   cpl	;
 97)   159F C9          		   ret	;
103)   15A0 AF          		  xor a	;
104)   15A1 06 08       		  ld b, 8	;
107)   15A3 CB 22       		  sla d	;
108)   15A5 17          		  rla	;
109)   15A6 BB          		  cp e	;
110)   15A7 38 02       		  jr c, $+4	;
111)   15A9 93          		  sub e	;
112)   15AA 14          		  inc d	;
114)   15AB 10 F6       		  djnz DIV8_8_loop	;
116)   15AD C9          		  ret	;
122)   15AE AF          		  xor a	;
123)   15AF 06 10       		  ld b, 16	;
126)   15B1 29          		  add hl, hl	;
127)   15B2 17          		  rla	;
128)   15B3 38 03       		  jr c, $+5	;
129)   15B5 B9          		  cp c	;
130)   15B6 38 02       		  jr c, $+4	;
132)   15B8 91          		  sub c	;
133)   15B9 2C          		  inc l	;
135)   15BA 10 F5       		  djnz DIV16_8_loop	;
137)   15BC C9          		  ret	;
145)   15BD 21 00 00    		   ld hl,0	;
146)   15C0 78          		   ld a,b	;
147)   15C1 06 08       		   ld b,8	;
149)   15C3 17          		   rla	;
150)   15C4 ED 6A       		   adc hl,hl	;
151)   15C6 ED 52       		   sbc hl,de	;
152)   15C8 30 01       		   jr nc,Div16_NoAdd1	;
153)   15CA 19          		   add hl,de	;
155)   15CB 10 F6       		   djnz Div16_Loop1	;
156)   15CD 17          		   rla	;
157)   15CE 2F          		   cpl	;
158)   15CF 47          		   ld b,a	;
159)   15D0 79          		   ld a,c	;
160)   15D1 48          		   ld c,b	;
161)   15D2 06 08       		   ld b,8	;
163)   15D4 17          		   rla	;
164)   15D5 ED 6A       		   adc hl,hl	;
165)   15D7 ED 52       		   sbc hl,de	;
166)   15D9 30 01       		   jr nc,Div16_NoAdd2	;
167)   15DB 19          		   add hl,de	;
169)   15DC 10 F6       		   djnz Div16_Loop2	;
170)   15DE 17          		   rla	;
171)   15DF 2F          		   cpl	;
172)   15E0 41          		   ld b,c	;
173)   15E1 4F          		   ld c,a	;
174)   15E2 C9          		   ret  	;
181)   15E3 19          		 ADD HL, DE        ; 16-BIT ADD OF HL AND DE	; 16-BIT ADD OF HL AND DE
182)   15E4 D9          		 EXX	;
183)   15E5 ED 5A       		 ADC HL, DE        ; 16-BIT ADD OF HL AND DE WITH CARRY	; 16-BIT ADD OF HL AND DE WITH CARRY
184)   15E7 D9          		 EXX	;
187)   15E8 C9          		 RET	;
197)   15E9 11 40 00    		 ld de, $0040	;
198)   15EC 7D          		 ld a, l	;
199)   15ED 6C          		 ld l, h	;
200)   15EE 62          		 ld h, d	;
201)   15EF B7          		 or a	;
202)   15F0 06 08       		 ld b, 8	;
204)   15F2 ED 52       		 sbc hl, de	;
205)   15F4 30 01       		 jr nc, Sqr16_Skip	;
206)   15F6 19          		 add hl, de	;
208)   15F7 3F          		 ccf	;
209)   15F8 CB 12       		 rl d	;
210)   15FA 87          		 add a, a	;
211)   15FB ED 6A       		 adc hl, hl	;
212)   15FD 87          		 add a, a	;
213)   15FE ED 6A       		 adc hl, hl	;
214)   1600 10 F0       		 djnz Sqr16_Loop	;
215)   1602 C9          		 ret	;
235)   1603 3A B3 F0    		 ld a, (RNDseed)	;
236)   1606 47          		 ld b, a 	;
238)   1607 0F          		 rrca ; multiply by 32	; multiply by 32
239)   1608 0F          		 rrca	;
240)   1609 0F          		 rrca	;
241)   160A EE 1F       		 xor 0x1f	;
243)   160C 80          		 add a, b	;
244)   160D DE FF       		 sbc a, 255 ; carry	; carry
246)   160F 32 B3 F0    		 ld (RNDseed), a	;
247)   1612 C9          		 ret	;
