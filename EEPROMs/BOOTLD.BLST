 15)   0000 	            		 CH376_ERROR EQU RS_MESG	;
 18)   0000 00          		 NOP	;
 19)   0001 00          		 NOP	;
 20)   0002 F3          		 DI  	;
 21)   0003 31 00 F0    		 LD SP, BLSTACKP 	;
 22)   0006 C3 C1 00    		 JP BOOTLOADER	;
 24)   0009 41 54 4C 41 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 24)   000D 53 20 42 4F 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 24)   0011 4F 54 4C 4F 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 24)   0015 41 44 45 52 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 24)   0019 20          		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 25)   001A 56 65 72 73 		 DEFM "Version "  	;
 25)   001E 69 6F 6E 20 		 DEFM "Version "  	;
 26)   0022 30 2E 30 37 		 DEFM "0.07"	;
 27)   0026 0A 0D       		 DEFB 0AH,0DH	;
 28)   0028 43 44 65 73 		 DEFM "CDesp 2022"	;
 28)   002C 70 20 32 30 		 DEFM "CDesp 2022"	;
 28)   0030 32 32       		 DEFM "CDesp 2022"	;
 29)   0032 0A 0D       		 DEFB 0AH,0DH    	;
 30)   0034 00          		 DEFB 00H	;
 35)   0035 C3 C0 05    		 JP RS_MESG	;
 37)   0038 00 01 0A 0B 		MYMMUBANK:     DB 0,1,10,11,4,5,6,7	;
 37)   003C 04 05 06 07 		MYMMUBANK:     DB 0,1,10,11,4,5,6,7	;
 41)   0040 3E 07       		SETUPFFPS: LD A,7	;
 42)   0042 D3 68       		SFFAGN: OUT (DEVINT), A	;
 43)   0044 3D          		 DEC A	;
 44)   0045 C2 42 00    		 JP NZ, SFFAGN    	;
 45)   0048 C9          		 RET	;
 47)   0049 21 01 F0    		SETUPVARS: LD HL,OSVARS      ;ZERO OS VARIABLES	;ZERO OS VARIABLES
 48)   004C AF          		SI_AGN: XOR A	;
 49)   004D 77          		 LD (HL),A	;
 50)   004E 23          		 INC HL	;
 51)   004F 7C          		 LD A,H	;
 52)   0050 B5          		 OR L	;
 53)   0051 20 F9       		 JR NZ,SI_AGN       ;HL=0000 WHEN OVERFLOW FROM FFFF 	;HL=0000 WHEN OVERFLOW FROM FFFF
 54)   0053 C9          		 RET	;
 57)   0054 00          		INITVGA: NOP	;
 59)   0055 21 88 F0    		 LD HL,SCRNST	;
 60)   0058 CB 86       		 RES 0,(HL) ;DISABLE LCD	;DISABLE LCD
 61)   005A CB CE       		 SET 1,(HL) ;ENABLE VGA	;ENABLE VGA
 63)   005C 21 4C 05    		 LD HL, CHARSETFILE  	;
 64)   005F 01 B8 0B    		 LD BC, 3000  ;MAX FILE SIZE	;MAX FILE SIZE
 65)   0062 11 00 40    		 LD DE, FONT_ADDR 	;
 66)   0065 CD 2A 0A    		 CALL STRG_LOADFILE	;
 67)   0068 30 1C       		 JR NC, CHFILOK	;
 68)   006A CD C0 05    		 CALL RS_MESG	;
 69)   006D 45 52 52 4F 		 DEFM "ERROR LOADING CHARSET"	;
 69)   0071 52 20 4C 4F 		 DEFM "ERROR LOADING CHARSET"	;
 69)   0075 41 44 49 4E 		 DEFM "ERROR LOADING CHARSET"	;
 69)   0079 47 20 43 48 		 DEFM "ERROR LOADING CHARSET"	;
 69)   007D 41 52 53 45 		 DEFM "ERROR LOADING CHARSET"	;
 69)   0081 54          		 DEFM "ERROR LOADING CHARSET"	;
 70)   0082 0D 0A 00    		 DB 13,10,0	;
 71)   0085 76          		 HALT	;
 72)   0086 CD E2 0B    		CHFILOK: CALL VGA_INIT	;
 73)   0089 CD C0 05    		 CALL RS_MESG	;
 74)   008C 56 47 41 20 		 DEFM "VGA CARD OK"	;
 74)   0090 43 41 52 44 		 DEFM "VGA CARD OK"	;
 74)   0094 20 4F 4B    		 DEFM "VGA CARD OK"	;
 75)   0097 0A 0D 00    		 DB 10,13,0	;
 76)   009A C9          		 RET	;
 81)   009B F5          		@OS_PRINTCHAR: PUSH AF	;
 82)   009C D1          		OSPCNX: POP DE	;
 83)   009D 3A 88 F0    		 LD A,(SCRNST)	;
 84)   00A0 E6 02       		 AND 2	;
 85)   00A2 C8          		 RET Z	;
 86)   00A3 D5          		 PUSH DE	;
 87)   00A4 F1          		 POP AF    ;GET THE FLAGS BACK AND THE CHAR	;GET THE FLAGS BACK AND THE CHAR
 88)   00A5 F5          		 PUSH AF	;
 89)   00A6 CD A7 05    		 CALL RS_TX	;
 90)   00A9 F1          		 POP AF  	;
 91)   00AA CD E4 0C    		 CALL VGA_PRCH 	;
 92)   00AD C9          		 RET	;
 95)   00AE 7E          		@OS_PRINTTEXT: LD A,(HL)	;
 96)   00AF FE 00       		 CP 0	;
 97)   00B1 C8          		 RET Z	;
 98)   00B2 E5          		 PUSH HL	;
 99)   00B3 CD 9B 00    		 CALL OS_PRINTCHAR	;
100)   00B6 E1          		 POP HL	;
101)   00B7 23          		 INC HL	;
102)   00B8 18 F4       		 JR OS_PRINTTEXT 	;
104)   00BA E1          		@OS_PRINTMSG: POP HL	;
105)   00BB CD AE 00    		               CALL OS_PRINTTEXT 	;
106)   00BE 23          		 INC HL	;
107)   00BF E5          		 PUSH HL   ;CONTINUE AFTER THE MESG 	;CONTINUE AFTER THE MESG
108)   00C0 C9          		 RET	;
110)   00C1 00          		BOOTLOADER: NOP 	;
113)   00C2 0E 00       		SETUPMMU: LD C,DEVMMU	;
114)   00C4 AF          		  XOR A   ;BANK	;BANK
115)   00C5 06 00       		 LD B,0.SHL.5  ;PAGE	;PAGE
117)   00C7 3C          		 INC A	;
118)   00C8 06 20       		 LD B,1.SHL.5	;
119)   00CA ED 79       		 OUT (C),A  	;
121)   00CC 3E 0A       		 LD A,10   ;VID MEM RAM	;VID MEM RAM
122)   00CE 06 40       		 LD B,2.SHL.5  	;
123)   00D0 ED 79       		 OUT (C),A  	;
125)   00D2 3E 0B       		 LD A,11   ;VID MEM RAM	;VID MEM RAM
126)   00D4 06 60       		 LD B,3.SHL.5  	;
127)   00D6 ED 79       		 OUT (C),A  	;
129)   00D8 3E 04       		 LD A,4	;
130)   00DA 06 80       		 LD B,4.SHL.5	;
131)   00DC ED 79       		 OUT (C),A  	;
132)   00DE 3C          		 INC A	;
133)   00DF 06 A0       		 LD B,5.SHL.5	;
134)   00E1 ED 79       		 OUT (C),A  	;
135)   00E3 3C          		 INC A	;
136)   00E4 06 C0       		 LD B,6.SHL.5	;
137)   00E6 ED 79       		 OUT (C),A  	;
138)   00E8 3C          		 INC A	;
139)   00E9 06 E0       		 LD B,7.SHL.5	;
140)   00EB ED 79       		 OUT (C),A 	;
141)   00ED CD 49 00    		 CALL SETUPVARS	;
142)   00F0 CD 57 05    		 CALL INITMMU       ;PUT PAGES 0..7 IN RAM BANKS 0..7  	;PUT PAGES 0..7 IN RAM BANKS 0..7
143)   00F3 21 38 00    		 LD HL,MYMMUBANK	;
144)   00F6 11 1D F0    		 LD DE,BANKS	;
145)   00F9 01 08 00    		 LD BC,8	;
146)   00FC ED B0       		 LDIR        ;TO RAM PAGE 7 OS VARS	;TO RAM PAGE 7 OS VARS
148)   00FE 3E 01       		 LD A, 1 ;12        ;12=9600 BPS, 1=115200BPS	;12        ;12=9600 BPS, 1=115200BPS
149)   0100 CD 8E 05    		 CALL RS_INI        ;RS232 INITIALIZE	;RS232 INITIALIZE
150)   0103 CD C0 05    		 CALL RS_MESG	;
151)   0106 53 45 52 49 		 DEFM "SERIAL INITIALIZED OK"	;
151)   010A 41 4C 20 49 		 DEFM "SERIAL INITIALIZED OK"	;
151)   010E 4E 49 54 49 		 DEFM "SERIAL INITIALIZED OK"	;
151)   0112 41 4C 49 5A 		 DEFM "SERIAL INITIALIZED OK"	;
151)   0116 45 44 20 4F 		 DEFM "SERIAL INITIALIZED OK"	;
151)   011A 4B          		 DEFM "SERIAL INITIALIZED OK"	;
152)   011B 0A 0D 00    		 DB 10,13,0	;
153)   011E F3          		 DI	;
155)   011F 3E 06       		 LD A,6	;
156)   0121 CD DC 07    		 CALL STRG_INIT	;
157)   0124 28 1F       		 JR Z, STINIOK	;
158)   0126 CD C0 05    		 CALL RS_MESG	;
159)   0129 45 52 52 4F 		 DEFM "ERROR INITILIZING CH376S"	;
159)   012D 52 20 49 4E 		 DEFM "ERROR INITILIZING CH376S"	;
159)   0131 49 54 49 4C 		 DEFM "ERROR INITILIZING CH376S"	;
159)   0135 49 5A 49 4E 		 DEFM "ERROR INITILIZING CH376S"	;
159)   0139 47 20 43 48 		 DEFM "ERROR INITILIZING CH376S"	;
159)   013D 33 37 36 53 		 DEFM "ERROR INITILIZING CH376S"	;
160)   0141 0A 0D 00    		 DB 10,13,0	;
161)   0144 76          		 HALT	;
162)   0145 CD C0 05    		STINIOK: CALL RS_MESG	;
163)   0148 53 54 4F 52 		 DEFM "STORAGE DEVICE OK"	;
163)   014C 41 47 45 20 		 DEFM "STORAGE DEVICE OK"	;
163)   0150 44 45 56 49 		 DEFM "STORAGE DEVICE OK"	;
163)   0154 43 45 20 4F 		 DEFM "STORAGE DEVICE OK"	;
163)   0158 4B          		 DEFM "STORAGE DEVICE OK"	;
164)   0159 0A 0D 00    		 DB 10,13,0	;
165)   015C 3E 06       		 LD A,6    ;USB DRIVE	;USB DRIVE
166)   015E CD 38 08    		 CALL STRG_OPENCRD  ;MOUNT THE DRIVE	;MOUNT THE DRIVE
167)   0161 28 22       		 JR Z, STOPNOK	;
168)   0163 CD C0 05    		 CALL RS_MESG	;
169)   0166 45 52 52 4F 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   016A 52 20 4D 4F 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   016E 55 4E 54 49 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   0172 4E 47 20 54 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   0176 48 45 20 44 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   017A 52 49 56 45 		 DEFM "ERROR MOUNTING THE DRIVE"	;
170)   017E 0A 0D 00    		 DB 10,13,0	;
171)   0181 76          		 HALT	;
172)   0182 C3 82 01    		 JP $	;
173)   0185 CD 43 08    		STOPNOK: CALL STRG_PRDRVINFO ;PRINT DRIVE INFO	;PRINT DRIVE INFO
174)   0188 CD 0D 06    		 CALL RS_NEWLINE	;
175)   018B CD 54 00    		 CALL INITVGA	;
183)   018E 21 09 00    		 LD HL,OSVERMES	;
184)   0191 CD AE 00    		 CALL OS_PRINTTEXT	;
190)   0194 21 42 05    		 LD HL,BFILEINI	;
191)   0197 01 A0 0F    		 LD BC,4000  ;MAX BYTES OF FILE	;MAX BYTES OF FILE
192)   019A 11 BC F0    		 LD DE,FILEBUFFER 	;
193)   019D CD 2A 0A    		 CALL STRG_LOADFILE	;
194)   01A0 30 1D       		 JR NC, FILOK	;
195)   01A2 CD C0 05    		 CALL RS_MESG	;
196)   01A5 45 52 52 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01A9 52 20 4C 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01AD 41 44 49 4E 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01B1 47 20 42 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01B5 4F 54 2E 49 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01B9 4E 49       		 DEFM "ERROR LOADING BOOT.INI"	;
197)   01BB 0D 0A 00    		 DB 13,10,0	;
198)   01BE 76          		 HALT	;
211)   01BF ED 43 1B F0 		FILOK: LD (FILEBTCNT),BC	;
212)   01C3 21 BC F0    		 LD HL,FILEBUFFER	;
213)   01C6 09          		 ADD HL,BC	;
214)   01C7 23          		 INC HL	;
215)   01C8 36 00       		 LD (HL),0	;
216)   01CA 21 BC F0    		 LD HL,FILEBUFFER	;
217)   01CD CD 03 05    		 CALL FINDSECTION	;
218)   01D0 50 41 47 45 		 DEFM "PAGES"	;
218)   01D4 53          		 DEFM "PAGES"	;
219)   01D5 00          		 DB 0	;
220)   01D6 30 1E       		 JR NC, PRG_NXT1	;
221)   01D8 CD C0 05    		 CALL RS_MESG	;
222)   01DB 45 52 52 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01DF 52 20 5B 50 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01E3 41 47 45 53 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01E7 5D 2E 4E 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01EB 54 2E 46 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01EF 55 4E 44    		 DEFM "ERROR [PAGES] NOT FOUND"	;
223)   01F2 0D 0A 00    		 DB 13,10,0	;
224)   01F5 76          		 HALT	;
225)   01F6 CD 88 04    		PRG_NXT1: CALL AN_PAGES	;
226)   01F9 21 BC F0    		 LD HL,FILEBUFFER	;
227)   01FC CD 03 05    		 CALL FINDSECTION	;
228)   01FF 46 49 4C 45 		 DEFM "FILES"	;
228)   0203 53          		 DEFM "FILES"	;
229)   0204 00          		 DB 0	;
230)   0205 30 1E       		 JR NC, PRG_NXT2	;
231)   0207 CD C0 05    		 CALL RS_MESG	;
232)   020A 45 52 52 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   020E 52 20 5B 46 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   0212 49 4C 45 53 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   0216 5D 2E 4E 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   021A 54 2E 46 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   021E 55 4E 44    		 DEFM "ERROR [FILES] NOT FOUND"	;
233)   0221 0D 0A 00    		 DB 13,10,0	;
234)   0224 76          		 HALT	;
235)   0225 CD 05 04    		PRG_NXT2: CALL LD_FILE	;
244)   0228 21 BC F0    		 LD HL,FILEBUFFER	;
245)   022B CD 03 05    		 CALL FINDSECTION	;
246)   022E 42 41 4E 4B 		 DEFM "BANKS"	;
246)   0232 53          		 DEFM "BANKS"	;
247)   0233 00          		 DB 0	;
248)   0234 30 1E       		 JR NC, PRG_NXT3	;
249)   0236 CD C0 05    		 CALL RS_MESG	;
250)   0239 45 52 52 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
250)   023D 52 20 5B 42 		 DEFM "ERROR [BANKS] NOT FOUND"	;
250)   0241 41 4E 4B 53 		 DEFM "ERROR [BANKS] NOT FOUND"	;
250)   0245 5D 2E 4E 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
250)   0249 54 2E 46 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
250)   024D 55 4E 44    		 DEFM "ERROR [BANKS] NOT FOUND"	;
251)   0250 0D 0A 00    		 DB 13,10,0	;
252)   0253 76          		 HALT	;
253)   0254 CD A5 03    		PRG_NXT3: CALL DO_BANKS	;
254)   0257 CD C0 05    		 CALL RS_MESG	;
255)   025A 42 41 4E 4B 		 DEFM "BANKS SAVED"	;
255)   025E 53 20 53 41 		 DEFM "BANKS SAVED"	;
255)   0262 56 45 44    		 DEFM "BANKS SAVED"	;
256)   0265 0D 0A 00    		 DB 13,10,0	;
257)   0268 21 BC F0    		 LD HL,FILEBUFFER	;
258)   026B CD 03 05    		 CALL FINDSECTION	;
259)   026E 45 58 45 43 		 DEFM "EXECBNK"	;
259)   0272 42 4E 4B    		 DEFM "EXECBNK"	;
260)   0275 00          		 DB 0	;
261)   0276 30 20       		 JR NC, PRG_NXT4	;
262)   0278 CD C0 05    		 CALL RS_MESG	;
263)   027B 45 52 52 4F 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   027F 52 20 5B 45 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   0283 58 45 43 42 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   0287 4E 4B 5D 2E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   028B 4E 4F 54 2E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   028F 46 4F 55 4E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   0293 44          		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
264)   0294 0D 0A 00    		 DB 13,10,0	;
265)   0297 76          		 HALT	;
266)   0298 CD D1 03    		PRG_NXT4: CALL DO_EXEC	;
267)   029B CD C0 05    		 CALL RS_MESG	;
268)   029E 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02A2 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02A6 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02AA 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02AE 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02B2 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02B6 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02BA 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02BE 2A 2A 2A    		 DEFM "***********************************"	;
269)   02C1 0D 0A       		 DB 13,10	;
270)   02C3 45 58 45 43 		 DEFM "EXECUTING..."	;
270)   02C7 55 54 49 4E 		 DEFM "EXECUTING..."	;
270)   02CB 47 2E 2E 2E 		 DEFM "EXECUTING..."	;
271)   02CF 0D 0A 00    		 DB 13,10,0	;
284)   02D2 0E 06       		 LD C,6	;
285)   02D4 21 01 F0    		PRG_NXTBNK: LD HL,OSBANKS	;
286)   02D7 06 00       		 LD B,0  	;
287)   02D9 09          		 ADD HL,BC	;
288)   02DA 41          		 LD B,C	;
289)   02DB 7E          		 LD A,(HL)	;
290)   02DC CD 31 03    		 CALL PUTTOBANKSV	;
291)   02DF 0D          		 DEC C	;
292)   02E0 20 F2       		 JR NZ,PRG_NXTBNK	;
293)   02E2 31 00 70    		 LD SP,$7000  ;NEW SP BANK 3 IS RAM ALWAYS	;NEW SP BANK 3 IS RAM ALWAYS
294)   02E5 21 01 F0    		 LD HL,OSBANKS	;
295)   02E8 7E          		 LD A,(HL)	;
296)   02E9 5F          		 LD E,A   ;PAGE TO BANK 0  	;PAGE TO BANK 0
297)   02EA D5          		 PUSH DE   ;PUSH 0 BANK PAGE	;PUSH 0 BANK PAGE
298)   02EB CD C0 05    		 CALL RS_MESG	;
299)   02EE 45 58 45 43 		 DEFM "EXEC BANK="	;
299)   02F2 20 42 41 4E 		 DEFM "EXEC BANK="	;
299)   02F6 4B 3D       		 DEFM "EXEC BANK="	;
300)   02F8 00          		 DB 0	;
301)   02F9 3A 09 F0    		 LD A,(EXBANK)  ;THE BANK TO EXECUTE OS ENTRY POINT 	;THE BANK TO EXECUTE OS ENTRY POINT
302)   02FC CD C8 04    		 CALL PRNNUM	;
303)   02FF F5          		 PUSH AF   ;PUSH EXECUTE BANK 	;PUSH EXECUTE BANK
304)   0300 21 08 F0    		 LD HL,OSBANKS+7	;
305)   0303 7E          		 LD A,(HL)  ;PAGE TO BANK 7 	;PAGE TO BANK 7
306)   0304 06 07       		 LD B,7   	;
307)   0306 CD 48 03    		 CALL PUTTOBANK  ;NO MORE PARAMS ON PAGE 7   	;NO MORE PARAMS ON PAGE 7
309)   0309 11 00 60    		 LD DE,$6000	;
310)   030C 21 3D 03    		 LD HL,CPPUTTOBANK	;
311)   030F 01 2B 00    		 LD BC, ENPUTTOBANK-CPPUTTOBANK+1	;
312)   0312 ED B0       		 LDIR   ;TRANSFER CODE TO RAM	;TRANSFER CODE TO RAM
313)   0314 E1          		 POP HL   ;POP EXECUTE BANK H=A	;POP EXECUTE BANK H=A
314)   0315 AF          		 XOR A  	;
315)   0316 CB 24       		 SLA H   ;5 SHIFTS TO TRANSLATE BANK TO ADDRESS	;5 SHIFTS TO TRANSLATE BANK TO ADDRESS
316)   0318 CB 24       		 SLA H	;
317)   031A CB 24       		 SLA H	;
318)   031C CB 24       		 SLA H	;
319)   031E CB 24       		 SLA H	;
320)   0320 2E 00       		  LD L,0	;
321)   0322 11 01 60    		 LD DE,$6001	;
322)   0325 7D          		 LD A,L	;
323)   0326 12          		 LD (DE),A	;
324)   0327 13          		 INC DE	;
325)   0328 7C          		 LD A,H	;
326)   0329 12          		 LD (DE),A	;
335)   032A D1          		 POP DE   ;GET BANK 0 PAGE	;GET BANK 0 PAGE
336)   032B 7B          		 LD A,E   ;PUT PAGE OF BANK 0 TO A	;PUT PAGE OF BANK 0 TO A
337)   032C 06 00       		 LD B,0   ;BANK 0	;BANK 0
338)   032E C3 00 60    		 JP $6000  ;EXEC CODE IN RAM	;EXEC CODE IN RAM
344)   0331 21 1D F0    		PUTTOBANKSV: LD HL, BANKS	;
345)   0334 16 00       		 LD D,0	;
346)   0336 58          		 LD E,B	;
347)   0337 19          		 ADD HL,DE	;
348)   0338 77          		 LD (HL),A  ;SAVE PAGE TO BANK NO ON BANKS	;SAVE PAGE TO BANK NO ON BANKS
349)   0339 CD 48 03    		 CALL PUTTOBANK	;
350)   033C C9          		 RET	;
353)   033D 21 00 00    		CPPUTTOBANK:   LD HL,0000  ;CHANGE 0000 TO THE EXEC VALUE             	;CHANGE 0000 TO THE EXEC VALUE
354)   0340 CD 0B 60    		 CALL 24576+PUTTOBANK-CPPUTTOBANK  ;$6000=24576 	;$6000=24576
355)   0343 3E 01       		 LD A,1	;
356)   0345 D3 63       		 OUT (99),A  ;FOR TEST    	;FOR TEST
357)   0347 E9          		 JP (HL)	;
360)   0348 C5          		PUTTOBANK: PUSH BC	;
361)   0349 0E 00       		 LD C,DEVMMU	;
363)   034B CB 20       		 SLA B	;
364)   034D CB 20       		 SLA B	;
365)   034F CB 20       		 SLA B	;
366)   0351 CB 20       		 SLA B	;
367)   0353 CB 20       		 SLA B 	;
368)   0355 F5          		 PUSH AF	;
369)   0356 CD C8 04    		 CALL PRNNUM	;
370)   0359 3E 3E       		 LD A,'>'	;
371)   035B CD A7 05    		 CALL RS_TX	;
372)   035E 78          		 LD A,B	;
373)   035F CD C8 04    		 CALL PRNNUM	;
374)   0362 F1          		 POP AF	;
375)   0363 ED 79       		 OUT (C),A	;
376)   0365 C1          		 POP BC	;
377)   0366 C9          		 RET	;
379)   0367 00          		ENPUTTOBANK: NOP	;
381)   0368 5C 45 50 52 		EPRM: DEFM "\EPRM.BIN"  	;
381)   036C 4D 2E 42 49 		EPRM: DEFM "\EPRM.BIN"  	;
381)   0370 4E          		EPRM: DEFM "\EPRM.BIN"  	;
382)   0371 00          		 DEFB 0	;
384)   0372 5C 45 50 52 		EPRM2: DEFM "\EPRM2.BIN"  	;
384)   0376 4D 32 2E 42 		EPRM2: DEFM "\EPRM2.BIN"  	;
384)   037A 49 4E       		EPRM2: DEFM "\EPRM2.BIN"  	;
385)   037C 00          		 DEFB 0	;
387)   037D 5C 45 50 52 		EPRM3: DEFM "\EPRM3.BIN"  	;
387)   0381 4D 33 2E 42 		EPRM3: DEFM "\EPRM3.BIN"  	;
387)   0385 49 4E       		EPRM3: DEFM "\EPRM3.BIN"  	;
388)   0387 00          		 DEFB 0	;
392)   0388 5C          		ROOTDIR: DEFM "\" 	;
393)   0389 00          		 DEFB 0	;
397)   038A E5          		DUMPMEM: PUSH HL	;
399)   038B 21 68 03    		DR_OPDIROK: LD HL,EPRM	;
401)   038E D1          		 POP DE	;
402)   038F CD 47 0B    		 CALL STRG_SAVEFILE	;
403)   0392 C9          		 RET	;
405)   0393 E5          		DUMPMEM2: PUSH HL	;
407)   0394 21 72 03    		DR_OPDIROK: LD HL,EPRM2	;
409)   0397 D1          		 POP DE	;
410)   0398 CD 47 0B    		 CALL STRG_SAVEFILE	;
411)   039B C9          		 RET  	;
413)   039C E5          		DUMPMEM3: PUSH HL	;
415)   039D 21 7D 03    		DR_OPDIROK: LD HL,EPRM3	;
417)   03A0 D1          		 POP DE	;
418)   03A1 CD 47 0B    		 CALL STRG_SAVEFILE	;
419)   03A4 C9          		 RET  	;
424)   03A5 CD C0 05    		DO_BANKS: CALL RS_MESG	;
425)   03A8 5B 42 41 4E 		 DEFM "[BANKS]"	;
425)   03AC 4B 53 5D    		 DEFM "[BANKS]"	;
426)   03AF 0D 0A 00    		 DB 13,10,0	;
427)   03B2 11 01 F0    		 LD DE,OSBANKS	;
428)   03B5 06 08       		 LD B,8	;
429)   03B7 C5          		NXTBNK: PUSH BC	;
430)   03B8 D5          		 PUSH DE	;
431)   03B9 CD 68 04    		 CALL GETSTRNUM	;
432)   03BC CD 25 05    		 CALL SKIPNL	;
433)   03BF E5          		 PUSH HL	;
434)   03C0 21 0A F0    		 LD HL,NUMSTR	;
435)   03C3 CD BB 14    		 CALL strtob	;
436)   03C6 E1          		 POP HL	;
437)   03C7 D1          		 POP DE	;
438)   03C8 CD C8 04    		 CALL PRNNUM	;
439)   03CB 12          		 LD (DE),A	;
440)   03CC 13          		 INC DE	;
441)   03CD C1          		 POP BC	;
442)   03CE 10 E7       		 DJNZ NXTBNK	;
443)   03D0 C9          		 RET	;
445)   03D1 CD C0 05    		DO_EXEC: CALL RS_MESG	;
446)   03D4 5B 45 58 45 		 DEFM "[EXEC]"	;
446)   03D8 43 5D       		 DEFM "[EXEC]"	;
447)   03DA 0D 0A 00    		 DB 13,10,0	;
448)   03DD CD 68 04    		 CALL GETSTRNUM	;
449)   03E0 21 0A F0    		 LD HL,NUMSTR	;
450)   03E3 CD BB 14    		 CALL strtob	;
451)   03E6 CD C8 04    		 CALL PRNNUM	;
452)   03E9 32 09 F0    		 LD (EXBANK),A	;
453)   03EC C9          		 RET	;
456)   03ED 11 0D F0    		COPYOSFILE: LD DE,OSFNAME	;
457)   03F0 7E          		COPYOSFILE1: LD A,(HL)	;
458)   03F1 FE 0D       		 CP 13	;
459)   03F3 28 0D       		 JR Z, LDF_EXIT	;
460)   03F5 FE 0A       		 CP 10	;
461)   03F7 28 09       		 JR Z, LDF_EXIT	;
462)   03F9 FE 00       		 CP 0	;
463)   03FB 28 05       		 JR Z, LDF_EXIT	;
464)   03FD 12          		 LD (DE),A	;
465)   03FE 13          		 INC DE	;
466)   03FF 23          		 INC HL	;
467)   0400 18 EE       		 JR COPYOSFILE1;	;
468)   0402 AF          		LDF_EXIT: XOR A	;
469)   0403 12          		 LD (DE),A	;
470)   0404 C9          		 RET	;
472)   0405 CD C0 05    		LD_FILE: CALL RS_MESG	;
473)   0408 5B 46 49 4C 		 DEFM "[FILES]"	;
473)   040C 45 53 5D    		 DEFM "[FILES]"	;
474)   040F 0D 0A 00    		 DB 13,10,0	;
475)   0412 06 01       		 LD B,1   ;START FROM BANK 1 ;2 FOR TESTING	;START FROM BANK 1 ;2 FOR TESTING
476)   0414 CD ED 03    		 CALL COPYOSFILE	;
477)   0417 21 0D F0    		 LD HL,OSFNAME	;
478)   041A 01 00 80    		 LD BC,32768  ;MAX BYTES OF FILE IS 4 PAGES	;MAX BYTES OF FILE IS 4 PAGES
479)   041D 11 00 20    		 LD DE,$2000  ;$2000 FOR REAL	;$2000 FOR REAL
480)   0420 CD 2A 0A    		 CALL STRG_LOADFILE	;
481)   0423 30 1B       		 JR NC, LDFILOK	;
482)   0425 CD C0 05    		 CALL RS_MESG	;
483)   0428 45 52 52 4F 		 DEFM "ERROR LOADING OSFILE"	;
483)   042C 52 20 4C 4F 		 DEFM "ERROR LOADING OSFILE"	;
483)   0430 41 44 49 4E 		 DEFM "ERROR LOADING OSFILE"	;
483)   0434 47 20 4F 53 		 DEFM "ERROR LOADING OSFILE"	;
483)   0438 46 49 4C 45 		 DEFM "ERROR LOADING OSFILE"	;
484)   043C 0D 0A 00    		 DB 13,10,0	;
485)   043F C9          		 RET	;
486)   0440 CD C0 05    		LDFILOK: CALL RS_MESG	;
487)   0443 4F 53 20 46 		 DEFM "OS FILE LOADED!!!"	;
487)   0447 49 4C 45 20 		 DEFM "OS FILE LOADED!!!"	;
487)   044B 4C 4F 41 44 		 DEFM "OS FILE LOADED!!!"	;
487)   044F 45 44 21 21 		 DEFM "OS FILE LOADED!!!"	;
487)   0453 21          		 DEFM "OS FILE LOADED!!!"	;
488)   0454 0D 0A 00    		 DB 13,10,0	;
497)   0457 21 39 00    		 LD HL, MYMMUBANK+1	;
498)   045A 06 01       		 LD B,1 ;START WITH BANK 1	;START WITH BANK 1
499)   045C 0E 04       		 LD C,4  ;PUT 4 BANKS	;PUT 4 BANKS
500)   045E 7E          		LDF_AGN1: LD A,(HL) ;GET DEFAULT PAGE FOR BOOTL   	;GET DEFAULT PAGE FOR BOOTL
501)   045F CD 31 03    		 CALL PUTTOBANKSV	;
502)   0462 23          		 INC HL	;
503)   0463 04          		 INC B	;
504)   0464 0D          		 DEC C	;
505)   0465 20 F7       		 JR NZ, LDF_AGN1	;
507)   0467 C9          		 RET	;
510)   0468 11 0A F0    		GETSTRNUM: LD DE,NUMSTR	;
511)   046B 7E          		GETSTRNUM1: LD A,(HL)	;
513)   046C FE 2C       		 CP ','	;
514)   046E 28 15       		 JR Z,GS_FIN	;
515)   0470 FE 3D       		 CP '='	;
516)   0472 28 11       		 JR Z,GS_FIN	;
517)   0474 FE 00       		 CP 0	;
518)   0476 28 0D       		 JR Z,GS_FIN	;
519)   0478 FE 0D       		 CP 13	;
520)   047A 28 09       		 JR Z,GS_FIN	;
521)   047C FE 0A       		 CP 10	;
522)   047E 28 05       		 JR Z,GS_FIN	;
523)   0480 12          		 LD (DE),A	;
524)   0481 13          		 INC DE	;
525)   0482 23          		 INC HL	;
526)   0483 18 E6       		 JR GETSTRNUM1	;
527)   0485 AF          		GS_FIN: XOR A	;
528)   0486 12          		 LD (DE),A  	;
529)   0487 C9          		 RET  	;
532)   0488 CD C0 05    		AN_PAGES: CALL RS_MESG	;
533)   048B 5B 50 41 47 		 DEFM "[PAGES]"	;
533)   048F 45 53 5D    		 DEFM "[PAGES]"	;
534)   0492 0D 0A 00    		 DB 13,10,0	;
535)   0495 06 01       		 LD B,1   ;START FROM BANK 1 ;$2000	;START FROM BANK 1 ;$2000
536)   0497 CD 68 04    		NXT_PG: CALL GETSTRNUM	;
537)   049A E5          		 PUSH HL	;
538)   049B C5          		 PUSH BC	;
539)   049C 21 0A F0    		 LD HL,NUMSTR	;
540)   049F CD B6 05    		 CALL RS_TXT	;
541)   04A2 3E 2D       		 LD A,'-'	;
542)   04A4 CD A7 05    		 CALL RS_TX	;
543)   04A7 21 0A F0    		 LD HL,NUMSTR	;
544)   04AA CD BB 14    		 CALL strtob  ;A HAS THE PAGE TO PUT ON BANK 1,2,3,ETC	;A HAS THE PAGE TO PUT ON BANK 1,2,3,ETC
545)   04AD C1          		 POP BC	;
546)   04AE CD 31 03    		 CALL PUTTOBANKSV	;
547)   04B1 04          		 INC B	;
548)   04B2 C5          		 PUSH BC	;
549)   04B3 CD 6A 15    		 CALL PRINTNUM	;
550)   04B6 C1          		 POP BC	;
551)   04B7 E1          		 POP HL	;
552)   04B8 7E          		 LD A,(HL)	;
553)   04B9 FE 2C       		 CP ','	;
554)   04BB 23          		 INC HL	;
555)   04BC 28 D9       		 JR Z,NXT_PG	;
556)   04BE C9          		 RET	;
560)   04BF 7E          		FINDCHAR: LD A,(HL) 	;
561)   04C0 B8          		 CP B	;
562)   04C1 C8          		 RET Z	;
563)   04C2 FE 00       		 CP 0	;
564)   04C4 C8          		 RET Z	;
565)   04C5 23          		 INC HL	;
566)   04C6 18 F7       		 JR FINDCHAR	;
571)   04C8 F5          		PRNNUM: PUSH AF	;
572)   04C9 E5          		 PUSH HL	;
573)   04CA C5          		 PUSH BC	;
574)   04CB D5          		 PUSH DE	;
575)   04CC CD 6A 15    		 CALL PRINTNUM	;
576)   04CF D1          		 POP DE	;
577)   04D0 C1          		 POP BC	;
578)   04D1 E1          		 POP HL	;
579)   04D2 F1          		 POP AF	;
580)   04D3 C9          		 RET	;
583)   04D4 F5          		PRNCHAR: PUSH AF	;
584)   04D5 E5          		 PUSH HL	;
585)   04D6 C5          		 PUSH BC	;
586)   04D7 D5          		 PUSH DE	;
587)   04D8 CD A7 05    		 CALL RS_TX	;
588)   04DB F5          		 PUSH AF	;
589)   04DC 3E 3D       		 LD A,'='	;
590)   04DE CD A7 05    		 CALL RS_TX	;
591)   04E1 F1          		 POP AF	;
592)   04E2 CD 6A 15    		 CALL PRINTNUM	;
593)   04E5 D1          		 POP DE	;
594)   04E6 C1          		 POP BC	;
595)   04E7 E1          		 POP HL	;
596)   04E8 F1          		 POP AF	;
597)   04E9 C9          		 RET	;
602)   04EA 1A          		STRCMP: LD A,(DE) ;STRING TO FIND CHAR	;STRING TO FIND CHAR
603)   04EB FE 00       		 CP 0  ;KEYWD ENDED	;KEYWD ENDED
604)   04ED 28 09       		 JR Z,STRFOUND	;
605)   04EF 47          		 LD B,A	;
606)   04F0 7E          		 LD A,(HL) ;STRING TESTING CHAR	;STRING TESTING CHAR
607)   04F1 B8          		 CP B	;
608)   04F2 20 06       		 JR NZ,STRNOTFOUND	;
609)   04F4 13          		 INC DE	;
610)   04F5 23          		 INC HL	;
611)   04F6 18 F2       		 JR STRCMP	;
612)   04F8 AF          		STRFOUND: XOR A ;CLEAR CARRY	;CLEAR CARRY
613)   04F9 C9          		 RET	;
614)   04FA 37          		STRNOTFOUND: SCF	;
615)   04FB C9          		 RET  	;
617)   04FC 1A          		FNDRETADDR: LD A,(DE)	;
618)   04FD 13          		 INC DE	;
619)   04FE FE 00       		 CP 0  	;
620)   0500 C8          		 RET Z	;
621)   0501 18 F9       		 JR FNDRETADDR	;
625)   0503 D1          		FINDSECTION:   POP DE	;
626)   0504 D5          		 PUSH DE	;
627)   0505 CD 2C 05    		 CALL FINDASECTION	;
628)   0508 30 10       		 JR NC,SECFOUND	;
629)   050A D1          		 POP DE	;
630)   050B 7E          		 LD A,(HL)	;
631)   050C FE 00       		 CP 0	;
632)   050E 28 04       		 JR Z, SECNOEXIST ;END OF TEXT FILE REACHED	;END OF TEXT FILE REACHED
633)   0510 23          		 INC HL	;
634)   0511 D5          		 PUSH DE	;
635)   0512 18 EF       		 JR FINDSECTION ;KEEP SEARCHING	;KEEP SEARCHING
636)   0514 CD FC 04    		SECNOEXIST:    CALL FNDRETADDR	;
637)   0517 D5          		 PUSH DE	;
638)   0518 37          		 SCF	;
639)   0519 C9          		 RET	;
641)   051A 23          		SECFOUND: INC HL ;SKIP ']'	;SKIP ']'
642)   051B CD 25 05    		 CALL SKIPNL	;
643)   051E D1          		 POP DE	;
644)   051F CD FC 04    		 CALL FNDRETADDR	;
645)   0522 D5          		 PUSH DE	;
646)   0523 AF          		 XOR A	;
647)   0524 C9          		 RET	;
651)   0525 7E          		SKIPNL: LD A,(HL)	;
652)   0526 FE 1F       		 CP 31	;
653)   0528 D0          		 RET NC	;
654)   0529 23          		 INC HL	;
655)   052A 18 F9       		 JR SKIPNL	;
659)   052C 06 5B       		FINDASECTION: LD B,'['	;
660)   052E CD BF 04    		 CALL FINDCHAR	;
661)   0531 B7          		 OR A	;
662)   0532 28 0C       		 JR Z,ASECTNOTFND   ;NOT FOUND IF A=0 	;NOT FOUND IF A=0
663)   0534 23          		 INC HL ;HL POINTS TO THE STRING INSIDE []  	;HL POINTS TO THE STRING INSIDE []
664)   0535 CD EA 04    		 CALL STRCMP	;
665)   0538 D8          		 RET C	;
667)   0539 7E          		 LD A,(HL)	;
668)   053A FE 5D       		 CP ']'	;
669)   053C 20 02       		 JR NZ, ASECTNOTFND ;MORE LETTERS ON SECTION	;MORE LETTERS ON SECTION
670)   053E AF          		 XOR A  ;CLR CF	;CLR CF
671)   053F C9          		 RET	;
672)   0540 37          		ASECTNOTFND: SCF	;
673)   0541 C9          		 RET 	;
675)   0542 5C 42 4F 4F 		BFILEINI DEFM "\BOOT.INI"	;
675)   0546 54 2E 49 4E 		BFILEINI DEFM "\BOOT.INI"	;
675)   054A 49          		BFILEINI DEFM "\BOOT.INI"	;
676)   054B 00          		 DB 0	;
677)   054C 5C 46 4F 4E 		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
677)   0550 54 2E 43 48 		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
677)   0554 52          		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
678)   0555 00          		 DB 0	;
684)   F000 00          		BLSTACKP DEFS 1	;
687)   F001 00 00 00 00 		 OSBANKS DEFS 8	;
687)   F005 00 00 00 00 		 OSBANKS DEFS 8	;
688)   F009 00          		 EXBANK DEFS 1	;
689)   F00A 00 00 00    		 NUMSTR: DEFS 3	;
690)   F00D 00 00 00 00 		 OSFNAME DEFS 14	;
690)   F011 00 00 00 00 		 OSFNAME DEFS 14	;
690)   F015 00 00 00 00 		 OSFNAME DEFS 14	;
690)   F019 00 00       		 OSFNAME DEFS 14	;
691)   F01B 00 00       		 FILEBTCNT DEFS 2 	;
693)   F01D 00 00 00 00 		 @BANKS  DEFS 8       ;8 PAGES FOR THE 8 BANKS 0..7	;8 PAGES FOR THE 8 BANKS 0..7
693)   F021 00 00 00 00 		 @BANKS  DEFS 8       ;8 PAGES FOR THE 8 BANKS 0..7	;8 PAGES FOR THE 8 BANKS 0..7
694)   F025 00 00 00 00 		 @TMPG   DEFS 4  ;TEMP PAGE FOR VIDEO VGA	;TEMP PAGE FOR VIDEO VGA
695)   F029 00 00 00 00 		 @PGSEM DEFS 4  ;PAGE SEMAPHORES TO KEEP TRACK OF PAGE CALLS	;PAGE SEMAPHORES TO KEEP TRACK OF PAGE CALLS
698)   F02D 00          		 @SERERR DEFS 1       ;	;
700)   F02E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F032 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F036 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F03A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F03E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F042 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F046 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F04A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F04E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F052 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F056 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F05A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
700)   F05E 00 00       		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
701)   F060 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
701)   F064 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
701)   F068 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
701)   F06C 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
701)   F070 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
701)   F074 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
701)   F078 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
701)   F07C 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
701)   F080 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
701)   F084 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
705)   F088 00          		 @SCRNST DEFS 1       ;SCREEN STATUS BIT 0 ON/OFF LCD,BIT 1 ON/OFF VGA	;SCREEN STATUS BIT 0 ON/OFF LCD, BIT 1 ON/OFF VGA
706)   F089 00          		 @VGAFCOL DEFS 1  ;VGA FORE COLOR	;VGA FORE COLOR
707)   F08A 00          		 @VGABCOL DEFS 1  ;VGA BACK COLOR	;VGA BACK COLOR
708)   F08B 00          		 @VGATX_X DEFS 1  ;VGA CURRENT X POS	;VGA CURRENT X POS
709)   F08C 00          		 @VGATX_Y DEFS 1  ;VGA CUR Y POS	;VGA CUR Y POS
710)   F08D 00          		 @VGAMAXX DEFS 1  ;MAX HORZ CHARS	;MAX HORZ CHARS
711)   F08E 00          		 @VGAMAXY DEFS 1  ;MAX VERT LINES	;MAX VERT LINES
712)   F08F 00          		 @VGATMPC DEFS 1  ;TMP CHAR FOR CURSOR	;TMP CHAR FOR CURSOR
713)   F090 00          		 @VGABUF DEFS 1  ;BUFFER TO WRITE-BIT 0 TO SELECT	;BUFFER TO WRITE - BIT 0 TO SELECT
714)   F091 00 00       		 @VGASTADR DEFS 2  ;START ADDRESS TO CALCULATE TEXT OUTPUT	;START ADDRESS TO CALCULATE TEXT OUTPUT
717)   F093 00 00 00 00 		 @B2DINV DEFS 8  ;BINARY NUMBER TO BE CONVERTED	;BINARY NUMBER TO BE CONVERTED
717)   F097 00 00 00 00 		 @B2DINV DEFS 8  ;BINARY NUMBER TO BE CONVERTED	;BINARY NUMBER TO BE CONVERTED
718)   F09B 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
718)   F09F 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
718)   F0A3 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
718)   F0A7 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
718)   F0AB 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
719)   F0AF 00          		 @B2DEND DEFS 1  ;0 FOR TERMINATE THE STRING	;0 FOR TERMINATE THE STRING
720)   F0B0 00 00       		 @LINESTR: DEFS 2 ;ADDRESS OF LINEBUF FOR PRINTING ON STRING	;ADDRESS OF LINEBUF FOR PRINTING ON STRING
721)   F0B2 00          		 @LINEPOS DEFS 1	;
722)   F0B3 00          		 @RNDseed DEFS 1  ;RANDOM SEED	;RANDOM SEED
723)   F0B4 00 00 00 00 		 @NUMBUF DEFS 7	;
723)   F0B8 00 00 00    		 @NUMBUF DEFS 7	;
724)   F0BB 00          		 @STRG_STAT DEFS 1	;
726)   F0BC 00          		 FILEBUFFER DEFS 1 ;ALL EXTRA SPACE TO BE USED FOR LOADING BOOT.INI ***THIS IS LAST***	;ALL EXTRA SPACE TO BE USED FOR LOADING BOOT.INI ***THIS IS LAST***
730)   0556 00          		 NOP	;
 10)   0557 21 1D F0    		INITMMU:       LD HL,BANKS	;
 11)   055A 06 08       		               LD B,8	;
 12)   055C AF          		               XOR A	;
 13)   055D 77          		INM_AGN:       LD (HL),A	;
 14)   055E 3C          		               INC A	;
 15)   055F 23          		 INC HL	;
 16)   0560 10 FB       		               DJNZ INM_AGN	;
 17)   0562 C9          		               RET                	;
 23)   0563 4F          		PUTPGINBANK: LD C, A       ;SAVE PAGE	;SAVE PAGE
 24)   0564 78          		 LD A, B                                                         ;BANK IN A	;BANK IN A
 25)   0565 FE 02       		 CP 2	;
 26)   0567 D8          		 RET C         ;BANK 0,1 WILL NEVER CHANGE	;BANK 0,1 WILL NEVER CHANGE
 27)   0568 FE 07       		 CP 7	;
 28)   056A C8          		 RET Z         ;BANK 7 WILL NEVER CHANGE	;BANK 7 WILL NEVER CHANGE
 29)   056B 21 1D F0    		 LD HL, BANKS	;
 30)   056E 16 00       		 LD D, 0	;
 31)   0570 5F          		 LD E, A	;
 32)   0571 19          		 ADD HL, DE	;
 33)   0572 79          		 LD A, C        ;RESTORE PAGE	;RESTORE PAGE
 34)   0573 77          		 LD (HL), A        ;SAVE PG IN BANK B MEMORY	;SAVE PG IN BANK B MEMORY
 35)   0574 0E 00       		 LD C, DEVMMU	;
 36)   0576 58          		 LD E,B	;
 37)   0577 CB 20       		 SLA B         ;SHIFT BANK TO A15..A13 FROM A2..A0 WE USE THESE PINS ON THE CPLD FOR BANK INPUT	;SHIFT BANK TO A15..A13 FROM A2..A0 WE USE THESE PINS ON THE CPLD FOR BANK INPUT
 38)   0579 CB 20       		 SLA B	;
 39)   057B CB 20       		 SLA B	;
 40)   057D CB 20       		 SLA B	;
 41)   057F CB 20       		 SLA B         ;SET TO A15,A14,A13	;SET TO A15,A14,A13
 42)   0581 ED 79       		 OUT (C), A	;
 43)   0583 43          		 LD B,E	;
 44)   0584 C9          		 RET	;
 49)   0585 21 1D F0    		GETPGINBANK:   LD HL,BANKS	;
 50)   0588 16 00       		               LD D,0	;
 51)   058A 58          		               LD E,B	;
 52)   058B 19          		               ADD HL,DE	;
 53)   058C 7E          		               LD A,(HL)	;
 54)   058D C9          		               RET	;
 17)   058E 	            		 RBR EQU DEVSER+0      ;RECEIVER BUFFER REGISTER (READ ONLY) (DLAB = 0)	;RECEIVER BUFFER REGISTER (READ ONLY) (DLAB = 0)
 18)   058E 	            		 THR EQU DEVSER+0      ;TRANSMITER HOLDING REGISTER (WRITE ONLY) (DLAB = 0)	;TRANSMITER HOLDING REGISTER (WRITE ONLY) (DLAB = 0)
 19)   058E 	            		 IER EQU DEVSER+1      ;INTERRUPT ENABLE REGISTER (DLAB = 0)	;INTERRUPT ENABLE REGISTER (DLAB = 0)
 24)   058E 	            		 IIR EQU DEVSER+2      ;INTERRUPT IDENT. REGISTER (READ ONLY)	;INTERRUPT IDENT. REGISTER (READ ONLY)
 29)   058E 	            		 FCR EQU DEVSER+2      ;FIFO CONTROL REGISTER (WRITE ONLY)	;FIFO CONTROL REGISTER (WRITE ONLY)
 37)   058E 	            		 LCR EQU DEVSER+3      ;LINE CONTROL REGISTER	;LINE CONTROL REGISTER
 45)   058E 	            		 MCR EQU DEVSER+4      ;MODEM CONTROL REGISTER	;MODEM CONTROL REGISTER
 46)   058E 	            		 LSR EQU DEVSER+5      ;LINE STATUS REGISTER	;LINE STATUS REGISTER
 55)   058E 	            		 MSR EQU DEVSER+6      ;MODEM STATUS REGISTER	;MODEM STATUS REGISTER
 56)   058E 	            		 SCR EQU DEVSER+7      ;SCRATCH REGISTER	;SCRATCH REGISTER
 57)   058E 	            		 DLL EQU DEVSER+0      ;DIVISOR LATCH (LEAST SIGNIFICANT BYTE) (DLAB = 1)	;DIVISOR LATCH (LEAST SIGNIFICANT BYTE) (DLAB = 1)
 58)   058E 	            		 DLM EQU DEVSER+1      ;DIVISOR LATCH (MOST SIGNIFICANT BYTE) (DLAB = 1)	;DIVISOR LATCH (MOST SIGNIFICANT BYTE) (DLAB = 1)
 64)   058E F5          		RS_INI: PUSH AF	;
 65)   058F 3E 80       		 LD A, $80        ; Mask to set DLAB on	; Mask to set DLAB on
 66)   0591 D3 1B       		 OUT (LCR), A        ; Send to LINe Control Register	; Send to LINe Control Register
 75)   0593 F1          		 POP AF	;
 76)   0594 D3 18       		 OUT (DLL), A        ; Set LSB of divisor	; Set LSB of divisor
 77)   0596 3E 00       		 LD A, 00        ; This will be the MSB of the divisior	; This will be the MSB of the divisior
 78)   0598 D3 19       		 OUT (DLM), A        ; Send to the MSB register	; Send to the MSB register
 79)   059A 3E 03       		 LD A, $03        ; 8 bits, 1 stop, no parity (and clear DLAB)	; 8 bits, 1 stop, no parity (and clear DLAB)
 80)   059C D3 1B       		 OUT (LCR), A        ; Write new value to LCR	; Write new value to LCR
 82)   059E 3E 00       		 LD A, 0	;
 83)   05A0 D3 1A       		 OUT (FCR), A        ;//was commented	;//was commented
 84)   05A2 3E 00       		 LD A, $00        ; 5 A=0 Disable all INterrupts	; 5 A=0 Disable all INterrupts
 85)   05A4 D3 19       		 OUT (IER), A        ; Send to INterrupt Enable Register	; Send to INterrupt Enable Register
 86)   05A6 C9          		 RET	;
 89)   05A7 CD AD 05    		RS_TX: CALL RSTXRD	;
 90)   05AA D3 18       		 OUT (THR), A	;
 92)   05AC C9          		 RET	;
 95)   05AD F5          		RSTXRD: PUSH AF	;
 96)   05AE DB 1D       		RSTXLP: IN A, (LSR)        ; fetch the control register	; fetch the control register
 97)   05B0 CB 6F       		 BIT 5, A        ; bit will be set if UART is ready	; bit will be set if UART is ready
 98)   05B2 28 FA       		 JR Z, RSTXLP	;
 99)   05B4 F1          		 POP AF	;
100)   05B5 C9          		 RET	;
104)   05B6 7E          		RS_TXT: LD A, (HL)	;
105)   05B7 23          		 INC HL	;
106)   05B8 FE 00       		 CP 0	;
107)   05BA C8          		 RET Z	;
108)   05BB CD A7 05    		 CALL RS_TX	;
109)   05BE 18 F6       		 JR RS_TXT	;
113)   05C0 E5          		RS_MESG: PUSH HL	;
114)   05C1 C5          		 PUSH BC	;
115)   05C2 D5          		 PUSH DE	;
116)   05C3 F5          		 PUSH AF	;
117)   05C4 21 09 00    		 LD HL,9 ;POINTS TO RET ADDRESS +10 FROM SP = OUR STRING	;POINTS TO RET ADDRESS +10 FROM SP = OUR STRING
118)   05C7 39          		 ADD HL,SP	;
119)   05C8 46          		 LD B,(HL)    	;
120)   05C9 2B          		 DEC HL	;
121)   05CA 4E          		 LD C,(HL)	;
122)   05CB 60          		 LD H,B	;
123)   05CC 69          		 LD L,C	;
124)   05CD CD B6 05    		 CALL RS_TXT	;
125)   05D0 F1          		 POP AF	;
126)   05D1 D1          		 POP DE	;
127)   05D2 44          		 LD B,H  ;NEW RET ADDRESS	;NEW RET ADDRESS
128)   05D3 4D          		 LD C,L	;
129)   05D4 21 05 00    		 LD HL,5 ;POINTS TO RET ADDRESS +6 FROM SP	;POINTS TO RET ADDRESS +6 FROM SP
130)   05D7 39          		 ADD HL,SP  	;
131)   05D8 70          		 LD (HL),B	;
132)   05D9 2B          		 DEC HL	;
133)   05DA 71          		 LD (HL),C  	;
134)   05DB C1          		 POP BC	;
135)   05DC E1          		 POP HL	;
136)   05DD C9          		 RET 	;
142)   05DE F3          		RS_RX: DI	;
143)   05DF 3E 01       		 LD A, 1        ;ready to receive SIGNAL DSR 1	;ready to receive SIGNAL DSR 1
144)   05E1 D3 1C       		 OUT (MCR), A	;
145)   05E3 CD FC 05    		 CALL RSRXRD	;
146)   05E6 AF          		RS_GTCH: XOR A        ;NOT ready to receive SIGNAL DSR 0	;NOT ready to receive SIGNAL DSR 0
147)   05E7 D3 1C       		 OUT (MCR), A	;
149)   05E9 DB 18       		 IN A, (RBR)	;
150)   05EB FB          		 EI	;
151)   05EC C9          		 RET	;
153)   05ED 3E 01       		RS_RXNW: LD A, 1       ;ready to receive SIGNAL DSR 1	;ready to receive SIGNAL DSR 1
154)   05EF D3 1C       		 OUT (MCR), A	;
155)   05F1 DB 1D       		 IN A, (LSR)        ; fetch the conrtol register	; fetch the conrtol register
156)   05F3 CB 47       		 BIT 0, A	;
157)   05F5 28 03       		 JR Z, RS_NOCHAR	;
158)   05F7 F3          		 DI	;
159)   05F8 18 EC       		 JR RS_GTCH	;
160)   05FA AF          		RS_NOCHAR: XOR A        ;RETURN ZERO	;RETURN ZERO
161)   05FB C9          		 RET	;
169)   05FC F5          		 PUSH AF	;
175)   05FD DB 1D       		 IN A, (LSR)        ; fetch the control register	; fetch the control register
176)   05FF CB 47       		 BIT 0, A        ; bit will be set if UART has data	; bit will be set if UART has data
177)   0601 28 FA       		 JR Z, RSRXLP	;
179)   0603 F1          		 POP AF	;
181)   0604 C9          		 RET	;
185)   0605 DB 1D       		RS_KEYRD: IN A, (LSR)       ; fetch the conrtol register	; fetch the conrtol register
186)   0607 CB 47       		 BIT 0, A        ; bit will be set if UART has data	; bit will be set if UART has data
187)   0609 C9          		 RET	;
189)   060A F5          		SHLCD: PUSH AF	;
191)   060B F1          		 POP AF	;
193)   060C C9          		 RET	;
195)   060D F5          		RS_NEWLINE: PUSH AF	;
196)   060E 3E 0D       		 LD A,13	;
197)   0610 CD A7 05    		 CALL RS_TX	;
198)   0613 3E 0A       		 LD A,10	;
199)   0615 CD A7 05    		 CALL RS_TX	;
200)   0618 F1          		 POP AF	;
201)   0619 C9          		 RET  	;
204)   061A F5          		CHKERR: PUSH AF	;
205)   061B E5          		 PUSH HL	;
206)   061C C5          		 PUSH BC	;
207)   061D DB 1D       		 IN A, (LSR)        ;FETCH LINE STATUS REGISTER	;FETCH LINE STATUS REGISTER
208)   061F CB 67       		 BIT 4, A	;
209)   0621 28 04       		 JR Z, LBLPE	;
210)   0623 3E 42       		 LD A, 'B'       ;$20  ;BREAK	;$20  ;BREAK
211)   0625 18 1A       		 JR EXIT	;
212)   0627 CB 57       		LBLPE: BIT 2, A	;
213)   0629 28 04       		 JR Z, LBLFE	;
214)   062B 3E 50       		 LD A, 'P'       ;$40  ;PARITY	;$40  ;PARITY
215)   062D 18 12       		 JR EXIT	;
216)   062F CB 5F       		LBLFE: BIT 3, A	;
217)   0631 28 04       		 JR Z, LBLOE	;
218)   0633 3E 46       		 LD A, 'F'       ;$60  ;FRAME	;$60  ;FRAME
219)   0635 18 0A       		 JR EXIT	;
220)   0637 CB 4F       		LBLOE: BIT 1, A	;
221)   0639 28 04       		 JR Z, LBLNE	;
222)   063B 3E 4F       		 LD A, 'O'        ;$80  ;OVERRUN	;$80  ;OVERRUN
223)   063D 18 02       		 JR EXIT	;
224)   063F 3E 4E       		LBLNE: LD A, 'N'        ;NO ERROR	;NO ERROR
225)   0641 21 2D F0    		EXIT: LD HL, SERERR	;
226)   0644 77          		 LD (HL), A	;
228)   0645 C1          		 POP BC	;
229)   0646 E1          		 POP HL	;
230)   0647 F1          		 POP AF	;
231)   0648 C9          		 RET	;
  3)   0649 	            		INT376CMD EQU DEV376+1	;
  4)   0649 	            		INT376DAT EQU DEV376	;
 89)   0649 CD 27 07    		CH376_GETDATA: CALL CH376_DATARD	;
 90)   064C FE 00       		 CP 0	;
 91)   064E C8          		 RET Z   ;NO DATA AVAILABLE	;NO DATA AVAILABLE
 98)   064F F5          		               PUSH AF	;
 99)   0650 11 2E F0    		 LD DE,USBBUF	;
100)   0653 47          		 LD B,A	;
101)   0654 CD 27 07    		UDC_NXT1: CALL CH376_DATARD	;
103)   0657 12          		 LD (DE),A	;
104)   0658 13          		 INC DE	;
108)   0659 10 F9       		 DJNZ UDC_NXT1 	;
109)   065B F1          		               POP AF	;
110)   065C C9          		 RET	;
113)   065D F5          		DISKERROR: PUSH AF	;
114)   065E CD C0 05    		 CALL RS_MESG	;
115)   0661 46 41 54 41 		 DEFM "FATAL ERROR:" 	;
115)   0665 4C 20 45 52 		 DEFM "FATAL ERROR:" 	;
115)   0669 52 4F 52 3A 		 DEFM "FATAL ERROR:" 	;
116)   066D 00          		 DB 0  	;
117)   066E F1          		 POP AF	;
118)   066F CD 6A 15    		 CALL PRINTNUM	;
119)   0672 21 7E 06    		 LD HL,ERR_PART	;
120)   0675 FE 92       		 CP ERR_TYPE_ERROR	;
121)   0677 28 01       		 JR Z,PRNMES	;
122)   0679 C9          		 RET	;
123)   067A CD B6 05    		PRNMES: CALL RS_TXT 	;
124)   067D C9          		 RET	;
126)   067E 50 41 52 54 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0682 49 54 49 4F 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0686 4E 2E 4E 4F 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   068A 54 2E 53 55 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   068E 50 50 4F 52 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0692 54 45 44 21 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0696 21 21       		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
127)   0698 0A 0D 00    		 DB 10,13,0	;
136)   069B CD AB 06    		CH376_WTCMDEND: CALL CH376_WAITINT	;
137)   069E C0          		               RET NZ	;
138)   069F D8          		 RET C	;
139)   06A0 AF          		 XOR A	;
140)   06A1 CD CA 06    		 CALL CH376_GETSTAT	;
141)   06A4 FE 14       		 CP USB_INT_SUCCESS	;
142)   06A6 C8          		 RET Z	;
153)   06A7 06 02       		 LD B,2	;
154)   06A9 05          		 DEC B  ;NZ FLAG	;NZ FLAG
155)   06AA C9          		 RET	;
161)   06AB AF          		CH376_WAITINT: XOR A	;
162)   06AC 01 32 00    		 LD BC,50	;
163)   06AF CD 18 07    		C3AGN2: CALL CH376_INSTAT	;
164)   06B2 CB 7F       		 BIT 7,A	;
165)   06B4 C8          		 RET Z	;
166)   06B5 F5          		 PUSH AF	;
167)   06B6 C5          		 PUSH BC	;
168)   06B7 06 14       		 LD B,20	;
169)   06B9 CD 05 13    		 CALL DELAYMICRO	;
170)   06BC C1          		 POP BC	;
171)   06BD F1          		 POP AF	;
172)   06BE 0B          		 DEC BC	;
173)   06BF 5F          		 LD E,A	;
174)   06C0 78          		 LD A,B	;
175)   06C1 B1          		 OR C	;
176)   06C2 7B          		 LD A,E	;
177)   06C3 20 EA       		 JR NZ, C3AGN2  	;
182)   06C5 37          		 SCF ;TIMEOUT       	;TIMEOUT
183)   06C6 06 02       		 LD B,2	;
184)   06C8 05          		 DEC B  ;NZ FLAG	;NZ FLAG
185)   06C9 C9          		 RET	;
187)   06CA 3E 22       		CH376_GETSTAT: LD A,CMD_GET_STATUS	;
188)   06CC CD 0C 07    		 CALL CH376_COMMD	;
189)   06CF CD 27 07    		 CALL CH376_DATARD	;
190)   06D2 C9          		 RET	;
198)   06D3 01 C4 09    		CH376_CHOK: LD BC,2500	;
199)   06D6 CD 18 07    		C3AGN: CALL CH376_INSTAT	;
200)   06D9 CB 67       		 BIT 4,A   ;CHECK BUSY	;CHECK BUSY
201)   06DB C8          		 RET Z   	;
202)   06DC C5          		 PUSH BC	;
203)   06DD F5          		 PUSH AF	;
204)   06DE 06 32       		 LD B,50	;
205)   06E0 CD 05 13    		 CALL DELAYMICRO	;
206)   06E3 F1          		 POP AF	;
207)   06E4 C1          		 POP BC	;
208)   06E5 0B          		 DEC BC	;
209)   06E6 5F          		 LD E,A	;
210)   06E7 78          		 LD A,B	;
211)   06E8 B1          		 OR C	;
212)   06E9 7B          		 LD A,E	;
213)   06EA 20 EA       		 JR NZ,C3AGN	;
214)   06EC F5          		 PUSH AF  	;
215)   06ED CD 6A 15    		 CALL PRINTNUM  	;
216)   06F0 F1          		 POP AF	;
217)   06F1 CD C0 05    		 CALL RS_MESG	;
218)   06F4 2A 2A 2A 43 		 DEFM "***CMD TIMEOUT***"	;
218)   06F8 4D 44 20 54 		 DEFM "***CMD TIMEOUT***"	;
218)   06FC 49 4D 45 4F 		 DEFM "***CMD TIMEOUT***"	;
218)   0700 55 54 2A 2A 		 DEFM "***CMD TIMEOUT***"	;
218)   0704 2A          		 DEFM "***CMD TIMEOUT***"	;
219)   0705 0A 0D 00    		 DB 10,13,0       	;
220)   0708 06 02       		 LD B,2	;
221)   070A 05          		 DEC B  ;NZ FLAG	;NZ FLAG
222)   070B C9          		 RET	;
228)   070C D3 31       		CH376_COMMD: OUT (INT376CMD),A	;
229)   070E C5          		 PUSH BC	;
230)   070F D5          		 PUSH DE	;
231)   0710 E5          		 PUSH HL	;
232)   0711 CD D3 06    		 CALL CH376_CHOK  ;CHECK NOT BUSY	;CHECK NOT BUSY
233)   0714 E1          		 POP HL	;
234)   0715 D1          		 POP DE	;
235)   0716 C1          		 POP BC	;
236)   0717 C9          		 RET	;
238)   0718 DB 31       		CH376_INSTAT: IN A,(INT376CMD)	;
240)   071A C9          		 RET	;
245)   071B D3 30       		CH376_DATAWR: OUT (INT376DAT),A 	;
246)   071D D5          		 PUSH DE	;
247)   071E E5          		 PUSH HL 	;
248)   071F C5          		 PUSH BC	;
249)   0720 CD D3 06    		 CALL CH376_CHOK  ;CHECK NOT BUSY	;CHECK NOT BUSY
250)   0723 C1          		 POP BC	;
251)   0724 E1          		 POP HL	;
252)   0725 D1          		 POP DE	;
253)   0726 C9          		 RET	;
256)   0727 DB 30       		CH376_DATARD: IN A,(INT376DAT)	;
261)   0729 C9          		 RET	;
264)   072A 3E 01       		CH376_VERSION: LD A,CMD_GET_IC_VER 	;
265)   072C CD 0C 07    		 CALL CH376_COMMD	;
266)   072F CD 27 07    		 CALL CH376_DATARD	;
267)   0732 E6 0F       		 AND 00001111B	;
268)   0734 C9          		               RET	;
270)   0735 3E 05       		CH376_INIT:    LD A,CMD_RESET_ALL	;
271)   0737 CD 0C 07    		 CALL CH376_COMMD  	;
272)   073A 3E 06       		 LD A,CMD_CHECK_EXIST 	;
273)   073C CD 0C 07    		 CALL CH376_COMMD	;
274)   073F 3E 57       		 LD A,87	;
275)   0741 CD 1B 07    		 CALL CH376_DATAWR	;
276)   0744 CD 27 07    		 CALL CH376_DATARD	;
277)   0747 FE A8       		 CP 255 - 87 	;
278)   0749 C9          		               RET               	;
282)   074A F5          		CH376_SETUSB: PUSH AF	;
283)   074B 3E 15       		               LD A,CMD_SETUSB_MODE	;
284)   074D CD 0C 07    		 CALL CH376_COMMD	;
285)   0750 F1          		               POP AF	;
286)   0751 CD 1B 07    		 CALL CH376_DATAWR	;
288)   0754 06 14       		 LD B,20	;
289)   0756 CD 05 13    		 CALL DELAYMICRO     ;WAIT A BIT	;WAIT A BIT
294)   0759 CD CA 06    		 CALL CH376_GETSTAT	;
295)   075C FE 15       		 CP USB_INT_CONNECT	;
296)   075E C8          		 RET Z	;
298)   075F F5          		 PUSH AF	;
299)   0760 CD C0 05    		 CALL CH376_ERROR	;
300)   0763 45 52 52 3A 		 DEFM "ERR: SETUSBMODE"	;
300)   0767 20 53 45 54 		 DEFM "ERR: SETUSBMODE"	;
300)   076B 55 53 42 4D 		 DEFM "ERR: SETUSBMODE"	;
300)   076F 4F 44 45    		 DEFM "ERR: SETUSBMODE"	;
301)   0772 0A 0D 00    		 DB 10,13,0	;
302)   0775 F1          		 POP AF	;
303)   0776 CD 6A 15    		 CALL PRINTNUM	;
304)   0779 C9          		               RET	;
309)   077A 3E 30       		CH376_CONNECT: LD A, CMD_DISK_CONNECT	;
310)   077C CD 0C 07    		     CALL CH376_COMMD	;
311)   077F CD 9B 06    		 CALL CH376_WTCMDEND	;
313)   0782 D8          		 RET C ;TIMEOUT	;TIMEOUT
314)   0783 C8          		 RET Z ;CONNECT OK	;CONNECT OK
319)   0784 C9          		 RET ;NZ HERE	;NZ HERE
329)   0785 3E 31       		CH376_MOUNT:   LD A,CMD_DISK_MOUNT  	;
330)   0787 CD 0C 07    		 CALL CH376_COMMD	;
331)   078A CD 9B 06    		 CALL CH376_WTCMDEND  	;
332)   078D C9          		 RET	;
337)   078E 06 0A       		CH376_MOUNTDEV:   LD B,10  ;TRY TO MOUNT 10 TIMES	;TRY TO MOUNT 10 TIMES
338)   0790 C5          		CM_AGN1: PUSH BC	;
339)   0791 CD 4A 07    		 CALL CH376_SETUSB	;
340)   0794 20 10       		 JR NZ,CM_ERROR	;
341)   0796 CD 7A 07    		 CALL CH376_CONNECT	;
342)   0799 20 0B       		 JR NZ,CM_ERROR	;
343)   079B 3E 31       		        LD A,CMD_DISK_MOUNT  	;
344)   079D CD 0C 07    		 CALL CH376_COMMD	;
345)   07A0 CD 9B 06    		 CALL CH376_WTCMDEND	;
346)   07A3 C1          		 POP BC	;
347)   07A4 C8          		 RET Z	;
348)   07A5 C5          		 PUSH BC	;
349)   07A6 06 64       		CM_ERROR: LD B,100	;
350)   07A8 CD 1A 13    		 CALL DELAYMILI     ;WAIT A BIT	;WAIT A BIT
351)   07AB C1          		 POP BC	;
352)   07AC 10 E2       		 DJNZ CM_AGN1  	;
353)   07AE 06 02       		 LD B,2	;
354)   07B0 05          		 DEC B  ;NZ  	;NZ
355)   07B1 F5          		 PUSH AF	;
356)   07B2 CD C0 05    		 CALL CH376_ERROR	;
357)   07B5 45 52 52 3A 		 DEFM "ERR: MOUNT DISK"	;
357)   07B9 20 4D 4F 55 		 DEFM "ERR: MOUNT DISK"	;
357)   07BD 4E 54 20 44 		 DEFM "ERR: MOUNT DISK"	;
357)   07C1 49 53 4B    		 DEFM "ERR: MOUNT DISK"	;
358)   07C4 0A 0D 00    		 DB 10,13,0	;
359)   07C7 F1          		     POP AF	;
360)   07C8 C9          		               RET	;
363)   07C9 7E          		CH376_WRSTRING: LD A,(HL)	;
364)   07CA F5          		 PUSH AF	;
365)   07CB E5          		 PUSH HL	;
366)   07CC CD A7 05    		 CALL RS_TX	;
367)   07CF E1          		 POP HL	;
368)   07D0 F1          		 POP AF	;
369)   07D1 CD 1B 07    		 CALL CH376_DATAWR	;
370)   07D4 C0          		 RET NZ	;
371)   07D5 7E          		 LD A,(HL)	;
372)   07D6 FE 00       		 CP 0	;
373)   07D8 C8          		 RET Z	;
374)   07D9 23          		 INC HL	;
375)   07DA 18 ED       		 JR CH376_WRSTRING	;
 31)   07DC 	            		@CH376_ERROR EQU RS_MESG	;
 41)   07DC 57          		STRG_INIT: LD D,A	;
 42)   07DD AF          		 XOR A  	;
 43)   07DE 32 BB F0    		 LD (STRG_STAT),A  ;NOT CONNECTED, NOT EXISTS	;NOT CONNECTED, NOT EXISTS
 44)   07E1 CD 35 07    		 CALL CH376_INIT	;
 45)   07E4 20 06       		 JR NZ,INIERR	;
 46)   07E6 7A          		 LD A,D   ;SELECT USB DEVICE 3 FOR SDCARD, 6 FOR FLASH	;SELECT USB DEVICE 3 FOR SDCARD, 6 FOR FLASH
 47)   07E7 CD 4A 07    		 CALL CH376_SETUSB	;
 48)   07EA 28 03       		 JR Z,INIOK	;
 49)   07EC 3E 00       		INIERR: LD A,0  	;
 50)   07EE C9          		 RET	;
 51)   07EF CD 2A 07    		INIOK: CALL CH376_VERSION	;
 52)   07F2 BF          		 CP A  ;SET ZF	;SET ZF
 53)   07F3 3E 80       		 LD A, $80  ;BIT 7 MEANS EXISTS	;BIT 7 MEANS EXISTS
 54)   07F5 32 BB F0    		 LD (STRG_STAT),A  ;	;
 55)   07F8 C9          		 RET	;
 58)   07F9 3A BB F0    		STRG_EXISTS: LD A,(STRG_STAT)	;
 59)   07FC CB 7F       		 BIT 7,A	;
 60)   07FE C9          		 RET	;
 66)   07FF CD F9 07    		STRG_CHECK: CALL STRG_EXISTS	;
 67)   0802 37          		 SCF	;
 68)   0803 C8          		 RET Z    ;Z MEANS NOT EXISTS	;Z MEANS NOT EXISTS
 69)   0804 06 05       		 LD B,5	;
 70)   0806 CD 7A 07    		SC_AGN1: CALL CH376_CONNECT 	;
 71)   0809 28 06       		 JR Z,DOCON	;
 72)   080B 30 1C       		 JR NC,DODISC	;
 73)   080D 10 F7       		 DJNZ SC_AGN1    	;
 77)   080F AF          		 XOR A   	;
 78)   0810 C9          		 RET   ;TIMEOUT	;TIMEOUT
 80)   0811 AF          		DOCON: XOR A    ;CLCF	;CLCF
 81)   0812 3A BB F0    		 LD A,(STRG_STAT)	;
 82)   0815 CB 47       		 BIT 0,A	;
 83)   0817 C0          		 RET NZ    ;ALREADY MOUNTED THE DRIVE	;ALREADY MOUNTED THE DRIVE
 87)   0818 CD 85 07    		 CALL CH376_MOUNT   ;MOUNT THE DRIVE	;MOUNT THE DRIVE
 88)   081B 20 0C       		 JR NZ, DONOMNT	;
 92)   081D 3A BB F0    		 LD A,(STRG_STAT)	;
 93)   0820 CB C7       		 SET 0,A	;
 94)   0822 32 BB F0    		 LD (STRG_STAT),A	;
 95)   0825 AF          		 XOR A    ;CLEAR CARRY FLAG MEANS WE ARE OK	;CLEAR CARRY FLAG MEANS WE ARE OK
 96)   0826 3E 01       		 LD A,1    ;A=1 IS JUST CONNECTED	;A=1 IS JUST CONNECTED
 97)   0828 C9          		 RET	;
105)   0829 AF          		 XOR A 	;
106)   082A 3A BB F0    		 LD A,(STRG_STAT)  	;
107)   082D CB 47       		 BIT 0,A	;
108)   082F C8          		 RET Z    ;ALREADY DISCONNECTED	;ALREADY DISCONNECTED
109)   0830 CB 87       		 RES 0,A    ;SET BIT 0 TO 0=DISCONNECTED	;SET BIT 0 TO 0=DISCONNECTED
110)   0832 32 BB F0    		 LD (STRG_STAT),A  	;
111)   0835 3E 02       		 LD A,2    ;A=2 IS JUST DISCONNECTED	;A=2 IS JUST DISCONNECTED
112)   0837 C9          		 RET	;
118)   0838 CD 8E 07    		STRG_OPENCRD:  CALL CH376_MOUNTDEV	;
119)   083B C9          		 RET 	;
122)   083C C9          		STRG_DIRLIST: RET	;
123)   083D C9          		STRG_DIRCHG: RET	;
124)   083E C9          		STRG_TPFILE: RET	;
125)   083F C9          		STRG_GETPOS: RET	;
126)   0840 C9          		STRG_SETPOS: RET	;
127)   0841 C9          		STRG_GETSIZE: RET	;
128)   0842 C9          		STRG_GETEOF: RET	;
135)   0843 3E 27       		STRG_PRDRVINFO: LD A,CMD_RDUSB_DATA0	;
136)   0845 CD 0C 07    		 CALL CH376_COMMD	;
137)   0848 CD 49 06    		 CALL CH376_GETDATA	;
138)   084B F5          		 PUSH AF	;
139)   084C D6 08       		 SUB 8  	;
140)   084E 47          		 LD B,A	;
141)   084F F1          		 POP AF   	;
142)   0850 21 36 F0    		 LD HL,USBBUF+8  ;SKIP 8 BYTES	;SKIP 8 BYTES
143)   0853 7E          		PDI_NXT: LD A,(HL)	;
144)   0854 E5          		 PUSH HL	;
145)   0855 C5          		 PUSH BC	;
146)   0856 CD 9B 00    		 CALL OS_PRINTCHAR	;
147)   0859 C1          		 POP BC	;
148)   085A E1          		 POP HL	;
149)   085B 23          		 INC HL	;
150)   085C 10 F5       		 DJNZ PDI_NXT  	;
151)   085E CD 0D 06    		 CALL RS_NEWLINE	;
153)   0861 3E 3F       		 LD A,CMD_DISK_QUERY   	;
154)   0863 CD 0C 07    		 CALL CH376_COMMD	;
155)   0866 CD 9B 06    		 CALL CH376_WTCMDEND	;
156)   0869 C0          		 RET NZ	;
157)   086A 3E 27       		 LD A,CMD_RDUSB_DATA0	;
158)   086C CD 0C 07    		 CALL CH376_COMMD  	;
159)   086F CD 49 06    		 CALL CH376_GETDATA	;
161)   0872 DD 21 2E F0 		 LD IX,USBBUF 	;
162)   0876 DD E5       		 PUSH IX   	;
163)   0878 DD 56 03    		 LD D,(IX+3)	;
164)   087B DD 5E 02    		 LD E,(IX+2)	;
165)   087E DD 66 01    		 LD H,(IX+1)	;
166)   0881 DD 6E 00    		 LD L,(IX+0)	;
167)   0884 CD E1 13    		 CALL B2D32    ;DE:HL RES ON B2DBUF	;DE:HL RES ON B2DBUF
168)   0887 21 9B F0    		 LD HL,B2DBUF	;
169)   088A CD 71 14    		 CALL SKIPSPC	;
170)   088D CD AE 00    		 CALL OS_PRINTTEXT	;
171)   0890 CD BA 00    		 CALL OS_PRINTMSG	;
172)   0893 20 53 45 43 		 DEFM " SECTORS"	;
172)   0897 54 4F 52 53 		 DEFM " SECTORS"	;
173)   089B 0A 0D 00    		 DB 10,13 0	;
174)   089E DD E1       		 POP IX	;
176)   08A0 DD E5       		 PUSH IX     	;
177)   08A2 DD 56 07    		 LD D,(IX+7)	;
178)   08A5 DD 5E 06    		 LD E,(IX+6)	;
179)   08A8 DD 66 05    		 LD H,(IX+5)	;
180)   08AB DD 6E 04    		 LD L,(IX+4)  	;
181)   08AE CD E1 13    		 CALL B2D32  ;DE:HL RES ON B2DBUF	;DE:HL RES ON B2DBUF
182)   08B1 21 9B F0    		 LD HL,B2DBUF	;
183)   08B4 CD 71 14    		 CALL SKIPSPC	;
184)   08B7 CD AE 00    		 CALL OS_PRINTTEXT	;
185)   08BA CD BA 00    		 CALL OS_PRINTMSG	;
186)   08BD 20 53 45 43 		 DEFM " SECTORS FREE   "	;
186)   08C1 54 4F 52 53 		 DEFM " SECTORS FREE   "	;
186)   08C5 20 46 52 45 		 DEFM " SECTORS FREE   "	;
186)   08C9 45 20 20 20 		 DEFM " SECTORS FREE   "	;
187)   08CD 0A 0D 00    		 DB 10,13,0   	;
188)   08D0 DD E1       		 POP IX	;
190)   08D2 DD 7E 08    		FILESYSTEM: LD A,(IX+8) ;1-FAT12,2-FAT16,3-FAT32	;1-FAT12,2-FAT16,3-FAT32
191)   08D5 3D          		 DEC A	;
192)   08D6 28 08       		 JR Z,PDI_NXT0	;
193)   08D8 3D          		 DEC A	;
194)   08D9 28 18       		 JR Z,PDI_NXT1	;
195)   08DB 3D          		 DEC A	;
196)   08DC 28 28       		 JR Z,PDI_NXT2	;
197)   08DE 18 39       		 JR PDI_NXT3	;
199)   08E0 CD BA 00    		PDI_NXT0: CALL OS_PRINTMSG	;
200)   08E3 46 53 20 49 		 DEFM "FS IS FAT-12"	;
200)   08E7 53 20 46 41 		 DEFM "FS IS FAT-12"	;
200)   08EB 54 2D 31 32 		 DEFM "FS IS FAT-12"	;
201)   08EF 0A 0D 00    		 DB 10,13,0	;
202)   08F2 C9          		 RET	;
203)   08F3 CD BA 00    		PDI_NXT1: CALL OS_PRINTMSG	;
204)   08F6 46 53 20 49 		 DEFM "FS IS FAT-16"	;
204)   08FA 53 20 46 41 		 DEFM "FS IS FAT-16"	;
204)   08FE 54 2D 31 36 		 DEFM "FS IS FAT-16"	;
205)   0902 0A 0D 00    		 DB 10,13,0	;
206)   0905 C9          		 RET	;
207)   0906 CD BA 00    		PDI_NXT2: CALL OS_PRINTMSG	;
208)   0909 46 53 20 49 		 DEFM "FS IS FAT-32"	;
208)   090D 53 20 46 41 		 DEFM "FS IS FAT-32"	;
208)   0911 54 2D 33 32 		 DEFM "FS IS FAT-32"	;
209)   0915 0A 0D 00    		 DB 10,13,0	;
210)   0918 C9          		 RET	;
211)   0919 CD BA 00    		PDI_NXT3: CALL OS_PRINTMSG	;
212)   091C 55 4E 4B 4E 		 DEFM "UNKNOWN FS"	;
212)   0920 4F 57 4E 20 		 DEFM "UNKNOWN FS"	;
212)   0924 46 53       		 DEFM "UNKNOWN FS"	;
213)   0926 0A 0D 00    		 DB 10,13,0	;
214)   0929 DD 7E 08    		 LD A,(IX+8)  ;TO BE PRINTED MAYBE	;TO BE PRINTED MAYBE
215)   092C C9          		 RET	;
220)   092D F5          		STRG_OPNFILE: PUSH AF	;
221)   092E 3E 2F       		 LD A, CMD_SETFILENAME	;
222)   0930 CD 0C 07    		     CALL CH376_COMMD	;
223)   0933 21 60 F0    		 LD HL, STRGBUFF	;
224)   0936 CD C9 07    		     CALL CH376_WRSTRING	;
225)   0939 28 1E       		 JR Z,OF_WSOK	;
226)   093B F1          		 POP AF	;
227)   093C CD BA 00    		 CALL OS_PRINTMSG	;
228)   093F 45 52 52 4F 		 DEFM "ERROR SETTING FILENAME"	;
228)   0943 52 20 53 45 		 DEFM "ERROR SETTING FILENAME"	;
228)   0947 54 54 49 4E 		 DEFM "ERROR SETTING FILENAME"	;
228)   094B 47 20 46 49 		 DEFM "ERROR SETTING FILENAME"	;
228)   094F 4C 45 4E 41 		 DEFM "ERROR SETTING FILENAME"	;
228)   0953 4D 45       		 DEFM "ERROR SETTING FILENAME"	;
229)   0955 0A 0D 00    		 DB 10,13,0  	;
230)   0958 C9          		 RET	;
231)   0959 F1          		OF_WSOK: POP AF	;
235)   095A B7          		 OR A  ;0 READ	;0 READ
236)   095B 28 1F       		 JR Z,OF_OPEN	;
237)   095D D6 01       		 SUB 1  ;1 WRITE	;1 WRITE
238)   095F 28 1B       		 JR Z,OF_OPEN	;
239)   0961 D6 01       		 SUB 1  ;2 READ/WRITE	;2 READ/WRITE
240)   0963 28 17       		 JR Z,OF_OPEN	;
246)   0965 CD BA 00    		OF_CREATE: CALL OS_PRINTMSG	;
247)   0968 0A 0D       		 DB 10,13	;
248)   096A 43 52 45 41 		 DEFM "CREATING..."	;
248)   096E 54 49 4E 47 		 DEFM "CREATING..."	;
248)   0972 2E 2E 2E    		 DEFM "CREATING..."	;
249)   0975 0A 0D 00    		 DB 10,13,0    	;
250)   0978 3E 34       		 LD A, CMD_FILE_CREATE  	;
251)   097A 18 14       		 JR OF_EXEC	;
252)   097C CD BA 00    		OF_OPEN: CALL OS_PRINTMSG	;
253)   097F 0A 0D       		 DB 10,13	;
254)   0981 4F 50 45 4E 		 DEFM "OPENING..."	;
254)   0985 49 4E 47 2E 		 DEFM "OPENING..."	;
254)   0989 2E 2E       		 DEFM "OPENING..."	;
255)   098B 0A 0D 00    		 DB 10,13,0 	;
256)   098E 3E 32       		 LD A, CMD_FILE_OPEN	;
260)   0990 CD 0C 07    		 CALL CH376_COMMD	;
261)   0993 CD 9B 06    		 CALL CH376_WTCMDEND	;
262)   0996 C9          		 RET	;
264)   0997 3E 36       		STRG_CLSFILE: LD A, CMD_FILE_CLOSE	;
265)   0999 CD 0C 07    		     CALL CH376_COMMD	;
266)   099C 3E 01       		     LD A, 1                             ; 1 = update file size if necessary	; 1 = update file size if necessary
267)   099E CD 1B 07    		     CALL CH376_DATAWR	;
268)   09A1 CD 9B 06    		     CALL CH376_WTCMDEND	;
269)   09A4 C9          		     RET	;
275)   09A5 D5          		STRG_BLKREAD: PUSH DE	;
276)   09A6 3E 3A       		 LD A, CMD_BYTE_READ	;
277)   09A8 CD 0C 07    		     CALL CH376_COMMD	;
278)   09AB 79          		     LD A, C                           ; BYTES REQUEST ON BC	; BYTES REQUEST ON BC
279)   09AC CD 1B 07    		     CALL CH376_DATAWR	;
280)   09AF 78          		     LD A, B	;
281)   09B0 CD 1B 07    		     CALL CH376_DATAWR    	;
282)   09B3 CD BA 00    		 CALL OS_PRINTMSG	;
283)   09B6 42 4C 4F 43 		 DEFM "BLOCK READING"	;
283)   09BA 4B 20 52 45 		 DEFM "BLOCK READING"	;
283)   09BE 41 44 49 4E 		 DEFM "BLOCK READING"	;
283)   09C2 47          		 DEFM "BLOCK READING"	;
284)   09C3 0A 0D 00    		 DB 10,13,0	;
285)   09C6 D1          		 POP DE	;
286)   09C7 21 00 00    		 LD HL,0      ;BYTE RECEIVE COUNTER	;BYTE RECEIVE COUNTER
287)   09CA E5          		STBR_DOREST: PUSH HL	;
288)   09CB D5          		 PUSH DE	;
289)   09CC CD 9B 06    		 CALL CH376_WTCMDEND	;
290)   09CF D1          		 POP DE	;
291)   09D0 E1          		 POP HL	;
292)   09D1 28 1C       		 JR Z, FR_DONE   ;Z=NO MORE OR CANNOT READ	;Z=NO MORE OR CANNOT READ
293)   09D3 FE 1D       		 CP USB_INT_DISK_READ                    	;
294)   09D5 20 32       		     JR NZ, FR_ERROR	;
296)   09D7 3E 27       		 LD A,CMD_RDUSB_DATA0	;
297)   09D9 CD 0C 07    		 CALL CH376_COMMD 	;
298)   09DC CD 27 07    		 CALL CH376_DATARD  ;A= BYTES TO READ TO BUFFER	;A= BYTES TO READ TO BUFFER
299)   09DF 47          		 LD B,A	;
312)   09E0 CD 27 07    		STBR_NXT1: CALL CH376_DATARD ;READ THE BYTES TO BUFFER	;READ THE BYTES TO BUFFER
313)   09E3 12          		 LD (DE),A	;
314)   09E4 13          		 INC DE	;
315)   09E5 23          		 INC HL    ;TOTAL BYTES READ COUNTER	;TOTAL BYTES READ COUNTER
316)   09E6 10 F8       		 DJNZ STBR_NXT1  	;
317)   09E8 3E 3B       		 LD A, CMD_BYTE_RD_GO 	;
318)   09EA CD 0C 07    		 CALL CH376_COMMD 	;
319)   09ED 18 DB       		 JR STBR_DOREST	;
320)   09EF E5          		FR_DONE: PUSH HL	;
321)   09F0 CD BA 00    		 CALL OS_PRINTMSG	;
322)   09F3 52 45 41 44 		 DEFM "READING DONE!!! "	;
322)   09F7 49 4E 47 20 		 DEFM "READING DONE!!! "	;
322)   09FB 44 4F 4E 45 		 DEFM "READING DONE!!! "	;
322)   09FF 21 21 21 20 		 DEFM "READING DONE!!! "	;
323)   0A03 00          		 DB 0 	;
324)   0A04 E1          		 POP HL	;
325)   0A05 44          		 LD B,H	;
326)   0A06 4D          		 LD C,L	;
327)   0A07 B7          		 OR A	;
328)   0A08 C9          		 RET	;
329)   0A09 F5          		FR_ERROR: PUSH AF	;
330)   0A0A CD BA 00    		 CALL OS_PRINTMSG	;
331)   0A0D 45 52 52 4F 		 DEFM "ERROR READING BLOCK!!! "	;
331)   0A11 52 20 52 45 		 DEFM "ERROR READING BLOCK!!! "	;
331)   0A15 41 44 49 4E 		 DEFM "ERROR READING BLOCK!!! "	;
331)   0A19 47 20 42 4C 		 DEFM "ERROR READING BLOCK!!! "	;
331)   0A1D 4F 43 4B 21 		 DEFM "ERROR READING BLOCK!!! "	;
331)   0A21 21 21 20    		 DEFM "ERROR READING BLOCK!!! "	;
332)   0A24 00          		 DB 0 	;
333)   0A25 F1          		 POP AF	;
334)   0A26 06 02       		 LD B,2	;
335)   0A28 05          		 DEC B	;
336)   0A29 C9          		 RET  	;
343)   0A2A D5          		STRG_LOADFILE: PUSH DE	;
344)   0A2B C5          		 PUSH BC	;
345)   0A2C E5          		 PUSH HL  	;
346)   0A2D CD BA 00    		 CALL OS_PRINTMSG	;
347)   0A30 4F 50 45 4E 		 DEFM "OPEN FILE"	;
347)   0A34 20 46 49 4C 		 DEFM "OPEN FILE"	;
347)   0A38 45          		 DEFM "OPEN FILE"	;
348)   0A39 0A 0D 00    		 DB 10,13,0	;
349)   0A3C E1          		 POP HL	;
350)   0A3D CD 9F 15    		 CALL COPYFNAME	;
351)   0A40 AF          		 XOR A   ;READ ONLY 	;READ ONLY
352)   0A41 CD 2D 09    		 CALL STRG_OPNFILE  	;
353)   0A44 20 58       		 JR NZ, FOPENERR	;
354)   0A46 CD BA 00    		 CALL OS_PRINTMSG	;
355)   0A49 0A 0D       		 DB 10,13	;
356)   0A4B 46 49 4C 45 		 DEFM "FILE OPEN OK"	;
356)   0A4F 20 4F 50 45 		 DEFM "FILE OPEN OK"	;
356)   0A53 4E 20 4F 4B 		 DEFM "FILE OPEN OK"	;
357)   0A57 0A 0D 00    		 DB 10,13,0	;
359)   0A5A C1          		 POP BC  ;BYTECOUNT	;BYTECOUNT
360)   0A5B D1          		 POP DE  ;DEST BUFFER	;DEST BUFFER
361)   0A5C CD A5 09    		 CALL STRG_BLKREAD	;
362)   0A5F 28 19       		 JR Z, FREADOK	;
364)   0A61 CD BA 00    		 CALL OS_PRINTMSG	;
365)   0A64 20 45 52 52 		 DEFM " ERROR READING FILE"	;
365)   0A68 4F 52 20 52 		 DEFM " ERROR READING FILE"	;
365)   0A6C 45 41 44 49 		 DEFM " ERROR READING FILE"	;
365)   0A70 4E 47 20 46 		 DEFM " ERROR READING FILE"	;
365)   0A74 49 4C 45    		 DEFM " ERROR READING FILE"	;
366)   0A77 0A 0D 00    		 DB 10,13,0	;
367)   0A7A C5          		FREADOK: PUSH BC	;
368)   0A7B CD DD 13    		 CALL B2D16	;
369)   0A7E 21 9B F0    		 LD HL,B2DBUF	;
370)   0A81 CD 71 14    		 CALL SKIPSPC	;
371)   0A84 CD B6 05    		 CALL RS_TXT	;
372)   0A87 CD BA 00    		 CALL OS_PRINTMSG	;
373)   0A8A 20 42 59 54 		 DEFM " BYTES READ"	;
373)   0A8E 45 53 20 52 		 DEFM " BYTES READ"	;
373)   0A92 45 41 44    		 DEFM " BYTES READ"	;
374)   0A95 0A 0D 00    		 DB 10,13,0	;
375)   0A98 CD 97 09    		 CALL STRG_CLSFILE	;
376)   0A9B C1          		 POP BC   ;BYTES LOADED TO BUFFER	;BYTES LOADED TO BUFFER
377)   0A9C AF          		 XOR A	;
378)   0A9D C9          		 RET	;
379)   0A9E C1          		FOPENERR: POP BC	;
380)   0A9F D1          		 POP DE	;
382)   0AA0 CD BA 00    		 CALL OS_PRINTMSG	;
383)   0AA3 2D 2D 3E 45 		 DEFM "-->ERROR OPENING FILE"	;
383)   0AA7 52 52 4F 52 		 DEFM "-->ERROR OPENING FILE"	;
383)   0AAB 20 4F 50 45 		 DEFM "-->ERROR OPENING FILE"	;
383)   0AAF 4E 49 4E 47 		 DEFM "-->ERROR OPENING FILE"	;
383)   0AB3 20 46 49 4C 		 DEFM "-->ERROR OPENING FILE"	;
383)   0AB7 45          		 DEFM "-->ERROR OPENING FILE"	;
384)   0AB8 0A 0D 00    		 DB 10,13,0	;
385)   0ABB 21 60 F0    		 LD HL,STRGBUFF	;
386)   0ABE CD B6 05    		 CALL RS_TXT	;
387)   0AC1 CD 0D 06    		 CALL RS_NEWLINE	;
388)   0AC4 37          		 SCF	;
389)   0AC5 C9          		 RET	;
393)   0AC6 D5          		STRG_BLKWRITE: PUSH DE	;
394)   0AC7 3E 3C       		 LD A, CMD_BYTE_WRITE	;
395)   0AC9 CD 0C 07    		     CALL CH376_COMMD	;
396)   0ACC 79          		     LD A, C                           ; BYTES REQUEST ON BC	; BYTES REQUEST ON BC
397)   0ACD CD 1B 07    		     CALL CH376_DATAWR	;
398)   0AD0 78          		     LD A, B	;
399)   0AD1 CD 1B 07    		     CALL CH376_DATAWR    	;
400)   0AD4 CD BA 00    		 CALL OS_PRINTMSG	;
401)   0AD7 42 4C 4F 43 		 DEFM "BLOCK WRITING"	;
401)   0ADB 4B 20 57 52 		 DEFM "BLOCK WRITING"	;
401)   0ADF 49 54 49 4E 		 DEFM "BLOCK WRITING"	;
401)   0AE3 47          		 DEFM "BLOCK WRITING"	;
402)   0AE4 0A 0D 00    		 DB 10,13,0	;
403)   0AE7 E1          		 POP HL	;
404)   0AE8 E5          		STBW_DOREST: PUSH HL	;
405)   0AE9 CD 9B 06    		 CALL CH376_WTCMDEND	;
406)   0AEC E1          		 POP HL	;
407)   0AED 28 1B       		 JR Z, WFR_DONE   ;Z=NO MORE OR CANNOT READ	;Z=NO MORE OR CANNOT READ
408)   0AEF FE 1E       		 CP USB_INT_DISK_WRITE                    	;
409)   0AF1 20 31       		     JR NZ, WFR_ERROR	;
410)   0AF3 3E 2D       		 LD A,CMD_WR_REQ_DATA	;
411)   0AF5 CD 0C 07    		 CALL CH376_COMMD 	;
413)   0AF8 CD 27 07    		 CALL CH376_DATARD ;READ BYTE COUNT UP TO 255 BYTES	;READ BYTE COUNT UP TO 255 BYTES
414)   0AFB 47          		 LD B,A   	;
416)   0AFC 7E          		STBW_NXT1: LD A,(HL)	;
417)   0AFD CD 1B 07    		 CALL CH376_DATAWR	;
418)   0B00 23          		 INC HL	;
419)   0B01 10 F9       		 DJNZ STBW_NXT1	;
420)   0B03 3E 3D       		 LD A, CMD_BYTE_WR_GO 	;
421)   0B05 CD 0C 07    		 CALL CH376_COMMD 	;
422)   0B08 18 DE       		 JR STBW_DOREST	;
423)   0B0A E5          		WFR_DONE: PUSH HL	;
424)   0B0B CD BA 00    		 CALL OS_PRINTMSG	;
425)   0B0E 57 52 49 54 		 DEFM "WRITING DONE!!! "	;
425)   0B12 49 4E 47 20 		 DEFM "WRITING DONE!!! "	;
425)   0B16 44 4F 4E 45 		 DEFM "WRITING DONE!!! "	;
425)   0B1A 21 21 21 20 		 DEFM "WRITING DONE!!! "	;
426)   0B1E 0D 0A 00    		 DB 13,10,0 	;
427)   0B21 E1          		 POP HL	;
428)   0B22 B7          		 OR A	;
429)   0B23 C9          		 RET	;
430)   0B24 F5          		WFR_ERROR: PUSH AF	;
431)   0B25 CD BA 00    		 CALL OS_PRINTMSG	;
432)   0B28 45 52 52 4F 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0B2C 52 20 57 52 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0B30 49 54 49 4E 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0B34 47 20 42 4C 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0B38 4F 43 4B 21 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0B3C 21 21 20    		 DEFM "ERROR WRITING BLOCK!!! "	;
433)   0B3F 0D 0A 00    		 DB 13,10,0 	;
434)   0B42 F1          		 POP AF	;
435)   0B43 06 02       		 LD B,2	;
436)   0B45 05          		 DEC B	;
437)   0B46 C9          		 RET  	;
445)   0B47 D5          		STRG_SAVEFILE: PUSH DE	;
446)   0B48 C5          		 PUSH BC	;
447)   0B49 E5          		 PUSH HL  	;
448)   0B4A CD BA 00    		 CALL OS_PRINTMSG	;
449)   0B4D 0A 0D       		 DB 10,13	;
450)   0B4F 53 41 56 45 		 DEFM "SAVE FILE"	;
450)   0B53 20 46 49 4C 		 DEFM "SAVE FILE"	;
450)   0B57 45          		 DEFM "SAVE FILE"	;
451)   0B58 0A 0D 0A 0D 		 DB 10,13,10,13,0	;
451)   0B5C 00          		 DB 10,13,10,13,0	;
452)   0B5D E1          		 POP HL	;
453)   0B5E CD 9F 15    		 CALL COPYFNAME	;
454)   0B61 3E 04       		 LD A,4   ;CREATE THE FILE	;CREATE THE FILE
455)   0B63 CD 2D 09    		 CALL STRG_OPNFILE  	;
456)   0B66 20 4E       		 JR NZ, FSAVEERR	;
457)   0B68 CD BA 00    		 CALL OS_PRINTMSG	;
458)   0B6B 0A 0D       		 DB 10,13	;
459)   0B6D 46 49 4C 45 		 DEFM "FILE CREATED OK"	;
459)   0B71 20 43 52 45 		 DEFM "FILE CREATED OK"	;
459)   0B75 41 54 45 44 		 DEFM "FILE CREATED OK"	;
459)   0B79 20 4F 4B    		 DEFM "FILE CREATED OK"	;
460)   0B7C 0A 0D 00    		 DB 10,13,0	;
461)   0B7F C1          		 POP BC  ;BYTECOUNT	;BYTECOUNT
462)   0B80 D1          		 POP DE  ;SOURCE BUFFER	;SOURCE BUFFER
463)   0B81 CD C6 0A    		 CALL STRG_BLKWRITE	;
464)   0B84 28 19       		 JR Z, FWRITEOK	;
466)   0B86 CD BA 00    		 CALL OS_PRINTMSG	;
467)   0B89 20 45 52 52 		 DEFM " ERROR WRITING FILE"	;
467)   0B8D 4F 52 20 57 		 DEFM " ERROR WRITING FILE"	;
467)   0B91 52 49 54 49 		 DEFM " ERROR WRITING FILE"	;
467)   0B95 4E 47 20 46 		 DEFM " ERROR WRITING FILE"	;
467)   0B99 49 4C 45    		 DEFM " ERROR WRITING FILE"	;
468)   0B9C 0A 0D 00    		 DB 10,13,0	;
469)   0B9F CD BA 00    		FWRITEOK: CALL OS_PRINTMSG	;
470)   0BA2 42 59 54 45 		 DEFM "BYTE WRITTEN"	;
470)   0BA6 20 57 52 49 		 DEFM "BYTE WRITTEN"	;
470)   0BAA 54 54 45 4E 		 DEFM "BYTE WRITTEN"	;
471)   0BAE 0A 0D 00    		 DB 10,13,0	;
472)   0BB1 CD 97 09    		 CALL STRG_CLSFILE	;
473)   0BB4 AF          		 XOR A	;
474)   0BB5 C9          		 RET	;
475)   0BB6 C1          		FSAVEERR: POP BC	;
476)   0BB7 D1          		 POP DE	;
477)   0BB8 CD 6A 15    		 CALL PRINTNUM	;
478)   0BBB CD BA 00    		 CALL OS_PRINTMSG	;
479)   0BBE 2D 2D 3E 45 		 DEFM "-->ERROR CREATING FILE"	;
479)   0BC2 52 52 4F 52 		 DEFM "-->ERROR CREATING FILE"	;
479)   0BC6 20 43 52 45 		 DEFM "-->ERROR CREATING FILE"	;
479)   0BCA 41 54 49 4E 		 DEFM "-->ERROR CREATING FILE"	;
479)   0BCE 47 20 46 49 		 DEFM "-->ERROR CREATING FILE"	;
479)   0BD2 4C 45       		 DEFM "-->ERROR CREATING FILE"	;
480)   0BD4 0A 0D 00    		 DB 10,13,0	;
481)   0BD7 21 60 F0    		 LD HL,STRGBUFF	;
482)   0BDA CD B6 05    		 CALL RS_TXT	;
483)   0BDD CD 0D 06    		 CALL RS_NEWLINE	;
484)   0BE0 37          		 SCF	;
485)   0BE1 C9          		 RET	;
 76)   0BE2 0E 03       		 LD C, 11B        ;HIRES TEXT SCREEN	;HIRES TEXT SCREEN
 77)   0BE4 3E 04       		 LD A, VGA_NAVY	;
 78)   0BE6 CB 27       		 SLA A	;
 79)   0BE8 CB 27       		 SLA A	;
 80)   0BEA CB 27       		 SLA A	;
 81)   0BEC CB 27       		 SLA A	;
 82)   0BEE 06 0F       		 LD B, VGA_WHITE	;
 83)   0BF0 B0          		 OR B	;
 84)   0BF1 47          		 LD B, A	;
 85)   0BF2 CD 80 0C    		 CALL VGA_SETCONF	;
 86)   0BF5 C9          		 RET	;
 90)   0BF6 F5          		VGA_SETLOWGR: PUSH AF	;
 91)   0BF7 CD B2 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
 92)   0BFA 0E 00       		 LD C, 00B        ;LOW RES GRAPH SCREEN	;LOW RES GRAPH SCREEN
 93)   0BFC CD 80 0C    		 CALL VGA_SETCONF	;
 94)   0BFF F1          		 POP AF	;
 95)   0C00 C9          		 RET	;
 98)   0C01 F5          		VGA_SETLOWTX: PUSH AF	;
 99)   0C02 CD B2 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
100)   0C05 0E 01       		 LD C, 01B        ;LOW RES TEXT SCREEN	;LOW RES TEXT SCREEN
101)   0C07 CD 80 0C    		 CALL VGA_SETCONF	;
102)   0C0A F1          		 POP AF	;
103)   0C0B C9          		 RET	;
105)   0C0C F5          		VGA_SETHIGR: PUSH AF	;
106)   0C0D CD B2 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
107)   0C10 0E 02       		 LD C, 10B        ;HI RES GRAPH SCREEN	;HI RES GRAPH SCREEN
108)   0C12 CD 80 0C    		 CALL VGA_SETCONF	;
109)   0C15 F1          		 POP AF	;
110)   0C16 C9          		 RET	;
112)   0C17 F5          		VGA_SETHITX: PUSH AF	;
113)   0C18 CD B2 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
114)   0C1B 0E 03       		 LD C, 11B        ;HI RES TEXT SCREEN	;HI RES TEXT SCREEN
115)   0C1D CD 80 0C    		 CALL VGA_SETCONF	;
116)   0C20 F1          		 POP AF	;
117)   0C21 C9          		 RET	;
122)   0C22 0F          		VGA_SETVISBUFF: RRCA       ;BIT 1 > BIT 7	;BIT 1 > BIT 7
123)   0C23 E5          		 PUSH HL	;
124)   0C24 F5          		 PUSH AF	;
125)   0C25 06 04       		 LD B, 4        ;8000h	;8000h
126)   0C27 CD 85 05    		 CALL GETPGINBANK	;
127)   0C2A E1          		 POP HL        ;H THE BUFFER	;H THE BUFFER
128)   0C2B F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
129)   0C2C E5          		 PUSH HL	;
130)   0C2D 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
131)   0C2F CD 63 05    		 CALL PUTPGINBANK	;
132)   0C32 21 F8 1F    		 LD HL, CONFADDR	;
133)   0C35 11 00 80    		 LD DE, $8000	;
134)   0C38 B7          		 OR A	;
135)   0C39 ED 5A       		 ADC HL, DE	;
136)   0C3B C1          		 POP BC        ;B THE BUFFER 0 OR 1	;B THE BUFFER 0 OR 1
137)   0C3C 7E          		 LD A,(HL)	;
138)   0C3D 1F          		 RRA	;
139)   0C3E CB 18       		 RR B        ;BIT 0 ON CARRY	;BIT 0 ON CARRY
140)   0C40 17          		 RLA	;
141)   0C41 77          		 LD (HL),A	;
142)   0C42 F1          		 POP AF        ;PREVIOUS PAGE NO	;PREVIOUS PAGE NO
143)   0C43 06 04       		 LD B, 4	;
144)   0C45 CD 63 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
145)   0C48 E1          		 POP HL	;
146)   0C49 C9          		 RET  	;
150)   0C4A E5          		VGA_SWVISBUFF: PUSH HL	;
151)   0C4B 06 04       		 LD B, 4        ;8000h	;8000h
152)   0C4D CD 85 05    		 CALL GETPGINBANK	;
153)   0C50 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
154)   0C51 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
155)   0C53 CD 63 05    		 CALL PUTPGINBANK	;
156)   0C56 21 F8 1F    		 LD HL, CONFADDR	;
157)   0C59 11 00 80    		 LD DE, $8000	;
158)   0C5C B7          		 OR A	;
159)   0C5D ED 5A       		 ADC HL, DE	;
160)   0C5F 7E          		 LD A, (HL)        ;VIDEO CTRL REG1 VIDEO MODE	;VIDEO CTRL REG1 VIDEO MODE
161)   0C60 CB 7F       		 BIT 7,A 	;
162)   0C62 28 04       		 JR Z,VSVB_SETBUF1	;
164)   0C64 CB BF       		 RES 7,A	;
165)   0C66 18 02       		 JR VSVB_CONT	;
166)   0C68 CB FF       		VSVB_SETBUF1: SET 7,A       ;SET BIT 7	;SET BIT 7
169)   0C6A 77          		VSVB_CONT: LD (HL),A	;
170)   0C6B F1          		 POP AF	;
171)   0C6C 06 04       		 LD B, 4	;
172)   0C6E CD 63 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
173)   0C71 E1          		 POP HL	;
174)   0C72 C9          		 RET  	;
178)   0C73 32 90 F0    		VGA_SETWRKBUFF: LD (VGABUF),A	;
179)   0C76 C9          		 RET	;
182)   0C77 3A 90 F0    		VGA_SWWRKBUFF: LD A,(VGABUF)	;
183)   0C7A EE 01       		 XOR 1	;
184)   0C7C 32 90 F0    		 LD (VGABUF),A	;
185)   0C7F C9          		 RET	;
192)   0C80 E5          		VGA_SETCONF: PUSH HL	;
193)   0C81 C5          		 PUSH BC	;
194)   0C82 06 04       		 LD B, 4        ;8000h	;8000h
195)   0C84 CD 85 05    		 CALL GETPGINBANK	;
196)   0C87 C1          		 POP BC	;
197)   0C88 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
198)   0C89 C5          		 PUSH BC        ;SAVE SCREEN CODE	;SAVE SCREEN CODE
199)   0C8A 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
200)   0C8C 06 04       		 LD B, 4	;
201)   0C8E CD 63 05    		 CALL PUTPGINBANK	;
202)   0C91 C1          		 POP BC	;
203)   0C92 79          		 LD A, C	;
204)   0C93 21 F8 1F    		 LD HL, CONFADDR	;
205)   0C96 11 00 80    		 LD DE, $8000	;
206)   0C99 B7          		 OR A	;
207)   0C9A ED 5A       		 ADC HL, DE	;
208)   0C9C 77          		 LD (HL), A        ;VIDEO CTRL REG1 VIDEO MODE	;VIDEO CTRL REG1 VIDEO MODE
209)   0C9D 23          		 INC HL	;
210)   0C9E 78          		 LD A, B        ;DEFAULT COLORS	;DEFAULT COLORS
211)   0C9F 77          		 LD (HL), A        ;VIDEO CTRL REG2 VIDEO DEF COLORS	;VIDEO CTRL REG2 VIDEO DEF COLORS
212)   0CA0 F1          		 POP AF	;
213)   0CA1 C5          		 PUSH BC	;
214)   0CA2 06 04       		 LD B, 4	;
215)   0CA4 CD 63 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
216)   0CA7 C1          		 POP BC	;
217)   0CA8 E1          		 POP HL	;
218)   0CA9 79          		 LD A, C        ;SCREEN MODE	;SCREEN MODE
219)   0CAA CB 47       		 BIT 0, A	;
220)   0CAC C2 01 0E    		 JP NZ, VGA_TXTINIT	;
221)   0CAF C3 4D 10    		 JP VGA_GRPHINIT	;
228)   0CB2 E5          		VGA_GETCONF: PUSH HL	;
229)   0CB3 06 04       		 LD B, 4        ;8000h	;8000h
230)   0CB5 CD 85 05    		 CALL GETPGINBANK	;
231)   0CB8 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
232)   0CB9 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
233)   0CBB CD 63 05    		 CALL PUTPGINBANK	;
234)   0CBE 21 F8 1F    		 LD HL, CONFADDR	;
235)   0CC1 11 00 80    		 LD DE, $8000	;
236)   0CC4 B7          		 OR A	;
237)   0CC5 ED 5A       		 ADC HL, DE	;
238)   0CC7 7E          		 LD A, (HL)	;
239)   0CC8 E6 03       		 AND 3        ;KEEP ONLY BITS 0,1	;KEEP ONLY BITS 0,1
240)   0CCA 4F          		 LD C, A        ;SCREEN MODE	;SCREEN MODE
241)   0CCB 23          		 INC HL	;
242)   0CCC 7E          		 LD A, (HL)	;
243)   0CCD 47          		 LD B, A        ;DEFAULT COLORS	;DEFAULT COLORS
244)   0CCE F1          		 POP AF	;
245)   0CCF C5          		 PUSH BC	;
246)   0CD0 06 04       		 LD B, 4	;
247)   0CD2 CD 63 05    		 CALL PUTPGINBANK	;
248)   0CD5 C1          		 POP BC	;
249)   0CD6 E1          		 POP HL	;
250)   0CD7 79          		 LD A, C	;
251)   0CD8 C9          		 RET	;
258)   0CD9 CD B2 0C    		VGA_CLRSCR: CALL VGA_GETCONF	;
259)   0CDC CB 47       		 BIT 0,A	;
260)   0CDE C2 07 0E    		 JP NZ,VGA_TXTCLR	;
261)   0CE1 C3 D7 10    		 JP VGA_GRCLS	;
278)   0CE4 F5          		 PUSH AF        ;SAVE FLAGS	;SAVE FLAGS
279)   0CE5 D1          		 POP DE         ;FLAGS ON DE	;FLAGS ON DE
280)   0CE6 FE 1F       		 CP 31	;
281)   0CE8 DC 01 0D    		 CALL C, VGA_NOTVISCH	;
282)   0CEB 28 06       		 JR Z, PRCH_EX        ;EXIT IF CHAR WAS HANDLED	;EXIT IF CHAR WAS HANDLED
283)   0CED CD F4 0C    		 CALL VGA_DOPRNCH       ;PRINT THE CHAR	;PRINT THE CHAR
284)   0CF0 CD 52 0D    		 CALL VGA_TXFORW       ;TEXT FORWARD	;TEXT FORWARD
286)   0CF3 C9          		 RET	;
291)   0CF4 67          		VGA_DOPRNCH: LD H, A       ;SAVE A	;SAVE A
292)   0CF5 CD B2 0C    		 CALL VGA_GETCONF	;
293)   0CF8 CB 47       		 BIT 0, A	;
294)   0CFA 7C          		 LD A, H        ;RESTORE A	;RESTORE A
295)   0CFB C2 9F 0E    		 JP NZ, VGA_DOPRNCHTXT       ;NZ MEANS TEXT	;NZ MEANS TEXT
296)   0CFE C3 71 11    		 JP VGA_DOPRNCHGRP	;
304)   0D01 F5          		VGA_NOTVISCH: PUSH AF	;
305)   0D02 D5          		 PUSH DE	;
306)   0D03 CD 0D 0F    		 CALL VGA_RMVCURS      ;REMOVE CURSOR	;REMOVE CURSOR
307)   0D06 D1          		 POP DE	;
308)   0D07 F1          		 POP AF	;
309)   0D08 FE 08       		 CP 8         ;BACKSPACE	;BACKSPACE
310)   0D0A 20 18       		 JR NZ, NX1	;
311)   0D0C 3A 8B F0    		 LD A, (VGATX_X)	;
312)   0D0F FE 00       		 CP 0         ;COL 0 HAS THE PROMPT	;COL 0 HAS THE PROMPT
313)   0D11 C8          		 RET Z         ;DO NOT PRINT ANYTHING	;DO NOT PRINT ANYTHING
314)   0D12 3D          		 DEC A	;
315)   0D13 32 8B F0    		 LD (VGATX_X), A	;
316)   0D16 D5          		 PUSH DE	;
317)   0D17 F1          		 POP AF         ;GET FLAGS BACK	;GET FLAGS BACK
318)   0D18 30 1B       		 JR NC, MVLEFT       ;IF C THEN DELETE THE CHAR ON THE LEFT	;IF C THEN DELETE THE CHAR ON THE LEFT
319)   0D1A 3E 20       		 LD A, ' '        ;PRINT SPACE	;PRINT SPACE
320)   0D1C 32 8F F0    		 LD (VGATMPC),A	;
321)   0D1F CD F4 0C    		 CALL VGA_DOPRNCH       ;	;
322)   0D22 AF          		 XOR A         ;CLEAR ZERO	;CLEAR ZERO
323)   0D23 C9          		 RET	;
324)   0D24 FE 0A       		NX1: CP 10         ;JUST IGNORE IT	;JUST IGNORE IT
325)   0D26 C8          		 RET Z	;
326)   0D27 FE 0D       		 CP 13         ;CR =NEW LINE	;CR =NEW LINE
327)   0D29 20 11       		 JR NZ, NX2	;
328)   0D2B CD 0D 0F    		 CALL VGA_RMVCURS	;
329)   0D2E CD 65 0D    		 CALL VGDOY        ;ADD 1 TO TY	;ADD 1 TO TY
330)   0D31 32 8B F0    		 LD (VGATX_X), A       ;ZF IS SET	;ZF IS SET
331)   0D34 C9          		 RET	;
332)   0D35 CD D0 0E    		MVLEFT: CALL VGA_GETCHAR	;
333)   0D38 7A          		 LD A, D	;
334)   0D39 32 8F F0    		 LD (VGATMPC),A	;
335)   0D3C AF          		NX2: XOR A         ;NC MEANS WE DON'T PRINT	;NC MEANS WE DON'T PRINT
336)   0D3D C9          		 RET	;
340)   0D3E CD 86 0D    		VGA_PRINT: CALL VGA_GETPAGE	;
341)   0D41 7E          		VGAP_AGN: LD A, (HL)	;
342)   0D42 FE 00       		 CP 0	;
343)   0D44 28 08       		 JR Z, VGAP_EX	;
344)   0D46 E5          		 PUSH HL	;
345)   0D47 CD E4 0C    		 CALL VGA_PRCH	;
346)   0D4A E1          		 POP HL	;
347)   0D4B 23          		 INC HL	;
348)   0D4C 18 F3       		 JR VGAP_AGN	;
349)   0D4E CD A8 0D    		VGAP_EX: CALL VGA_RMVPAGE	;
350)   0D51 C9          		 RET	;
353)   0D52 F5          		VGA_TXFORW: PUSH AF	;
354)   0D53 E5          		 PUSH HL	;
355)   0D54 21 8D F0    		 LD HL, VGAMAXX	;
356)   0D57 3A 8B F0    		 LD A, (VGATX_X)	;
357)   0D5A 3C          		 INC A	;
358)   0D5B BE          		 CP (HL)	;
359)   0D5C CC 65 0D    		 CALL Z, VGDOY	;
360)   0D5F 32 8B F0    		 LD (VGATX_X), A	;
361)   0D62 E1          		 POP HL	;
362)   0D63 F1          		 POP AF	;
363)   0D64 C9          		 RET	;
364)   0D65 21 8E F0    		VGDOY: LD HL, VGAMAXY	;
365)   0D68 3A 8C F0    		 LD A, (VGATX_Y)	;
366)   0D6B 3C          		 INC A	;
367)   0D6C BE          		 CP (HL)	;
368)   0D6D CC 75 0D    		 CALL Z, DOSCRL	;
369)   0D70 32 8C F0    		 LD (VGATX_Y), A	;
370)   0D73 AF          		 XOR A	;
371)   0D74 C9          		 RET	;
373)   0D75 CD B2 0C    		DOSCRL: CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
374)   0D78 CB 47       		 BIT 0, A	;
375)   0D7A CA 74 11    		 JP Z, DOSCRLGR	;
376)   0D7D CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
377)   0D7F CC 8D 0F    		 CALL Z, DOSCRL_COL       ;SCROLL COLORS IF BIT 1=0	;SCROLL COLORS IF BIT 1=0
378)   0D82 CD 57 0F    		 CALL DOSCRL_TXT       ;SCROLL TEXT	;SCROLL TEXT
379)   0D85 C9          		 RET	;
389)   0D86 3A 29 F0    		VGA_GETPAGE: LD A, (PGSEM)	;
390)   0D89 3C          		 INC A	;
391)   0D8A 32 29 F0    		 LD (PGSEM), A	;
392)   0D8D FE 01       		 CP 1	;
393)   0D8F C0          		 RET NZ	;
394)   0D90 E5          		 PUSH HL	;
395)   0D91 06 04       		 LD B, 4        ;8000h	;8000h
396)   0D93 CD 85 05    		 CALL GETPGINBANK	;
397)   0D96 32 25 F0    		 LD (TMPG), A        ;SAVE OLD PAGE	;SAVE OLD PAGE
398)   0D99 3A 90 F0    		 LD A,(VGABUF)	;
399)   0D9C 1F          		 RRA         ;PUT BIT 0 ON CARRY FLAG	;PUT BIT 0 ON CARRY FLAG
400)   0D9D 3E 08       		 LD A, 8        ;PAGE 8  IS BUFFER 0	;PAGE 8  IS BUFFER 0
401)   0D9F 30 02       		 JR NC, VGP_SETPG	;
402)   0DA1 3E 0C       		 LD A, 12        ;PAGE 12 IS BUFFER 1	;PAGE 12 IS BUFFER 1
403)   0DA3 CD 63 05    		VGP_SETPG: CALL PUTPGINBANK	;
404)   0DA6 E1          		 POP HL	;
405)   0DA7 C9          		 RET	;
409)   0DA8 3A 29 F0    		VGA_RMVPAGE: LD A, (PGSEM)	;
410)   0DAB 3D          		 DEC A	;
411)   0DAC 32 29 F0    		 LD (PGSEM), A	;
412)   0DAF FE 00       		 CP 0	;
413)   0DB1 C0          		 RET NZ	;
414)   0DB2 E5          		 PUSH HL	;
415)   0DB3 06 04       		 LD B, 4	;
416)   0DB5 3A 25 F0    		 LD A, (TMPG)	;
417)   0DB8 CD 63 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
418)   0DBB E1          		 POP HL	;
419)   0DBC C9          		 RET	;
421)   0DBD CD 86 0D    		VGA_SETFONT: CALL VGA_GETPAGE	;
422)   0DC0 21 00 40    		 LD HL, FONT_ADDR	;
423)   0DC3 11 00 90    		 LD DE, $9000        ;FONT ADDRESS ON VIDEO MEM AT $1000=4096 ON BANK 4=$8000	;FONT ADDRESS ON VIDEO MEM AT $1000=4096 ON BANK 4=$8000
424)   0DC6 01 00 0A    		 LD BC, 2560	;
425)   0DC9 ED B0       		 LDIR         ;TRANSFER	;TRANSFER
426)   0DCB CD A8 0D    		 CALL VGA_RMVPAGE	;
427)   0DCE C9          		 RET	;
430)   0DCF 79          		VGA_SETMAXS: LD A, C	;
431)   0DD0 16 28       		 LD D, 40	;
432)   0DD2 1E 14       		 LD E, 20	;
433)   0DD4 CB 4F       		 BIT 1,A        ;LOW RES MODE	;LOW RES MODE
434)   0DD6 28 04       		 JR Z, VGSM_NX	;
436)   0DD8 16 50       		 LD D, 80	;
437)   0DDA 1E 28       		 LD E, 40	;
438)   0DDC 7A          		VGSM_NX: LD A, D	;
439)   0DDD 32 8D F0    		 LD (VGAMAXX), A	;
440)   0DE0 7B          		 LD A, E	;
441)   0DE1 32 8E F0    		 LD (VGAMAXY), A	;
442)   0DE4 C9          		 RET	;
445)   0DE5 AF          		VGA_SETSCRDEFS: XOR A	;
446)   0DE6 32 29 F0    		 LD (PGSEM), A	;
447)   0DE9 32 25 F0    		 LD (TMPG), A	;
448)   0DEC 3E 0B       		 LD A, VGA_YELLOW	;
449)   0DEE 32 89 F0    		 LD (VGAFCOL), A	;
450)   0DF1 3E 04       		 LD A, VGA_NAVY	;
451)   0DF3 32 8A F0    		 LD (VGABCOL), A	;
452)   0DF6 CD CF 0D    		 CALL VGA_SETMAXS	;
453)   0DF9 AF          		 XOR A	;
454)   0DFA 32 8B F0    		 LD (VGATX_X), A	;
455)   0DFD 32 8C F0    		 LD (VGATX_Y), A	;
456)   0E00 C9          		 RET	;
458)   0E01 CD E5 0D    		VGA_TXTINIT: CALL VGA_SETSCRDEFS	;
459)   0E04 CD BD 0D    		 CALL VGA_SETFONT       ;SET THE FONT ON VIDEO MEM	;SET THE FONT ON VIDEO MEM
462)   0E07 3A 8D F0    		VGA_TXTCLR: LD A, (VGAMAXX)	;
463)   0E0A 67          		 LD H, A	;
464)   0E0B 3A 8E F0    		 LD A, (VGAMAXY)	;
465)   0E0E 5F          		 LD E, A	;
466)   0E0F CD AB 15    		 CALL MULT8	;
467)   0E12 E5          		 PUSH HL	;
468)   0E13 CD 86 0D    		 CALL VGA_GETPAGE	;
469)   0E16 CD B2 0C    		 CALL VGA_GETCONF	;
470)   0E19 C1          		 POP BC         ;TOTAL BYTES	;TOTAL BYTES
471)   0E1A CB 4F       		 BIT 1, A	;
472)   0E1C 28 0E       		 JR Z, ISLOWRES	;
474)   0E1E 21 00 80    		 LD HL, $8000	;
475)   0E21 3E 20       		 LD A, 32	;
476)   0E23 77          		 LD (HL), A	;
477)   0E24 11 01 80    		 LD DE, $8001	;
478)   0E27 ED B0       		 LDIR	;
479)   0E29 C3 51 0E    		 JP VGAC_EXIT	;
481)   0E2C 21 00 80    		ISLOWRES: LD HL, $8000       ;BANK4	;BANK4
482)   0E2F 11 00 84    		 LD DE, $8400        ;COLOR INFO	;COLOR INFO
483)   0E32 C3 41 0E    		 JP VGAC_AGN	;
488)   0E35 CD 86 0D    		VGA_CLR: CALL VGA_GETPAGE	;
489)   0E38 01 20 03    		 LD BC, 800	;
490)   0E3B 21 00 80    		 LD HL, $8000        ;DEL CHARS	;DEL CHARS
491)   0E3E 11 00 84    		 LD DE, $8400	;
494)   0E41 3E 20       		VGAC_AGN: LD A, 32	;
495)   0E43 77          		 LD (HL), A	;
496)   0E44 C5          		 PUSH BC	;
497)   0E45 CD 66 0E    		 CALL VGA_GETCOL	;
498)   0E48 C1          		 POP BC	;
499)   0E49 12          		 LD (DE), A	;
500)   0E4A 23          		 INC HL	;
501)   0E4B 13          		 INC DE	;
502)   0E4C 0B          		 DEC BC	;
503)   0E4D 78          		 LD A, B	;
504)   0E4E B1          		 OR C	;
505)   0E4F 20 F0       		 JR NZ, VGAC_AGN	;
506)   0E51 AF          		VGAC_EXIT: XOR A	;
507)   0E52 32 8B F0    		 LD (VGATX_X), A	;
508)   0E55 32 8C F0    		 LD (VGATX_Y), A	;
509)   0E58 CD A8 0D    		 CALL VGA_RMVPAGE	;
510)   0E5B C9          		 RET	;
514)   0E5C CB 20       		VGA_MIXCOLOR: SLA B	;
515)   0E5E CB 20       		 SLA B	;
516)   0E60 CB 20       		 SLA B	;
517)   0E62 CB 20       		 SLA B	;
518)   0E64 B0          		 OR B         ;BLEND COLOR 4 BITS FCOLOR AND 4 BITS BCOLOR	;BLEND COLOR 4 BITS FCOLOR AND 4 BITS BCOLOR
519)   0E65 C9          		 RET	;
523)   0E66 3A 8A F0    		VGA_GETCOL: LD A, (VGABCOL)      ;GET COLOR INFO	;GET COLOR INFO
524)   0E69 47          		 LD B, A	;
525)   0E6A 3A 89 F0    		 LD A, (VGAFCOL)	;
526)   0E6D CD 5C 0E    		 CALL VGA_MIXCOLOR	;
527)   0E70 C9          		 RET	;
531)   0E71 F5          		VGA_SETCOL: PUSH AF	;
532)   0E72 E6 0F       		 AND $0F	;
533)   0E74 32 89 F0    		 LD (VGAFCOL), A       ;SET COLOR INFO	;SET COLOR INFO
534)   0E77 F1          		 POP AF	;
535)   0E78 CB 27       		 SLA A	;
536)   0E7A CB 27       		 SLA A	;
537)   0E7C CB 27       		 SLA A	;
538)   0E7E CB 27       		 SLA A	;
539)   0E80 E6 0F       		 AND $0F	;
540)   0E82 32 8A F0    		 LD (VGABCOL), A       ;SET BACK COLOR	;SET BACK COLOR
541)   0E85 C9          		 RET	;
548)   0E86 F5          		VGA_CALC_VIDAD: PUSH AF	;
549)   0E87 3A 8C F0    		 LD A, (VGATX_Y)	;
550)   0E8A 67          		 LD H, A 	;
551)   0E8B 3A 8D F0    		 LD A, (VGAMAXX)	;
552)   0E8E 5F          		 LD E, A  	;
553)   0E8F CD AB 15    		 CALL Mult8	;
554)   0E92 11 00 80    		 LD DE, $8000	;
555)   0E95 19          		 ADD HL,DE	;
557)   0E96 16 00       		 LD D, 0	;
558)   0E98 3A 8B F0    		 LD A, (VGATX_X)	;
559)   0E9B 5F          		 LD E, A	;
560)   0E9C 19          		 ADD HL, DE	;
561)   0E9D F1          		 POP AF	;
562)   0E9E C9          		 RET	;
566)   0E9F E5          		VGA_DOPRNCHTXT: PUSH HL	;
567)   0EA0 F5          		 PUSH AF	;
568)   0EA1 CD 86 0D    		 CALL VGA_GETPAGE	;
569)   0EA4 CD 86 0E    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDRESS	;CALC VIDEO ADDRESS
570)   0EA7 F1          		 POP AF	;
571)   0EA8 77          		 LD (HL), A        ;PUT CHAR ON SCREEN	;PUT CHAR ON SCREEN
572)   0EA9 E5          		 PUSH HL	;
573)   0EAA CD B2 0C    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
574)   0EAD CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
575)   0EAF E1          		 POP HL	;
576)   0EB0 20 08       		 JR NZ, DPC_EX	;
577)   0EB2 11 00 04    		 LD DE, $400	;
578)   0EB5 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
579)   0EB6 CD 66 0E    		 CALL VGA_GETCOL       ;GET CURRENT COLOR	;GET CURRENT COLOR
580)   0EB9 77          		 LD (HL), A        ;PUT COLOR INFO ON SCREEN	;PUT COLOR INFO ON SCREEN
581)   0EBA E1          		DPC_EX: POP HL	;
582)   0EBB CD A8 0D    		 CALL VGA_RMVPAGE	;
583)   0EBE C9          		 RET	;
587)   0EBF F5          		VGA_DOCHCLR: PUSH AF	;
588)   0EC0 CD 86 0D    		 CALL VGA_GETPAGE	;
589)   0EC3 CD 86 0E    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDRESS	;CALC VIDEO ADDRESS
590)   0EC6 11 00 04    		 LD DE, $400	;
591)   0EC9 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
592)   0ECA F1          		 POP AF	;
593)   0ECB 77          		 LD (HL), A        ;PUT COLOR INFO ON SCREEN	;PUT COLOR INFO ON SCREEN
594)   0ECC CD A8 0D    		 CALL VGA_RMVPAGE	;
595)   0ECF C9          		 RET	;
598)   0ED0 CD B2 0C    		VGA_GETCHAR: CALL VGA_GETCONF      ;GET SCREEEN MODE	;GET SCREEEN MODE
599)   0ED3 CB 47       		 BIT 0,A	;
600)   0ED5 20 07       		 JR NZ,GC_DOIT       ;IF TEXT DOIT	;IF TEXT DOIT
602)   0ED7 16 93       		 LD D,  147 ;' '	;' '
603)   0ED9 3A 8A F0    		 LD A,(VGABCOL)	;
604)   0EDC 5F          		 LD E,A	;
605)   0EDD C9          		 RET	;
606)   0EDE CD 86 0D    		GC_DOIT: CALL VGA_GETPAGE	;
607)   0EE1 CD 86 0E    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDR ON HL	;CALC VIDEO ADDR ON HL
608)   0EE4 7E          		 LD A, (HL)	;
609)   0EE5 F5          		 PUSH AF	;
610)   0EE6 CD B2 0C    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
611)   0EE9 FE 03       		 CP 3  ;TEXT HI      ; CHECK IF HIRES SO NO COLOR INFO	;TEXT HI      ; CHECK IF HIRES SO NO COLOR INFO
612)   0EEB D1          		 POP DE        ;AF ON DE TO PRESERVE FLAG  	;AF ON DE TO PRESERVE FLAG
613)   0EEC 28 0A       		 JR Z, GC_NOCOL	;
614)   0EEE 7A          		 LD A, D	;
615)   0EEF 11 00 04    		 LD DE, $400  ;TEXT LOW	;TEXT LOW
616)   0EF2 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
617)   0EF3 57          		 LD D, A        ;THE CHAR	;THE CHAR
618)   0EF4 7E          		 LD A, (HL)       ;THE COLOR	;THE COLOR
619)   0EF5 5F          		 LD E, A	;
620)   0EF6 18 02       		 JR GC_EX	;
622)   0EF8 1E 00       		 LD E, 0	;
623)   0EFA 62          		GC_EX: LD H,D	;
624)   0EFB 6B          		 LD L,E	;
625)   0EFC CD A8 0D    		 CALL VGA_RMVPAGE	;
626)   0EFF 54          		 LD D,H	;
627)   0F00 5D          		 LD E,L	;
628)   0F01 C9          		 RET	;
631)   0F02 BB          		VGA_REVRCOLRS: CP E	;
632)   0F03 C8          		 RET Z	;
633)   0F04 7B          		 LD A, E	;
634)   0F05 0F          		 RRCA         ;CHANGE FORE AND BACK COLOR INFO	;CHANGE FORE AND BACK COLOR INFO
635)   0F06 0F          		 RRCA	;
636)   0F07 0F          		 RRCA	;
637)   0F08 0F          		 RRCA	;
638)   0F09 CD BF 0E    		 CALL VGA_DOCHCLR     ;CHANGE THE COLOR OF THE CHAR	;CHANGE THE COLOR OF THE CHAR
639)   0F0C C9          		 RET	;
641)   0F0D CD B2 0C    		VGA_RMVCURS: CALL VGA_GETCONF      ;GET SCREEEN MODE	;GET SCREEEN MODE
642)   0F10 CB 47       		 BIT 0,A	;
643)   0F12 28 04       		 JR Z, RC_GR       ;IF GRAPHICS	;IF GRAPHICS
644)   0F14 CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
645)   0F16 28 05       		 JR Z, RC_LOW	;
646)   0F18 3A 8F F0    		RC_GR: LD A, (VGATMPC)	;
647)   0F1B 18 0A       		 JR RC_EX	;
648)   0F1D CD D0 0E    		RC_LOW: CALL VGA_GETCHAR      ;GET CURRENT COLORS	;GET CURRENT COLORS
649)   0F20 CD 66 0E    		 CALL VGA_GETCOL       ;GET DEFAULT COLORS	;GET DEFAULT COLORS
650)   0F23 CD 02 0F    		 CALL VGA_REVRCOLRS      ;REVERSE IF NECESSARY	;REVERSE IF NECESSARY
651)   0F26 C9          		 RET	;
652)   0F27 CD F4 0C    		RC_EX: CALL VGA_DOPRNCH	;
653)   0F2A C9          		 RET	;
654)   0F2B CD D0 0E    		VGA_PRNCURS: CALL VGA_GETCHAR      ; E HAS THE COLOR INFO	; E HAS THE COLOR INFO
655)   0F2E D5          		 PUSH DE	;
656)   0F2F CD B2 0C    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
657)   0F32 D1          		 POP DE	;
658)   0F33 CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO  	; CHECK IF HIRES SO NO COLOR INFO
659)   0F35 20 13       		 JR NZ, PC_NOCOL	;
660)   0F37 CB 47       		 BIT 0,A        ;CHECK IF GRAPH SO NO TEXT COLOR INFO	;CHECK IF GRAPH SO NO TEXT COLOR INFO
661)   0F39 28 0B       		 JR Z, PC_LORESGR	;
662)   0F3B CD 66 0E    		 CALL VGA_GETCOL       ;GET CURRENT COLORS	;GET CURRENT COLORS
663)   0F3E 0F          		 RRCA        ;REVERSE BACK & FORE	;REVERSE BACK & FORE
664)   0F3F 0F          		 RRCA	;
665)   0F40 0F          		 RRCA	;
666)   0F41 0F          		 RRCA	;
667)   0F42 CD 02 0F    		 CALL VGA_REVRCOLRS      ;LOWRES TEXT REVERSE COLORS	;LOWRES TEXT REVERSE COLORS
668)   0F45 C9          		 RET	;
669)   0F46 3E 93       		PC_LORESGR: LD A, VGA_CURSCHAR	;
670)   0F48 18 09       		 JR PC_EX	;
671)   0F4A 7A          		PC_NOCOL: LD A,D	;
672)   0F4B FE 93       		 CP VGA_CURSCHAR	;
673)   0F4D C8          		 RET Z        ;ALREADY PRINTED	;ALREADY PRINTED
674)   0F4E 32 8F F0    		 LD (VGATMPC), A	;
675)   0F51 3E 93       		 LD A, VGA_CURSCHAR        ;'_'	;'_'
676)   0F53 CD F4 0C    		PC_EX: CALL VGA_DOPRNCH  	;
677)   0F56 C9          		 RET	;
682)   0F57 CD 86 0D    		DOSCRL_TXT: CALL VGA_GETPAGE	;
683)   0F5A 3A 8D F0    		 LD A, (VGAMAXX)	;
684)   0F5D 26 00       		 LD H, 0	;
685)   0F5F 6F          		 LD L, A	;
686)   0F60 11 00 80    		 LD DE, $8000	;
687)   0F63 19          		 ADD HL, DE	;
689)   0F64 E5          		 PUSH HL	;
690)   0F65 D5          		 PUSH DE	;
692)   0F66 67          		 LD H, A	;
693)   0F67 3A 8E F0    		 LD A, (VGAMAXY)	;
694)   0F6A 3D          		 DEC A	;
695)   0F6B 5F          		 LD E, A	;
696)   0F6C CD AB 15    		 CALL Mult8	;
697)   0F6F 44          		 LD B, H	;
698)   0F70 4D          		 LD C, L	;
699)   0F71 D1          		 POP DE	;
700)   0F72 E1          		 POP HL	;
701)   0F73 C5          		 PUSH BC	;
702)   0F74 ED B0       		 LDIR         ;SCROLL UP 39 LINES	;SCROLL UP 39 LINES
703)   0F76 D1          		 POP DE        ;DE = BC	;DE = BC
704)   0F77 21 00 80    		 LD HL, $8000	;
705)   0F7A 19          		 ADD HL, DE        ;LINE 39 OR 19 ADDRESS TO BE CLEARED (0-39) (0-19)	;LINE 39 OR 19 ADDRESS TO BE CLEARED (0-39) (0-19)
706)   0F7B 3A 8D F0    		 LD A, (VGAMAXX)       ;80 OR 40	;80 OR 40
707)   0F7E 47          		 LD B, A	;
708)   0F7F 3E 20       		 LD A, 32	;
709)   0F81 77          		DST_AGN: LD (HL), A	;
710)   0F82 23          		 INC HL	;
711)   0F83 10 FC       		 DJNZ DST_AGN	;
712)   0F85 CD A8 0D    		 CALL VGA_RMVPAGE	;
713)   0F88 3A 8E F0    		 LD A, (VGAMAXY)	;
714)   0F8B 3D          		 DEC A	;
715)   0F8C C9          		 RET	;
717)   0F8D CD 86 0D    		DOSCRL_COL: CALL VGA_GETPAGE	;
718)   0F90 21 28 84    		 LD HL, $8428        ;LINE 1	;LINE 1
719)   0F93 11 00 84    		 LD DE, $8400        ;LINE 0	;LINE 0
720)   0F96 01 F8 02    		 LD BC, 800 - 40       ;BYTES TO SCROLL UP	;BYTES TO SCROLL UP
721)   0F99 ED B0       		 LDIR	;
722)   0F9B CD 66 0E    		 CALL VGA_GETCOL       ;SET DEFAULT COLOR	;SET DEFAULT COLOR
723)   0F9E 21 F8 86    		 LD HL, $86F8        ;LINE 19 = LAST LINE	;LINE 19 = LAST LINE
724)   0FA1 06 28       		 LD B, 40	;
725)   0FA3 77          		DOS_AGNCL: LD (HL), A       ;CLEAR LAST LINE	;CLEAR LAST LINE
726)   0FA4 23          		 INC HL	;
727)   0FA5 10 FC       		 DJNZ DOS_AGNCL	;
728)   0FA7 CD A8 0D    		 CALL VGA_RMVPAGE	;
729)   0FAA C9          		 RET	;
739)   0FAB 3A 29 F0    		 LD A, (PGSEM)	;
740)   0FAE 3C          		 INC A	;
741)   0FAF 32 29 F0    		 LD (PGSEM), A	;
742)   0FB2 FE 01       		 CP 1	;
743)   0FB4 C0          		 RET NZ	;
744)   0FB5 E5          		 PUSH HL	;
745)   0FB6 06 02       		 LD B, 2        ;4000h	;4000h
746)   0FB8 CD 85 05    		 CALL GETPGINBANK	;
747)   0FBB 32 25 F0    		 LD (TMPG), A	;
748)   0FBE 06 03       		 LD B, 3        ;6000h	;6000h
749)   0FC0 CD 85 05    		 CALL GETPGINBANK	;
750)   0FC3 32 26 F0    		 LD (TMPG + 1), A	;
751)   0FC6 3A 90 F0    		 LD A,(VGABUF)	;
752)   0FC9 1F          		 RRA        ;PUT SCREEN BUF ON CARRY FLAG	;PUT SCREEN BUF ON CARRY FLAG
753)   0FCA 38 10       		 JR C,VSPL_SETBUFONE	;
755)   0FCC 3E 08       		 LD A, 8	;
756)   0FCE 06 02       		 LD B, 2	;
757)   0FD0 CD 63 05    		 CALL PUTPGINBANK	;
759)   0FD3 3E 09       		 LD A, 9	;
760)   0FD5 06 03       		 LD B, 3	;
761)   0FD7 CD 63 05    		 CALL PUTPGINBANK	;
762)   0FDA E1          		 POP HL	;
763)   0FDB C9          		 RET	;
765)   0FDC 3E 0C       		 LD A, 12	;
766)   0FDE 06 02       		 LD B, 2	;
767)   0FE0 CD 63 05    		 CALL PUTPGINBANK	;
769)   0FE3 3E 0D       		 LD A, 13	;
770)   0FE5 06 03       		 LD B, 3	;
771)   0FE7 CD 63 05    		 CALL PUTPGINBANK	;
772)   0FEA E1          		 POP HL	;
773)   0FEB C9          		 RET	;
780)   0FEC 3A 29 F0    		 LD A, (PGSEM)	;
781)   0FEF 3C          		 INC A	;
782)   0FF0 32 29 F0    		 LD (PGSEM), A	;
783)   0FF3 FE 01       		 CP 1	;
784)   0FF5 C0          		 RET NZ	;
785)   0FF6 E5          		 PUSH HL	;
786)   0FF7 06 02       		 LD B, 2        ;4000h	;4000h
787)   0FF9 CD 85 05    		 CALL GETPGINBANK	;
788)   0FFC 32 25 F0    		 LD (TMPG), A	;
789)   0FFF 06 03       		 LD B, 3        ;6000h	;6000h
790)   1001 CD 85 05    		 CALL GETPGINBANK	;
791)   1004 32 26 F0    		 LD (TMPG + 1), A	;
792)   1007 3A 90 F0    		 LD A,(VGABUF)	;
793)   100A 1F          		 RRA        ;PUT SCREEN BUF ON CARRY FLAG	;PUT SCREEN BUF ON CARRY FLAG
794)   100B 38 10       		 JR C,VSPH_SETBUFONE	;
796)   100D 3E 0A       		 LD A, 10	;
797)   100F 06 02       		 LD B, 2	;
798)   1011 CD 63 05    		 CALL PUTPGINBANK	;
800)   1014 3E 0B       		 LD A, 11	;
801)   1016 06 03       		 LD B, 3	;
802)   1018 CD 63 05    		 CALL PUTPGINBANK	;
803)   101B E1          		 POP HL	;
804)   101C C9          		 RET	;
806)   101D 3E 0E       		 LD A, 14	;
807)   101F 06 02       		 LD B, 2	;
808)   1021 CD 63 05    		 CALL PUTPGINBANK	;
810)   1024 3E 0F       		 LD A, 15	;
811)   1026 06 03       		 LD B, 3	;
812)   1028 CD 63 05    		 CALL PUTPGINBANK	;
813)   102B E1          		 POP HL	;
814)   102C C9          		 RET	;
819)   102D 3A 29 F0    		VGA_RMVGRPG: LD A, (PGSEM)	;
820)   1030 FE 00       		 CP 0	;
821)   1032 C8          		 RET Z	;
822)   1033 3D          		 DEC A	;
823)   1034 32 29 F0    		 LD (PGSEM), A	;
824)   1037 FE 00       		 CP 0	;
825)   1039 C0          		 RET NZ	;
826)   103A E5          		 PUSH HL	;
827)   103B 06 02       		 LD B, 2	;
828)   103D 3A 25 F0    		 LD A, (TMPG)	;
829)   1040 CD 63 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
830)   1043 06 03       		 LD B, 3	;
831)   1045 3A 26 F0    		 LD A, (TMPG + 1)	;
832)   1048 CD 63 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
833)   104B E1          		 POP HL	;
834)   104C C9          		 RET	;
837)   104D CD E5 0D    		VGA_GRPHINIT: CALL VGA_SETSCRDEFS     ;SET SCREEN DEFAULTS	;SET SCREEN DEFAULTS
838)   1050 CD D7 10    		 CALL VGA_GRCLS	;
839)   1053 AF          		 XOR A	;
840)   1054 C9          		 RET	;
846)   1055 F5          		VGA_CHECKXY32: PUSH AF	;
847)   1056 E5          		 PUSH HL	;
848)   1057 D5          		 PUSH DE	;
849)   1058 B7          		 OR A	;
850)   1059 11 40 01    		 LD DE, 320	;
851)   105C ED 52       		 SBC HL, DE	;
852)   105E 30 0F       		 JR NC, CXY3_ABEX	;
853)   1060 D1          		 POP DE	;
854)   1061 D5          		 PUSH DE	;
855)   1062 EB          		 EX DE, HL	;
856)   1063 11 C8 00    		 LD DE, 200	;
857)   1066 ED 52       		 SBC HL, DE	;
858)   1068 30 05       		 JR NC, CXY3_ABEX	;
859)   106A D1          		 POP DE	;
860)   106B E1          		 POP HL	;
861)   106C F1          		 POP AF	;
862)   106D 37          		 SCF         ;RETURN WITH C SET	;RETURN WITH C SET
863)   106E C9          		 RET	;
865)   106F D1          		CXY3_ABEX: POP DE        	;
866)   1070 E1          		 POP HL	;
867)   1071 F1          		 POP AF	;
868)   1072 B7          		 OR A	;
869)   1073 C9          		 RET         ;RETURN WITH NC  	;RETURN WITH NC
875)   1074 CD 55 10    		VGA_PLTPXL32: CALL VGA_CHECKXY32     ;CHECK BOUNDS	;CHECK BOUNDS
876)   1077 D0          		 RET NC	;
877)   1078 E5          		 PUSH HL        ;CHECK BOUNDS	;CHECK BOUNDS
878)   1079 F5          		 PUSH AF	;
879)   107A 7B          		 LD A, E	;
880)   107B FE 66       		 CP 102	;
881)   107D 38 27       		 JR C, PPNXT0        ;LESS THAN 102	;LESS THAN 102
882)   107F 20 16       		 JR NZ, NXTBNK        ;MORE THAN 102	;MORE THAN 102
883)   1081 E5          		 PUSH HL        ;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES	;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
884)   1082 01 80 00    		 LD BC, 128	;
885)   1085 B7          		 OR A	;
886)   1086 ED 42       		 SBC HL, BC	;
887)   1088 47          		 LD B, A	;
888)   1089 7C          		 LD A, H	;
889)   108A B7          		 OR A         ; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128	; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
890)   108B 78          		 LD A, B	;
891)   108C E1          		 POP HL	;
892)   108D 20 17       		 JR NZ, PPNXT0	;
894)   108F 3E 67       		 LD A, 103        ;WE ARE AT LINE ZERO ON 2ND BANK	;WE ARE AT LINE ZERO ON 2ND BANK
895)   1091 11 40 01    		 LD DE, 129 + 191	;
896)   1094 B7          		 OR A	;
897)   1095 ED 52       		 SBC HL, DE        ;	;
898)   1097 D6 67       		NXTBNK: SUB 103        ;SKIP 102 ROWS	;SKIP 102 ROWS
899)   1099 11 C0 00    		 LD DE, 192        ;320-128	;320-128
900)   109C B7          		 OR A	;
901)   109D ED 5A       		 ADC HL, DE	;
902)   109F F5          		 PUSH AF	;
904)   10A0 CD EC 0F    		 CALL VGA_SETGRPGHI	;
906)   10A3 F1          		 POP AF         ;A HAS THE ROWS ON 2ND 16K	;A HAS THE ROWS ON 2ND 16K
907)   10A4 18 05       		 JR PPNXT1	;
908)   10A6 F5          		PPNXT0: PUSH AF        ;A=E=ROW=Y	;A=E=ROW=Y
909)   10A7 CD AB 0F    		 CALL VGA_SETGRPGLO	;
910)   10AA F1          		 POP AF	;
911)   10AB 11 00 40    		PPNXT1: LD DE, BASEADDR	;
913)   10AE CB 3C       		 SRL H	;
914)   10B0 CB 1D       		 RR L	;
915)   10B2 19          		 ADD HL, DE        ;FIND COLUMN	;FIND COLUMN
916)   10B3 E5          		 PUSH HL	;
917)   10B4 11 A0 00    		 LD DE, 160	;
919)   10B7 CD B7 15    		 CALL Mult12	;
920)   10BA D1          		 POP DE	;
921)   10BB 19          		 ADD HL, DE	;
922)   10BC C1          		DOPLOTPX: POP BC        ;B HAS THE COLOR	;B HAS THE COLOR
923)   10BD D1          		 POP DE         ;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL	;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
924)   10BE 7E          		 LD A, (HL)        ;GET PIXEL BYTE	;GET PIXEL BYTE
925)   10BF CB 43       		 BIT 0, E        ;CHECK X IS EVEN OR ODD	;CHECK X IS EVEN OR ODD
926)   10C1 28 04       		 JR Z, DOEVEN        ;EVEN	;EVEN
928)   10C3 E6 F0       		 AND $F0        ;CLEAR RIGHT 4 BITS	;CLEAR RIGHT 4 BITS
929)   10C5 18 0A       		 JR DPEXIT	;
931)   10C7 CB 00       		DOEVEN: RLC B	;
932)   10C9 CB 00       		 RLC B	;
933)   10CB CB 00       		 RLC B	;
934)   10CD CB 00       		 RLC B	;
935)   10CF E6 0F       		 AND $0F        ;ZERO LEFT	;ZERO LEFT
936)   10D1 B0          		DPEXIT: OR B         ;MIX PIXELS	;MIX PIXELS
937)   10D2 77          		 LD (HL), A	;
938)   10D3 CD 2D 10    		 CALL VGA_RMVGRPG	;
939)   10D6 C9          		 RET	;
942)   10D7 CD AB 0F    		VGA_GRCLS: CALL VGA_SETGRPGLO	;
943)   10DA 21 00 40    		 LD HL, BASEADDR	;
944)   10DD 11 01 40    		 LD DE, BASEADDR + 1	;
945)   10E0 01 FF 3F    		 LD BC, 16384 - 1       ;BYTES ON 1ST 16K	;BYTES ON 1ST 16K
946)   10E3 AF          		 XOR A	;
947)   10E4 77          		 LD (HL), A	;
948)   10E5 ED B0       		 LDIR         ;RED - RED	;RED - RED
950)   10E7 CD 2D 10    		 CALL VGA_RMVGRPG	;
951)   10EA CD EC 0F    		 CALL VGA_SETGRPGHI	;
952)   10ED 21 00 40    		 LD HL, BASEADDR	;
953)   10F0 11 01 40    		 LD DE, BASEADDR + 1	;
954)   10F3 01 FF 3C    		 LD BC, 15616 - 1       ;BYTES ON 2ND 16K	;BYTES ON 2ND 16K
955)   10F6 AF          		 XOR A	;
956)   10F7 77          		 LD (HL), A	;
957)   10F8 ED B0       		 LDIR	;
958)   10FA CD 2D 10    		 CALL VGA_RMVGRPG	;
959)   10FD AF          		 XOR A        ;RESET TEXT COORDS	;RESET TEXT COORDS
960)   10FE 32 8B F0    		 LD (VGATX_X), A	;
961)   1101 32 8C F0    		 LD (VGATX_Y), A	;
962)   1104 C9          		 RET         ;TO MENU	;TO MENU
964)   1105 C5          		FILLBTS: PUSH BC	;
965)   1106 12          		AGN1: LD (DE), A	;
966)   1107 13          		 INC DE	;
967)   1108 0B          		 DEC BC	;
968)   1109 67          		 LD H, A	;
969)   110A 78          		 LD A, B	;
970)   110B B1          		 OR C	;
971)   110C 7C          		 LD A, H	;
972)   110D 20 F7       		 JR NZ, AGN1	;
973)   110F 2D          		 DEC L	;
974)   1110 7D          		 LD A, L	;
975)   1111 B7          		 OR A	;
976)   1112 7C          		 LD A, H	;
977)   1113 C1          		 POP BC	;
978)   1114 20 EF       		 JR NZ, FILLBTS	;
979)   1116 C9          		 RET	;
985)   1117 E5          		VGA_GETPXL32: PUSH HL	;
986)   1118 F5          		 PUSH AF	;
987)   1119 7B          		 LD A, E	;
988)   111A FE 66       		 CP 102	;
989)   111C 38 25       		 JR C, GPNXT0        ;LESS THAN 102	;LESS THAN 102
990)   111E 20 16       		 JR NZ, GPNXTBNK       ;MORE THAN 102	;MORE THAN 102
991)   1120 E5          		 PUSH HL        ;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES	;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
992)   1121 01 80 00    		 LD BC, 128	;
993)   1124 B7          		 OR A	;
994)   1125 ED 42       		 SBC HL, BC	;
995)   1127 47          		 LD B, A	;
996)   1128 7C          		 LD A, H	;
997)   1129 B7          		 OR A         ; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128	; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
998)   112A 78          		 LD A, B	;
999)   112B E1          		 POP HL	;
1000)   112C 20 15       		 JR NZ, GPNXT0	;
1002)   112E 3E 67       		 LD A, 103        ;WE ARE AT LINE ZERO ON 2ND BANK	;WE ARE AT LINE ZERO ON 2ND BANK
1003)   1130 11 40 01    		 LD DE, 129 + 191	;
1004)   1133 B7          		 OR A	;
1005)   1134 ED 52       		 SBC HL, DE        ;	;
1006)   1136 D6 67       		GPNXTBNK: SUB 103       ;SKIP 102 ROWS	;SKIP 102 ROWS
1007)   1138 11 C0 00    		 LD DE, 192        ;320-128	;320-128
1008)   113B 19          		 ADD HL, DE	;
1009)   113C F5          		 PUSH AF	;
1011)   113D CD EC 0F    		 CALL VGA_SETGRPGHI	;
1013)   1140 F1          		 POP AF         ;A HAS THE ROWS ON 2ND 16K	;A HAS THE ROWS ON 2ND 16K
1014)   1141 18 05       		 JR GPNXT1	;
1015)   1143 F5          		GPNXT0: PUSH AF        ;A=E=ROW=Y	;A=E=ROW=Y
1016)   1144 CD AB 0F    		 CALL VGA_SETGRPGLO	;
1017)   1147 F1          		 POP AF	;
1018)   1148 11 00 40    		GPNXT1: LD DE, BASEADDR	;
1020)   114B CB 3C       		 SRL H	;
1021)   114D CB 1D       		 RR L	;
1022)   114F 19          		 ADD HL, DE        ;FIND COLUMN	;FIND COLUMN
1023)   1150 11 A0 00    		 LD DE, 160	;
1024)   1153 CD B7 15    		 CALL Mult12        ;HL=A*DE	;HL=A*DE
1025)   1156 C1          		GPDOGETPX: POP BC        ;B HAS THE COLOR	;B HAS THE COLOR
1026)   1157 D1          		 POP DE         ;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL	;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
1027)   1158 7E          		 LD A, (HL)        ;GET PIXEL BYTE	;GET PIXEL BYTE
1028)   1159 CB 43       		 BIT 0, E        ;CHECK X IS EVEN OR ODD	;CHECK X IS EVEN OR ODD
1029)   115B 28 04       		 JR Z, GPDOEVEN        ;EVEN	;EVEN
1031)   115D E6 0F       		 AND $0F        ;CLEAR LEFT 4 BITS	;CLEAR LEFT 4 BITS
1032)   115F 18 0A       		 JR GPDPEXIT	;
1034)   1161 CB 07       		GPDOEVEN: RLC A	;
1035)   1163 CB 07       		 RLC A	;
1036)   1165 CB 07       		 RLC A	;
1037)   1167 CB 07       		 RLC A	;
1038)   1169 E6 0F       		 AND $0F        ;ZERO LEFT	;ZERO LEFT
1039)   116B F5          		GPDPEXIT: PUSH AF       ;SAVE PIXEL	;SAVE PIXEL
1040)   116C CD 2D 10    		 CALL VGA_RMVGRPG	;
1041)   116F F1          		 POP AF         ;RESTORE PIXEL	;RESTORE PIXEL
1042)   1170 C9          		 RET	;
1047)   1171 C3 7A 12    		VGA_DOPRNCHGRP: JP VGA_PRNGRCH	;
1055)   1174 C9          		 RET	;
1061)   1175 06 02       		SETGRAPHPGS: LD B, 2	;
1062)   1177 3A 29 F0    		 LD A, (PGSEM)        ;PG SEM FOR ALL 4 PAGES	;PG SEM FOR ALL 4 PAGES
1063)   117A 3C          		 INC A	;
1064)   117B 32 29 F0    		 LD (PGSEM), A	;
1065)   117E FE 01       		 CP 1	;
1066)   1180 C0          		 RET NZ	;
1067)   1181 E5          		 PUSH HL	;
1068)   1182 0E 04       		 LD C, 4	;
1069)   1184 21 25 F0    		 LD HL, TMPG	;
1070)   1187 C5          		 PUSH BC	;
1071)   1188 E5          		SGP_NXT: PUSH HL	;
1072)   1189 CD 85 05    		 CALL GETPGINBANK	;
1073)   118C E1          		 POP HL	;
1074)   118D 77          		 LD (HL), A	;
1075)   118E 23          		 INC HL	;
1076)   118F 04          		 INC B	;
1077)   1190 0D          		 DEC C	;
1078)   1191 20 F5       		 JR NZ, SGP_NXT	;
1079)   1193 C1          		 POP BC	;
1080)   1194 0E 04       		 LD C, 4	;
1081)   1196 3A 90 F0    		 LD A,(VGABUF)	;
1082)   1199 1F          		 RRA	;
1083)   119A 3E 08       		 LD A, 8       ;BUFFER 0	;BUFFER 0
1084)   119C 30 02       		 JR NC, SGP_NXT2	;
1085)   119E 3E 0C       		 LD A, 12      ;BUFFER 1	;BUFFER 1
1088)   11A0 C5          		SGP_NXT2: PUSH BC	;
1089)   11A1 CD 63 05    		 CALL PUTPGINBANK	;
1090)   11A4 C1          		 POP BC	;
1091)   11A5 3C          		 INC A	;
1092)   11A6 04          		 INC B	;
1093)   11A7 0D          		 DEC C	;
1094)   11A8 20 F6       		 JR NZ, SGP_NXT2	;
1095)   11AA E1          		 POP HL	;
1096)   11AB C9          		 RET	;
1100)   11AC 06 02       		RMVGRAPHPGS: LD B, 2	;
1101)   11AE 3A 29 F0    		 LD A, (PGSEM)	;
1102)   11B1 FE 00       		 CP 0	;
1103)   11B3 C8          		 RET Z	;
1104)   11B4 3D          		 DEC A	;
1105)   11B5 32 29 F0    		 LD (PGSEM), A	;
1106)   11B8 FE 00       		 CP 0	;
1107)   11BA C0          		 RET NZ	;
1108)   11BB E5          		 PUSH HL	;
1109)   11BC 21 25 F0    		 LD HL, TMPG	;
1110)   11BF 0E 04       		 LD C, 4	;
1111)   11C1 7E          		RGP_NXT: LD A, (HL)	;
1112)   11C2 E5          		 PUSH HL	;
1113)   11C3 C5          		 PUSH BC	;
1114)   11C4 CD 63 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
1115)   11C7 C1          		 POP BC	;
1116)   11C8 E1          		 POP HL	;
1117)   11C9 04          		 INC B	;
1118)   11CA 23          		 INC HL	;
1119)   11CB 0D          		 DEC C	;
1120)   11CC 20 F3       		 JR NZ, RGP_NXT	;
1121)   11CE E1          		 POP HL	;
1122)   11CF C9          		 RET	;
1132)   11D0 3E 50       		VGA_CALC_VA64: LD A, 80	;
1134)   11D2 E5          		 PUSH HL	;
1135)   11D3 CD B7 15    		 CALL Mult12        ;HL=A * DE=Y	;HL=A * DE=Y
1136)   11D6 EB          		 EX DE, HL        ;DE=Y*80	;DE=Y*80
1137)   11D7 E1          		 POP HL	;
1138)   11D8 0E 08       		 LD C, 8	;
1139)   11DA CD 0D 16    		 CALL DIV16_8        ;HL=HL/C  A=REMAINDER	;HL=HL/C  A=REMAINDER
1140)   11DD 19          		 ADD HL, DE        ;THE ADDRESS IN 32K VIDEO BUFFER	;THE ADDRESS IN 32K VIDEO BUFFER
1141)   11DE 11 00 40    		 LD DE, $4000	;
1142)   11E1 19          		 ADD HL, DE        ;THE ADDRESS IN Z80 RAM	;THE ADDRESS IN Z80 RAM
1144)   11E2 4F          		 LD C,A	;
1145)   11E3 3E 07       		 LD A,7	;
1146)   11E5 91          		 SUB C        ;A=7-REM TO FIND THE BIT TO SET LEFT TO RIGHT	;A=7-REM TO FIND THE BIT TO SET LEFT TO RIGHT
1147)   11E6 06 01       		 LD B, 1	;
1148)   11E8 B7          		 OR A	;
1149)   11E9 28 05       		VCVA_AGN: JR Z, VCVA_NXT	;
1150)   11EB CB 10       		 RL B         ;MOVE B (THE MASK) TO THE RIGHT BIT	;MOVE B (THE MASK) TO THE RIGHT BIT
1151)   11ED 3D          		 DEC A	;
1152)   11EE 18 F9       		 JR VCVA_AGN	;
1153)   11F0 78          		VCVA_NXT: LD A, B	;
1154)   11F1 C9          		 RET	;
1161)   11F2 F5          		VGA_CHECKXY64: PUSH AF	;
1162)   11F3 E5          		 PUSH HL	;
1163)   11F4 D5          		 PUSH DE	;
1164)   11F5 B7          		 OR A	;
1165)   11F6 11 80 02    		 LD DE, 640	;
1166)   11F9 ED 52       		 SBC HL, DE	;
1167)   11FB 30 0F       		 JR NC, CXY6_ABEX	;
1168)   11FD D1          		 POP DE	;
1169)   11FE D5          		 PUSH DE	;
1170)   11FF EB          		 EX DE, HL	;
1171)   1200 11 90 01    		 LD DE, 400	;
1172)   1203 ED 52       		 SBC HL, DE	;
1173)   1205 D1          		 POP DE         ;ABNORMAL EXIT PIXEL CANT PUT TO SCREEN	;ABNORMAL EXIT PIXEL CANT PUT TO SCREEN
1174)   1206 E1          		 POP HL	;
1175)   1207 30 03       		 JR NC, CXY6_ABEX	;
1176)   1209 F1          		 POP AF	;
1177)   120A 37          		 SCF         ;RETURN WITH C SET	;RETURN WITH C SET
1178)   120B C9          		 RET	;
1179)   120C F1          		CXY6_ABEX: POP AF	;
1180)   120D AF          		 XOR A	;
1181)   120E C9          		 RET         ;RETURN WITH NC	;RETURN WITH NC
1186)   120F CD F2 11    		VGA_PLTPXL64: CALL VGA_CHECKXY64	;
1187)   1212 D0          		 RET NC         ;NOT VALID PARAMS	;NOT VALID PARAMS
1188)   1213 F5          		 PUSH AF	;
1189)   1214 E5          		 PUSH HL	;
1190)   1215 D5          		 PUSH DE	;
1191)   1216 CD 75 11    		 CALL SETGRAPHPGS       ;BRING VIDEO PAGES TO Z80	;BRING VIDEO PAGES TO Z80
1192)   1219 D1          		PP6_PAROK: POP DE	;
1193)   121A E1          		 POP HL	;
1195)   121B CD D0 11    		 CALL VGA_CALC_VA64       ;HL THE VGA ADDRESS AND A THE BIT MASK	;HL THE VGA ADDRESS AND A THE BIT MASK
1196)   121E D1          		 POP DE         ;D HAS THE COLOR 0 OR 1, RESET BIT OR SET	;D HAS THE COLOR 0 OR 1, RESET BIT OR SET
1197)   121F 5F          		 LD E, A	;
1198)   1220 3A 8A F0    		 LD A,(VGABCOL)	;
1199)   1223 BA          		 CP D         ;CHECK IF COLOR IS SAME AS BACKG	;CHECK IF COLOR IS SAME AS BACKG
1200)   1224 28 05       		 JR Z, PP6_RESET	;
1202)   1226 7E          		 LD A, (HL)        ;GET THE BYTE	;GET THE BYTE
1203)   1227 B3          		 OR E         ;SET THE BIT	;SET THE BIT
1204)   1228 77          		 LD (HL), A        ;PUT THE BYTE BACK	;PUT THE BYTE BACK
1205)   1229 18 06       		 JR PP6_EXIT	;
1208)   122B 7B          		 LD A, E        ;MASK ON A	;MASK ON A
1209)   122C 2F          		 CPL         ;INVERT ALL PIXELS	;INVERT ALL PIXELS
1210)   122D 5F          		 LD E, A        ;MASK ON E	;MASK ON E
1211)   122E 7E          		 LD A, (HL)        ;GET THE BYTE	;GET THE BYTE
1212)   122F A3          		 AND E         ;RESET THE BIT	;RESET THE BIT
1213)   1230 77          		 LD (HL), A        ;PUT THE BYTE BACK	;PUT THE BYTE BACK
1214)   1231 CD AC 11    		PP6_EXIT: CALL RMVGRAPHPGS      ;RESTORE PREVIOUS PAGES TO Z80	;RESTORE PREVIOUS PAGES TO Z80
1215)   1234 C9          		 RET	;
1223)   1235 CD F2 11    		VGA_GETPXL64: CALL VGA_CHECKXY64	;
1224)   1238 D0          		 RET NC         ;NOT VALID PARAMS	;NOT VALID PARAMS
1225)   1239 CD 75 11    		 CALL SETGRAPHPGS       ;BRING VIDEO PAGES TO Z80	;BRING VIDEO PAGES TO Z80
1226)   123C D1          		 POP DE	;
1227)   123D E1          		 POP HL	;
1228)   123E F1          		 POP AF	;
1230)   123F CD D0 11    		 CALL VGA_CALC_VA64       ;HL THE VGA ADDRESS AND A THE BIT MASK	;HL THE VGA ADDRESS AND A THE BIT MASK
1231)   1242 5F          		 LD E, A	;
1232)   1243 7E          		 LD A, (HL)	;
1233)   1244 A3          		 AND E	;
1234)   1245 FE 00       		 CP 0	;
1235)   1247 28 02       		 JR Z, GP6EXIT	;
1236)   1249 3E 01       		 LD A, 1	;
1238)   124B F5          		GP6EXIT: PUSH AF	;
1239)   124C CD AC 11    		 CALL RMVGRAPHPGS       ;RESTORE PREVIOUS PAGES TO Z80	;RESTORE PREVIOUS PAGES TO Z80
1240)   124F F1          		 POP AF	;
1241)   1250 C9          		 RET	;
1249)   1251 F5          		VGA_PLTPXL: PUSH AF	;
1250)   1252 E5          		 PUSH HL	;
1251)   1253 D5          		 PUSH DE        ;SAVE A	;SAVE A
1252)   1254 CD B2 0C    		 CALL VGA_GETCONF	;
1253)   1257 D1          		 POP DE	;
1254)   1258 E1          		 POP HL	;
1255)   1259 F1          		 POP AF	;
1256)   125A E5          		 PUSH HL	;
1257)   125B D5          		 PUSH DE	;
1258)   125C DD 21 6A 12 		 LD IX,VGA_PPEXIT	;
1259)   1260 DD E5       		 PUSH IX        ;RETURN ADDRESS  	;RETURN ADDRESS
1260)   1262 CB 49       		 BIT 1, C        ;test low or hi	;test low or hi
1261)   1264 C2 0F 12    		 JP NZ, VGA_PLTPXL64       ;NZ MEANS HI	;NZ MEANS HI
1262)   1267 C3 74 10    		 JP VGA_PLTPXL32	;
1263)   126A D1          		VGA_PPEXIT: POP DE	;
1264)   126B E1          		 POP HL	;
1265)   126C C9          		 RET	;
1271)   126D D5          		VGA_GETPXL: PUSH DE	;
1272)   126E CD B2 0C    		 CALL VGA_GETCONF	;
1273)   1271 D1          		 POP DE	;
1274)   1272 CB 49       		 BIT 1, C        ;test low or hi	;test low or hi
1275)   1274 C2 35 12    		 JP NZ, VGA_GETPXL64       ;NZ MEANS HI	;NZ MEANS HI
1276)   1277 C3 17 11    		 JP VGA_GETPXL32	;
1282)   127A F5          		VGA_PRNGRCH:  PUSH AF	;
1288)   127B 1E 08       		 LD E,FONT_WIDTH	;
1289)   127D 3A 8B F0    		VPGC_NXT: LD A,(VGATX_X)	;
1290)   1280 67          		 LD H,A	;
1292)   1281 CD AB 15    		 CALL MULT8	;
1293)   1284 E5          		 PUSH HL        ;SAVE RESULT	;SAVE RESULT
1294)   1285 1E 0A       		 LD E,FONT_HEIGHT	;
1295)   1287 3A 8C F0    		 LD A,(VGATX_Y)	;
1296)   128A 67          		 LD H,A	;
1297)   128B CD AB 15    		 CALL MULT8	;
1298)   128E D1          		 POP DE	;
1299)   128F EB          		 EX DE,HL	;
1301)   1290 F1          		 POP AF        ;GET THE CHAR	;GET THE CHAR
1303)   1291 E5          		VGA_PRNGRCHAT: PUSH HL	;
1304)   1292 D5          		 PUSH DE	;
1305)   1293 B7          		 OR A	;
1306)   1294 21 00 40    		 LD HL, FONT_ADDR	;
1307)   1297 16 00       		 LD D, 0	;
1308)   1299 5F          		 LD E, A	;
1309)   129A ED 5A       		 ADC HL, DE        ;HL THE START OF FONT	;HL THE START OF FONT
1310)   129C 0E 0A       		 LD C, FONT_HEIGHT       ; TOTAL FONT LINES	; TOTAL FONT LINES
1311)   129E EB          		 EX DE,HL       ;DE THE START OF FONT PATTERN	;DE THE START OF FONT PATTERN
1312)   129F 1A          		VPGC_AGN3: LD A, (DE)       ;FONT 8BIT PATTERN FOR A LINE	;FONT 8BIT PATTERN FOR A LINE
1313)   12A0 06 08       		 LD B, FONT_WIDTH	;
1314)   12A2 CB 27       		VPGC_AGN4: SLA A        ;CHECK BIT FOR 1=FCOLOR OR 0=BCOLOR	;CHECK BIT FOR 1=FCOLOR OR 0=BCOLOR
1315)   12A4 67          		 LD H,A        ;SAVE A  	;SAVE A
1316)   12A5 38 05       		 JR C, VPGC_FCOLOR	;
1317)   12A7 3A 8A F0    		 LD A, (VGABCOL)	;
1318)   12AA 18 03       		 JR VPGC_CONT	;
1319)   12AC 3A 89 F0    		VPGC_FCOLOR: LD A, (VGAFCOL) 	;
1321)   12AF D9          		VPGC_CONT: EXX 	;
1322)   12B0 D1          		 POP DE	;
1323)   12B1 E1          		 POP HL	;
1324)   12B2 CD 51 12    		 CALL VGA_PLTPXL	;
1325)   12B5 23          		 INC HL        ;NEXT PIXEL ON VIDEO BUF	;NEXT PIXEL ON VIDEO BUF
1326)   12B6 E5          		 PUSH HL	;
1327)   12B7 D5          		 PUSH DE	;
1328)   12B8 D9          		 EXX	;
1329)   12B9 7C          		 LD A,H        ;RESTORE A	;RESTORE A
1330)   12BA 10 E6       		 DJNZ VPGC_AGN4	;
1331)   12BC D9          		 EXX	;
1332)   12BD D1          		 POP DE	;
1333)   12BE E1          		 POP HL	;
1334)   12BF 06 00       		 LD B,0	;
1335)   12C1 0E 08       		 LD C,FONT_WIDTH	;
1336)   12C3 B7          		 OR A	;
1337)   12C4 ED 42       		 SBC HL,BC       ;X=HL AT THE START	;X=HL AT THE START
1338)   12C6 13          		 INC DE        ;Y=DE +1	;Y=DE +1
1339)   12C7 E5          		 PUSH HL	;
1340)   12C8 D5          		 PUSH DE	;
1341)   12C9 D9          		 EXX	;
1342)   12CA 14          		 INC D         ;ADD 256 FOR NEXT CHAR PATTERN	;ADD 256 FOR NEXT CHAR PATTERN
1343)   12CB 0D          		 DEC C	;
1344)   12CC 20 D1       		 JR NZ, VPGC_AGN3	;
1345)   12CE D1          		 POP DE	;
1346)   12CF E1          		 POP HL	;
1347)   12D0 C9          		 RET	;
1352)   12D1 67          		VGA_CLRTXTLN: LD H,A	;
1353)   12D2 3A 8C F0    		 LD A,(VGATX_Y)	;
1354)   12D5 F5          		 PUSH AF	;
1355)   12D6 7C          		 LD A,H	;
1356)   12D7 32 8C F0    		 LD (VGATX_Y),A	;
1357)   12DA F5          		 PUSH AF	;
1358)   12DB CD B2 0C    		 CALL VGA_GETCONF	;
1359)   12DE F1          		 POP AF	;
1360)   12DF CB 49       		 BIT 1, C 	;
1361)   12E1 06 4E       		 LD B,78       ;test low or hi	;test low or hi
1362)   12E3 20 02       		 JR NZ, DOCLRTXT;CLRTXT64    ;NZ MEANS HI	;CLRTXT64    ;NZ MEANS HI
1364)   12E5 06 26       		 LD B,38	;
1365)   12E7 3E 20       		DOCLRTXT: LD A,' '	;
1366)   12E9 C5          		 PUSH BC	;
1367)   12EA CD E4 0C    		 CALL VGA_PRCH      ;PRINT AND FORWARDS	;PRINT AND FORWARDS
1368)   12ED C1          		 POP BC	;
1369)   12EE 10 F7       		 DJNZ DOCLRTXT	;
1370)   12F0 3E 20       		 LD A,' '	;
1371)   12F2 CD F4 0C    		 CALL VGA_DOPRNCH	;
1372)   12F5 AF          		 XOR A	;
1373)   12F6 32 8B F0    		 LD (VGATX_X),A	;
1374)   12F9 F1          		 POP AF	;
1375)   12FA 32 8C F0    		 LD LD (VGATX_Y),A	;
1376)   12FD C9          		 RET	;
 34)   12FE C9          		 RET	;
 37)   12FF F5          		DELAYMICROSEC: PUSH AF	;
 38)   1300 D5          		 PUSH DE	;
 39)   1301 1B          		 DEC DE	;
 40)   1302 D1          		 POP DE	;
 41)   1303 F1          		 POP AF	;
 42)   1304 C9          		 RET	;
 45)   1305 CD FF 12    		S21: CALL DELAYMICROSEC	;
 46)   1308 10 FB       		 DJNZ S21	;
 47)   130A C9          		 RET	;
 51)   130B F5          		DELAYMILISEC: PUSH AF	;
 52)   130C D5          		 PUSH DE	;
 53)   130D 11 2C 01    		 LD DE, 300        ;2000 1 MILISEC =300 ON 8MHZ SO 30= 0.1 MILISECS = 100 MICROSECS	;2000 1 MILISEC =300 ON 8MHZ SO 30= 0.1 MILISECS = 100 MICROSECS
 54)   1310 1B          		DEL1: DEC DE	;
 55)   1311 7A          		 LD A, D        ;TEST FOR DE=00	;TEST FOR DE=00
 56)   1312 B3          		 OR E	;
 57)   1313 20 FB       		 JR NZ, DEL1	;
 58)   1315 D1          		 POP DE	;
 59)   1316 F1          		 POP AF	;
 60)   1317 C9          		 RET	;
 63)   1318 06 50       		 LD B, 80	;
 65)   131A CD 0B 13    		S1: CALL DELAYMILISEC	;
 66)   131D 10 FB       		 DJNZ S1	;
 67)   131F C9          		 RET	;
 72)   1320 C5          		@DELAYSEC: PUSH BC	;
 73)   1321 01 E8 03    		 LD BC, 1000	;
 74)   1324 C5          		MYDLAGN: PUSH BC	;
 75)   1325 CD 0B 13    		 CALL DELAY        ;1MS ON 8 MHZ	;1MS ON 8 MHZ
 76)   1328 C1          		 POP BC	;
 77)   1329 0B          		 DEC BC	;
 78)   132A 78          		 LD A, B	;
 79)   132B B1          		 OR C	;
 80)   132C 20 F6       		 JR NZ, MYDLAGN	;
 81)   132E C1          		 POP BC	;
 82)   132F 10 EF       		 DJNZ DELAYSEC	;
 83)   1331 C9          		 RET	;
 88)   1332 F5          		OUTASC: PUSH AF	;
 89)   1333 D5          		 PUSH DE	;
 90)   1334 CD 67 13    		 CALL B2Bcd	;
 91)   1337 D1          		 POP DE	;
 92)   1338 CD 8D 13    		 CALL BCD2HA	;
 93)   133B F1          		 POP AF	;
 94)   133C C9          		 RET	;
108)   133D B7          		BCD2BN: OR A	;
109)   133E 47          		 LD B, A	;
110)   133F E6 F0       		 AND $F0	;
111)   1341 0F          		 RRCA	;
112)   1342 4F          		 LD C, A	;
113)   1343 0F          		 RRCA	;
114)   1344 0F          		 RRCA	;
115)   1345 81          		 ADD A, C	;
116)   1346 4F          		 LD C, A	;
117)   1347 78          		 LD A, B	;
118)   1348 E6 0F       		 AND $0F	;
119)   134A 81          		 ADD A, C	;
120)   134B C9          		 RET	;
135)   134C 26 FF       		BN2BCD: LD H, $FF	;
136)   134E 24          		D100LP: INC H	;
137)   134F D6 64       		 SUB 100	;
138)   1351 30 FB       		 JR NC, D100LP	;
139)   1353 C6 64       		 ADD A, 100	;
140)   1355 2E FF       		 LD L, $FF	;
141)   1357 2C          		D10LP: INC L	;
142)   1358 D6 0A       		 SUB 10	;
143)   135A 30 FB       		 JR NC, D10LP	;
144)   135C C6 0A       		 ADD A, 10	;
145)   135E 4F          		 LD C, A	;
146)   135F 7D          		 LD A, L	;
147)   1360 07          		 RLCA	;
148)   1361 07          		 RLCA	;
149)   1362 07          		 RLCA	;
150)   1363 07          		 RLCA	;
151)   1364 B1          		 OR C	;
152)   1365 6F          		 LD L, A	;
153)   1366 C9          		 RET	;
167)   1367 01 00 10    		 LD BC, 16 * 256 + 0       ; handle 16 bits, one bit per iteration	; handle 16 bits, one bit per iteration
168)   136A 11 00 00    		 LD DE, 0	;
170)   136D 29          		 ADD HL, HL	;
171)   136E 7B          		 LD A, E	;
172)   136F 8F          		 ADC A, A	;
173)   1370 27          		 DAA	;
174)   1371 5F          		 LD E, A	;
175)   1372 7A          		 LD A, D	;
176)   1373 8F          		 ADC A, A	;
177)   1374 27          		 DAA	;
178)   1375 57          		 LD D, A	;
179)   1376 79          		 LD A, C	;
180)   1377 8F          		 ADC A, A	;
181)   1378 27          		 DAA	;
182)   1379 4F          		 LD C, A	;
183)   137A 10 F1       		 DJNZ cvtLp	;
184)   137C EB          		 EX DE, HL	;
185)   137D C9          		 RET	;
199)   137E B7          		BCD2BN: OR A	;
200)   137F 47          		 LD B, A	;
201)   1380 E6 F0       		 AND $F0	;
202)   1382 0F          		 RRCA	;
203)   1383 4F          		 LD C, A	;
204)   1384 0F          		 RRCA	;
205)   1385 0F          		 RRCA	;
206)   1386 81          		 ADD A, C	;
207)   1387 4F          		 LD C, A	;
208)   1388 78          		 LD A, B	;
209)   1389 E6 0F       		 AND $0F	;
210)   138B 81          		 ADD A, C	;
211)   138C C9          		 RET	;
223)   138D 79          		 LD A, C	;
224)   138E CD BA 13    		 CALL cvtUN	;
225)   1391 79          		 LD A, C	;
226)   1392 CD BE 13    		 CALL cvtLN	;
227)   1395 7C          		 LD A, H	;
228)   1396 CD BA 13    		 CALL cvtUN	;
229)   1399 7C          		 LD A, H	;
230)   139A CD BE 13    		 CALL cvtLN	;
231)   139D 7D          		 LD A, L	;
232)   139E CD BA 13    		 CALL cvtUN	;
233)   13A1 7D          		 LD A, L	;
234)   13A2 18 1A       		 JR cvtLN	;
236)   13A4 1F          		 RRA         ; move upper nibble into lower nibble	; move upper nibble into lower nibble
237)   13A5 1F          		 RRA	;
238)   13A6 1F          		 RRA	;
239)   13A7 1F          		 RRA	;
241)   13A8 E6 0F       		 AND 0Fh        ; isolate lower nibble	; isolate lower nibble
242)   13AA C6 90       		 ADD A, 90h        ; old trick	; old trick
243)   13AC 27          		 DAA         ; for converting	; for converting
244)   13AD CE 40       		 ADC A, 40h        ; one nibble	; one nibble
245)   13AF 27          		 DAA         ; to hex ASCII	; to hex ASCII
246)   13B0 12          		 LD (DE), A	;
247)   13B1 13          		 INC DE	;
248)   13B2 C9          		 RET	;
260)   13B3 7D          		 LD A, L	;
261)   13B4 CD A4 13    		 CALL cvtUN	;
262)   13B7 7D          		 LD A, L	;
263)   13B8 18 EE       		 JR cvtLN	;
265)   13BA 1F          		 RRA         ; move upper nibble into lower nibble	; move upper nibble into lower nibble
266)   13BB 1F          		 RRA	;
267)   13BC 1F          		 RRA	;
268)   13BD 1F          		 RRA	;
270)   13BE E6 0F       		 AND 0Fh        ; isolate lower nibble	; isolate lower nibble
271)   13C0 C6 90       		 ADD A, 90h        ; old trick	; old trick
272)   13C2 27          		 DAA         ; for converting	; for converting
273)   13C3 CE 40       		 ADC A, 40h        ; one nibble	; one nibble
274)   13C5 27          		 DAA         ; to hex ASCII	; to hex ASCII
275)   13C6 12          		 LD (DE), A	;
276)   13C7 13          		 INC DE	;
277)   13C8 C9          		 RET	;
294)   13C9 F5          		 PUSH AF        ; 11 T-states	; 11 T-states
296)   13CA ED 44       		 NEG         ; 8 T-states	; 8 T-states
297)   13CC ED 44       		 NEG         ; 8 T-states	; 8 T-states
298)   13CE ED 44       		 NEG         ; 8 T-states	; 8 T-states
299)   13D0 ED 44       		 NEG         ; 8 T-states	; 8 T-states
300)   13D2 0B          		 DEC BC         ; 6 T-states	; 6 T-states
301)   13D3 79          		 LD A, C        ; 9 T-states	; 9 T-states
302)   13D4 B0          		 OR B         ; 4 T-states	; 4 T-states
303)   13D5 C2 CA 13    		 JP NZ, pau_lp        ; 10 T-states	; 10 T-states
304)   13D8 F1          		 POP AF         ; 10 T-states	; 10 T-states
305)   13D9 C9          		 RET         ; Pause complete, RETurn	; Pause complete, RETurn
343)   13DA 26 00       		@B2D8: LD H, 0	;
344)   13DC 6F          		 LD L, A	;
345)   13DD 1E 00       		@B2D16: LD E, 0	;
346)   13DF 16 00       		@B2D24: LD D, 0	;
347)   13E1 01 00 00    		@B2D32: LD BC, 0	;
348)   13E4 DD 21 00 00 		@B2D48: LD IX, 0        ; zero all non-used bits	; zero all non-used bits
349)   13E8 22 93 F0    		@B2D64: LD (B2DINV), HL	;
350)   13EB ED 53 95 F0 		 LD (B2DINV + 2), DE	;
351)   13EF ED 43 97 F0 		 LD (B2DINV + 4), BC	;
352)   13F3 DD 22 99 F0 		 LD (B2DINV + 6), IX       ; place full 64-bit input value in buffer	; place full 64-bit input value in buffer
353)   13F7 21 9B F0    		 LD HL, B2DBUF	;
354)   13FA 11 9C F0    		 LD DE, B2DBUF + 1	;
355)   13FD 36 20       		 LD (HL), ' '	;
357)   13FF 01 12 00    		 LD BC, 18	;
358)   1402 ED B0       		 LDIR         ; fill 1st 19 bytes of buffer with spaces	; fill 1st 19 bytes of buffer with spaces
359)   1404 ED 43 AE F0 		 LD (B2DEND - 1), BC       ;set BCD value to "0" & place terminating 0	;set BCD value to "0" & place terminating 0
360)   1408 1E 01       		 LD E, 1        ; no. of bytes in BCD value	; no. of bytes in BCD value
361)   140A 21 9B F0    		 LD HL, B2DINV + 8       ; (address MSB input)+1	; (address MSB input)+1
362)   140D 01 09 09    		 LD BC, 0x0909	;
363)   1410 AF          		 XOR A	;
364)   1411 05          		B2DSKP0: DEC B	;
365)   1412 28 29       		 JR Z, B2DSIZ        ; all 0: continue with postprocessing	; all 0: continue with postprocessing
366)   1414 2B          		 DEC HL	;
367)   1415 B6          		 OR (HL)        ; find first byte <>0	; find first byte <>0
368)   1416 28 F9       		 JR Z, B2DSKP0	;
369)   1418 0D          		B2DFND1: DEC C	;
370)   1419 17          		 RLA	;
371)   141A 30 FC       		 JR NC, B2DFND1        ; determine no. of most significant 1-bit	; determine no. of most significant 1-bit
372)   141C 1F          		 RRA	;
373)   141D 57          		 LD D, A        ; byte from binary input value	; byte from binary input value
374)   141E E5          		B2DLUS2: PUSH HL	;
375)   141F C5          		 PUSH BC	;
376)   1420 21 AE F0    		B2DLUS1: LD HL, B2DEND - 1      ; address LSB of BCD value	; address LSB of BCD value
377)   1423 43          		 LD B, E        ; current length of BCD value in bytes	; current length of BCD value in bytes
378)   1424 CB 12       		 RL D         ; highest bit from input value -> carry	; highest bit from input value -> carry
379)   1426 7E          		B2DLUS0: LD A, (HL)	;
380)   1427 8F          		 ADC A, A	;
381)   1428 27          		 DAA	;
382)   1429 77          		 LD (HL), A        ; double 1 BCD byte from intermediate result	; double 1 BCD byte from intermediate result
383)   142A 2B          		 DEC HL	;
384)   142B 10 F9       		 DJNZ B2DLUS0        ; and go on to double entire BCD value (+carry!)	; and go on to double entire BCD value (+carry!)
385)   142D 30 03       		 JR NC, B2DNXT	;
386)   142F 1C          		 INC E         ; carry at MSB -> BCD value grew 1 byte larger	; carry at MSB -> BCD value grew 1 byte larger
387)   1430 36 01       		 LD (HL), 1        ; initialize new MSB of BCD value	; initialize new MSB of BCD value
388)   1432 0D          		B2DNXT: DEC C	;
389)   1433 20 EB       		 JR NZ, B2DLUS1        ; repeat for remaining bits from 1 input byte	; repeat for remaining bits from 1 input byte
390)   1435 C1          		 POP BC         ; no. of remaining bytes in input value	; no. of remaining bytes in input value
391)   1436 0E 08       		 LD C, 8        ; reset bit-counter	; reset bit-counter
392)   1438 E1          		 POP HL         ; pointer to byte from input value	; pointer to byte from input value
393)   1439 2B          		 DEC HL	;
394)   143A 56          		 LD D, (HL)        ; get next group of 8 bits	; get next group of 8 bits
395)   143B 10 E1       		 DJNZ B2DLUS2        ; and repeat until last byte from input value	; and repeat until last byte from input value
396)   143D 21 AF F0    		B2DSIZ: LD HL, B2DEND        ; address of terminating 0	; address of terminating 0
397)   1440 4B          		 LD C, E        ; size of BCD value in bytes	; size of BCD value in bytes
398)   1441 B7          		 OR A	;
399)   1442 ED 42       		 SBC HL, BC        ; calculate address of MSB BCD	; calculate address of MSB BCD
400)   1444 54          		 LD D, H	;
401)   1445 5D          		 LD E, L	;
402)   1446 ED 42       		 SBC HL, BC	;
403)   1448 EB          		 EX DE, HL        ; HL=address BCD value, DE=start of decimal value	; HL=address BCD value, DE=start of decimal value
404)   1449 41          		 LD B, C        ; no. of bytes BCD	; no. of bytes BCD
405)   144A CB 21       		 SLA C         ; no. of bytes decimal (possibly 1 too high)	; no. of bytes decimal (possibly 1 too high)
406)   144C 3E 30       		 LD A, '0'	;
407)   144E ED 6F       		 RLD         ; shift bits 4-7 of (HL) into bit 0-3 of A	; shift bits 4-7 of (HL) into bit 0-3 of A
408)   1450 FE 30       		 CP '0'         ; (HL) was > 9h?	; (HL) was > 9h?
409)   1452 20 06       		 JR NZ, B2DEXPH        ; if yes, start with recording high digit	; if yes, start with recording high digit
410)   1454 0D          		 DEC C         ; correct number of decimals	; correct number of decimals
411)   1455 13          		 INC DE         ; correct start address	; correct start address
412)   1456 18 04       		 JR B2DEXPL        ; continue with converting low digit	; continue with converting low digit
413)   1458 ED 6F       		B2DEXP: RLD         ; shift high digit (HL) into low digit of A	; shift high digit (HL) into low digit of A
414)   145A 12          		B2DEXPH: LD (DE), A       ; record resulting ASCII-code	; record resulting ASCII-code
415)   145B 13          		 INC DE	;
416)   145C ED 6F       		B2DEXPL: RLD	;
417)   145E 12          		 LD (DE), A	;
418)   145F 13          		 INC DE	;
419)   1460 23          		 INC HL         ; next BCD-byte	; next BCD-byte
420)   1461 10 F5       		 DJNZ B2DEXP        ; and go on to convert each BCD-byte into 2 ASCII	; and go on to convert each BCD-byte into 2 ASCII
421)   1463 ED 42       		 SBC HL, BC        ; return with HL pointing to 1st decimal	; return with HL pointing to 1st decimal
422)   1465 C9          		 RET	;
426)   1466 EB          		 ex de, hl        ; Get destination into DE	; Get destination into DE
427)   1467 21 9B F0    		 ld hl, B2DBUF	;
428)   146A CD 71 14    		 call SkipWhitespace	;
429)   146D ED B0       		 ldir	;
430)   146F EB          		 ex de, hl        ; Get destination into DE	; Get destination into DE
431)   1470 C9          		 ret	;
436)   1471 7E          		 ld a, (hl)	;
437)   1472 FE 20       		 cp ' '	;
438)   1474 C0          		 ret nz	;
439)   1475 23          		 inc hl	;
440)   1476 18 F9       		 jr SkipWhitespace	;
444)   1478 06 08       		@REVBITS: ld b, 8	;
445)   147A 6F          		 ld l, a	;
447)   147B CB 15       		 rl l	;
448)   147D 1F          		 rra	;
449)   147E 10 FB       		 djnz REVLOOP	;
450)   1480 C9          		 RET	;
460)   1481 E5          		 push hl	;
462)   1482 7E          		 ld a, (hl)	;
464)   1483 FE 00       		 cp  0	;
465)   1485 28 0E       		 jr z, IsStrDecTrue	;
467)   1487 FE 30       		 cp  '0'	;
468)   1489 38 06       		 jr c, IsStrDecFalse	;
470)   148B FE 3A       		 cp  '9'+1	;
471)   148D 38 09       		 jr c, IsStrDecContinue	;
472)   148F FE 39       		 cp  '9'	;
475)   1491 F6 01       		 or 1         ; Reset zero flag	; Reset zero flag
476)   1493 E1          		 pop hl	;
477)   1494 C9          		 ret	;
479)   1495 BF          		 cp a         ; Set zero flag	; Set zero flag
480)   1496 E1          		 pop hl	;
481)   1497 C9          		 ret	;
483)   1498 23          		 inc hl	;
484)   1499 18 E7       		 jr IsStrDec00	;
491)   149B E5          		 push hl	;
493)   149C 7E          		 ld a, (hl)	;
495)   149D FE 00       		 cp  0	;
496)   149F 28 14       		 jr z, IsStrHexTrue	;
498)   14A1 FE 30       		 cp  '0'	;
499)   14A3 38 0C       		 jr c, IsStrHexFalse	;
501)   14A5 FE 3A       		 cp  '9'+1	;
502)   14A7 38 0F       		 jr c, IsStrHexContinue	;
504)   14A9 FE 30       		 cp  '0'	;
505)   14AB 38 04       		 jr c, IsStrHexFalse	;
507)   14AD FE 47       		 cp  'F'+1	;
508)   14AF 38 07       		 jr c, IsStrHexContinue	;
511)   14B1 F6 01       		 or 1         ; Reset zero flag	; Reset zero flag
512)   14B3 E1          		 pop hl	;
513)   14B4 C9          		 ret	;
515)   14B5 BF          		 cp a         ; Set zero flag	; Set zero flag
516)   14B6 E1          		 pop hl	;
517)   14B7 C9          		 ret	;
519)   14B8 23          		 inc hl	;
520)   14B9 18 E1       		 jr IsStrHex00	;
527)   14BB AF          		 xor a	;
528)   14BC CD C1 14    		 call loop	;
529)   14BF 7A          		 ld a, d	;
530)   14C0 C9          		 ret	;
532)   14C1 57          		 ld d, a	;
533)   14C2 7E          		 ld a, (hl)	;
534)   14C3 23          		 inc hl	;
535)   14C4 D6 3A       		 sub '9' + 1	;
536)   14C6 C6 0A       		 add 10	;
537)   14C8 D0          		 ret nc	;
538)   14C9 5F          		 ld e, a	;
539)   14CA 7A          		 ld a, d	;
540)   14CB 87          		 add a, a        ;double our accumulator	;double our accumulator
541)   14CC 87          		 add a, a        ;double again (now x4)	;double again (now x4)
542)   14CD 82          		 add a, d        ;add the original (now x5)	;add the original (now x5)
543)   14CE 87          		 add a, a        ;double again (now x10)	;double again (now x10)
544)   14CF 83          		 add a, e        ;add in the incoming digit	;add in the incoming digit
545)   14D0 18 EF       		 jr loop	;
553)   14D2 7E          		 ld a, (hl)        ; Copy first char to A	; Copy first char to A
554)   14D3 CD E3 14    		 call Hex12        ; Convert first char	; Convert first char
555)   14D6 87          		 add a, a        ; Multiply by 16...	; Multiply by 16...
556)   14D7 87          		 add a, a        ; ...	; ...
557)   14D8 87          		 add a, a        ; ...	; ...
558)   14D9 87          		 add a, a        ; ...done!	; ...done!
559)   14DA 57          		 ld d, a        ; Store top 4 bits in D	; Store top 4 bits in D
560)   14DB 23          		 inc hl         ; Advance to next char	; Advance to next char
561)   14DC 7E          		 ld a, (hl)	;
562)   14DD CD E3 14    		 call Hex12        ; Convert second char	; Convert second char
563)   14E0 B2          		 or d         ; Add back top bits	; Add back top bits
564)   14E1 23          		 inc hl         ; Advance for next guy	; Advance for next guy
565)   14E2 C9          		 ret	;
566)   14E3 D6 30       		Hex12: sub  '0'	;
567)   14E5 FE 0A       		 cp 10	;
568)   14E7 D8          		 ret c	;
569)   14E8 D6 07       		 sub 'A' - '0' - 10	;
570)   14EA C9          		 ret	;
577)   14EB CD D2 14    		 call Read8bit	;
578)   14EE 47          		 ld b, a	;
579)   14EF CD D2 14    		 call Read8bit	;
580)   14F2 4F          		 ld c, a	;
581)   14F3 C9          		 ret	;
589)   14F4 7E          		 ld a, (hl)	;
590)   14F5 23          		 inc hl	;
591)   14F6 D6 30       		 sub '0'	;
592)   14F8 CB 27       		 sla a	;
593)   14FA CB 27       		 sla a	;
594)   14FC CB 27       		 sla a	;
595)   14FE CB 27       		 sla a	;
596)   1500 47          		 ld b, a	;
597)   1501 7E          		 ld a, (hl)	;
598)   1502 23          		 inc hl	;
599)   1503 D6 30       		 sub '0'	;
600)   1505 B0          		 or b	;
601)   1506 C9          		 ret	;
606)   1507 4F          		 ld c, a        ; a = number to convert	; a = number to convert
607)   1508 CD 14 15    		 call Num1	;
608)   150B 77          		 ld (hl), a	;
609)   150C 23          		 inc hl	;
610)   150D 79          		 ld a, c	;
611)   150E CD 18 15    		 call Num2	;
612)   1511 77          		 ld (hl), a	;
613)   1512 23          		 inc hl	;
614)   1513 C9          		 ret	;
615)   1514 1F          		Num1: rra	;
616)   1515 1F          		 rra	;
617)   1516 1F          		 rra	;
618)   1517 1F          		 rra	;
619)   1518 F6 F0       		Num2: or $F0	;
620)   151A 27          		 daa	;
621)   151B C6 A0       		 add a, $A0	;
622)   151D CE 40       		 adc a, $40        ; Ascii hex at this point (0 to F)	; Ascii hex at this point (0 to F)
623)   151F C9          		 ret	;
634)   1520 22 B0 F0    		STR_SET: LD (LINESTR),HL	;
635)   1523 C9          		 RET	;
638)   1524 AF          		STR_CLR: XOR A	;
639)   1525 32 B2 F0    		 LD (LINEPOS),A	;
640)   1528 32 B0 F0    		 LD (LINESTR),A	;
641)   152B 32 B1 F0    		 LD (LINESTR+1),A	;
642)   152E C9          		 RET	;
645)   152F 3A B0 F0    		STR_VALID: LD A,(LINESTR)	;
646)   1532 47          		 LD B,A	;
647)   1533 3A B1 F0    		 LD A,(LINESTR+1)	;
648)   1536 80          		 ADD B	;
649)   1537 B7          		 OR A	;
650)   1538 C9          		 RET	;
656)   1539 F5          		STR_CALCADDR: PUSH AF	;
657)   153A ED 5B B0 F0 		 LD DE,(LINESTR)	;
658)   153E EB          		 EX DE,HL	;
659)   153F 3A B2 F0    		 LD A,(LINEPOS)	;
660)   1542 4F          		 LD C,A	;
661)   1543 06 00       		 LD B,0	;
662)   1545 09          		 ADD HL,BC	;
663)   1546 EB          		 EX DE,HL	;
664)   1547 F1          		 POP AF	;
665)   1548 C9          		 RET	;
669)   1549 3A B2 F0    		STR_NEXTPOS: LD A,(LINEPOS)	;
670)   154C 3C          		 INC A	;
671)   154D 32 B2 F0    		 LD (LINEPOS),A	;
672)   1550 C9          		 RET	;
676)   1551 CD 39 15    		STR_ADD: CALL STR_CALCADDR	;
677)   1554 CD 49 15    		STRA_AGN: CALL STR_NEXTPOS	;
678)   1557 7E          		 LD A,(HL)	;
679)   1558 12          		 LD (DE),A	;
680)   1559 23          		 INC HL	;
681)   155A 13          		 INC DE	;
682)   155B B7          		 OR A	;
683)   155C C8          		 RET Z	;
684)   155D 18 F5       		 JR STRA_AGN	;
687)   155F CD 39 15    		STR_ADDCHAR: CALL STR_CALCADDR	;
688)   1562 12          		 LD (DE),A	;
689)   1563 CD 49 15    		 CALL STR_NEXTPOS	;
690)   1566 13          		 INC DE	;
691)   1567 AF          		 XOR A	;
692)   1568 12          		 LD (DE),A	;
693)   1569 C9          		 RET	;
701)   156A 26 00       		@PRINTNUM: LD H,0	;
702)   156C 6F          		 LD L,A	;
703)   156D F5          		@PRINTNUM16: PUSH AF	;
705)   156E 11 B4 F0    		 LD DE,NUMBUF	;
706)   1571 CD B3 13    		 CALL Bcd2ASC  ;FOR HEX	;FOR HEX
707)   1574 3E 68       		 LD A,'h'	;
708)   1576 12          		 LD (DE),A  	;
709)   1577 13          		 INC DE	;
710)   1578 AF          		 XOR A	;
711)   1579 12          		 LD (DE),A  	;
713)   157A 21 B4 F0    		 LD HL,NUMBUF	;
714)   157D CD B6 05    		 CALL RS_TXT	;
715)   1580 CD 0D 06    		 CALL RS_NEWLINE	;
716)   1583 F1          		 POP AF	;
717)   1584 C9          		 RET	;
725)   1585 E5          		@NUM_ADDZERO: PUSH HL	;
726)   1586 0E 00       		 LD C,0	;
727)   1588 7E          		AZ_AGN: LD A,(HL)   	;
728)   1589 23          		 INC HL	;
729)   158A 0C          		 INC C	;
730)   158B FE 00       		 CP 0	;
731)   158D 20 F9       		 JR NZ,AZ_AGN	;
732)   158F 0D          		 DEC C ;EXCLUDE ZERO TERM	;EXCLUDE ZERO TERM
733)   1590 E1          		 POP HL	;
734)   1591 79          		 LD A,C	;
735)   1592 B8          		 CP B	;
736)   1593 C8          		 RET Z	;
738)   1594 78          		 LD A,B	;
739)   1595 91          		 SUB C	;
740)   1596 D8          		 RET C ;RETURN IF CARRY MEANS WE HAVE MORE DIGITS	;RETURN IF CARRY MEANS WE HAVE MORE DIGITS
741)   1597 47          		 LD B,A	;
742)   1598 3E 30       		 LD A,'0'	;
743)   159A 2B          		AZ_AGN2: DEC HL	;
744)   159B 77          		 LD (HL),A	;
745)   159C 10 FC       		 DJNZ AZ_AGN2 	;
746)   159E C9          		 RET	;
752)   159F 11 60 F0    		@COPYFNAME: LD DE,STRGBUFF	;
753)   15A2 7E          		@COPYSTRING:   LD A,(HL)	;
754)   15A3 12          		 LD (DE),A	;
755)   15A4 FE 00       		 CP 0	;
756)   15A6 C8          		 RET Z  	;
757)   15A7 13          		 INC DE	;
758)   15A8 23          		 INC HL	;
759)   15A9 18 F7       		 JR COPYSTRING	;
  7)   15AB 16 00       		   ld d,0	;
  8)   15AD 6A          		   ld l,d	;
  9)   15AE 06 08       		   ld b,8	;
 11)   15B0 29          		   add hl,hl	;
 12)   15B1 30 01       		   jr nc,Mult8_NoAdd	;
 13)   15B3 19          		   add hl,de	;
 15)   15B4 10 FA       		   djnz Mult8_Loop	;
 16)   15B6 C9          		   ret	;
 23)   15B7 2E 00       		   ld l,0	;
 24)   15B9 06 08       		   ld b,8	;
 26)   15BB 29          		   add hl,hl	;
 27)   15BC 87          		   add a,a	;
 28)   15BD 30 01       		   jr nc,Mult12_NoAdd	;
 29)   15BF 19          		   add hl,de	;
 31)   15C0 10 F9       		   djnz Mult12_Loop	;
 32)   15C2 C9          		   ret	;
 39)   15C3 21 00 00    		@Mult16: ld hl, 0	;
 40)   15C6 78          		 ld a, b	;
 41)   15C7 06 10       		 ld b, 16	;
 43)   15C9 29          		 add hl, hl	;
 44)   15CA CB 21       		 sla c	;
 45)   15CC 17          		 rla	;
 46)   15CD 30 01       		 jr nc, Mult16_NoAdd	;
 47)   15CF 19          		 add hl, de	;
 49)   15D0 10 F7       		 djnz Mult16_Loop	;
 50)   15D2 C9          		 ret	;
 56)   15D3 D5          		@Mult32: PUSH DE	;
 57)   15D4 79          		 ld a, c	;
 58)   15D5 48          		 ld c, b	;
 59)   15D6 21 00 00    		 ld hl, 0	;
 60)   15D9 06 10       		 ld b, 16	;
 62)   15DB 29          		 add hl, hl	;
 63)   15DC 17          		 rla	;
 64)   15DD CB 11       		 rl c	;
 65)   15DF 30 07       		 jr nc, Mult32_NoAdd	;
 66)   15E1 19          		 add hl, de	;
 67)   15E2 CE 00       		 adc a, 0	;
 68)   15E4 D2 E8 15    		 jp nc, Mult32_NoAdd	;
 69)   15E7 0C          		 inc c	;
 71)   15E8 10 F1       		 djnz Mult32_Loop	;
 72)   15EA 41          		 ld b, c	;
 73)   15EB 4F          		 ld c, a	;
 74)   15EC D1          		 POP DE	;
 75)   15ED C9          		 ret	;
 83)   15EE AF          		   xor a	;
 84)   15EF 06 08       		   ld b,8	;
 86)   15F1 CB 13       		   rl e	;
 87)   15F3 17          		   rla	;
 88)   15F4 91          		   sub c	;
 89)   15F5 30 01       		   jr nc,Div8_NoAdd	;
 90)   15F7 81          		   add a,c	;
 92)   15F8 10 F7       		   djnz Div8_Loop	;
 93)   15FA 47          		   ld b,a	;
 94)   15FB 7B          		   ld a,e	;
 95)   15FC 17          		   rla	;
 96)   15FD 2F          		   cpl	;
 97)   15FE C9          		   ret	;
103)   15FF AF          		  xor a	;
104)   1600 06 08       		  ld b, 8	;
107)   1602 CB 22       		  sla d	;
108)   1604 17          		  rla	;
109)   1605 BB          		  cp e	;
110)   1606 38 02       		  jr c, $+4	;
111)   1608 93          		  sub e	;
112)   1609 14          		  inc d	;
114)   160A 10 F6       		  djnz DIV8_8_loop	;
116)   160C C9          		  ret	;
122)   160D AF          		  xor a	;
123)   160E 06 10       		  ld b, 16	;
126)   1610 29          		  add hl, hl	;
127)   1611 17          		  rla	;
128)   1612 38 03       		  jr c, $+5	;
129)   1614 B9          		  cp c	;
130)   1615 38 02       		  jr c, $+4	;
132)   1617 91          		  sub c	;
133)   1618 2C          		  inc l	;
135)   1619 10 F5       		  djnz DIV16_8_loop	;
137)   161B C9          		  ret	;
145)   161C 21 00 00    		   ld hl,0	;
146)   161F 78          		   ld a,b	;
147)   1620 06 08       		   ld b,8	;
149)   1622 17          		   rla	;
150)   1623 ED 6A       		   adc hl,hl	;
151)   1625 ED 52       		   sbc hl,de	;
152)   1627 30 01       		   jr nc,Div16_NoAdd1	;
153)   1629 19          		   add hl,de	;
155)   162A 10 F6       		   djnz Div16_Loop1	;
156)   162C 17          		   rla	;
157)   162D 2F          		   cpl	;
158)   162E 47          		   ld b,a	;
159)   162F 79          		   ld a,c	;
160)   1630 48          		   ld c,b	;
161)   1631 06 08       		   ld b,8	;
163)   1633 17          		   rla	;
164)   1634 ED 6A       		   adc hl,hl	;
165)   1636 ED 52       		   sbc hl,de	;
166)   1638 30 01       		   jr nc,Div16_NoAdd2	;
167)   163A 19          		   add hl,de	;
169)   163B 10 F6       		   djnz Div16_Loop2	;
170)   163D 17          		   rla	;
171)   163E 2F          		   cpl	;
172)   163F 41          		   ld b,c	;
173)   1640 4F          		   ld c,a	;
174)   1641 C9          		   ret  	;
181)   1642 19          		 ADD HL, DE        ; 16-BIT ADD OF HL AND DE	; 16-BIT ADD OF HL AND DE
182)   1643 D9          		 EXX	;
183)   1644 ED 5A       		 ADC HL, DE        ; 16-BIT ADD OF HL AND DE WITH CARRY	; 16-BIT ADD OF HL AND DE WITH CARRY
184)   1646 D9          		 EXX	;
187)   1647 C9          		 RET	;
197)   1648 11 40 00    		 ld de, $0040	;
198)   164B 7D          		 ld a, l	;
199)   164C 6C          		 ld l, h	;
200)   164D 62          		 ld h, d	;
201)   164E B7          		 or a	;
202)   164F 06 08       		 ld b, 8	;
204)   1651 ED 52       		 sbc hl, de	;
205)   1653 30 01       		 jr nc, Sqr16_Skip	;
206)   1655 19          		 add hl, de	;
208)   1656 3F          		 ccf	;
209)   1657 CB 12       		 rl d	;
210)   1659 87          		 add a, a	;
211)   165A ED 6A       		 adc hl, hl	;
212)   165C 87          		 add a, a	;
213)   165D ED 6A       		 adc hl, hl	;
214)   165F 10 F0       		 djnz Sqr16_Loop	;
215)   1661 C9          		 ret	;
235)   1662 3A B3 F0    		 ld a, (RNDseed)	;
236)   1665 47          		 ld b, a 	;
238)   1666 0F          		 rrca ; multiply by 32	; multiply by 32
239)   1667 0F          		 rrca	;
240)   1668 0F          		 rrca	;
241)   1669 EE 1F       		 xor 0x1f	;
243)   166B 80          		 add a, b	;
244)   166C DE FF       		 sbc a, 255 ; carry	; carry
246)   166E 32 B3 F0    		 ld (RNDseed), a	;
247)   1671 C9          		 ret	;
