 15)   0000 	            		 CH376_ERROR EQU RS_MESG	;
 18)   0000 00          		 NOP	;
 19)   0001 00          		 NOP	;
 20)   0002 F3          		 DI  	;
 21)   0003 31 00 F0    		 LD SP, BLSTACKP 	;
 22)   0006 C3 C1 00    		 JP BOOTLOADER	;
 24)   0009 41 54 4C 41 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 24)   000D 53 20 42 4F 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 24)   0011 4F 54 4C 4F 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 24)   0015 41 44 45 52 		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 24)   0019 20          		OSVERMES: DEFM "ATLAS BOOTLOADER "	;
 25)   001A 56 65 72 73 		 DEFM "Version "  	;
 25)   001E 69 6F 6E 20 		 DEFM "Version "  	;
 26)   0022 30 2E 30 38 		 DEFM "0.08"	;
 27)   0026 0A 0D       		 DEFB 0AH,0DH	;
 28)   0028 43 44 65 73 		 DEFM "CDesp 2022"	;
 28)   002C 70 20 32 30 		 DEFM "CDesp 2022"	;
 28)   0030 32 32       		 DEFM "CDesp 2022"	;
 29)   0032 0A 0D       		 DEFB 0AH,0DH    	;
 30)   0034 00          		 DEFB 00H	;
 35)   0035 C3 C2 05    		 JP RS_MESG	;
 37)   0038 00 01 0A 0B 		MYMMUBANK:     DB 0,1,10,11,4,5,6,7	;
 37)   003C 04 05 06 07 		MYMMUBANK:     DB 0,1,10,11,4,5,6,7	;
 41)   0040 3E 07       		SETUPFFPS: LD A,7	;
 42)   0042 D3 68       		SFFAGN: OUT (DEVINT), A	;
 43)   0044 3D          		 DEC A	;
 44)   0045 C2 42 00    		 JP NZ, SFFAGN    	;
 45)   0048 C9          		 RET	;
 47)   0049 21 01 F0    		SETUPVARS: LD HL,OSVARS      ;ZERO OS VARIABLES	;ZERO OS VARIABLES
 48)   004C AF          		SI_AGN: XOR A	;
 49)   004D 77          		 LD (HL),A	;
 50)   004E 23          		 INC HL	;
 51)   004F 7C          		 LD A,H	;
 52)   0050 B5          		 OR L	;
 53)   0051 20 F9       		 JR NZ,SI_AGN       ;HL=0000 WHEN OVERFLOW FROM FFFF 	;HL=0000 WHEN OVERFLOW FROM FFFF
 54)   0053 C9          		 RET	;
 57)   0054 00          		INITVGA: NOP	;
 59)   0055 21 88 F0    		 LD HL,SCRNST	;
 60)   0058 CB 86       		 RES 0,(HL) ;DISABLE LCD	;DISABLE LCD
 61)   005A CB CE       		 SET 1,(HL) ;ENABLE VGA	;ENABLE VGA
 63)   005C 21 4E 05    		 LD HL, CHARSETFILE  	;
 64)   005F 01 B8 0B    		 LD BC, 3000  ;MAX FILE SIZE	;MAX FILE SIZE
 65)   0062 11 00 40    		 LD DE, FONT_ADDR 	;
 66)   0065 CD 35 0A    		 CALL STRG_LOADFILE	;
 67)   0068 30 1C       		 JR NC, CHFILOK	;
 68)   006A CD C2 05    		 CALL RS_MESG	;
 69)   006D 45 52 52 4F 		 DEFM "ERROR LOADING CHARSET"	;
 69)   0071 52 20 4C 4F 		 DEFM "ERROR LOADING CHARSET"	;
 69)   0075 41 44 49 4E 		 DEFM "ERROR LOADING CHARSET"	;
 69)   0079 47 20 43 48 		 DEFM "ERROR LOADING CHARSET"	;
 69)   007D 41 52 53 45 		 DEFM "ERROR LOADING CHARSET"	;
 69)   0081 54          		 DEFM "ERROR LOADING CHARSET"	;
 70)   0082 0D 0A 00    		 DB 13,10,0	;
 71)   0085 76          		 HALT	;
 72)   0086 CD ED 0B    		CHFILOK: CALL VGA_INIT	;
 73)   0089 CD C2 05    		 CALL RS_MESG	;
 74)   008C 56 47 41 20 		 DEFM "VGA CARD OK"	;
 74)   0090 43 41 52 44 		 DEFM "VGA CARD OK"	;
 74)   0094 20 4F 4B    		 DEFM "VGA CARD OK"	;
 75)   0097 0A 0D 00    		 DB 10,13,0	;
 76)   009A C9          		 RET	;
 81)   009B F5          		@OS_PRINTCHAR: PUSH AF	;
 82)   009C D1          		OSPCNX: POP DE	;
 83)   009D 3A 88 F0    		 LD A,(SCRNST)	;
 84)   00A0 E6 02       		 AND 2	;
 85)   00A2 C8          		 RET Z	;
 86)   00A3 D5          		 PUSH DE	;
 87)   00A4 F1          		 POP AF    ;GET THE FLAGS BACK AND THE CHAR	;GET THE FLAGS BACK AND THE CHAR
 88)   00A5 F5          		 PUSH AF	;
 89)   00A6 CD A9 05    		 CALL RS_TX	;
 90)   00A9 F1          		 POP AF  	;
 91)   00AA CD EF 0C    		 CALL VGA_PRCH 	;
 92)   00AD C9          		 RET	;
 95)   00AE 7E          		@OS_PRINTTEXT: LD A,(HL)	;
 96)   00AF FE 00       		 CP 0	;
 97)   00B1 C8          		 RET Z	;
 98)   00B2 E5          		 PUSH HL	;
 99)   00B3 CD 9B 00    		 CALL OS_PRINTCHAR	;
100)   00B6 E1          		 POP HL	;
101)   00B7 23          		 INC HL	;
102)   00B8 18 F4       		 JR OS_PRINTTEXT 	;
104)   00BA E1          		@OS_PRINTMSG: POP HL	;
105)   00BB CD AE 00    		               CALL OS_PRINTTEXT 	;
106)   00BE 23          		 INC HL	;
107)   00BF E5          		 PUSH HL   ;CONTINUE AFTER THE MESG 	;CONTINUE AFTER THE MESG
108)   00C0 C9          		 RET	;
110)   00C1 00          		BOOTLOADER: NOP 	;
113)   00C2 0E 00       		SETUPMMU: LD C,DEVMMU	;
114)   00C4 AF          		  XOR A   ;BANK	;BANK
115)   00C5 06 00       		 LD B,0.SHL.5  ;PAGE	;PAGE
117)   00C7 3C          		 INC A	;
118)   00C8 06 20       		 LD B,1.SHL.5	;
119)   00CA ED 79       		 OUT (C),A  	;
121)   00CC 3E 0A       		 LD A,10   ;VID MEM RAM	;VID MEM RAM
122)   00CE 06 40       		 LD B,2.SHL.5  	;
123)   00D0 ED 79       		 OUT (C),A  	;
125)   00D2 3E 0B       		 LD A,11   ;VID MEM RAM	;VID MEM RAM
126)   00D4 06 60       		 LD B,3.SHL.5  	;
127)   00D6 ED 79       		 OUT (C),A  	;
129)   00D8 3E 04       		 LD A,4	;
130)   00DA 06 80       		 LD B,4.SHL.5	;
131)   00DC ED 79       		 OUT (C),A  	;
132)   00DE 3C          		 INC A	;
133)   00DF 06 A0       		 LD B,5.SHL.5	;
134)   00E1 ED 79       		 OUT (C),A  	;
135)   00E3 3C          		 INC A	;
136)   00E4 06 C0       		 LD B,6.SHL.5	;
137)   00E6 ED 79       		 OUT (C),A  	;
138)   00E8 3C          		 INC A	;
139)   00E9 06 E0       		 LD B,7.SHL.5	;
140)   00EB ED 79       		 OUT (C),A 	;
141)   00ED CD 49 00    		 CALL SETUPVARS	;
142)   00F0 CD 59 05    		 CALL INITMMU       ;PUT PAGES 0..7 IN RAM BANKS 0..7  	;PUT PAGES 0..7 IN RAM BANKS 0..7
143)   00F3 21 38 00    		 LD HL,MYMMUBANK	;
144)   00F6 11 1D F0    		 LD DE,BANKS	;
145)   00F9 01 08 00    		 LD BC,8	;
146)   00FC ED B0       		 LDIR        ;TO RAM PAGE 7 OS VARS	;TO RAM PAGE 7 OS VARS
148)   00FE 3E 01       		 LD A, 1 ;12        ;12=9600 BPS, 1=115200BPS	;12        ;12=9600 BPS, 1=115200BPS
149)   0100 CD 90 05    		 CALL RS_INI        ;RS232 INITIALIZE	;RS232 INITIALIZE
150)   0103 CD C2 05    		 CALL RS_MESG	;
151)   0106 53 45 52 49 		 DEFM "SERIAL INITIALIZED OK"	;
151)   010A 41 4C 20 49 		 DEFM "SERIAL INITIALIZED OK"	;
151)   010E 4E 49 54 49 		 DEFM "SERIAL INITIALIZED OK"	;
151)   0112 41 4C 49 5A 		 DEFM "SERIAL INITIALIZED OK"	;
151)   0116 45 44 20 4F 		 DEFM "SERIAL INITIALIZED OK"	;
151)   011A 4B          		 DEFM "SERIAL INITIALIZED OK"	;
152)   011B 0A 0D 00    		 DB 10,13,0	;
153)   011E F3          		 DI	;
155)   011F 3E 06       		 LD A,6	;
156)   0121 CD E7 07    		 CALL STRG_INIT	;
157)   0124 28 1F       		 JR Z, STINIOK	;
158)   0126 CD C2 05    		 CALL RS_MESG	;
159)   0129 45 52 52 4F 		 DEFM "ERROR INITILIZING CH376S"	;
159)   012D 52 20 49 4E 		 DEFM "ERROR INITILIZING CH376S"	;
159)   0131 49 54 49 4C 		 DEFM "ERROR INITILIZING CH376S"	;
159)   0135 49 5A 49 4E 		 DEFM "ERROR INITILIZING CH376S"	;
159)   0139 47 20 43 48 		 DEFM "ERROR INITILIZING CH376S"	;
159)   013D 33 37 36 53 		 DEFM "ERROR INITILIZING CH376S"	;
160)   0141 0A 0D 00    		 DB 10,13,0	;
161)   0144 76          		 HALT	;
162)   0145 CD C2 05    		STINIOK: CALL RS_MESG	;
163)   0148 53 54 4F 52 		 DEFM "STORAGE DEVICE OK"	;
163)   014C 41 47 45 20 		 DEFM "STORAGE DEVICE OK"	;
163)   0150 44 45 56 49 		 DEFM "STORAGE DEVICE OK"	;
163)   0154 43 45 20 4F 		 DEFM "STORAGE DEVICE OK"	;
163)   0158 4B          		 DEFM "STORAGE DEVICE OK"	;
164)   0159 0A 0D 00    		 DB 10,13,0	;
165)   015C 3E 06       		 LD A,6    ;USB DRIVE	;USB DRIVE
166)   015E CD 43 08    		 CALL STRG_OPENCRD  ;MOUNT THE DRIVE	;MOUNT THE DRIVE
167)   0161 28 22       		 JR Z, STOPNOK	;
168)   0163 CD C2 05    		 CALL RS_MESG	;
169)   0166 45 52 52 4F 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   016A 52 20 4D 4F 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   016E 55 4E 54 49 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   0172 4E 47 20 54 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   0176 48 45 20 44 		 DEFM "ERROR MOUNTING THE DRIVE"	;
169)   017A 52 49 56 45 		 DEFM "ERROR MOUNTING THE DRIVE"	;
170)   017E 0A 0D 00    		 DB 10,13,0	;
171)   0181 76          		 HALT	;
172)   0182 C3 82 01    		 JP $	;
173)   0185 CD 4E 08    		STOPNOK: CALL STRG_PRDRVINFO ;PRINT DRIVE INFO	;PRINT DRIVE INFO
174)   0188 CD 18 06    		 CALL RS_NEWLINE	;
175)   018B CD 54 00    		 CALL INITVGA	;
183)   018E 21 09 00    		 LD HL,OSVERMES	;
184)   0191 CD AE 00    		 CALL OS_PRINTTEXT	;
190)   0194 21 44 05    		 LD HL,BFILEINI	;
191)   0197 01 A0 0F    		 LD BC,4000  ;MAX BYTES OF FILE	;MAX BYTES OF FILE
192)   019A 11 BC F0    		 LD DE,FILEBUFFER 	;
193)   019D CD 35 0A    		 CALL STRG_LOADFILE	;
194)   01A0 30 1D       		 JR NC, FILOK	;
195)   01A2 CD C2 05    		 CALL RS_MESG	;
196)   01A5 45 52 52 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01A9 52 20 4C 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01AD 41 44 49 4E 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01B1 47 20 42 4F 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01B5 4F 54 2E 49 		 DEFM "ERROR LOADING BOOT.INI"	;
196)   01B9 4E 49       		 DEFM "ERROR LOADING BOOT.INI"	;
197)   01BB 0D 0A 00    		 DB 13,10,0	;
198)   01BE 76          		 HALT	;
211)   01BF ED 43 1B F0 		FILOK: LD (FILEBTCNT),BC	;
212)   01C3 21 BC F0    		 LD HL,FILEBUFFER	;
213)   01C6 09          		 ADD HL,BC	;
214)   01C7 23          		 INC HL	;
215)   01C8 36 00       		 LD (HL),0	;
216)   01CA 21 BC F0    		 LD HL,FILEBUFFER	;
217)   01CD CD 05 05    		 CALL FINDSECTION	;
218)   01D0 50 41 47 45 		 DEFM "PAGES"	;
218)   01D4 53          		 DEFM "PAGES"	;
219)   01D5 00          		 DB 0	;
220)   01D6 30 1E       		 JR NC, PRG_NXT1	;
221)   01D8 CD C2 05    		 CALL RS_MESG	;
222)   01DB 45 52 52 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01DF 52 20 5B 50 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01E3 41 47 45 53 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01E7 5D 2E 4E 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01EB 54 2E 46 4F 		 DEFM "ERROR [PAGES] NOT FOUND"	;
222)   01EF 55 4E 44    		 DEFM "ERROR [PAGES] NOT FOUND"	;
223)   01F2 0D 0A 00    		 DB 13,10,0	;
224)   01F5 76          		 HALT	;
225)   01F6 CD 8A 04    		PRG_NXT1: CALL AN_PAGES	;
226)   01F9 21 BC F0    		 LD HL,FILEBUFFER	;
227)   01FC CD 05 05    		 CALL FINDSECTION	;
228)   01FF 46 49 4C 45 		 DEFM "FILES"	;
228)   0203 53          		 DEFM "FILES"	;
229)   0204 00          		 DB 0	;
230)   0205 30 1E       		 JR NC, PRG_NXT2	;
231)   0207 CD C2 05    		 CALL RS_MESG	;
232)   020A 45 52 52 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   020E 52 20 5B 46 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   0212 49 4C 45 53 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   0216 5D 2E 4E 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   021A 54 2E 46 4F 		 DEFM "ERROR [FILES] NOT FOUND"	;
232)   021E 55 4E 44    		 DEFM "ERROR [FILES] NOT FOUND"	;
233)   0221 0D 0A 00    		 DB 13,10,0	;
234)   0224 76          		 HALT	;
235)   0225 CD 07 04    		PRG_NXT2: CALL LD_FILE	;
244)   0228 21 BC F0    		 LD HL,FILEBUFFER	;
245)   022B CD 05 05    		 CALL FINDSECTION	;
246)   022E 42 41 4E 4B 		 DEFM "BANKS"	;
246)   0232 53          		 DEFM "BANKS"	;
247)   0233 00          		 DB 0	;
248)   0234 30 1E       		 JR NC, PRG_NXT3	;
249)   0236 CD C2 05    		 CALL RS_MESG	;
250)   0239 45 52 52 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
250)   023D 52 20 5B 42 		 DEFM "ERROR [BANKS] NOT FOUND"	;
250)   0241 41 4E 4B 53 		 DEFM "ERROR [BANKS] NOT FOUND"	;
250)   0245 5D 2E 4E 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
250)   0249 54 2E 46 4F 		 DEFM "ERROR [BANKS] NOT FOUND"	;
250)   024D 55 4E 44    		 DEFM "ERROR [BANKS] NOT FOUND"	;
251)   0250 0D 0A 00    		 DB 13,10,0	;
252)   0253 76          		 HALT	;
253)   0254 CD A7 03    		PRG_NXT3: CALL DO_BANKS	;
254)   0257 CD C2 05    		 CALL RS_MESG	;
255)   025A 42 41 4E 4B 		 DEFM "BANKS SAVED"	;
255)   025E 53 20 53 41 		 DEFM "BANKS SAVED"	;
255)   0262 56 45 44    		 DEFM "BANKS SAVED"	;
256)   0265 0D 0A 00    		 DB 13,10,0	;
257)   0268 21 BC F0    		 LD HL,FILEBUFFER	;
258)   026B CD 05 05    		 CALL FINDSECTION	;
259)   026E 45 58 45 43 		 DEFM "EXECBNK"	;
259)   0272 42 4E 4B    		 DEFM "EXECBNK"	;
260)   0275 00          		 DB 0	;
261)   0276 30 20       		 JR NC, PRG_NXT4	;
262)   0278 CD C2 05    		 CALL RS_MESG	;
263)   027B 45 52 52 4F 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   027F 52 20 5B 45 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   0283 58 45 43 42 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   0287 4E 4B 5D 2E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   028B 4E 4F 54 2E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   028F 46 4F 55 4E 		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
263)   0293 44          		 DEFM "ERROR [EXECBNK] NOT FOUND"	;
264)   0294 0D 0A 00    		 DB 13,10,0	;
265)   0297 76          		 HALT	;
266)   0298 CD D3 03    		PRG_NXT4: CALL DO_EXEC	;
267)   029B CD C2 05    		 CALL RS_MESG	;
268)   029E 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02A2 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02A6 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02AA 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02AE 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02B2 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02B6 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02BA 2A 2A 2A 2A 		 DEFM "***********************************"	;
268)   02BE 2A 2A 2A    		 DEFM "***********************************"	;
269)   02C1 0D 0A       		 DB 13,10	;
270)   02C3 45 58 45 43 		 DEFM "EXECUTING..."	;
270)   02C7 55 54 49 4E 		 DEFM "EXECUTING..."	;
270)   02CB 47 2E 2E 2E 		 DEFM "EXECUTING..."	;
271)   02CF 0D 0A 00    		 DB 13,10,0	;
284)   02D2 0E 06       		 LD C,6	;
285)   02D4 21 01 F0    		PRG_NXTBNK: LD HL,OSBANKS	;
286)   02D7 06 00       		 LD B,0  	;
287)   02D9 09          		 ADD HL,BC	;
288)   02DA 41          		 LD B,C	;
289)   02DB 7E          		 LD A,(HL)	;
290)   02DC CD 31 03    		 CALL PUTTOBANKSV	;
291)   02DF 0D          		 DEC C	;
292)   02E0 20 F2       		 JR NZ,PRG_NXTBNK	;
293)   02E2 31 00 70    		 LD SP,$7000  ;NEW SP BANK 3 IS RAM ALWAYS	;NEW SP BANK 3 IS RAM ALWAYS
294)   02E5 21 01 F0    		 LD HL,OSBANKS	;
295)   02E8 7E          		 LD A,(HL)	;
296)   02E9 5F          		 LD E,A   ;PAGE TO BANK 0  	;PAGE TO BANK 0
297)   02EA D5          		 PUSH DE   ;PUSH 0 BANK PAGE	;PUSH 0 BANK PAGE
298)   02EB CD C2 05    		 CALL RS_MESG	;
299)   02EE 45 58 45 43 		 DEFM "EXEC BANK="	;
299)   02F2 20 42 41 4E 		 DEFM "EXEC BANK="	;
299)   02F6 4B 3D       		 DEFM "EXEC BANK="	;
300)   02F8 00          		 DB 0	;
301)   02F9 3A 09 F0    		 LD A,(EXBANK)  ;THE BANK TO EXECUTE OS ENTRY POINT 	;THE BANK TO EXECUTE OS ENTRY POINT
302)   02FC CD CA 04    		 CALL PRNNUM	;
303)   02FF F5          		 PUSH AF   ;PUSH EXECUTE BANK 	;PUSH EXECUTE BANK
304)   0300 21 08 F0    		 LD HL,OSBANKS+7	;
305)   0303 7E          		 LD A,(HL)  ;PAGE TO BANK 7 	;PAGE TO BANK 7
306)   0304 06 07       		 LD B,7   	;
307)   0306 CD 58 03    		 CALL PUTTOBANK  ;NO MORE PARAMS ON PAGE 7   	;NO MORE PARAMS ON PAGE 7
309)   0309 11 00 60    		 LD DE,$6000	;
310)   030C 21 4D 03    		 LD HL,CPPUTTOBANK	;
311)   030F 01 1D 00    		 LD BC, ENPUTTOBANK-CPPUTTOBANK+1	;
312)   0312 ED B0       		 LDIR   ;TRANSFER CODE TO RAM	;TRANSFER CODE TO RAM
313)   0314 E1          		 POP HL   ;POP EXECUTE BANK H=A	;POP EXECUTE BANK H=A
314)   0315 AF          		 XOR A  	;
315)   0316 CB 24       		 SLA H   ;5 SHIFTS TO TRANSLATE BANK TO ADDRESS	;5 SHIFTS TO TRANSLATE BANK TO ADDRESS
316)   0318 CB 24       		 SLA H	;
317)   031A CB 24       		 SLA H	;
318)   031C CB 24       		 SLA H	;
319)   031E CB 24       		 SLA H	;
320)   0320 2E 00       		  LD L,0	;
321)   0322 11 01 60    		 LD DE,$6001	;
322)   0325 7D          		 LD A,L	;
323)   0326 12          		 LD (DE),A	;
324)   0327 13          		 INC DE	;
325)   0328 7C          		 LD A,H	;
326)   0329 12          		 LD (DE),A	;
335)   032A D1          		 POP DE   ;GET BANK 0 PAGE	;GET BANK 0 PAGE
336)   032B 7B          		 LD A,E   ;PUT PAGE OF BANK 0 TO A	;PUT PAGE OF BANK 0 TO A
337)   032C 06 00       		 LD B,0   ;BANK 0	;BANK 0
338)   032E C3 00 60    		 JP $6000  ;EXEC CODE IN RAM	;EXEC CODE IN RAM
344)   0331 21 1D F0    		PUTTOBANKSV: LD HL, BANKS	;
345)   0334 16 00       		 LD D,0	;
346)   0336 58          		 LD E,B	;
347)   0337 19          		 ADD HL,DE	;
348)   0338 77          		 LD (HL),A  ;SAVE PAGE TO BANK NO ON BANKS	;SAVE PAGE TO BANK NO ON BANKS
349)   0339 CD 58 03    		 CALL PUTTOBANK	;
350)   033C C5          		 PUSH BC	;
351)   033D F5          		 PUSH AF	;
352)   033E CD CA 04    		 CALL PRNNUM  ;IT MESSES WITH F0B4 ADDR SO ONLY FOR SV	;IT MESSES WITH F0B4 ADDR SO ONLY FOR SV
353)   0341 3E 3E       		 LD A,'>'	;
354)   0343 CD A9 05    		 CALL RS_TX	;
355)   0346 78          		 LD A,B	;
356)   0347 CD CA 04    		 CALL PRNNUM	;
357)   034A F1          		 POP AF	;
358)   034B C1          		 POP BC	;
359)   034C C9          		 RET	;
362)   034D 21 00 00    		CPPUTTOBANK:   LD HL,0000  ;CHANGE 0000 TO THE EXEC VALUE             	;CHANGE 0000 TO THE EXEC VALUE
363)   0350 CD 0B 60    		 CALL 24576+PUTTOBANK-CPPUTTOBANK  ;$6000=24576 	;$6000=24576
364)   0353 3E 01       		 LD A,1	;
365)   0355 D3 63       		 OUT (99),A  ;FOR TEST    	;FOR TEST
366)   0357 E9          		 JP (HL)	;
369)   0358 C5          		PUTTOBANK: PUSH BC	;
370)   0359 0E 00       		 LD C,DEVMMU	;
372)   035B CB 20       		 SLA B	;
373)   035D CB 20       		 SLA B	;
374)   035F CB 20       		 SLA B	;
375)   0361 CB 20       		 SLA B	;
376)   0363 CB 20       		 SLA B 	;
377)   0365 ED 79       		 OUT (C),A	;
378)   0367 C1          		 POP BC	;
379)   0368 C9          		 RET	;
381)   0369 00          		ENPUTTOBANK: NOP	;
383)   036A 5C 45 50 52 		EPRM: DEFM "\EPRM.BIN"  	;
383)   036E 4D 2E 42 49 		EPRM: DEFM "\EPRM.BIN"  	;
383)   0372 4E          		EPRM: DEFM "\EPRM.BIN"  	;
384)   0373 00          		 DEFB 0	;
386)   0374 5C 45 50 52 		EPRM2: DEFM "\EPRM2.BIN"  	;
386)   0378 4D 32 2E 42 		EPRM2: DEFM "\EPRM2.BIN"  	;
386)   037C 49 4E       		EPRM2: DEFM "\EPRM2.BIN"  	;
387)   037E 00          		 DEFB 0	;
389)   037F 5C 45 50 52 		EPRM3: DEFM "\EPRM3.BIN"  	;
389)   0383 4D 33 2E 42 		EPRM3: DEFM "\EPRM3.BIN"  	;
389)   0387 49 4E       		EPRM3: DEFM "\EPRM3.BIN"  	;
390)   0389 00          		 DEFB 0	;
394)   038A 5C          		ROOTDIR: DEFM "\" 	;
395)   038B 00          		 DEFB 0	;
399)   038C E5          		DUMPMEM: PUSH HL	;
401)   038D 21 6A 03    		DR_OPDIROK: LD HL,EPRM	;
403)   0390 D1          		 POP DE	;
404)   0391 CD 52 0B    		 CALL STRG_SAVEFILE	;
405)   0394 C9          		 RET	;
407)   0395 E5          		DUMPMEM2: PUSH HL	;
409)   0396 21 74 03    		DR_OPDIROK: LD HL,EPRM2	;
411)   0399 D1          		 POP DE	;
412)   039A CD 52 0B    		 CALL STRG_SAVEFILE	;
413)   039D C9          		 RET  	;
415)   039E E5          		DUMPMEM3: PUSH HL	;
417)   039F 21 7F 03    		DR_OPDIROK: LD HL,EPRM3	;
419)   03A2 D1          		 POP DE	;
420)   03A3 CD 52 0B    		 CALL STRG_SAVEFILE	;
421)   03A6 C9          		 RET  	;
426)   03A7 CD C2 05    		DO_BANKS: CALL RS_MESG	;
427)   03AA 5B 42 41 4E 		 DEFM "[BANKS]"	;
427)   03AE 4B 53 5D    		 DEFM "[BANKS]"	;
428)   03B1 0D 0A 00    		 DB 13,10,0	;
429)   03B4 11 01 F0    		 LD DE,OSBANKS	;
430)   03B7 06 08       		 LD B,8	;
431)   03B9 C5          		NXTBNK: PUSH BC	;
432)   03BA D5          		 PUSH DE	;
433)   03BB CD 6A 04    		 CALL GETSTRNUM	;
434)   03BE CD 27 05    		 CALL SKIPNL	;
435)   03C1 E5          		 PUSH HL	;
436)   03C2 21 0A F0    		 LD HL,NUMSTR	;
437)   03C5 CD C5 14    		 CALL strtob	;
438)   03C8 E1          		 POP HL	;
439)   03C9 D1          		 POP DE	;
440)   03CA CD CA 04    		 CALL PRNNUM	;
441)   03CD 12          		 LD (DE),A	;
442)   03CE 13          		 INC DE	;
443)   03CF C1          		 POP BC	;
444)   03D0 10 E7       		 DJNZ NXTBNK	;
445)   03D2 C9          		 RET	;
447)   03D3 CD C2 05    		DO_EXEC: CALL RS_MESG	;
448)   03D6 5B 45 58 45 		 DEFM "[EXEC]"	;
448)   03DA 43 5D       		 DEFM "[EXEC]"	;
449)   03DC 0D 0A 00    		 DB 13,10,0	;
450)   03DF CD 6A 04    		 CALL GETSTRNUM	;
451)   03E2 21 0A F0    		 LD HL,NUMSTR	;
452)   03E5 CD C5 14    		 CALL strtob	;
453)   03E8 CD CA 04    		 CALL PRNNUM	;
454)   03EB 32 09 F0    		 LD (EXBANK),A	;
455)   03EE C9          		 RET	;
458)   03EF 11 0D F0    		COPYOSFILE: LD DE,OSFNAME	;
459)   03F2 7E          		COPYOSFILE1: LD A,(HL)	;
460)   03F3 FE 0D       		 CP 13	;
461)   03F5 28 0D       		 JR Z, LDF_EXIT	;
462)   03F7 FE 0A       		 CP 10	;
463)   03F9 28 09       		 JR Z, LDF_EXIT	;
464)   03FB FE 00       		 CP 0	;
465)   03FD 28 05       		 JR Z, LDF_EXIT	;
466)   03FF 12          		 LD (DE),A	;
467)   0400 13          		 INC DE	;
468)   0401 23          		 INC HL	;
469)   0402 18 EE       		 JR COPYOSFILE1;	;
470)   0404 AF          		LDF_EXIT: XOR A	;
471)   0405 12          		 LD (DE),A	;
472)   0406 C9          		 RET	;
474)   0407 CD C2 05    		LD_FILE: CALL RS_MESG	;
475)   040A 5B 46 49 4C 		 DEFM "[FILES]"	;
475)   040E 45 53 5D    		 DEFM "[FILES]"	;
476)   0411 0D 0A 00    		 DB 13,10,0	;
477)   0414 06 01       		 LD B,1   ;START FROM BANK 1 ;2 FOR TESTING	;START FROM BANK 1 ;2 FOR TESTING
478)   0416 CD EF 03    		 CALL COPYOSFILE	;
479)   0419 21 0D F0    		 LD HL,OSFNAME	;
480)   041C 01 00 80    		 LD BC,32768  ;MAX BYTES OF FILE IS 4 PAGES	;MAX BYTES OF FILE IS 4 PAGES
481)   041F 11 00 20    		 LD DE,$2000  ;$2000 FOR REAL	;$2000 FOR REAL
482)   0422 CD 35 0A    		 CALL STRG_LOADFILE	;
483)   0425 30 1B       		 JR NC, LDFILOK	;
484)   0427 CD C2 05    		 CALL RS_MESG	;
485)   042A 45 52 52 4F 		 DEFM "ERROR LOADING OSFILE"	;
485)   042E 52 20 4C 4F 		 DEFM "ERROR LOADING OSFILE"	;
485)   0432 41 44 49 4E 		 DEFM "ERROR LOADING OSFILE"	;
485)   0436 47 20 4F 53 		 DEFM "ERROR LOADING OSFILE"	;
485)   043A 46 49 4C 45 		 DEFM "ERROR LOADING OSFILE"	;
486)   043E 0D 0A 00    		 DB 13,10,0	;
487)   0441 C9          		 RET	;
488)   0442 CD C2 05    		LDFILOK: CALL RS_MESG	;
489)   0445 4F 53 20 46 		 DEFM "OS FILE LOADED!!!"	;
489)   0449 49 4C 45 20 		 DEFM "OS FILE LOADED!!!"	;
489)   044D 4C 4F 41 44 		 DEFM "OS FILE LOADED!!!"	;
489)   0451 45 44 21 21 		 DEFM "OS FILE LOADED!!!"	;
489)   0455 21          		 DEFM "OS FILE LOADED!!!"	;
490)   0456 0D 0A 00    		 DB 13,10,0	;
499)   0459 21 39 00    		 LD HL, MYMMUBANK+1	;
500)   045C 06 01       		 LD B,1 ;START WITH BANK 1	;START WITH BANK 1
501)   045E 0E 04       		 LD C,4  ;PUT 4 BANKS	;PUT 4 BANKS
502)   0460 7E          		LDF_AGN1: LD A,(HL) ;GET DEFAULT PAGE FOR BOOTL   	;GET DEFAULT PAGE FOR BOOTL
503)   0461 CD 31 03    		 CALL PUTTOBANKSV	;
504)   0464 23          		 INC HL	;
505)   0465 04          		 INC B	;
506)   0466 0D          		 DEC C	;
507)   0467 20 F7       		 JR NZ, LDF_AGN1	;
509)   0469 C9          		 RET	;
512)   046A 11 0A F0    		GETSTRNUM: LD DE,NUMSTR	;
513)   046D 7E          		GETSTRNUM1: LD A,(HL)	;
515)   046E FE 2C       		 CP ','	;
516)   0470 28 15       		 JR Z,GS_FIN	;
517)   0472 FE 3D       		 CP '='	;
518)   0474 28 11       		 JR Z,GS_FIN	;
519)   0476 FE 00       		 CP 0	;
520)   0478 28 0D       		 JR Z,GS_FIN	;
521)   047A FE 0D       		 CP 13	;
522)   047C 28 09       		 JR Z,GS_FIN	;
523)   047E FE 0A       		 CP 10	;
524)   0480 28 05       		 JR Z,GS_FIN	;
525)   0482 12          		 LD (DE),A	;
526)   0483 13          		 INC DE	;
527)   0484 23          		 INC HL	;
528)   0485 18 E6       		 JR GETSTRNUM1	;
529)   0487 AF          		GS_FIN: XOR A	;
530)   0488 12          		 LD (DE),A  	;
531)   0489 C9          		 RET  	;
534)   048A CD C2 05    		AN_PAGES: CALL RS_MESG	;
535)   048D 5B 50 41 47 		 DEFM "[PAGES]"	;
535)   0491 45 53 5D    		 DEFM "[PAGES]"	;
536)   0494 0D 0A 00    		 DB 13,10,0	;
537)   0497 06 01       		 LD B,1   ;START FROM BANK 1 ;$2000	;START FROM BANK 1 ;$2000
538)   0499 CD 6A 04    		NXT_PG: CALL GETSTRNUM	;
539)   049C E5          		 PUSH HL	;
540)   049D C5          		 PUSH BC	;
541)   049E 21 0A F0    		 LD HL,NUMSTR	;
542)   04A1 CD B8 05    		 CALL RS_TXT	;
543)   04A4 3E 2D       		 LD A,'-'	;
544)   04A6 CD A9 05    		 CALL RS_TX	;
545)   04A9 21 0A F0    		 LD HL,NUMSTR	;
546)   04AC CD C5 14    		 CALL strtob  ;A HAS THE PAGE TO PUT ON BANK 1,2,3,ETC	;A HAS THE PAGE TO PUT ON BANK 1,2,3,ETC
547)   04AF C1          		 POP BC	;
548)   04B0 CD 31 03    		 CALL PUTTOBANKSV	;
549)   04B3 04          		 INC B	;
550)   04B4 C5          		 PUSH BC	;
551)   04B5 CD 74 15    		 CALL PRINTNUM	;
552)   04B8 C1          		 POP BC	;
553)   04B9 E1          		 POP HL	;
554)   04BA 7E          		 LD A,(HL)	;
555)   04BB FE 2C       		 CP ','	;
556)   04BD 23          		 INC HL	;
557)   04BE 28 D9       		 JR Z,NXT_PG	;
558)   04C0 C9          		 RET	;
562)   04C1 7E          		FINDCHAR: LD A,(HL) 	;
563)   04C2 B8          		 CP B	;
564)   04C3 C8          		 RET Z	;
565)   04C4 FE 00       		 CP 0	;
566)   04C6 C8          		 RET Z	;
567)   04C7 23          		 INC HL	;
568)   04C8 18 F7       		 JR FINDCHAR	;
573)   04CA F5          		PRNNUM: PUSH AF	;
574)   04CB E5          		 PUSH HL	;
575)   04CC C5          		 PUSH BC	;
576)   04CD D5          		 PUSH DE	;
577)   04CE CD 74 15    		 CALL PRINTNUM	;
578)   04D1 D1          		 POP DE	;
579)   04D2 C1          		 POP BC	;
580)   04D3 E1          		 POP HL	;
581)   04D4 F1          		 POP AF	;
582)   04D5 C9          		 RET	;
585)   04D6 F5          		PRNCHAR: PUSH AF	;
586)   04D7 E5          		 PUSH HL	;
587)   04D8 C5          		 PUSH BC	;
588)   04D9 D5          		 PUSH DE	;
589)   04DA CD A9 05    		 CALL RS_TX	;
590)   04DD F5          		 PUSH AF	;
591)   04DE 3E 3D       		 LD A,'='	;
592)   04E0 CD A9 05    		 CALL RS_TX	;
593)   04E3 F1          		 POP AF	;
594)   04E4 CD 74 15    		 CALL PRINTNUM	;
595)   04E7 D1          		 POP DE	;
596)   04E8 C1          		 POP BC	;
597)   04E9 E1          		 POP HL	;
598)   04EA F1          		 POP AF	;
599)   04EB C9          		 RET	;
604)   04EC 1A          		STRCMP: LD A,(DE) ;STRING TO FIND CHAR	;STRING TO FIND CHAR
605)   04ED FE 00       		 CP 0  ;KEYWD ENDED	;KEYWD ENDED
606)   04EF 28 09       		 JR Z,STRFOUND	;
607)   04F1 47          		 LD B,A	;
608)   04F2 7E          		 LD A,(HL) ;STRING TESTING CHAR	;STRING TESTING CHAR
609)   04F3 B8          		 CP B	;
610)   04F4 20 06       		 JR NZ,STRNOTFOUND	;
611)   04F6 13          		 INC DE	;
612)   04F7 23          		 INC HL	;
613)   04F8 18 F2       		 JR STRCMP	;
614)   04FA AF          		STRFOUND: XOR A ;CLEAR CARRY	;CLEAR CARRY
615)   04FB C9          		 RET	;
616)   04FC 37          		STRNOTFOUND: SCF	;
617)   04FD C9          		 RET  	;
619)   04FE 1A          		FNDRETADDR: LD A,(DE)	;
620)   04FF 13          		 INC DE	;
621)   0500 FE 00       		 CP 0  	;
622)   0502 C8          		 RET Z	;
623)   0503 18 F9       		 JR FNDRETADDR	;
627)   0505 D1          		FINDSECTION:   POP DE	;
628)   0506 D5          		 PUSH DE	;
629)   0507 CD 2E 05    		 CALL FINDASECTION	;
630)   050A 30 10       		 JR NC,SECFOUND	;
631)   050C D1          		 POP DE	;
632)   050D 7E          		 LD A,(HL)	;
633)   050E FE 00       		 CP 0	;
634)   0510 28 04       		 JR Z, SECNOEXIST ;END OF TEXT FILE REACHED	;END OF TEXT FILE REACHED
635)   0512 23          		 INC HL	;
636)   0513 D5          		 PUSH DE	;
637)   0514 18 EF       		 JR FINDSECTION ;KEEP SEARCHING	;KEEP SEARCHING
638)   0516 CD FE 04    		SECNOEXIST:    CALL FNDRETADDR	;
639)   0519 D5          		 PUSH DE	;
640)   051A 37          		 SCF	;
641)   051B C9          		 RET	;
643)   051C 23          		SECFOUND: INC HL ;SKIP ']'	;SKIP ']'
644)   051D CD 27 05    		 CALL SKIPNL	;
645)   0520 D1          		 POP DE	;
646)   0521 CD FE 04    		 CALL FNDRETADDR	;
647)   0524 D5          		 PUSH DE	;
648)   0525 AF          		 XOR A	;
649)   0526 C9          		 RET	;
653)   0527 7E          		SKIPNL: LD A,(HL)	;
654)   0528 FE 1F       		 CP 31	;
655)   052A D0          		 RET NC	;
656)   052B 23          		 INC HL	;
657)   052C 18 F9       		 JR SKIPNL	;
661)   052E 06 5B       		FINDASECTION: LD B,'['	;
662)   0530 CD C1 04    		 CALL FINDCHAR	;
663)   0533 B7          		 OR A	;
664)   0534 28 0C       		 JR Z,ASECTNOTFND   ;NOT FOUND IF A=0 	;NOT FOUND IF A=0
665)   0536 23          		 INC HL ;HL POINTS TO THE STRING INSIDE []  	;HL POINTS TO THE STRING INSIDE []
666)   0537 CD EC 04    		 CALL STRCMP	;
667)   053A D8          		 RET C	;
669)   053B 7E          		 LD A,(HL)	;
670)   053C FE 5D       		 CP ']'	;
671)   053E 20 02       		 JR NZ, ASECTNOTFND ;MORE LETTERS ON SECTION	;MORE LETTERS ON SECTION
672)   0540 AF          		 XOR A  ;CLR CF	;CLR CF
673)   0541 C9          		 RET	;
674)   0542 37          		ASECTNOTFND: SCF	;
675)   0543 C9          		 RET 	;
677)   0544 5C 42 4F 4F 		BFILEINI DEFM "\BOOT.INI"	;
677)   0548 54 2E 49 4E 		BFILEINI DEFM "\BOOT.INI"	;
677)   054C 49          		BFILEINI DEFM "\BOOT.INI"	;
678)   054D 00          		 DB 0	;
679)   054E 5C 46 4F 4E 		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
679)   0552 54 2E 43 48 		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
679)   0556 52          		CHARSETFILE DEFM "\FONT.CHR" ;2560 BYTES 	;2560 BYTES
680)   0557 00          		 DB 0	;
686)   F000 00          		BLSTACKP DEFS 1	;
689)   F001 00 00 00 00 		 OSBANKS DEFS 8	;
689)   F005 00 00 00 00 		 OSBANKS DEFS 8	;
690)   F009 00          		 EXBANK DEFS 1	;
691)   F00A 00 00 00    		 NUMSTR: DEFS 3	;
692)   F00D 00 00 00 00 		 OSFNAME DEFS 14	;
692)   F011 00 00 00 00 		 OSFNAME DEFS 14	;
692)   F015 00 00 00 00 		 OSFNAME DEFS 14	;
692)   F019 00 00       		 OSFNAME DEFS 14	;
693)   F01B 00 00       		 FILEBTCNT DEFS 2 	;
695)   F01D 00 00 00 00 		 @BANKS  DEFS 8       ;8 PAGES FOR THE 8 BANKS 0..7	;8 PAGES FOR THE 8 BANKS 0..7
695)   F021 00 00 00 00 		 @BANKS  DEFS 8       ;8 PAGES FOR THE 8 BANKS 0..7	;8 PAGES FOR THE 8 BANKS 0..7
696)   F025 00 00 00 00 		 @TMPG   DEFS 4  ;TEMP PAGE FOR VIDEO VGA	;TEMP PAGE FOR VIDEO VGA
697)   F029 00 00 00 00 		 @PGSEM DEFS 4  ;PAGE SEMAPHORES TO KEEP TRACK OF PAGE CALLS	;PAGE SEMAPHORES TO KEEP TRACK OF PAGE CALLS
700)   F02D 00          		 @SERERR DEFS 1       ;	;
702)   F02E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F032 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F036 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F03A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F03E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F042 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F046 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F04A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F04E 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F052 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F056 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F05A 00 00 00 00 		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
702)   F05E 00 00       		 @USBBUF DEFS 50       ;CH376 USB BUFFER	;CH376 USB BUFFER
703)   F060 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
703)   F064 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
703)   F068 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
703)   F06C 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
703)   F070 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
703)   F074 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
703)   F078 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
703)   F07C 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
703)   F080 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
703)   F084 00 00 00 00 		 @STRGBUFF DEFS 40       ;USED FOR DIRECTORY AND FILENAME	;USED FOR DIRECTORY AND FILENAME
707)   F088 00          		 @SCRNST DEFS 1       ;SCREEN STATUS BIT 0 ON/OFF LCD,BIT 1 ON/OFF VGA	;SCREEN STATUS BIT 0 ON/OFF LCD, BIT 1 ON/OFF VGA
708)   F089 00          		 @VGAFCOL DEFS 1  ;VGA FORE COLOR	;VGA FORE COLOR
709)   F08A 00          		 @VGABCOL DEFS 1  ;VGA BACK COLOR	;VGA BACK COLOR
710)   F08B 00          		 @VGATX_X DEFS 1  ;VGA CURRENT X POS	;VGA CURRENT X POS
711)   F08C 00          		 @VGATX_Y DEFS 1  ;VGA CUR Y POS	;VGA CUR Y POS
712)   F08D 00          		 @VGAMAXX DEFS 1  ;MAX HORZ CHARS	;MAX HORZ CHARS
713)   F08E 00          		 @VGAMAXY DEFS 1  ;MAX VERT LINES	;MAX VERT LINES
714)   F08F 00          		 @VGATMPC DEFS 1  ;TMP CHAR FOR CURSOR	;TMP CHAR FOR CURSOR
715)   F090 00          		 @VGABUF DEFS 1  ;BUFFER TO WRITE-BIT 0 TO SELECT	;BUFFER TO WRITE - BIT 0 TO SELECT
716)   F091 00 00       		 @VGASTADR DEFS 2  ;START ADDRESS TO CALCULATE TEXT OUTPUT	;START ADDRESS TO CALCULATE TEXT OUTPUT
719)   F093 00 00 00 00 		 @B2DINV DEFS 8  ;BINARY NUMBER TO BE CONVERTED	;BINARY NUMBER TO BE CONVERTED
719)   F097 00 00 00 00 		 @B2DINV DEFS 8  ;BINARY NUMBER TO BE CONVERTED	;BINARY NUMBER TO BE CONVERTED
720)   F09B 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
720)   F09F 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
720)   F0A3 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
720)   F0A7 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
720)   F0AB 00 00 00 00 		 @B2DBUF DEFS 20  ;ASCCI STRING OF THE NUMBER 	;ASCCI STRING OF THE NUMBER
721)   F0AF 00          		 @B2DEND DEFS 1  ;0 FOR TERMINATE THE STRING	;0 FOR TERMINATE THE STRING
722)   F0B0 00 00       		 @LINESTR: DEFS 2 ;ADDRESS OF LINEBUF FOR PRINTING ON STRING	;ADDRESS OF LINEBUF FOR PRINTING ON STRING
723)   F0B2 00          		 @LINEPOS DEFS 1	;
724)   F0B3 00          		 @RNDseed DEFS 1  ;RANDOM SEED	;RANDOM SEED
725)   F0B4 00 00 00 00 		 @NUMBUF DEFS 7	;
725)   F0B8 00 00 00    		 @NUMBUF DEFS 7	;
726)   F0BB 00          		 @STRG_STAT DEFS 1	;
728)   F0BC 00          		 FILEBUFFER DEFS 1 ;ALL EXTRA SPACE TO BE USED FOR LOADING BOOT.INI ***THIS IS LAST***	;ALL EXTRA SPACE TO BE USED FOR LOADING BOOT.INI ***THIS IS LAST***
732)   0558 00          		 NOP	;
 10)   0559 21 1D F0    		INITMMU:       LD HL,BANKS	;
 11)   055C 06 08       		               LD B,8	;
 12)   055E AF          		               XOR A	;
 13)   055F 77          		INM_AGN:       LD (HL),A	;
 14)   0560 3C          		               INC A	;
 15)   0561 23          		 INC HL	;
 16)   0562 10 FB       		               DJNZ INM_AGN	;
 17)   0564 C9          		               RET                	;
 23)   0565 4F          		PUTPGINBANK: LD C, A       ;SAVE PAGE	;SAVE PAGE
 24)   0566 78          		 LD A, B                                                         ;BANK IN A	;BANK IN A
 25)   0567 FE 02       		 CP 2	;
 26)   0569 D8          		 RET C         ;BANK 0,1 WILL NEVER CHANGE	;BANK 0,1 WILL NEVER CHANGE
 27)   056A FE 07       		 CP 7	;
 28)   056C C8          		 RET Z         ;BANK 7 WILL NEVER CHANGE	;BANK 7 WILL NEVER CHANGE
 29)   056D 21 1D F0    		 LD HL, BANKS	;
 30)   0570 16 00       		 LD D, 0	;
 31)   0572 5F          		 LD E, A	;
 32)   0573 19          		 ADD HL, DE	;
 33)   0574 79          		 LD A, C        ;RESTORE PAGE	;RESTORE PAGE
 34)   0575 77          		 LD (HL), A        ;SAVE PG IN BANK B MEMORY	;SAVE PG IN BANK B MEMORY
 35)   0576 0E 00       		 LD C, DEVMMU	;
 36)   0578 58          		 LD E,B	;
 37)   0579 CB 20       		 SLA B         ;SHIFT BANK TO A15..A13 FROM A2..A0 WE USE THESE PINS ON THE CPLD FOR BANK INPUT	;SHIFT BANK TO A15..A13 FROM A2..A0 WE USE THESE PINS ON THE CPLD FOR BANK INPUT
 38)   057B CB 20       		 SLA B	;
 39)   057D CB 20       		 SLA B	;
 40)   057F CB 20       		 SLA B	;
 41)   0581 CB 20       		 SLA B         ;SET TO A15,A14,A13	;SET TO A15,A14,A13
 42)   0583 ED 79       		 OUT (C), A	;
 43)   0585 43          		 LD B,E	;
 44)   0586 C9          		 RET	;
 49)   0587 21 1D F0    		GETPGINBANK:   LD HL,BANKS	;
 50)   058A 16 00       		               LD D,0	;
 51)   058C 58          		               LD E,B	;
 52)   058D 19          		               ADD HL,DE	;
 53)   058E 7E          		               LD A,(HL)	;
 54)   058F C9          		               RET	;
 17)   0590 	            		 RBR EQU DEVSER+0      ;RECEIVER BUFFER REGISTER (READ ONLY) (DLAB = 0)	;RECEIVER BUFFER REGISTER (READ ONLY) (DLAB = 0)
 18)   0590 	            		 THR EQU DEVSER+0      ;TRANSMITER HOLDING REGISTER (WRITE ONLY) (DLAB = 0)	;TRANSMITER HOLDING REGISTER (WRITE ONLY) (DLAB = 0)
 19)   0590 	            		 IER EQU DEVSER+1      ;INTERRUPT ENABLE REGISTER (DLAB = 0)	;INTERRUPT ENABLE REGISTER (DLAB = 0)
 24)   0590 	            		 IIR EQU DEVSER+2      ;INTERRUPT IDENT. REGISTER (READ ONLY)	;INTERRUPT IDENT. REGISTER (READ ONLY)
 29)   0590 	            		 FCR EQU DEVSER+2      ;FIFO CONTROL REGISTER (WRITE ONLY)	;FIFO CONTROL REGISTER (WRITE ONLY)
 37)   0590 	            		 LCR EQU DEVSER+3      ;LINE CONTROL REGISTER	;LINE CONTROL REGISTER
 45)   0590 	            		 MCR EQU DEVSER+4      ;MODEM CONTROL REGISTER	;MODEM CONTROL REGISTER
 46)   0590 	            		 LSR EQU DEVSER+5      ;LINE STATUS REGISTER	;LINE STATUS REGISTER
 55)   0590 	            		 MSR EQU DEVSER+6      ;MODEM STATUS REGISTER	;MODEM STATUS REGISTER
 56)   0590 	            		 SCR EQU DEVSER+7      ;SCRATCH REGISTER	;SCRATCH REGISTER
 57)   0590 	            		 DLL EQU DEVSER+0      ;DIVISOR LATCH (LEAST SIGNIFICANT BYTE) (DLAB = 1)	;DIVISOR LATCH (LEAST SIGNIFICANT BYTE) (DLAB = 1)
 58)   0590 	            		 DLM EQU DEVSER+1      ;DIVISOR LATCH (MOST SIGNIFICANT BYTE) (DLAB = 1)	;DIVISOR LATCH (MOST SIGNIFICANT BYTE) (DLAB = 1)
 64)   0590 F5          		RS_INI: PUSH AF	;
 65)   0591 3E 80       		 LD A, $80        ; Mask to set DLAB on	; Mask to set DLAB on
 66)   0593 D3 1B       		 OUT (LCR), A        ; Send to LINe Control Register	; Send to LINe Control Register
 75)   0595 F1          		 POP AF	;
 76)   0596 D3 18       		 OUT (DLL), A        ; Set LSB of divisor	; Set LSB of divisor
 77)   0598 3E 00       		 LD A, 00        ; This will be the MSB of the divisior	; This will be the MSB of the divisior
 78)   059A D3 19       		 OUT (DLM), A        ; Send to the MSB register	; Send to the MSB register
 79)   059C 3E 03       		 LD A, $03        ; 8 bits, 1 stop, no parity (and clear DLAB)	; 8 bits, 1 stop, no parity (and clear DLAB)
 80)   059E D3 1B       		 OUT (LCR), A        ; Write new value to LCR	; Write new value to LCR
 82)   05A0 3E 00       		 LD A, 0	;
 83)   05A2 D3 1A       		 OUT (FCR), A        ;//was commented	;//was commented
 84)   05A4 3E 00       		 LD A, $00        ; 5 A=0 Disable all INterrupts	; 5 A=0 Disable all INterrupts
 85)   05A6 D3 19       		 OUT (IER), A        ; Send to INterrupt Enable Register	; Send to INterrupt Enable Register
 86)   05A8 C9          		 RET	;
 89)   05A9 CD AF 05    		RS_TX: CALL RSTXRD	;
 90)   05AC D3 18       		 OUT (THR), A	;
 92)   05AE C9          		 RET	;
 95)   05AF F5          		RSTXRD: PUSH AF	;
 96)   05B0 DB 1D       		RSTXLP: IN A, (LSR)        ; fetch the control register	; fetch the control register
 97)   05B2 CB 6F       		 BIT 5, A        ; bit will be set if UART is ready	; bit will be set if UART is ready
 98)   05B4 28 FA       		 JR Z, RSTXLP	;
 99)   05B6 F1          		 POP AF	;
100)   05B7 C9          		 RET	;
104)   05B8 7E          		RS_TXT: LD A, (HL)	;
105)   05B9 23          		 INC HL	;
106)   05BA FE 00       		 CP 0	;
107)   05BC C8          		 RET Z	;
108)   05BD CD A9 05    		 CALL RS_TX	;
109)   05C0 18 F6       		 JR RS_TXT	;
113)   05C2 E5          		RS_MESG: PUSH HL	;
114)   05C3 C5          		 PUSH BC	;
115)   05C4 D5          		 PUSH DE	;
116)   05C5 F5          		 PUSH AF	;
117)   05C6 21 09 00    		 LD HL,9 ;POINTS TO RET ADDRESS +10 FROM SP = OUR STRING	;POINTS TO RET ADDRESS +10 FROM SP = OUR STRING
118)   05C9 39          		 ADD HL,SP	;
119)   05CA 46          		 LD B,(HL)    	;
120)   05CB 2B          		 DEC HL	;
121)   05CC 4E          		 LD C,(HL)	;
122)   05CD 60          		 LD H,B	;
123)   05CE 69          		 LD L,C	;
124)   05CF CD B8 05    		 CALL RS_TXT	;
125)   05D2 F1          		 POP AF	;
126)   05D3 D1          		 POP DE	;
127)   05D4 44          		 LD B,H  ;NEW RET ADDRESS	;NEW RET ADDRESS
128)   05D5 4D          		 LD C,L	;
129)   05D6 21 05 00    		 LD HL,5 ;POINTS TO RET ADDRESS +6 FROM SP	;POINTS TO RET ADDRESS +6 FROM SP
130)   05D9 39          		 ADD HL,SP  	;
131)   05DA 70          		 LD (HL),B	;
132)   05DB 2B          		 DEC HL	;
133)   05DC 71          		 LD (HL),C  	;
134)   05DD C1          		 POP BC	;
135)   05DE E1          		 POP HL	;
136)   05DF C9          		 RET 	;
143)   05E0 ED 57       		RS_RX: LD A,I        ;SETS PV IF INTS ARE ENABLED	;SETS PV IF INTS ARE ENABLED
144)   05E2 F5          		 PUSH AF	;
145)   05E3 D1          		 POP DE	;
146)   05E4 F3          		 DI	;
147)   05E5 3E 01       		 LD A, 1        ;ready to receive SIGNAL DSR 1	;ready to receive SIGNAL DSR 1
148)   05E7 D3 1C       		 OUT (MCR), A	;
149)   05E9 CD 07 06    		 CALL RSRXRD	;
150)   05EC AF          		RS_GTCH: XOR A        ;NOT ready to receive SIGNAL DSR 0	;NOT ready to receive SIGNAL DSR 0
151)   05ED D3 1C       		 OUT (MCR), A	;
153)   05EF DB 18       		 IN A, (RBR)  	;
154)   05F1 D5          		 PUSH DE	;
155)   05F2 57          		 LD D,A	;
156)   05F3 F1          		 POP AF	;
157)   05F4 7A          		 LD A,D	;
158)   05F5 E0          		 RET PO  	;
159)   05F6 FB          		 EI	;
160)   05F7 C9          		 RET	;
162)   05F8 3E 01       		RS_RXNW: LD A, 1       ;ready to receive SIGNAL DSR 1	;ready to receive SIGNAL DSR 1
163)   05FA D3 1C       		 OUT (MCR), A	;
164)   05FC DB 1D       		 IN A, (LSR)        ; fetch the conrtol register	; fetch the conrtol register
165)   05FE CB 47       		 BIT 0, A	;
166)   0600 28 03       		 JR Z, RS_NOCHAR	;
167)   0602 F3          		 DI	;
168)   0603 18 E7       		 JR RS_GTCH	;
169)   0605 AF          		RS_NOCHAR: XOR A        ;RETURN ZERO	;RETURN ZERO
170)   0606 C9          		 RET	;
178)   0607 F5          		 PUSH AF	;
184)   0608 DB 1D       		 IN A, (LSR)        ; fetch the control register	; fetch the control register
185)   060A CB 47       		 BIT 0, A        ; bit will be set if UART has data	; bit will be set if UART has data
186)   060C 28 FA       		 JR Z, RSRXLP	;
188)   060E F1          		 POP AF	;
190)   060F C9          		 RET	;
194)   0610 DB 1D       		RS_KEYRD: IN A, (LSR)       ; fetch the conrtol register	; fetch the conrtol register
195)   0612 CB 47       		 BIT 0, A        ; bit will be set if UART has data	; bit will be set if UART has data
196)   0614 C9          		 RET	;
198)   0615 F5          		SHLCD: PUSH AF	;
200)   0616 F1          		 POP AF	;
202)   0617 C9          		 RET	;
204)   0618 F5          		RS_NEWLINE: PUSH AF	;
205)   0619 3E 0D       		 LD A,13	;
206)   061B CD A9 05    		 CALL RS_TX	;
207)   061E 3E 0A       		 LD A,10	;
208)   0620 CD A9 05    		 CALL RS_TX	;
209)   0623 F1          		 POP AF	;
210)   0624 C9          		 RET  	;
213)   0625 F5          		CHKERR: PUSH AF	;
214)   0626 E5          		 PUSH HL	;
215)   0627 C5          		 PUSH BC	;
216)   0628 DB 1D       		 IN A, (LSR)        ;FETCH LINE STATUS REGISTER	;FETCH LINE STATUS REGISTER
217)   062A CB 67       		 BIT 4, A	;
218)   062C 28 04       		 JR Z, LBLPE	;
219)   062E 3E 42       		 LD A, 'B'       ;$20  ;BREAK	;$20  ;BREAK
220)   0630 18 1A       		 JR EXIT	;
221)   0632 CB 57       		LBLPE: BIT 2, A	;
222)   0634 28 04       		 JR Z, LBLFE	;
223)   0636 3E 50       		 LD A, 'P'       ;$40  ;PARITY	;$40  ;PARITY
224)   0638 18 12       		 JR EXIT	;
225)   063A CB 5F       		LBLFE: BIT 3, A	;
226)   063C 28 04       		 JR Z, LBLOE	;
227)   063E 3E 46       		 LD A, 'F'       ;$60  ;FRAME	;$60  ;FRAME
228)   0640 18 0A       		 JR EXIT	;
229)   0642 CB 4F       		LBLOE: BIT 1, A	;
230)   0644 28 04       		 JR Z, LBLNE	;
231)   0646 3E 4F       		 LD A, 'O'        ;$80  ;OVERRUN	;$80  ;OVERRUN
232)   0648 18 02       		 JR EXIT	;
233)   064A 3E 4E       		LBLNE: LD A, 'N'        ;NO ERROR	;NO ERROR
234)   064C 21 2D F0    		EXIT: LD HL, SERERR	;
235)   064F 77          		 LD (HL), A	;
237)   0650 C1          		 POP BC	;
238)   0651 E1          		 POP HL	;
239)   0652 F1          		 POP AF	;
240)   0653 C9          		 RET	;
  3)   0654 	            		INT376CMD EQU DEV376+1	;
  4)   0654 	            		INT376DAT EQU DEV376	;
 89)   0654 CD 32 07    		CH376_GETDATA: CALL CH376_DATARD	;
 90)   0657 FE 00       		 CP 0	;
 91)   0659 C8          		 RET Z   ;NO DATA AVAILABLE	;NO DATA AVAILABLE
 98)   065A F5          		               PUSH AF	;
 99)   065B 11 2E F0    		 LD DE,USBBUF	;
100)   065E 47          		 LD B,A	;
101)   065F CD 32 07    		UDC_NXT1: CALL CH376_DATARD	;
103)   0662 12          		 LD (DE),A	;
104)   0663 13          		 INC DE	;
108)   0664 10 F9       		 DJNZ UDC_NXT1 	;
109)   0666 F1          		               POP AF	;
110)   0667 C9          		 RET	;
113)   0668 F5          		DISKERROR: PUSH AF	;
114)   0669 CD C2 05    		 CALL RS_MESG	;
115)   066C 46 41 54 41 		 DEFM "FATAL ERROR:" 	;
115)   0670 4C 20 45 52 		 DEFM "FATAL ERROR:" 	;
115)   0674 52 4F 52 3A 		 DEFM "FATAL ERROR:" 	;
116)   0678 00          		 DB 0  	;
117)   0679 F1          		 POP AF	;
118)   067A CD 74 15    		 CALL PRINTNUM	;
119)   067D 21 89 06    		 LD HL,ERR_PART	;
120)   0680 FE 92       		 CP ERR_TYPE_ERROR	;
121)   0682 28 01       		 JR Z,PRNMES	;
122)   0684 C9          		 RET	;
123)   0685 CD B8 05    		PRNMES: CALL RS_TXT 	;
124)   0688 C9          		 RET	;
126)   0689 50 41 52 54 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   068D 49 54 49 4F 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0691 4E 2E 4E 4F 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0695 54 2E 53 55 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   0699 50 50 4F 52 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   069D 54 45 44 21 		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
126)   06A1 21 21       		ERR_PART DEFM "PARTITION NOT SUPPORTED!!!"	;
127)   06A3 0A 0D 00    		 DB 10,13,0	;
136)   06A6 CD B6 06    		CH376_WTCMDEND: CALL CH376_WAITINT	;
137)   06A9 C0          		               RET NZ	;
138)   06AA D8          		 RET C	;
139)   06AB AF          		 XOR A	;
140)   06AC CD D5 06    		 CALL CH376_GETSTAT	;
141)   06AF FE 14       		 CP USB_INT_SUCCESS	;
142)   06B1 C8          		 RET Z	;
153)   06B2 06 02       		 LD B,2	;
154)   06B4 05          		 DEC B  ;NZ FLAG	;NZ FLAG
155)   06B5 C9          		 RET	;
161)   06B6 AF          		CH376_WAITINT: XOR A	;
162)   06B7 01 32 00    		 LD BC,50	;
163)   06BA CD 23 07    		C3AGN2: CALL CH376_INSTAT	;
164)   06BD CB 7F       		 BIT 7,A	;
165)   06BF C8          		 RET Z	;
166)   06C0 F5          		 PUSH AF	;
167)   06C1 C5          		 PUSH BC	;
168)   06C2 06 14       		 LD B,20	;
169)   06C4 CD 0F 13    		 CALL DELAYMICRO	;
170)   06C7 C1          		 POP BC	;
171)   06C8 F1          		 POP AF	;
172)   06C9 0B          		 DEC BC	;
173)   06CA 5F          		 LD E,A	;
174)   06CB 78          		 LD A,B	;
175)   06CC B1          		 OR C	;
176)   06CD 7B          		 LD A,E	;
177)   06CE 20 EA       		 JR NZ, C3AGN2  	;
182)   06D0 37          		 SCF ;TIMEOUT       	;TIMEOUT
183)   06D1 06 02       		 LD B,2	;
184)   06D3 05          		 DEC B  ;NZ FLAG	;NZ FLAG
185)   06D4 C9          		 RET	;
187)   06D5 3E 22       		CH376_GETSTAT: LD A,CMD_GET_STATUS	;
188)   06D7 CD 17 07    		 CALL CH376_COMMD	;
189)   06DA CD 32 07    		 CALL CH376_DATARD	;
190)   06DD C9          		 RET	;
198)   06DE 01 C4 09    		CH376_CHOK: LD BC,2500	;
199)   06E1 CD 23 07    		C3AGN: CALL CH376_INSTAT	;
200)   06E4 CB 67       		 BIT 4,A   ;CHECK BUSY	;CHECK BUSY
201)   06E6 C8          		 RET Z   	;
202)   06E7 C5          		 PUSH BC	;
203)   06E8 F5          		 PUSH AF	;
204)   06E9 06 32       		 LD B,50	;
205)   06EB CD 0F 13    		 CALL DELAYMICRO	;
206)   06EE F1          		 POP AF	;
207)   06EF C1          		 POP BC	;
208)   06F0 0B          		 DEC BC	;
209)   06F1 5F          		 LD E,A	;
210)   06F2 78          		 LD A,B	;
211)   06F3 B1          		 OR C	;
212)   06F4 7B          		 LD A,E	;
213)   06F5 20 EA       		 JR NZ,C3AGN	;
214)   06F7 F5          		 PUSH AF  	;
215)   06F8 CD 74 15    		 CALL PRINTNUM  	;
216)   06FB F1          		 POP AF	;
217)   06FC CD C2 05    		 CALL RS_MESG	;
218)   06FF 2A 2A 2A 43 		 DEFM "***CMD TIMEOUT***"	;
218)   0703 4D 44 20 54 		 DEFM "***CMD TIMEOUT***"	;
218)   0707 49 4D 45 4F 		 DEFM "***CMD TIMEOUT***"	;
218)   070B 55 54 2A 2A 		 DEFM "***CMD TIMEOUT***"	;
218)   070F 2A          		 DEFM "***CMD TIMEOUT***"	;
219)   0710 0A 0D 00    		 DB 10,13,0       	;
220)   0713 06 02       		 LD B,2	;
221)   0715 05          		 DEC B  ;NZ FLAG	;NZ FLAG
222)   0716 C9          		 RET	;
228)   0717 D3 31       		CH376_COMMD: OUT (INT376CMD),A	;
229)   0719 C5          		 PUSH BC	;
230)   071A D5          		 PUSH DE	;
231)   071B E5          		 PUSH HL	;
232)   071C CD DE 06    		 CALL CH376_CHOK  ;CHECK NOT BUSY	;CHECK NOT BUSY
233)   071F E1          		 POP HL	;
234)   0720 D1          		 POP DE	;
235)   0721 C1          		 POP BC	;
236)   0722 C9          		 RET	;
238)   0723 DB 31       		CH376_INSTAT: IN A,(INT376CMD)	;
240)   0725 C9          		 RET	;
245)   0726 D3 30       		CH376_DATAWR: OUT (INT376DAT),A 	;
246)   0728 D5          		 PUSH DE	;
247)   0729 E5          		 PUSH HL 	;
248)   072A C5          		 PUSH BC	;
249)   072B CD DE 06    		 CALL CH376_CHOK  ;CHECK NOT BUSY	;CHECK NOT BUSY
250)   072E C1          		 POP BC	;
251)   072F E1          		 POP HL	;
252)   0730 D1          		 POP DE	;
253)   0731 C9          		 RET	;
256)   0732 DB 30       		CH376_DATARD: IN A,(INT376DAT)	;
261)   0734 C9          		 RET	;
264)   0735 3E 01       		CH376_VERSION: LD A,CMD_GET_IC_VER 	;
265)   0737 CD 17 07    		 CALL CH376_COMMD	;
266)   073A CD 32 07    		 CALL CH376_DATARD	;
267)   073D E6 0F       		 AND 00001111B	;
268)   073F C9          		               RET	;
270)   0740 3E 05       		CH376_INIT:    LD A,CMD_RESET_ALL	;
271)   0742 CD 17 07    		 CALL CH376_COMMD  	;
272)   0745 3E 06       		 LD A,CMD_CHECK_EXIST 	;
273)   0747 CD 17 07    		 CALL CH376_COMMD	;
274)   074A 3E 57       		 LD A,87	;
275)   074C CD 26 07    		 CALL CH376_DATAWR	;
276)   074F CD 32 07    		 CALL CH376_DATARD	;
277)   0752 FE A8       		 CP 255 - 87 	;
278)   0754 C9          		               RET               	;
282)   0755 F5          		CH376_SETUSB: PUSH AF	;
283)   0756 3E 15       		               LD A,CMD_SETUSB_MODE	;
284)   0758 CD 17 07    		 CALL CH376_COMMD	;
285)   075B F1          		               POP AF	;
286)   075C CD 26 07    		 CALL CH376_DATAWR	;
288)   075F 06 14       		 LD B,20	;
289)   0761 CD 0F 13    		 CALL DELAYMICRO     ;WAIT A BIT	;WAIT A BIT
294)   0764 CD D5 06    		 CALL CH376_GETSTAT	;
295)   0767 FE 15       		 CP USB_INT_CONNECT	;
296)   0769 C8          		 RET Z	;
298)   076A F5          		 PUSH AF	;
299)   076B CD C2 05    		 CALL CH376_ERROR	;
300)   076E 45 52 52 3A 		 DEFM "ERR: SETUSBMODE"	;
300)   0772 20 53 45 54 		 DEFM "ERR: SETUSBMODE"	;
300)   0776 55 53 42 4D 		 DEFM "ERR: SETUSBMODE"	;
300)   077A 4F 44 45    		 DEFM "ERR: SETUSBMODE"	;
301)   077D 0A 0D 00    		 DB 10,13,0	;
302)   0780 F1          		 POP AF	;
303)   0781 CD 74 15    		 CALL PRINTNUM	;
304)   0784 C9          		               RET	;
309)   0785 3E 30       		CH376_CONNECT: LD A, CMD_DISK_CONNECT	;
310)   0787 CD 17 07    		     CALL CH376_COMMD	;
311)   078A CD A6 06    		 CALL CH376_WTCMDEND	;
313)   078D D8          		 RET C ;TIMEOUT	;TIMEOUT
314)   078E C8          		 RET Z ;CONNECT OK	;CONNECT OK
319)   078F C9          		 RET ;NZ HERE	;NZ HERE
329)   0790 3E 31       		CH376_MOUNT:   LD A,CMD_DISK_MOUNT  	;
330)   0792 CD 17 07    		 CALL CH376_COMMD	;
331)   0795 CD A6 06    		 CALL CH376_WTCMDEND  	;
332)   0798 C9          		 RET	;
337)   0799 06 0A       		CH376_MOUNTDEV:   LD B,10  ;TRY TO MOUNT 10 TIMES	;TRY TO MOUNT 10 TIMES
338)   079B C5          		CM_AGN1: PUSH BC	;
339)   079C CD 55 07    		 CALL CH376_SETUSB	;
340)   079F 20 10       		 JR NZ,CM_ERROR	;
341)   07A1 CD 85 07    		 CALL CH376_CONNECT	;
342)   07A4 20 0B       		 JR NZ,CM_ERROR	;
343)   07A6 3E 31       		        LD A,CMD_DISK_MOUNT  	;
344)   07A8 CD 17 07    		 CALL CH376_COMMD	;
345)   07AB CD A6 06    		 CALL CH376_WTCMDEND	;
346)   07AE C1          		 POP BC	;
347)   07AF C8          		 RET Z	;
348)   07B0 C5          		 PUSH BC	;
349)   07B1 06 64       		CM_ERROR: LD B,100	;
350)   07B3 CD 24 13    		 CALL DELAYMILI     ;WAIT A BIT	;WAIT A BIT
351)   07B6 C1          		 POP BC	;
352)   07B7 10 E2       		 DJNZ CM_AGN1  	;
353)   07B9 06 02       		 LD B,2	;
354)   07BB 05          		 DEC B  ;NZ  	;NZ
355)   07BC F5          		 PUSH AF	;
356)   07BD CD C2 05    		 CALL CH376_ERROR	;
357)   07C0 45 52 52 3A 		 DEFM "ERR: MOUNT DISK"	;
357)   07C4 20 4D 4F 55 		 DEFM "ERR: MOUNT DISK"	;
357)   07C8 4E 54 20 44 		 DEFM "ERR: MOUNT DISK"	;
357)   07CC 49 53 4B    		 DEFM "ERR: MOUNT DISK"	;
358)   07CF 0A 0D 00    		 DB 10,13,0	;
359)   07D2 F1          		     POP AF	;
360)   07D3 C9          		               RET	;
363)   07D4 7E          		CH376_WRSTRING: LD A,(HL)	;
364)   07D5 F5          		 PUSH AF	;
365)   07D6 E5          		 PUSH HL	;
366)   07D7 CD A9 05    		 CALL RS_TX	;
367)   07DA E1          		 POP HL	;
368)   07DB F1          		 POP AF	;
369)   07DC CD 26 07    		 CALL CH376_DATAWR	;
370)   07DF C0          		 RET NZ	;
371)   07E0 7E          		 LD A,(HL)	;
372)   07E1 FE 00       		 CP 0	;
373)   07E3 C8          		 RET Z	;
374)   07E4 23          		 INC HL	;
375)   07E5 18 ED       		 JR CH376_WRSTRING	;
 31)   07E7 	            		@CH376_ERROR EQU RS_MESG	;
 41)   07E7 57          		STRG_INIT: LD D,A	;
 42)   07E8 AF          		 XOR A  	;
 43)   07E9 32 BB F0    		 LD (STRG_STAT),A  ;NOT CONNECTED, NOT EXISTS	;NOT CONNECTED, NOT EXISTS
 44)   07EC CD 40 07    		 CALL CH376_INIT	;
 45)   07EF 20 06       		 JR NZ,INIERR	;
 46)   07F1 7A          		 LD A,D   ;SELECT USB DEVICE 3 FOR SDCARD, 6 FOR FLASH	;SELECT USB DEVICE 3 FOR SDCARD, 6 FOR FLASH
 47)   07F2 CD 55 07    		 CALL CH376_SETUSB	;
 48)   07F5 28 03       		 JR Z,INIOK	;
 49)   07F7 3E 00       		INIERR: LD A,0  	;
 50)   07F9 C9          		 RET	;
 51)   07FA CD 35 07    		INIOK: CALL CH376_VERSION	;
 52)   07FD BF          		 CP A  ;SET ZF	;SET ZF
 53)   07FE 3E 80       		 LD A, $80  ;BIT 7 MEANS EXISTS	;BIT 7 MEANS EXISTS
 54)   0800 32 BB F0    		 LD (STRG_STAT),A  ;	;
 55)   0803 C9          		 RET	;
 58)   0804 3A BB F0    		STRG_EXISTS: LD A,(STRG_STAT)	;
 59)   0807 CB 7F       		 BIT 7,A	;
 60)   0809 C9          		 RET	;
 66)   080A CD 04 08    		STRG_CHECK: CALL STRG_EXISTS	;
 67)   080D 37          		 SCF	;
 68)   080E C8          		 RET Z    ;Z MEANS NOT EXISTS	;Z MEANS NOT EXISTS
 69)   080F 06 05       		 LD B,5	;
 70)   0811 CD 85 07    		SC_AGN1: CALL CH376_CONNECT 	;
 71)   0814 28 06       		 JR Z,DOCON	;
 72)   0816 30 1C       		 JR NC,DODISC	;
 73)   0818 10 F7       		 DJNZ SC_AGN1    	;
 77)   081A AF          		 XOR A   	;
 78)   081B C9          		 RET   ;TIMEOUT	;TIMEOUT
 80)   081C AF          		DOCON: XOR A    ;CLCF	;CLCF
 81)   081D 3A BB F0    		 LD A,(STRG_STAT)	;
 82)   0820 CB 47       		 BIT 0,A	;
 83)   0822 C0          		 RET NZ    ;ALREADY MOUNTED THE DRIVE	;ALREADY MOUNTED THE DRIVE
 87)   0823 CD 90 07    		 CALL CH376_MOUNT   ;MOUNT THE DRIVE	;MOUNT THE DRIVE
 88)   0826 20 0C       		 JR NZ, DONOMNT	;
 92)   0828 3A BB F0    		 LD A,(STRG_STAT)	;
 93)   082B CB C7       		 SET 0,A	;
 94)   082D 32 BB F0    		 LD (STRG_STAT),A	;
 95)   0830 AF          		 XOR A    ;CLEAR CARRY FLAG MEANS WE ARE OK	;CLEAR CARRY FLAG MEANS WE ARE OK
 96)   0831 3E 01       		 LD A,1    ;A=1 IS JUST CONNECTED	;A=1 IS JUST CONNECTED
 97)   0833 C9          		 RET	;
105)   0834 AF          		 XOR A 	;
106)   0835 3A BB F0    		 LD A,(STRG_STAT)  	;
107)   0838 CB 47       		 BIT 0,A	;
108)   083A C8          		 RET Z    ;ALREADY DISCONNECTED	;ALREADY DISCONNECTED
109)   083B CB 87       		 RES 0,A    ;SET BIT 0 TO 0=DISCONNECTED	;SET BIT 0 TO 0=DISCONNECTED
110)   083D 32 BB F0    		 LD (STRG_STAT),A  	;
111)   0840 3E 02       		 LD A,2    ;A=2 IS JUST DISCONNECTED	;A=2 IS JUST DISCONNECTED
112)   0842 C9          		 RET	;
118)   0843 CD 99 07    		STRG_OPENCRD:  CALL CH376_MOUNTDEV	;
119)   0846 C9          		 RET 	;
122)   0847 C9          		STRG_DIRLIST: RET	;
123)   0848 C9          		STRG_DIRCHG: RET	;
124)   0849 C9          		STRG_TPFILE: RET	;
125)   084A C9          		STRG_GETPOS: RET	;
126)   084B C9          		STRG_SETPOS: RET	;
127)   084C C9          		STRG_GETSIZE: RET	;
128)   084D C9          		STRG_GETEOF: RET	;
135)   084E 3E 27       		STRG_PRDRVINFO: LD A,CMD_RDUSB_DATA0	;
136)   0850 CD 17 07    		 CALL CH376_COMMD	;
137)   0853 CD 54 06    		 CALL CH376_GETDATA	;
138)   0856 F5          		 PUSH AF	;
139)   0857 D6 08       		 SUB 8  	;
140)   0859 47          		 LD B,A	;
141)   085A F1          		 POP AF   	;
142)   085B 21 36 F0    		 LD HL,USBBUF+8  ;SKIP 8 BYTES	;SKIP 8 BYTES
143)   085E 7E          		PDI_NXT: LD A,(HL)	;
144)   085F E5          		 PUSH HL	;
145)   0860 C5          		 PUSH BC	;
146)   0861 CD 9B 00    		 CALL OS_PRINTCHAR	;
147)   0864 C1          		 POP BC	;
148)   0865 E1          		 POP HL	;
149)   0866 23          		 INC HL	;
150)   0867 10 F5       		 DJNZ PDI_NXT  	;
151)   0869 CD 18 06    		 CALL RS_NEWLINE	;
153)   086C 3E 3F       		 LD A,CMD_DISK_QUERY   	;
154)   086E CD 17 07    		 CALL CH376_COMMD	;
155)   0871 CD A6 06    		 CALL CH376_WTCMDEND	;
156)   0874 C0          		 RET NZ	;
157)   0875 3E 27       		 LD A,CMD_RDUSB_DATA0	;
158)   0877 CD 17 07    		 CALL CH376_COMMD  	;
159)   087A CD 54 06    		 CALL CH376_GETDATA	;
161)   087D DD 21 2E F0 		 LD IX,USBBUF 	;
162)   0881 DD E5       		 PUSH IX   	;
163)   0883 DD 56 03    		 LD D,(IX+3)	;
164)   0886 DD 5E 02    		 LD E,(IX+2)	;
165)   0889 DD 66 01    		 LD H,(IX+1)	;
166)   088C DD 6E 00    		 LD L,(IX+0)	;
167)   088F CD EB 13    		 CALL B2D32    ;DE:HL RES ON B2DBUF	;DE:HL RES ON B2DBUF
168)   0892 21 9B F0    		 LD HL,B2DBUF	;
169)   0895 CD 7B 14    		 CALL SKIPSPC	;
170)   0898 CD AE 00    		 CALL OS_PRINTTEXT	;
171)   089B CD BA 00    		 CALL OS_PRINTMSG	;
172)   089E 20 53 45 43 		 DEFM " SECTORS"	;
172)   08A2 54 4F 52 53 		 DEFM " SECTORS"	;
173)   08A6 0A 0D 00    		 DB 10,13 0	;
174)   08A9 DD E1       		 POP IX	;
176)   08AB DD E5       		 PUSH IX     	;
177)   08AD DD 56 07    		 LD D,(IX+7)	;
178)   08B0 DD 5E 06    		 LD E,(IX+6)	;
179)   08B3 DD 66 05    		 LD H,(IX+5)	;
180)   08B6 DD 6E 04    		 LD L,(IX+4)  	;
181)   08B9 CD EB 13    		 CALL B2D32  ;DE:HL RES ON B2DBUF	;DE:HL RES ON B2DBUF
182)   08BC 21 9B F0    		 LD HL,B2DBUF	;
183)   08BF CD 7B 14    		 CALL SKIPSPC	;
184)   08C2 CD AE 00    		 CALL OS_PRINTTEXT	;
185)   08C5 CD BA 00    		 CALL OS_PRINTMSG	;
186)   08C8 20 53 45 43 		 DEFM " SECTORS FREE   "	;
186)   08CC 54 4F 52 53 		 DEFM " SECTORS FREE   "	;
186)   08D0 20 46 52 45 		 DEFM " SECTORS FREE   "	;
186)   08D4 45 20 20 20 		 DEFM " SECTORS FREE   "	;
187)   08D8 0A 0D 00    		 DB 10,13,0   	;
188)   08DB DD E1       		 POP IX	;
190)   08DD DD 7E 08    		FILESYSTEM: LD A,(IX+8) ;1-FAT12,2-FAT16,3-FAT32	;1-FAT12,2-FAT16,3-FAT32
191)   08E0 3D          		 DEC A	;
192)   08E1 28 08       		 JR Z,PDI_NXT0	;
193)   08E3 3D          		 DEC A	;
194)   08E4 28 18       		 JR Z,PDI_NXT1	;
195)   08E6 3D          		 DEC A	;
196)   08E7 28 28       		 JR Z,PDI_NXT2	;
197)   08E9 18 39       		 JR PDI_NXT3	;
199)   08EB CD BA 00    		PDI_NXT0: CALL OS_PRINTMSG	;
200)   08EE 46 53 20 49 		 DEFM "FS IS FAT-12"	;
200)   08F2 53 20 46 41 		 DEFM "FS IS FAT-12"	;
200)   08F6 54 2D 31 32 		 DEFM "FS IS FAT-12"	;
201)   08FA 0A 0D 00    		 DB 10,13,0	;
202)   08FD C9          		 RET	;
203)   08FE CD BA 00    		PDI_NXT1: CALL OS_PRINTMSG	;
204)   0901 46 53 20 49 		 DEFM "FS IS FAT-16"	;
204)   0905 53 20 46 41 		 DEFM "FS IS FAT-16"	;
204)   0909 54 2D 31 36 		 DEFM "FS IS FAT-16"	;
205)   090D 0A 0D 00    		 DB 10,13,0	;
206)   0910 C9          		 RET	;
207)   0911 CD BA 00    		PDI_NXT2: CALL OS_PRINTMSG	;
208)   0914 46 53 20 49 		 DEFM "FS IS FAT-32"	;
208)   0918 53 20 46 41 		 DEFM "FS IS FAT-32"	;
208)   091C 54 2D 33 32 		 DEFM "FS IS FAT-32"	;
209)   0920 0A 0D 00    		 DB 10,13,0	;
210)   0923 C9          		 RET	;
211)   0924 CD BA 00    		PDI_NXT3: CALL OS_PRINTMSG	;
212)   0927 55 4E 4B 4E 		 DEFM "UNKNOWN FS"	;
212)   092B 4F 57 4E 20 		 DEFM "UNKNOWN FS"	;
212)   092F 46 53       		 DEFM "UNKNOWN FS"	;
213)   0931 0A 0D 00    		 DB 10,13,0	;
214)   0934 DD 7E 08    		 LD A,(IX+8)  ;TO BE PRINTED MAYBE	;TO BE PRINTED MAYBE
215)   0937 C9          		 RET	;
220)   0938 F5          		STRG_OPNFILE: PUSH AF	;
221)   0939 3E 2F       		 LD A, CMD_SETFILENAME	;
222)   093B CD 17 07    		     CALL CH376_COMMD	;
223)   093E 21 60 F0    		 LD HL, STRGBUFF	;
224)   0941 CD D4 07    		     CALL CH376_WRSTRING	;
225)   0944 28 1E       		 JR Z,OF_WSOK	;
226)   0946 F1          		 POP AF	;
227)   0947 CD BA 00    		 CALL OS_PRINTMSG	;
228)   094A 45 52 52 4F 		 DEFM "ERROR SETTING FILENAME"	;
228)   094E 52 20 53 45 		 DEFM "ERROR SETTING FILENAME"	;
228)   0952 54 54 49 4E 		 DEFM "ERROR SETTING FILENAME"	;
228)   0956 47 20 46 49 		 DEFM "ERROR SETTING FILENAME"	;
228)   095A 4C 45 4E 41 		 DEFM "ERROR SETTING FILENAME"	;
228)   095E 4D 45       		 DEFM "ERROR SETTING FILENAME"	;
229)   0960 0A 0D 00    		 DB 10,13,0  	;
230)   0963 C9          		 RET	;
231)   0964 F1          		OF_WSOK: POP AF	;
235)   0965 B7          		 OR A  ;0 READ	;0 READ
236)   0966 28 1F       		 JR Z,OF_OPEN	;
237)   0968 D6 01       		 SUB 1  ;1 WRITE	;1 WRITE
238)   096A 28 1B       		 JR Z,OF_OPEN	;
239)   096C D6 01       		 SUB 1  ;2 READ/WRITE	;2 READ/WRITE
240)   096E 28 17       		 JR Z,OF_OPEN	;
246)   0970 CD BA 00    		OF_CREATE: CALL OS_PRINTMSG	;
247)   0973 0A 0D       		 DB 10,13	;
248)   0975 43 52 45 41 		 DEFM "CREATING..."	;
248)   0979 54 49 4E 47 		 DEFM "CREATING..."	;
248)   097D 2E 2E 2E    		 DEFM "CREATING..."	;
249)   0980 0A 0D 00    		 DB 10,13,0    	;
250)   0983 3E 34       		 LD A, CMD_FILE_CREATE  	;
251)   0985 18 14       		 JR OF_EXEC	;
252)   0987 CD BA 00    		OF_OPEN: CALL OS_PRINTMSG	;
253)   098A 0A 0D       		 DB 10,13	;
254)   098C 4F 50 45 4E 		 DEFM "OPENING..."	;
254)   0990 49 4E 47 2E 		 DEFM "OPENING..."	;
254)   0994 2E 2E       		 DEFM "OPENING..."	;
255)   0996 0A 0D 00    		 DB 10,13,0 	;
256)   0999 3E 32       		 LD A, CMD_FILE_OPEN	;
260)   099B CD 17 07    		 CALL CH376_COMMD	;
261)   099E CD A6 06    		 CALL CH376_WTCMDEND	;
262)   09A1 C9          		 RET	;
264)   09A2 3E 36       		STRG_CLSFILE: LD A, CMD_FILE_CLOSE	;
265)   09A4 CD 17 07    		     CALL CH376_COMMD	;
266)   09A7 3E 01       		     LD A, 1                             ; 1 = update file size if necessary	; 1 = update file size if necessary
267)   09A9 CD 26 07    		     CALL CH376_DATAWR	;
268)   09AC CD A6 06    		     CALL CH376_WTCMDEND	;
269)   09AF C9          		     RET	;
275)   09B0 D5          		STRG_BLKREAD: PUSH DE	;
276)   09B1 3E 3A       		 LD A, CMD_BYTE_READ	;
277)   09B3 CD 17 07    		     CALL CH376_COMMD	;
278)   09B6 79          		     LD A, C                           ; BYTES REQUEST ON BC	; BYTES REQUEST ON BC
279)   09B7 CD 26 07    		     CALL CH376_DATAWR	;
280)   09BA 78          		     LD A, B	;
281)   09BB CD 26 07    		     CALL CH376_DATAWR    	;
282)   09BE CD BA 00    		 CALL OS_PRINTMSG	;
283)   09C1 42 4C 4F 43 		 DEFM "BLOCK READING"	;
283)   09C5 4B 20 52 45 		 DEFM "BLOCK READING"	;
283)   09C9 41 44 49 4E 		 DEFM "BLOCK READING"	;
283)   09CD 47          		 DEFM "BLOCK READING"	;
284)   09CE 0A 0D 00    		 DB 10,13,0	;
285)   09D1 D1          		 POP DE	;
286)   09D2 21 00 00    		 LD HL,0      ;BYTE RECEIVE COUNTER	;BYTE RECEIVE COUNTER
287)   09D5 E5          		STBR_DOREST: PUSH HL	;
288)   09D6 D5          		 PUSH DE	;
289)   09D7 CD A6 06    		 CALL CH376_WTCMDEND	;
290)   09DA D1          		 POP DE	;
291)   09DB E1          		 POP HL	;
292)   09DC 28 1C       		 JR Z, FR_DONE   ;Z=NO MORE OR CANNOT READ	;Z=NO MORE OR CANNOT READ
293)   09DE FE 1D       		 CP USB_INT_DISK_READ                    	;
294)   09E0 20 32       		     JR NZ, FR_ERROR	;
296)   09E2 3E 27       		 LD A,CMD_RDUSB_DATA0	;
297)   09E4 CD 17 07    		 CALL CH376_COMMD 	;
298)   09E7 CD 32 07    		 CALL CH376_DATARD  ;A= BYTES TO READ TO BUFFER	;A= BYTES TO READ TO BUFFER
299)   09EA 47          		 LD B,A	;
312)   09EB CD 32 07    		STBR_NXT1: CALL CH376_DATARD ;READ THE BYTES TO BUFFER	;READ THE BYTES TO BUFFER
313)   09EE 12          		 LD (DE),A	;
314)   09EF 13          		 INC DE	;
315)   09F0 23          		 INC HL    ;TOTAL BYTES READ COUNTER	;TOTAL BYTES READ COUNTER
316)   09F1 10 F8       		 DJNZ STBR_NXT1  	;
317)   09F3 3E 3B       		 LD A, CMD_BYTE_RD_GO 	;
318)   09F5 CD 17 07    		 CALL CH376_COMMD 	;
319)   09F8 18 DB       		 JR STBR_DOREST	;
320)   09FA E5          		FR_DONE: PUSH HL	;
321)   09FB CD BA 00    		 CALL OS_PRINTMSG	;
322)   09FE 52 45 41 44 		 DEFM "READING DONE!!! "	;
322)   0A02 49 4E 47 20 		 DEFM "READING DONE!!! "	;
322)   0A06 44 4F 4E 45 		 DEFM "READING DONE!!! "	;
322)   0A0A 21 21 21 20 		 DEFM "READING DONE!!! "	;
323)   0A0E 00          		 DB 0 	;
324)   0A0F E1          		 POP HL	;
325)   0A10 44          		 LD B,H	;
326)   0A11 4D          		 LD C,L	;
327)   0A12 B7          		 OR A	;
328)   0A13 C9          		 RET	;
329)   0A14 F5          		FR_ERROR: PUSH AF	;
330)   0A15 CD BA 00    		 CALL OS_PRINTMSG	;
331)   0A18 45 52 52 4F 		 DEFM "ERROR READING BLOCK!!! "	;
331)   0A1C 52 20 52 45 		 DEFM "ERROR READING BLOCK!!! "	;
331)   0A20 41 44 49 4E 		 DEFM "ERROR READING BLOCK!!! "	;
331)   0A24 47 20 42 4C 		 DEFM "ERROR READING BLOCK!!! "	;
331)   0A28 4F 43 4B 21 		 DEFM "ERROR READING BLOCK!!! "	;
331)   0A2C 21 21 20    		 DEFM "ERROR READING BLOCK!!! "	;
332)   0A2F 00          		 DB 0 	;
333)   0A30 F1          		 POP AF	;
334)   0A31 06 02       		 LD B,2	;
335)   0A33 05          		 DEC B	;
336)   0A34 C9          		 RET  	;
343)   0A35 D5          		STRG_LOADFILE: PUSH DE	;
344)   0A36 C5          		 PUSH BC	;
345)   0A37 E5          		 PUSH HL  	;
346)   0A38 CD BA 00    		 CALL OS_PRINTMSG	;
347)   0A3B 4F 50 45 4E 		 DEFM "OPEN FILE"	;
347)   0A3F 20 46 49 4C 		 DEFM "OPEN FILE"	;
347)   0A43 45          		 DEFM "OPEN FILE"	;
348)   0A44 0A 0D 00    		 DB 10,13,0	;
349)   0A47 E1          		 POP HL	;
350)   0A48 CD A9 15    		 CALL COPYFNAME	;
351)   0A4B AF          		 XOR A   ;READ ONLY 	;READ ONLY
352)   0A4C CD 38 09    		 CALL STRG_OPNFILE  	;
353)   0A4F 20 58       		 JR NZ, FOPENERR	;
354)   0A51 CD BA 00    		 CALL OS_PRINTMSG	;
355)   0A54 0A 0D       		 DB 10,13	;
356)   0A56 46 49 4C 45 		 DEFM "FILE OPEN OK"	;
356)   0A5A 20 4F 50 45 		 DEFM "FILE OPEN OK"	;
356)   0A5E 4E 20 4F 4B 		 DEFM "FILE OPEN OK"	;
357)   0A62 0A 0D 00    		 DB 10,13,0	;
359)   0A65 C1          		 POP BC  ;BYTECOUNT	;BYTECOUNT
360)   0A66 D1          		 POP DE  ;DEST BUFFER	;DEST BUFFER
361)   0A67 CD B0 09    		 CALL STRG_BLKREAD	;
362)   0A6A 28 19       		 JR Z, FREADOK	;
364)   0A6C CD BA 00    		 CALL OS_PRINTMSG	;
365)   0A6F 20 45 52 52 		 DEFM " ERROR READING FILE"	;
365)   0A73 4F 52 20 52 		 DEFM " ERROR READING FILE"	;
365)   0A77 45 41 44 49 		 DEFM " ERROR READING FILE"	;
365)   0A7B 4E 47 20 46 		 DEFM " ERROR READING FILE"	;
365)   0A7F 49 4C 45    		 DEFM " ERROR READING FILE"	;
366)   0A82 0A 0D 00    		 DB 10,13,0	;
367)   0A85 C5          		FREADOK: PUSH BC	;
368)   0A86 CD E7 13    		 CALL B2D16	;
369)   0A89 21 9B F0    		 LD HL,B2DBUF	;
370)   0A8C CD 7B 14    		 CALL SKIPSPC	;
371)   0A8F CD B8 05    		 CALL RS_TXT	;
372)   0A92 CD BA 00    		 CALL OS_PRINTMSG	;
373)   0A95 20 42 59 54 		 DEFM " BYTES READ"	;
373)   0A99 45 53 20 52 		 DEFM " BYTES READ"	;
373)   0A9D 45 41 44    		 DEFM " BYTES READ"	;
374)   0AA0 0A 0D 00    		 DB 10,13,0	;
375)   0AA3 CD A2 09    		 CALL STRG_CLSFILE	;
376)   0AA6 C1          		 POP BC   ;BYTES LOADED TO BUFFER	;BYTES LOADED TO BUFFER
377)   0AA7 AF          		 XOR A	;
378)   0AA8 C9          		 RET	;
379)   0AA9 C1          		FOPENERR: POP BC	;
380)   0AAA D1          		 POP DE	;
382)   0AAB CD BA 00    		 CALL OS_PRINTMSG	;
383)   0AAE 2D 2D 3E 45 		 DEFM "-->ERROR OPENING FILE"	;
383)   0AB2 52 52 4F 52 		 DEFM "-->ERROR OPENING FILE"	;
383)   0AB6 20 4F 50 45 		 DEFM "-->ERROR OPENING FILE"	;
383)   0ABA 4E 49 4E 47 		 DEFM "-->ERROR OPENING FILE"	;
383)   0ABE 20 46 49 4C 		 DEFM "-->ERROR OPENING FILE"	;
383)   0AC2 45          		 DEFM "-->ERROR OPENING FILE"	;
384)   0AC3 0A 0D 00    		 DB 10,13,0	;
385)   0AC6 21 60 F0    		 LD HL,STRGBUFF	;
386)   0AC9 CD B8 05    		 CALL RS_TXT	;
387)   0ACC CD 18 06    		 CALL RS_NEWLINE	;
388)   0ACF 37          		 SCF	;
389)   0AD0 C9          		 RET	;
393)   0AD1 D5          		STRG_BLKWRITE: PUSH DE	;
394)   0AD2 3E 3C       		 LD A, CMD_BYTE_WRITE	;
395)   0AD4 CD 17 07    		     CALL CH376_COMMD	;
396)   0AD7 79          		     LD A, C                           ; BYTES REQUEST ON BC	; BYTES REQUEST ON BC
397)   0AD8 CD 26 07    		     CALL CH376_DATAWR	;
398)   0ADB 78          		     LD A, B	;
399)   0ADC CD 26 07    		     CALL CH376_DATAWR    	;
400)   0ADF CD BA 00    		 CALL OS_PRINTMSG	;
401)   0AE2 42 4C 4F 43 		 DEFM "BLOCK WRITING"	;
401)   0AE6 4B 20 57 52 		 DEFM "BLOCK WRITING"	;
401)   0AEA 49 54 49 4E 		 DEFM "BLOCK WRITING"	;
401)   0AEE 47          		 DEFM "BLOCK WRITING"	;
402)   0AEF 0A 0D 00    		 DB 10,13,0	;
403)   0AF2 E1          		 POP HL	;
404)   0AF3 E5          		STBW_DOREST: PUSH HL	;
405)   0AF4 CD A6 06    		 CALL CH376_WTCMDEND	;
406)   0AF7 E1          		 POP HL	;
407)   0AF8 28 1B       		 JR Z, WFR_DONE   ;Z=NO MORE OR CANNOT READ	;Z=NO MORE OR CANNOT READ
408)   0AFA FE 1E       		 CP USB_INT_DISK_WRITE                    	;
409)   0AFC 20 31       		     JR NZ, WFR_ERROR	;
410)   0AFE 3E 2D       		 LD A,CMD_WR_REQ_DATA	;
411)   0B00 CD 17 07    		 CALL CH376_COMMD 	;
413)   0B03 CD 32 07    		 CALL CH376_DATARD ;READ BYTE COUNT UP TO 255 BYTES	;READ BYTE COUNT UP TO 255 BYTES
414)   0B06 47          		 LD B,A   	;
416)   0B07 7E          		STBW_NXT1: LD A,(HL)	;
417)   0B08 CD 26 07    		 CALL CH376_DATAWR	;
418)   0B0B 23          		 INC HL	;
419)   0B0C 10 F9       		 DJNZ STBW_NXT1	;
420)   0B0E 3E 3D       		 LD A, CMD_BYTE_WR_GO 	;
421)   0B10 CD 17 07    		 CALL CH376_COMMD 	;
422)   0B13 18 DE       		 JR STBW_DOREST	;
423)   0B15 E5          		WFR_DONE: PUSH HL	;
424)   0B16 CD BA 00    		 CALL OS_PRINTMSG	;
425)   0B19 57 52 49 54 		 DEFM "WRITING DONE!!! "	;
425)   0B1D 49 4E 47 20 		 DEFM "WRITING DONE!!! "	;
425)   0B21 44 4F 4E 45 		 DEFM "WRITING DONE!!! "	;
425)   0B25 21 21 21 20 		 DEFM "WRITING DONE!!! "	;
426)   0B29 0D 0A 00    		 DB 13,10,0 	;
427)   0B2C E1          		 POP HL	;
428)   0B2D B7          		 OR A	;
429)   0B2E C9          		 RET	;
430)   0B2F F5          		WFR_ERROR: PUSH AF	;
431)   0B30 CD BA 00    		 CALL OS_PRINTMSG	;
432)   0B33 45 52 52 4F 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0B37 52 20 57 52 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0B3B 49 54 49 4E 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0B3F 47 20 42 4C 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0B43 4F 43 4B 21 		 DEFM "ERROR WRITING BLOCK!!! "	;
432)   0B47 21 21 20    		 DEFM "ERROR WRITING BLOCK!!! "	;
433)   0B4A 0D 0A 00    		 DB 13,10,0 	;
434)   0B4D F1          		 POP AF	;
435)   0B4E 06 02       		 LD B,2	;
436)   0B50 05          		 DEC B	;
437)   0B51 C9          		 RET  	;
445)   0B52 D5          		STRG_SAVEFILE: PUSH DE	;
446)   0B53 C5          		 PUSH BC	;
447)   0B54 E5          		 PUSH HL  	;
448)   0B55 CD BA 00    		 CALL OS_PRINTMSG	;
449)   0B58 0A 0D       		 DB 10,13	;
450)   0B5A 53 41 56 45 		 DEFM "SAVE FILE"	;
450)   0B5E 20 46 49 4C 		 DEFM "SAVE FILE"	;
450)   0B62 45          		 DEFM "SAVE FILE"	;
451)   0B63 0A 0D 0A 0D 		 DB 10,13,10,13,0	;
451)   0B67 00          		 DB 10,13,10,13,0	;
452)   0B68 E1          		 POP HL	;
453)   0B69 CD A9 15    		 CALL COPYFNAME	;
454)   0B6C 3E 04       		 LD A,4   ;CREATE THE FILE	;CREATE THE FILE
455)   0B6E CD 38 09    		 CALL STRG_OPNFILE  	;
456)   0B71 20 4E       		 JR NZ, FSAVEERR	;
457)   0B73 CD BA 00    		 CALL OS_PRINTMSG	;
458)   0B76 0A 0D       		 DB 10,13	;
459)   0B78 46 49 4C 45 		 DEFM "FILE CREATED OK"	;
459)   0B7C 20 43 52 45 		 DEFM "FILE CREATED OK"	;
459)   0B80 41 54 45 44 		 DEFM "FILE CREATED OK"	;
459)   0B84 20 4F 4B    		 DEFM "FILE CREATED OK"	;
460)   0B87 0A 0D 00    		 DB 10,13,0	;
461)   0B8A C1          		 POP BC  ;BYTECOUNT	;BYTECOUNT
462)   0B8B D1          		 POP DE  ;SOURCE BUFFER	;SOURCE BUFFER
463)   0B8C CD D1 0A    		 CALL STRG_BLKWRITE	;
464)   0B8F 28 19       		 JR Z, FWRITEOK	;
466)   0B91 CD BA 00    		 CALL OS_PRINTMSG	;
467)   0B94 20 45 52 52 		 DEFM " ERROR WRITING FILE"	;
467)   0B98 4F 52 20 57 		 DEFM " ERROR WRITING FILE"	;
467)   0B9C 52 49 54 49 		 DEFM " ERROR WRITING FILE"	;
467)   0BA0 4E 47 20 46 		 DEFM " ERROR WRITING FILE"	;
467)   0BA4 49 4C 45    		 DEFM " ERROR WRITING FILE"	;
468)   0BA7 0A 0D 00    		 DB 10,13,0	;
469)   0BAA CD BA 00    		FWRITEOK: CALL OS_PRINTMSG	;
470)   0BAD 42 59 54 45 		 DEFM "BYTE WRITTEN"	;
470)   0BB1 20 57 52 49 		 DEFM "BYTE WRITTEN"	;
470)   0BB5 54 54 45 4E 		 DEFM "BYTE WRITTEN"	;
471)   0BB9 0A 0D 00    		 DB 10,13,0	;
472)   0BBC CD A2 09    		 CALL STRG_CLSFILE	;
473)   0BBF AF          		 XOR A	;
474)   0BC0 C9          		 RET	;
475)   0BC1 C1          		FSAVEERR: POP BC	;
476)   0BC2 D1          		 POP DE	;
477)   0BC3 CD 74 15    		 CALL PRINTNUM	;
478)   0BC6 CD BA 00    		 CALL OS_PRINTMSG	;
479)   0BC9 2D 2D 3E 45 		 DEFM "-->ERROR CREATING FILE"	;
479)   0BCD 52 52 4F 52 		 DEFM "-->ERROR CREATING FILE"	;
479)   0BD1 20 43 52 45 		 DEFM "-->ERROR CREATING FILE"	;
479)   0BD5 41 54 49 4E 		 DEFM "-->ERROR CREATING FILE"	;
479)   0BD9 47 20 46 49 		 DEFM "-->ERROR CREATING FILE"	;
479)   0BDD 4C 45       		 DEFM "-->ERROR CREATING FILE"	;
480)   0BDF 0A 0D 00    		 DB 10,13,0	;
481)   0BE2 21 60 F0    		 LD HL,STRGBUFF	;
482)   0BE5 CD B8 05    		 CALL RS_TXT	;
483)   0BE8 CD 18 06    		 CALL RS_NEWLINE	;
484)   0BEB 37          		 SCF	;
485)   0BEC C9          		 RET	;
 76)   0BED 0E 03       		 LD C, 11B        ;HIRES TEXT SCREEN	;HIRES TEXT SCREEN
 77)   0BEF 3E 04       		 LD A, VGA_NAVY	;
 78)   0BF1 CB 27       		 SLA A	;
 79)   0BF3 CB 27       		 SLA A	;
 80)   0BF5 CB 27       		 SLA A	;
 81)   0BF7 CB 27       		 SLA A	;
 82)   0BF9 06 0F       		 LD B, VGA_WHITE	;
 83)   0BFB B0          		 OR B	;
 84)   0BFC 47          		 LD B, A	;
 85)   0BFD CD 8B 0C    		 CALL VGA_SETCONF	;
 86)   0C00 C9          		 RET	;
 90)   0C01 F5          		VGA_SETLOWGR: PUSH AF	;
 91)   0C02 CD BD 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
 92)   0C05 0E 00       		 LD C, 00B        ;LOW RES GRAPH SCREEN	;LOW RES GRAPH SCREEN
 93)   0C07 CD 8B 0C    		 CALL VGA_SETCONF	;
 94)   0C0A F1          		 POP AF	;
 95)   0C0B C9          		 RET	;
 98)   0C0C F5          		VGA_SETLOWTX: PUSH AF	;
 99)   0C0D CD BD 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
100)   0C10 0E 01       		 LD C, 01B        ;LOW RES TEXT SCREEN	;LOW RES TEXT SCREEN
101)   0C12 CD 8B 0C    		 CALL VGA_SETCONF	;
102)   0C15 F1          		 POP AF	;
103)   0C16 C9          		 RET	;
105)   0C17 F5          		VGA_SETHIGR: PUSH AF	;
106)   0C18 CD BD 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
107)   0C1B 0E 02       		 LD C, 10B        ;HI RES GRAPH SCREEN	;HI RES GRAPH SCREEN
108)   0C1D CD 8B 0C    		 CALL VGA_SETCONF	;
109)   0C20 F1          		 POP AF	;
110)   0C21 C9          		 RET	;
112)   0C22 F5          		VGA_SETHITX: PUSH AF	;
113)   0C23 CD BD 0C    		 CALL VGA_GETCONF       ;GET CURRENT MODE AND COLORS	;GET CURRENT MODE AND COLORS
114)   0C26 0E 03       		 LD C, 11B        ;HI RES TEXT SCREEN	;HI RES TEXT SCREEN
115)   0C28 CD 8B 0C    		 CALL VGA_SETCONF	;
116)   0C2B F1          		 POP AF	;
117)   0C2C C9          		 RET	;
122)   0C2D 0F          		VGA_SETVISBUFF: RRCA       ;BIT 1 > BIT 7	;BIT 1 > BIT 7
123)   0C2E E5          		 PUSH HL	;
124)   0C2F F5          		 PUSH AF	;
125)   0C30 06 04       		 LD B, 4        ;8000h	;8000h
126)   0C32 CD 87 05    		 CALL GETPGINBANK	;
127)   0C35 E1          		 POP HL        ;H THE BUFFER	;H THE BUFFER
128)   0C36 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
129)   0C37 E5          		 PUSH HL	;
130)   0C38 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
131)   0C3A CD 65 05    		 CALL PUTPGINBANK	;
132)   0C3D 21 F8 1F    		 LD HL, CONFADDR	;
133)   0C40 11 00 80    		 LD DE, $8000	;
134)   0C43 B7          		 OR A	;
135)   0C44 ED 5A       		 ADC HL, DE	;
136)   0C46 C1          		 POP BC        ;B THE BUFFER 0 OR 1	;B THE BUFFER 0 OR 1
137)   0C47 7E          		 LD A,(HL)	;
138)   0C48 1F          		 RRA	;
139)   0C49 CB 18       		 RR B        ;BIT 0 ON CARRY	;BIT 0 ON CARRY
140)   0C4B 17          		 RLA	;
141)   0C4C 77          		 LD (HL),A	;
142)   0C4D F1          		 POP AF        ;PREVIOUS PAGE NO	;PREVIOUS PAGE NO
143)   0C4E 06 04       		 LD B, 4	;
144)   0C50 CD 65 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
145)   0C53 E1          		 POP HL	;
146)   0C54 C9          		 RET  	;
150)   0C55 E5          		VGA_SWVISBUFF: PUSH HL	;
151)   0C56 06 04       		 LD B, 4        ;8000h	;8000h
152)   0C58 CD 87 05    		 CALL GETPGINBANK	;
153)   0C5B F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
154)   0C5C 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
155)   0C5E CD 65 05    		 CALL PUTPGINBANK	;
156)   0C61 21 F8 1F    		 LD HL, CONFADDR	;
157)   0C64 11 00 80    		 LD DE, $8000	;
158)   0C67 B7          		 OR A	;
159)   0C68 ED 5A       		 ADC HL, DE	;
160)   0C6A 7E          		 LD A, (HL)        ;VIDEO CTRL REG1 VIDEO MODE	;VIDEO CTRL REG1 VIDEO MODE
161)   0C6B CB 7F       		 BIT 7,A 	;
162)   0C6D 28 04       		 JR Z,VSVB_SETBUF1	;
164)   0C6F CB BF       		 RES 7,A	;
165)   0C71 18 02       		 JR VSVB_CONT	;
166)   0C73 CB FF       		VSVB_SETBUF1: SET 7,A       ;SET BIT 7	;SET BIT 7
169)   0C75 77          		VSVB_CONT: LD (HL),A	;
170)   0C76 F1          		 POP AF	;
171)   0C77 06 04       		 LD B, 4	;
172)   0C79 CD 65 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
173)   0C7C E1          		 POP HL	;
174)   0C7D C9          		 RET  	;
178)   0C7E 32 90 F0    		VGA_SETWRKBUFF: LD (VGABUF),A	;
179)   0C81 C9          		 RET	;
182)   0C82 3A 90 F0    		VGA_SWWRKBUFF: LD A,(VGABUF)	;
183)   0C85 EE 01       		 XOR 1	;
184)   0C87 32 90 F0    		 LD (VGABUF),A	;
185)   0C8A C9          		 RET	;
192)   0C8B E5          		VGA_SETCONF: PUSH HL	;
193)   0C8C C5          		 PUSH BC	;
194)   0C8D 06 04       		 LD B, 4        ;8000h	;8000h
195)   0C8F CD 87 05    		 CALL GETPGINBANK	;
196)   0C92 C1          		 POP BC	;
197)   0C93 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
198)   0C94 C5          		 PUSH BC        ;SAVE SCREEN CODE	;SAVE SCREEN CODE
199)   0C95 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
200)   0C97 06 04       		 LD B, 4	;
201)   0C99 CD 65 05    		 CALL PUTPGINBANK	;
202)   0C9C C1          		 POP BC	;
203)   0C9D 79          		 LD A, C	;
204)   0C9E 21 F8 1F    		 LD HL, CONFADDR	;
205)   0CA1 11 00 80    		 LD DE, $8000	;
206)   0CA4 B7          		 OR A	;
207)   0CA5 ED 5A       		 ADC HL, DE	;
208)   0CA7 77          		 LD (HL), A        ;VIDEO CTRL REG1 VIDEO MODE	;VIDEO CTRL REG1 VIDEO MODE
209)   0CA8 23          		 INC HL	;
210)   0CA9 78          		 LD A, B        ;DEFAULT COLORS	;DEFAULT COLORS
211)   0CAA 77          		 LD (HL), A        ;VIDEO CTRL REG2 VIDEO DEF COLORS	;VIDEO CTRL REG2 VIDEO DEF COLORS
212)   0CAB F1          		 POP AF	;
213)   0CAC C5          		 PUSH BC	;
214)   0CAD 06 04       		 LD B, 4	;
215)   0CAF CD 65 05    		 CALL PUTPGINBANK       ;RESTORE PREVIOUS PAGE	;RESTORE PREVIOUS PAGE
216)   0CB2 C1          		 POP BC	;
217)   0CB3 E1          		 POP HL	;
218)   0CB4 79          		 LD A, C        ;SCREEN MODE	;SCREEN MODE
219)   0CB5 CB 47       		 BIT 0, A	;
220)   0CB7 C2 0C 0E    		 JP NZ, VGA_TXTINIT	;
221)   0CBA C3 58 10    		 JP VGA_GRPHINIT	;
228)   0CBD E5          		VGA_GETCONF: PUSH HL	;
229)   0CBE 06 04       		 LD B, 4        ;8000h	;8000h
230)   0CC0 CD 87 05    		 CALL GETPGINBANK	;
231)   0CC3 F5          		 PUSH AF        ;SAVE PREVIOUS PAGE	;SAVE PREVIOUS PAGE
232)   0CC4 3E 0B       		 LD A, CONFPG        ;PAGE 11	;PAGE 11
233)   0CC6 CD 65 05    		 CALL PUTPGINBANK	;
234)   0CC9 21 F8 1F    		 LD HL, CONFADDR	;
235)   0CCC 11 00 80    		 LD DE, $8000	;
236)   0CCF B7          		 OR A	;
237)   0CD0 ED 5A       		 ADC HL, DE	;
238)   0CD2 7E          		 LD A, (HL)	;
239)   0CD3 E6 03       		 AND 3        ;KEEP ONLY BITS 0,1	;KEEP ONLY BITS 0,1
240)   0CD5 4F          		 LD C, A        ;SCREEN MODE	;SCREEN MODE
241)   0CD6 23          		 INC HL	;
242)   0CD7 7E          		 LD A, (HL)	;
243)   0CD8 47          		 LD B, A        ;DEFAULT COLORS	;DEFAULT COLORS
244)   0CD9 F1          		 POP AF	;
245)   0CDA C5          		 PUSH BC	;
246)   0CDB 06 04       		 LD B, 4	;
247)   0CDD CD 65 05    		 CALL PUTPGINBANK	;
248)   0CE0 C1          		 POP BC	;
249)   0CE1 E1          		 POP HL	;
250)   0CE2 79          		 LD A, C	;
251)   0CE3 C9          		 RET	;
258)   0CE4 CD BD 0C    		VGA_CLRSCR: CALL VGA_GETCONF	;
259)   0CE7 CB 47       		 BIT 0,A	;
260)   0CE9 C2 12 0E    		 JP NZ,VGA_TXTCLR	;
261)   0CEC C3 E2 10    		 JP VGA_GRCLS	;
278)   0CEF F5          		 PUSH AF        ;SAVE FLAGS	;SAVE FLAGS
279)   0CF0 D1          		 POP DE         ;FLAGS ON DE	;FLAGS ON DE
280)   0CF1 FE 1F       		 CP 31	;
281)   0CF3 DC 0C 0D    		 CALL C, VGA_NOTVISCH	;
282)   0CF6 28 06       		 JR Z, PRCH_EX        ;EXIT IF CHAR WAS HANDLED	;EXIT IF CHAR WAS HANDLED
283)   0CF8 CD FF 0C    		 CALL VGA_DOPRNCH       ;PRINT THE CHAR	;PRINT THE CHAR
284)   0CFB CD 5D 0D    		 CALL VGA_TXFORW       ;TEXT FORWARD	;TEXT FORWARD
286)   0CFE C9          		 RET	;
291)   0CFF 67          		VGA_DOPRNCH: LD H, A       ;SAVE A	;SAVE A
292)   0D00 CD BD 0C    		 CALL VGA_GETCONF	;
293)   0D03 CB 47       		 BIT 0, A	;
294)   0D05 7C          		 LD A, H        ;RESTORE A	;RESTORE A
295)   0D06 C2 AA 0E    		 JP NZ, VGA_DOPRNCHTXT       ;NZ MEANS TEXT	;NZ MEANS TEXT
296)   0D09 C3 7C 11    		 JP VGA_DOPRNCHGRP	;
304)   0D0C F5          		VGA_NOTVISCH: PUSH AF	;
305)   0D0D D5          		 PUSH DE	;
306)   0D0E CD 18 0F    		 CALL VGA_RMVCURS      ;REMOVE CURSOR	;REMOVE CURSOR
307)   0D11 D1          		 POP DE	;
308)   0D12 F1          		 POP AF	;
309)   0D13 FE 08       		 CP 8         ;BACKSPACE	;BACKSPACE
310)   0D15 20 18       		 JR NZ, NX1	;
311)   0D17 3A 8B F0    		 LD A, (VGATX_X)	;
312)   0D1A FE 00       		 CP 0         ;COL 0 HAS THE PROMPT	;COL 0 HAS THE PROMPT
313)   0D1C C8          		 RET Z         ;DO NOT PRINT ANYTHING	;DO NOT PRINT ANYTHING
314)   0D1D 3D          		 DEC A	;
315)   0D1E 32 8B F0    		 LD (VGATX_X), A	;
316)   0D21 D5          		 PUSH DE	;
317)   0D22 F1          		 POP AF         ;GET FLAGS BACK	;GET FLAGS BACK
318)   0D23 30 1B       		 JR NC, MVLEFT       ;IF C THEN DELETE THE CHAR ON THE LEFT	;IF C THEN DELETE THE CHAR ON THE LEFT
319)   0D25 3E 20       		 LD A, ' '        ;PRINT SPACE	;PRINT SPACE
320)   0D27 32 8F F0    		 LD (VGATMPC),A	;
321)   0D2A CD FF 0C    		 CALL VGA_DOPRNCH       ;	;
322)   0D2D AF          		 XOR A         ;CLEAR ZERO	;CLEAR ZERO
323)   0D2E C9          		 RET	;
324)   0D2F FE 0A       		NX1: CP 10         ;JUST IGNORE IT	;JUST IGNORE IT
325)   0D31 C8          		 RET Z	;
326)   0D32 FE 0D       		 CP 13         ;CR =NEW LINE	;CR =NEW LINE
327)   0D34 20 11       		 JR NZ, NX2	;
328)   0D36 CD 18 0F    		 CALL VGA_RMVCURS	;
329)   0D39 CD 70 0D    		 CALL VGDOY        ;ADD 1 TO TY	;ADD 1 TO TY
330)   0D3C 32 8B F0    		 LD (VGATX_X), A       ;ZF IS SET	;ZF IS SET
331)   0D3F C9          		 RET	;
332)   0D40 CD DB 0E    		MVLEFT: CALL VGA_GETCHAR	;
333)   0D43 7A          		 LD A, D	;
334)   0D44 32 8F F0    		 LD (VGATMPC),A	;
335)   0D47 AF          		NX2: XOR A         ;NC MEANS WE DON'T PRINT	;NC MEANS WE DON'T PRINT
336)   0D48 C9          		 RET	;
340)   0D49 CD 91 0D    		VGA_PRINT: CALL VGA_GETPAGE	;
341)   0D4C 7E          		VGAP_AGN: LD A, (HL)	;
342)   0D4D FE 00       		 CP 0	;
343)   0D4F 28 08       		 JR Z, VGAP_EX	;
344)   0D51 E5          		 PUSH HL	;
345)   0D52 CD EF 0C    		 CALL VGA_PRCH	;
346)   0D55 E1          		 POP HL	;
347)   0D56 23          		 INC HL	;
348)   0D57 18 F3       		 JR VGAP_AGN	;
349)   0D59 CD B3 0D    		VGAP_EX: CALL VGA_RMVPAGE	;
350)   0D5C C9          		 RET	;
353)   0D5D F5          		VGA_TXFORW: PUSH AF	;
354)   0D5E E5          		 PUSH HL	;
355)   0D5F 21 8D F0    		 LD HL, VGAMAXX	;
356)   0D62 3A 8B F0    		 LD A, (VGATX_X)	;
357)   0D65 3C          		 INC A	;
358)   0D66 BE          		 CP (HL)	;
359)   0D67 CC 70 0D    		 CALL Z, VGDOY	;
360)   0D6A 32 8B F0    		 LD (VGATX_X), A	;
361)   0D6D E1          		 POP HL	;
362)   0D6E F1          		 POP AF	;
363)   0D6F C9          		 RET	;
364)   0D70 21 8E F0    		VGDOY: LD HL, VGAMAXY	;
365)   0D73 3A 8C F0    		 LD A, (VGATX_Y)	;
366)   0D76 3C          		 INC A	;
367)   0D77 BE          		 CP (HL)	;
368)   0D78 CC 80 0D    		 CALL Z, DOSCRL	;
369)   0D7B 32 8C F0    		 LD (VGATX_Y), A	;
370)   0D7E AF          		 XOR A	;
371)   0D7F C9          		 RET	;
373)   0D80 CD BD 0C    		DOSCRL: CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
374)   0D83 CB 47       		 BIT 0, A	;
375)   0D85 CA 7F 11    		 JP Z, DOSCRLGR	;
376)   0D88 CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
377)   0D8A CC 98 0F    		 CALL Z, DOSCRL_COL       ;SCROLL COLORS IF BIT 1=0	;SCROLL COLORS IF BIT 1=0
378)   0D8D CD 62 0F    		 CALL DOSCRL_TXT       ;SCROLL TEXT	;SCROLL TEXT
379)   0D90 C9          		 RET	;
389)   0D91 3A 29 F0    		VGA_GETPAGE: LD A, (PGSEM)	;
390)   0D94 3C          		 INC A	;
391)   0D95 32 29 F0    		 LD (PGSEM), A	;
392)   0D98 FE 01       		 CP 1	;
393)   0D9A C0          		 RET NZ	;
394)   0D9B E5          		 PUSH HL	;
395)   0D9C 06 04       		 LD B, 4        ;8000h	;8000h
396)   0D9E CD 87 05    		 CALL GETPGINBANK	;
397)   0DA1 32 25 F0    		 LD (TMPG), A        ;SAVE OLD PAGE	;SAVE OLD PAGE
398)   0DA4 3A 90 F0    		 LD A,(VGABUF)	;
399)   0DA7 1F          		 RRA         ;PUT BIT 0 ON CARRY FLAG	;PUT BIT 0 ON CARRY FLAG
400)   0DA8 3E 08       		 LD A, 8        ;PAGE 8  IS BUFFER 0	;PAGE 8  IS BUFFER 0
401)   0DAA 30 02       		 JR NC, VGP_SETPG	;
402)   0DAC 3E 0C       		 LD A, 12        ;PAGE 12 IS BUFFER 1	;PAGE 12 IS BUFFER 1
403)   0DAE CD 65 05    		VGP_SETPG: CALL PUTPGINBANK	;
404)   0DB1 E1          		 POP HL	;
405)   0DB2 C9          		 RET	;
409)   0DB3 3A 29 F0    		VGA_RMVPAGE: LD A, (PGSEM)	;
410)   0DB6 3D          		 DEC A	;
411)   0DB7 32 29 F0    		 LD (PGSEM), A	;
412)   0DBA FE 00       		 CP 0	;
413)   0DBC C0          		 RET NZ	;
414)   0DBD E5          		 PUSH HL	;
415)   0DBE 06 04       		 LD B, 4	;
416)   0DC0 3A 25 F0    		 LD A, (TMPG)	;
417)   0DC3 CD 65 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
418)   0DC6 E1          		 POP HL	;
419)   0DC7 C9          		 RET	;
421)   0DC8 CD 91 0D    		VGA_SETFONT: CALL VGA_GETPAGE	;
422)   0DCB 21 00 40    		 LD HL, FONT_ADDR	;
423)   0DCE 11 00 90    		 LD DE, $9000        ;FONT ADDRESS ON VIDEO MEM AT $1000=4096 ON BANK 4=$8000	;FONT ADDRESS ON VIDEO MEM AT $1000=4096 ON BANK 4=$8000
424)   0DD1 01 00 0A    		 LD BC, 2560	;
425)   0DD4 ED B0       		 LDIR         ;TRANSFER	;TRANSFER
426)   0DD6 CD B3 0D    		 CALL VGA_RMVPAGE	;
427)   0DD9 C9          		 RET	;
430)   0DDA 79          		VGA_SETMAXS: LD A, C	;
431)   0DDB 16 28       		 LD D, 40	;
432)   0DDD 1E 14       		 LD E, 20	;
433)   0DDF CB 4F       		 BIT 1,A        ;LOW RES MODE	;LOW RES MODE
434)   0DE1 28 04       		 JR Z, VGSM_NX	;
436)   0DE3 16 50       		 LD D, 80	;
437)   0DE5 1E 28       		 LD E, 40	;
438)   0DE7 7A          		VGSM_NX: LD A, D	;
439)   0DE8 32 8D F0    		 LD (VGAMAXX), A	;
440)   0DEB 7B          		 LD A, E	;
441)   0DEC 32 8E F0    		 LD (VGAMAXY), A	;
442)   0DEF C9          		 RET	;
445)   0DF0 AF          		VGA_SETSCRDEFS: XOR A	;
446)   0DF1 32 29 F0    		 LD (PGSEM), A	;
447)   0DF4 32 25 F0    		 LD (TMPG), A	;
448)   0DF7 3E 0B       		 LD A, VGA_YELLOW	;
449)   0DF9 32 89 F0    		 LD (VGAFCOL), A	;
450)   0DFC 3E 04       		 LD A, VGA_NAVY	;
451)   0DFE 32 8A F0    		 LD (VGABCOL), A	;
452)   0E01 CD DA 0D    		 CALL VGA_SETMAXS	;
453)   0E04 AF          		 XOR A	;
454)   0E05 32 8B F0    		 LD (VGATX_X), A	;
455)   0E08 32 8C F0    		 LD (VGATX_Y), A	;
456)   0E0B C9          		 RET	;
458)   0E0C CD F0 0D    		VGA_TXTINIT: CALL VGA_SETSCRDEFS	;
459)   0E0F CD C8 0D    		 CALL VGA_SETFONT       ;SET THE FONT ON VIDEO MEM	;SET THE FONT ON VIDEO MEM
462)   0E12 3A 8D F0    		VGA_TXTCLR: LD A, (VGAMAXX)	;
463)   0E15 67          		 LD H, A	;
464)   0E16 3A 8E F0    		 LD A, (VGAMAXY)	;
465)   0E19 5F          		 LD E, A	;
466)   0E1A CD B5 15    		 CALL MULT8	;
467)   0E1D E5          		 PUSH HL	;
468)   0E1E CD 91 0D    		 CALL VGA_GETPAGE	;
469)   0E21 CD BD 0C    		 CALL VGA_GETCONF	;
470)   0E24 C1          		 POP BC         ;TOTAL BYTES	;TOTAL BYTES
471)   0E25 CB 4F       		 BIT 1, A	;
472)   0E27 28 0E       		 JR Z, ISLOWRES	;
474)   0E29 21 00 80    		 LD HL, $8000	;
475)   0E2C 3E 20       		 LD A, 32	;
476)   0E2E 77          		 LD (HL), A	;
477)   0E2F 11 01 80    		 LD DE, $8001	;
478)   0E32 ED B0       		 LDIR	;
479)   0E34 C3 5C 0E    		 JP VGAC_EXIT	;
481)   0E37 21 00 80    		ISLOWRES: LD HL, $8000       ;BANK4	;BANK4
482)   0E3A 11 00 84    		 LD DE, $8400        ;COLOR INFO	;COLOR INFO
483)   0E3D C3 4C 0E    		 JP VGAC_AGN	;
488)   0E40 CD 91 0D    		VGA_CLR: CALL VGA_GETPAGE	;
489)   0E43 01 20 03    		 LD BC, 800	;
490)   0E46 21 00 80    		 LD HL, $8000        ;DEL CHARS	;DEL CHARS
491)   0E49 11 00 84    		 LD DE, $8400	;
494)   0E4C 3E 20       		VGAC_AGN: LD A, 32	;
495)   0E4E 77          		 LD (HL), A	;
496)   0E4F C5          		 PUSH BC	;
497)   0E50 CD 71 0E    		 CALL VGA_GETCOL	;
498)   0E53 C1          		 POP BC	;
499)   0E54 12          		 LD (DE), A	;
500)   0E55 23          		 INC HL	;
501)   0E56 13          		 INC DE	;
502)   0E57 0B          		 DEC BC	;
503)   0E58 78          		 LD A, B	;
504)   0E59 B1          		 OR C	;
505)   0E5A 20 F0       		 JR NZ, VGAC_AGN	;
506)   0E5C AF          		VGAC_EXIT: XOR A	;
507)   0E5D 32 8B F0    		 LD (VGATX_X), A	;
508)   0E60 32 8C F0    		 LD (VGATX_Y), A	;
509)   0E63 CD B3 0D    		 CALL VGA_RMVPAGE	;
510)   0E66 C9          		 RET	;
514)   0E67 CB 20       		VGA_MIXCOLOR: SLA B	;
515)   0E69 CB 20       		 SLA B	;
516)   0E6B CB 20       		 SLA B	;
517)   0E6D CB 20       		 SLA B	;
518)   0E6F B0          		 OR B         ;BLEND COLOR 4 BITS FCOLOR AND 4 BITS BCOLOR	;BLEND COLOR 4 BITS FCOLOR AND 4 BITS BCOLOR
519)   0E70 C9          		 RET	;
523)   0E71 3A 8A F0    		VGA_GETCOL: LD A, (VGABCOL)      ;GET COLOR INFO	;GET COLOR INFO
524)   0E74 47          		 LD B, A	;
525)   0E75 3A 89 F0    		 LD A, (VGAFCOL)	;
526)   0E78 CD 67 0E    		 CALL VGA_MIXCOLOR	;
527)   0E7B C9          		 RET	;
531)   0E7C F5          		VGA_SETCOL: PUSH AF	;
532)   0E7D E6 0F       		 AND $0F	;
533)   0E7F 32 89 F0    		 LD (VGAFCOL), A       ;SET COLOR INFO	;SET COLOR INFO
534)   0E82 F1          		 POP AF	;
535)   0E83 CB 27       		 SLA A	;
536)   0E85 CB 27       		 SLA A	;
537)   0E87 CB 27       		 SLA A	;
538)   0E89 CB 27       		 SLA A	;
539)   0E8B E6 0F       		 AND $0F	;
540)   0E8D 32 8A F0    		 LD (VGABCOL), A       ;SET BACK COLOR	;SET BACK COLOR
541)   0E90 C9          		 RET	;
548)   0E91 F5          		VGA_CALC_VIDAD: PUSH AF	;
549)   0E92 3A 8C F0    		 LD A, (VGATX_Y)	;
550)   0E95 67          		 LD H, A 	;
551)   0E96 3A 8D F0    		 LD A, (VGAMAXX)	;
552)   0E99 5F          		 LD E, A  	;
553)   0E9A CD B5 15    		 CALL Mult8	;
554)   0E9D 11 00 80    		 LD DE, $8000	;
555)   0EA0 19          		 ADD HL,DE	;
557)   0EA1 16 00       		 LD D, 0	;
558)   0EA3 3A 8B F0    		 LD A, (VGATX_X)	;
559)   0EA6 5F          		 LD E, A	;
560)   0EA7 19          		 ADD HL, DE	;
561)   0EA8 F1          		 POP AF	;
562)   0EA9 C9          		 RET	;
566)   0EAA E5          		VGA_DOPRNCHTXT: PUSH HL	;
567)   0EAB F5          		 PUSH AF	;
568)   0EAC CD 91 0D    		 CALL VGA_GETPAGE	;
569)   0EAF CD 91 0E    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDRESS	;CALC VIDEO ADDRESS
570)   0EB2 F1          		 POP AF	;
571)   0EB3 77          		 LD (HL), A        ;PUT CHAR ON SCREEN	;PUT CHAR ON SCREEN
572)   0EB4 E5          		 PUSH HL	;
573)   0EB5 CD BD 0C    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
574)   0EB8 CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
575)   0EBA E1          		 POP HL	;
576)   0EBB 20 08       		 JR NZ, DPC_EX	;
577)   0EBD 11 00 04    		 LD DE, $400	;
578)   0EC0 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
579)   0EC1 CD 71 0E    		 CALL VGA_GETCOL       ;GET CURRENT COLOR	;GET CURRENT COLOR
580)   0EC4 77          		 LD (HL), A        ;PUT COLOR INFO ON SCREEN	;PUT COLOR INFO ON SCREEN
581)   0EC5 E1          		DPC_EX: POP HL	;
582)   0EC6 CD B3 0D    		 CALL VGA_RMVPAGE	;
583)   0EC9 C9          		 RET	;
587)   0ECA F5          		VGA_DOCHCLR: PUSH AF	;
588)   0ECB CD 91 0D    		 CALL VGA_GETPAGE	;
589)   0ECE CD 91 0E    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDRESS	;CALC VIDEO ADDRESS
590)   0ED1 11 00 04    		 LD DE, $400	;
591)   0ED4 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
592)   0ED5 F1          		 POP AF	;
593)   0ED6 77          		 LD (HL), A        ;PUT COLOR INFO ON SCREEN	;PUT COLOR INFO ON SCREEN
594)   0ED7 CD B3 0D    		 CALL VGA_RMVPAGE	;
595)   0EDA C9          		 RET	;
598)   0EDB CD BD 0C    		VGA_GETCHAR: CALL VGA_GETCONF      ;GET SCREEEN MODE	;GET SCREEEN MODE
599)   0EDE CB 47       		 BIT 0,A	;
600)   0EE0 20 07       		 JR NZ,GC_DOIT       ;IF TEXT DOIT	;IF TEXT DOIT
602)   0EE2 16 93       		 LD D,  147 ;' '	;' '
603)   0EE4 3A 8A F0    		 LD A,(VGABCOL)	;
604)   0EE7 5F          		 LD E,A	;
605)   0EE8 C9          		 RET	;
606)   0EE9 CD 91 0D    		GC_DOIT: CALL VGA_GETPAGE	;
607)   0EEC CD 91 0E    		 CALL VGA_CALC_VIDAD       ;CALC VIDEO ADDR ON HL	;CALC VIDEO ADDR ON HL
608)   0EEF 7E          		 LD A, (HL)	;
609)   0EF0 F5          		 PUSH AF	;
610)   0EF1 CD BD 0C    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
611)   0EF4 FE 03       		 CP 3  ;TEXT HI      ; CHECK IF HIRES SO NO COLOR INFO	;TEXT HI      ; CHECK IF HIRES SO NO COLOR INFO
612)   0EF6 D1          		 POP DE        ;AF ON DE TO PRESERVE FLAG  	;AF ON DE TO PRESERVE FLAG
613)   0EF7 28 0A       		 JR Z, GC_NOCOL	;
614)   0EF9 7A          		 LD A, D	;
615)   0EFA 11 00 04    		 LD DE, $400  ;TEXT LOW	;TEXT LOW
616)   0EFD 19          		 ADD HL, DE        ;CALC COLOR ADDRESS	;CALC COLOR ADDRESS
617)   0EFE 57          		 LD D, A        ;THE CHAR	;THE CHAR
618)   0EFF 7E          		 LD A, (HL)       ;THE COLOR	;THE COLOR
619)   0F00 5F          		 LD E, A	;
620)   0F01 18 02       		 JR GC_EX	;
622)   0F03 1E 00       		 LD E, 0	;
623)   0F05 62          		GC_EX: LD H,D	;
624)   0F06 6B          		 LD L,E	;
625)   0F07 CD B3 0D    		 CALL VGA_RMVPAGE	;
626)   0F0A 54          		 LD D,H	;
627)   0F0B 5D          		 LD E,L	;
628)   0F0C C9          		 RET	;
631)   0F0D BB          		VGA_REVRCOLRS: CP E	;
632)   0F0E C8          		 RET Z	;
633)   0F0F 7B          		 LD A, E	;
634)   0F10 0F          		 RRCA         ;CHANGE FORE AND BACK COLOR INFO	;CHANGE FORE AND BACK COLOR INFO
635)   0F11 0F          		 RRCA	;
636)   0F12 0F          		 RRCA	;
637)   0F13 0F          		 RRCA	;
638)   0F14 CD CA 0E    		 CALL VGA_DOCHCLR     ;CHANGE THE COLOR OF THE CHAR	;CHANGE THE COLOR OF THE CHAR
639)   0F17 C9          		 RET	;
641)   0F18 CD BD 0C    		VGA_RMVCURS: CALL VGA_GETCONF      ;GET SCREEEN MODE	;GET SCREEEN MODE
642)   0F1B CB 47       		 BIT 0,A	;
643)   0F1D 28 04       		 JR Z, RC_GR       ;IF GRAPHICS	;IF GRAPHICS
644)   0F1F CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO	; CHECK IF HIRES SO NO COLOR INFO
645)   0F21 28 05       		 JR Z, RC_LOW	;
646)   0F23 3A 8F F0    		RC_GR: LD A, (VGATMPC)	;
647)   0F26 18 0A       		 JR RC_EX	;
648)   0F28 CD DB 0E    		RC_LOW: CALL VGA_GETCHAR      ;GET CURRENT COLORS	;GET CURRENT COLORS
649)   0F2B CD 71 0E    		 CALL VGA_GETCOL       ;GET DEFAULT COLORS	;GET DEFAULT COLORS
650)   0F2E CD 0D 0F    		 CALL VGA_REVRCOLRS      ;REVERSE IF NECESSARY	;REVERSE IF NECESSARY
651)   0F31 C9          		 RET	;
652)   0F32 CD FF 0C    		RC_EX: CALL VGA_DOPRNCH	;
653)   0F35 C9          		 RET	;
654)   0F36 CD DB 0E    		VGA_PRNCURS: CALL VGA_GETCHAR      ; E HAS THE COLOR INFO	; E HAS THE COLOR INFO
655)   0F39 D5          		 PUSH DE	;
656)   0F3A CD BD 0C    		 CALL VGA_GETCONF       ;GET SCREEEN MODE	;GET SCREEEN MODE
657)   0F3D D1          		 POP DE	;
658)   0F3E CB 4F       		 BIT 1, A        ; CHECK IF HIRES SO NO COLOR INFO  	; CHECK IF HIRES SO NO COLOR INFO
659)   0F40 20 13       		 JR NZ, PC_NOCOL	;
660)   0F42 CB 47       		 BIT 0,A        ;CHECK IF GRAPH SO NO TEXT COLOR INFO	;CHECK IF GRAPH SO NO TEXT COLOR INFO
661)   0F44 28 0B       		 JR Z, PC_LORESGR	;
662)   0F46 CD 71 0E    		 CALL VGA_GETCOL       ;GET CURRENT COLORS	;GET CURRENT COLORS
663)   0F49 0F          		 RRCA        ;REVERSE BACK & FORE	;REVERSE BACK & FORE
664)   0F4A 0F          		 RRCA	;
665)   0F4B 0F          		 RRCA	;
666)   0F4C 0F          		 RRCA	;
667)   0F4D CD 0D 0F    		 CALL VGA_REVRCOLRS      ;LOWRES TEXT REVERSE COLORS	;LOWRES TEXT REVERSE COLORS
668)   0F50 C9          		 RET	;
669)   0F51 3E 93       		PC_LORESGR: LD A, VGA_CURSCHAR	;
670)   0F53 18 09       		 JR PC_EX	;
671)   0F55 7A          		PC_NOCOL: LD A,D	;
672)   0F56 FE 93       		 CP VGA_CURSCHAR	;
673)   0F58 C8          		 RET Z        ;ALREADY PRINTED	;ALREADY PRINTED
674)   0F59 32 8F F0    		 LD (VGATMPC), A	;
675)   0F5C 3E 93       		 LD A, VGA_CURSCHAR        ;'_'	;'_'
676)   0F5E CD FF 0C    		PC_EX: CALL VGA_DOPRNCH  	;
677)   0F61 C9          		 RET	;
682)   0F62 CD 91 0D    		DOSCRL_TXT: CALL VGA_GETPAGE	;
683)   0F65 3A 8D F0    		 LD A, (VGAMAXX)	;
684)   0F68 26 00       		 LD H, 0	;
685)   0F6A 6F          		 LD L, A	;
686)   0F6B 11 00 80    		 LD DE, $8000	;
687)   0F6E 19          		 ADD HL, DE	;
689)   0F6F E5          		 PUSH HL	;
690)   0F70 D5          		 PUSH DE	;
692)   0F71 67          		 LD H, A	;
693)   0F72 3A 8E F0    		 LD A, (VGAMAXY)	;
694)   0F75 3D          		 DEC A	;
695)   0F76 5F          		 LD E, A	;
696)   0F77 CD B5 15    		 CALL Mult8	;
697)   0F7A 44          		 LD B, H	;
698)   0F7B 4D          		 LD C, L	;
699)   0F7C D1          		 POP DE	;
700)   0F7D E1          		 POP HL	;
701)   0F7E C5          		 PUSH BC	;
702)   0F7F ED B0       		 LDIR         ;SCROLL UP 39 LINES	;SCROLL UP 39 LINES
703)   0F81 D1          		 POP DE        ;DE = BC	;DE = BC
704)   0F82 21 00 80    		 LD HL, $8000	;
705)   0F85 19          		 ADD HL, DE        ;LINE 39 OR 19 ADDRESS TO BE CLEARED (0-39) (0-19)	;LINE 39 OR 19 ADDRESS TO BE CLEARED (0-39) (0-19)
706)   0F86 3A 8D F0    		 LD A, (VGAMAXX)       ;80 OR 40	;80 OR 40
707)   0F89 47          		 LD B, A	;
708)   0F8A 3E 20       		 LD A, 32	;
709)   0F8C 77          		DST_AGN: LD (HL), A	;
710)   0F8D 23          		 INC HL	;
711)   0F8E 10 FC       		 DJNZ DST_AGN	;
712)   0F90 CD B3 0D    		 CALL VGA_RMVPAGE	;
713)   0F93 3A 8E F0    		 LD A, (VGAMAXY)	;
714)   0F96 3D          		 DEC A	;
715)   0F97 C9          		 RET	;
717)   0F98 CD 91 0D    		DOSCRL_COL: CALL VGA_GETPAGE	;
718)   0F9B 21 28 84    		 LD HL, $8428        ;LINE 1	;LINE 1
719)   0F9E 11 00 84    		 LD DE, $8400        ;LINE 0	;LINE 0
720)   0FA1 01 F8 02    		 LD BC, 800 - 40       ;BYTES TO SCROLL UP	;BYTES TO SCROLL UP
721)   0FA4 ED B0       		 LDIR	;
722)   0FA6 CD 71 0E    		 CALL VGA_GETCOL       ;SET DEFAULT COLOR	;SET DEFAULT COLOR
723)   0FA9 21 F8 86    		 LD HL, $86F8        ;LINE 19 = LAST LINE	;LINE 19 = LAST LINE
724)   0FAC 06 28       		 LD B, 40	;
725)   0FAE 77          		DOS_AGNCL: LD (HL), A       ;CLEAR LAST LINE	;CLEAR LAST LINE
726)   0FAF 23          		 INC HL	;
727)   0FB0 10 FC       		 DJNZ DOS_AGNCL	;
728)   0FB2 CD B3 0D    		 CALL VGA_RMVPAGE	;
729)   0FB5 C9          		 RET	;
739)   0FB6 3A 29 F0    		 LD A, (PGSEM)	;
740)   0FB9 3C          		 INC A	;
741)   0FBA 32 29 F0    		 LD (PGSEM), A	;
742)   0FBD FE 01       		 CP 1	;
743)   0FBF C0          		 RET NZ	;
744)   0FC0 E5          		 PUSH HL	;
745)   0FC1 06 02       		 LD B, 2        ;4000h	;4000h
746)   0FC3 CD 87 05    		 CALL GETPGINBANK	;
747)   0FC6 32 25 F0    		 LD (TMPG), A	;
748)   0FC9 06 03       		 LD B, 3        ;6000h	;6000h
749)   0FCB CD 87 05    		 CALL GETPGINBANK	;
750)   0FCE 32 26 F0    		 LD (TMPG + 1), A	;
751)   0FD1 3A 90 F0    		 LD A,(VGABUF)	;
752)   0FD4 1F          		 RRA        ;PUT SCREEN BUF ON CARRY FLAG	;PUT SCREEN BUF ON CARRY FLAG
753)   0FD5 38 10       		 JR C,VSPL_SETBUFONE	;
755)   0FD7 3E 08       		 LD A, 8	;
756)   0FD9 06 02       		 LD B, 2	;
757)   0FDB CD 65 05    		 CALL PUTPGINBANK	;
759)   0FDE 3E 09       		 LD A, 9	;
760)   0FE0 06 03       		 LD B, 3	;
761)   0FE2 CD 65 05    		 CALL PUTPGINBANK	;
762)   0FE5 E1          		 POP HL	;
763)   0FE6 C9          		 RET	;
765)   0FE7 3E 0C       		 LD A, 12	;
766)   0FE9 06 02       		 LD B, 2	;
767)   0FEB CD 65 05    		 CALL PUTPGINBANK	;
769)   0FEE 3E 0D       		 LD A, 13	;
770)   0FF0 06 03       		 LD B, 3	;
771)   0FF2 CD 65 05    		 CALL PUTPGINBANK	;
772)   0FF5 E1          		 POP HL	;
773)   0FF6 C9          		 RET	;
780)   0FF7 3A 29 F0    		 LD A, (PGSEM)	;
781)   0FFA 3C          		 INC A	;
782)   0FFB 32 29 F0    		 LD (PGSEM), A	;
783)   0FFE FE 01       		 CP 1	;
784)   1000 C0          		 RET NZ	;
785)   1001 E5          		 PUSH HL	;
786)   1002 06 02       		 LD B, 2        ;4000h	;4000h
787)   1004 CD 87 05    		 CALL GETPGINBANK	;
788)   1007 32 25 F0    		 LD (TMPG), A	;
789)   100A 06 03       		 LD B, 3        ;6000h	;6000h
790)   100C CD 87 05    		 CALL GETPGINBANK	;
791)   100F 32 26 F0    		 LD (TMPG + 1), A	;
792)   1012 3A 90 F0    		 LD A,(VGABUF)	;
793)   1015 1F          		 RRA        ;PUT SCREEN BUF ON CARRY FLAG	;PUT SCREEN BUF ON CARRY FLAG
794)   1016 38 10       		 JR C,VSPH_SETBUFONE	;
796)   1018 3E 0A       		 LD A, 10	;
797)   101A 06 02       		 LD B, 2	;
798)   101C CD 65 05    		 CALL PUTPGINBANK	;
800)   101F 3E 0B       		 LD A, 11	;
801)   1021 06 03       		 LD B, 3	;
802)   1023 CD 65 05    		 CALL PUTPGINBANK	;
803)   1026 E1          		 POP HL	;
804)   1027 C9          		 RET	;
806)   1028 3E 0E       		 LD A, 14	;
807)   102A 06 02       		 LD B, 2	;
808)   102C CD 65 05    		 CALL PUTPGINBANK	;
810)   102F 3E 0F       		 LD A, 15	;
811)   1031 06 03       		 LD B, 3	;
812)   1033 CD 65 05    		 CALL PUTPGINBANK	;
813)   1036 E1          		 POP HL	;
814)   1037 C9          		 RET	;
819)   1038 3A 29 F0    		VGA_RMVGRPG: LD A, (PGSEM)	;
820)   103B FE 00       		 CP 0	;
821)   103D C8          		 RET Z	;
822)   103E 3D          		 DEC A	;
823)   103F 32 29 F0    		 LD (PGSEM), A	;
824)   1042 FE 00       		 CP 0	;
825)   1044 C0          		 RET NZ	;
826)   1045 E5          		 PUSH HL	;
827)   1046 06 02       		 LD B, 2	;
828)   1048 3A 25 F0    		 LD A, (TMPG)	;
829)   104B CD 65 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
830)   104E 06 03       		 LD B, 3	;
831)   1050 3A 26 F0    		 LD A, (TMPG + 1)	;
832)   1053 CD 65 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
833)   1056 E1          		 POP HL	;
834)   1057 C9          		 RET	;
837)   1058 CD F0 0D    		VGA_GRPHINIT: CALL VGA_SETSCRDEFS     ;SET SCREEN DEFAULTS	;SET SCREEN DEFAULTS
838)   105B CD E2 10    		 CALL VGA_GRCLS	;
839)   105E AF          		 XOR A	;
840)   105F C9          		 RET	;
846)   1060 F5          		VGA_CHECKXY32: PUSH AF	;
847)   1061 E5          		 PUSH HL	;
848)   1062 D5          		 PUSH DE	;
849)   1063 B7          		 OR A	;
850)   1064 11 40 01    		 LD DE, 320	;
851)   1067 ED 52       		 SBC HL, DE	;
852)   1069 30 0F       		 JR NC, CXY3_ABEX	;
853)   106B D1          		 POP DE	;
854)   106C D5          		 PUSH DE	;
855)   106D EB          		 EX DE, HL	;
856)   106E 11 C8 00    		 LD DE, 200	;
857)   1071 ED 52       		 SBC HL, DE	;
858)   1073 30 05       		 JR NC, CXY3_ABEX	;
859)   1075 D1          		 POP DE	;
860)   1076 E1          		 POP HL	;
861)   1077 F1          		 POP AF	;
862)   1078 37          		 SCF         ;RETURN WITH C SET	;RETURN WITH C SET
863)   1079 C9          		 RET	;
865)   107A D1          		CXY3_ABEX: POP DE        	;
866)   107B E1          		 POP HL	;
867)   107C F1          		 POP AF	;
868)   107D B7          		 OR A	;
869)   107E C9          		 RET         ;RETURN WITH NC  	;RETURN WITH NC
875)   107F CD 60 10    		VGA_PLTPXL32: CALL VGA_CHECKXY32     ;CHECK BOUNDS	;CHECK BOUNDS
876)   1082 D0          		 RET NC	;
877)   1083 E5          		 PUSH HL        ;CHECK BOUNDS	;CHECK BOUNDS
878)   1084 F5          		 PUSH AF	;
879)   1085 7B          		 LD A, E	;
880)   1086 FE 66       		 CP 102	;
881)   1088 38 27       		 JR C, PPNXT0        ;LESS THAN 102	;LESS THAN 102
882)   108A 20 16       		 JR NZ, NXTBNK        ;MORE THAN 102	;MORE THAN 102
883)   108C E5          		 PUSH HL        ;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES	;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
884)   108D 01 80 00    		 LD BC, 128	;
885)   1090 B7          		 OR A	;
886)   1091 ED 42       		 SBC HL, BC	;
887)   1093 47          		 LD B, A	;
888)   1094 7C          		 LD A, H	;
889)   1095 B7          		 OR A         ; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128	; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
890)   1096 78          		 LD A, B	;
891)   1097 E1          		 POP HL	;
892)   1098 20 17       		 JR NZ, PPNXT0	;
894)   109A 3E 67       		 LD A, 103        ;WE ARE AT LINE ZERO ON 2ND BANK	;WE ARE AT LINE ZERO ON 2ND BANK
895)   109C 11 40 01    		 LD DE, 129 + 191	;
896)   109F B7          		 OR A	;
897)   10A0 ED 52       		 SBC HL, DE        ;	;
898)   10A2 D6 67       		NXTBNK: SUB 103        ;SKIP 102 ROWS	;SKIP 102 ROWS
899)   10A4 11 C0 00    		 LD DE, 192        ;320-128	;320-128
900)   10A7 B7          		 OR A	;
901)   10A8 ED 5A       		 ADC HL, DE	;
902)   10AA F5          		 PUSH AF	;
904)   10AB CD F7 0F    		 CALL VGA_SETGRPGHI	;
906)   10AE F1          		 POP AF         ;A HAS THE ROWS ON 2ND 16K	;A HAS THE ROWS ON 2ND 16K
907)   10AF 18 05       		 JR PPNXT1	;
908)   10B1 F5          		PPNXT0: PUSH AF        ;A=E=ROW=Y	;A=E=ROW=Y
909)   10B2 CD B6 0F    		 CALL VGA_SETGRPGLO	;
910)   10B5 F1          		 POP AF	;
911)   10B6 11 00 40    		PPNXT1: LD DE, BASEADDR	;
913)   10B9 CB 3C       		 SRL H	;
914)   10BB CB 1D       		 RR L	;
915)   10BD 19          		 ADD HL, DE        ;FIND COLUMN	;FIND COLUMN
916)   10BE E5          		 PUSH HL	;
917)   10BF 11 A0 00    		 LD DE, 160	;
919)   10C2 CD C1 15    		 CALL Mult12	;
920)   10C5 D1          		 POP DE	;
921)   10C6 19          		 ADD HL, DE	;
922)   10C7 C1          		DOPLOTPX: POP BC        ;B HAS THE COLOR	;B HAS THE COLOR
923)   10C8 D1          		 POP DE         ;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL	;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
924)   10C9 7E          		 LD A, (HL)        ;GET PIXEL BYTE	;GET PIXEL BYTE
925)   10CA CB 43       		 BIT 0, E        ;CHECK X IS EVEN OR ODD	;CHECK X IS EVEN OR ODD
926)   10CC 28 04       		 JR Z, DOEVEN        ;EVEN	;EVEN
928)   10CE E6 F0       		 AND $F0        ;CLEAR RIGHT 4 BITS	;CLEAR RIGHT 4 BITS
929)   10D0 18 0A       		 JR DPEXIT	;
931)   10D2 CB 00       		DOEVEN: RLC B	;
932)   10D4 CB 00       		 RLC B	;
933)   10D6 CB 00       		 RLC B	;
934)   10D8 CB 00       		 RLC B	;
935)   10DA E6 0F       		 AND $0F        ;ZERO LEFT	;ZERO LEFT
936)   10DC B0          		DPEXIT: OR B         ;MIX PIXELS	;MIX PIXELS
937)   10DD 77          		 LD (HL), A	;
938)   10DE CD 38 10    		 CALL VGA_RMVGRPG	;
939)   10E1 C9          		 RET	;
942)   10E2 CD B6 0F    		VGA_GRCLS: CALL VGA_SETGRPGLO	;
943)   10E5 21 00 40    		 LD HL, BASEADDR	;
944)   10E8 11 01 40    		 LD DE, BASEADDR + 1	;
945)   10EB 01 FF 3F    		 LD BC, 16384 - 1       ;BYTES ON 1ST 16K	;BYTES ON 1ST 16K
946)   10EE AF          		 XOR A	;
947)   10EF 77          		 LD (HL), A	;
948)   10F0 ED B0       		 LDIR         ;RED - RED	;RED - RED
950)   10F2 CD 38 10    		 CALL VGA_RMVGRPG	;
951)   10F5 CD F7 0F    		 CALL VGA_SETGRPGHI	;
952)   10F8 21 00 40    		 LD HL, BASEADDR	;
953)   10FB 11 01 40    		 LD DE, BASEADDR + 1	;
954)   10FE 01 FF 3C    		 LD BC, 15616 - 1       ;BYTES ON 2ND 16K	;BYTES ON 2ND 16K
955)   1101 AF          		 XOR A	;
956)   1102 77          		 LD (HL), A	;
957)   1103 ED B0       		 LDIR	;
958)   1105 CD 38 10    		 CALL VGA_RMVGRPG	;
959)   1108 AF          		 XOR A        ;RESET TEXT COORDS	;RESET TEXT COORDS
960)   1109 32 8B F0    		 LD (VGATX_X), A	;
961)   110C 32 8C F0    		 LD (VGATX_Y), A	;
962)   110F C9          		 RET         ;TO MENU	;TO MENU
964)   1110 C5          		FILLBTS: PUSH BC	;
965)   1111 12          		AGN1: LD (DE), A	;
966)   1112 13          		 INC DE	;
967)   1113 0B          		 DEC BC	;
968)   1114 67          		 LD H, A	;
969)   1115 78          		 LD A, B	;
970)   1116 B1          		 OR C	;
971)   1117 7C          		 LD A, H	;
972)   1118 20 F7       		 JR NZ, AGN1	;
973)   111A 2D          		 DEC L	;
974)   111B 7D          		 LD A, L	;
975)   111C B7          		 OR A	;
976)   111D 7C          		 LD A, H	;
977)   111E C1          		 POP BC	;
978)   111F 20 EF       		 JR NZ, FILLBTS	;
979)   1121 C9          		 RET	;
985)   1122 E5          		VGA_GETPXL32: PUSH HL	;
986)   1123 F5          		 PUSH AF	;
987)   1124 7B          		 LD A, E	;
988)   1125 FE 66       		 CP 102	;
989)   1127 38 25       		 JR C, GPNXT0        ;LESS THAN 102	;LESS THAN 102
990)   1129 20 16       		 JR NZ, GPNXTBNK       ;MORE THAN 102	;MORE THAN 102
991)   112B E5          		 PUSH HL        ;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES	;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
992)   112C 01 80 00    		 LD BC, 128	;
993)   112F B7          		 OR A	;
994)   1130 ED 42       		 SBC HL, BC	;
995)   1132 47          		 LD B, A	;
996)   1133 7C          		 LD A, H	;
997)   1134 B7          		 OR A         ; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128	; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
998)   1135 78          		 LD A, B	;
999)   1136 E1          		 POP HL	;
1000)   1137 20 15       		 JR NZ, GPNXT0	;
1002)   1139 3E 67       		 LD A, 103        ;WE ARE AT LINE ZERO ON 2ND BANK	;WE ARE AT LINE ZERO ON 2ND BANK
1003)   113B 11 40 01    		 LD DE, 129 + 191	;
1004)   113E B7          		 OR A	;
1005)   113F ED 52       		 SBC HL, DE        ;	;
1006)   1141 D6 67       		GPNXTBNK: SUB 103       ;SKIP 102 ROWS	;SKIP 102 ROWS
1007)   1143 11 C0 00    		 LD DE, 192        ;320-128	;320-128
1008)   1146 19          		 ADD HL, DE	;
1009)   1147 F5          		 PUSH AF	;
1011)   1148 CD F7 0F    		 CALL VGA_SETGRPGHI	;
1013)   114B F1          		 POP AF         ;A HAS THE ROWS ON 2ND 16K	;A HAS THE ROWS ON 2ND 16K
1014)   114C 18 05       		 JR GPNXT1	;
1015)   114E F5          		GPNXT0: PUSH AF        ;A=E=ROW=Y	;A=E=ROW=Y
1016)   114F CD B6 0F    		 CALL VGA_SETGRPGLO	;
1017)   1152 F1          		 POP AF	;
1018)   1153 11 00 40    		GPNXT1: LD DE, BASEADDR	;
1020)   1156 CB 3C       		 SRL H	;
1021)   1158 CB 1D       		 RR L	;
1022)   115A 19          		 ADD HL, DE        ;FIND COLUMN	;FIND COLUMN
1023)   115B 11 A0 00    		 LD DE, 160	;
1024)   115E CD C1 15    		 CALL Mult12        ;HL=A*DE	;HL=A*DE
1025)   1161 C1          		GPDOGETPX: POP BC        ;B HAS THE COLOR	;B HAS THE COLOR
1026)   1162 D1          		 POP DE         ;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL	;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
1027)   1163 7E          		 LD A, (HL)        ;GET PIXEL BYTE	;GET PIXEL BYTE
1028)   1164 CB 43       		 BIT 0, E        ;CHECK X IS EVEN OR ODD	;CHECK X IS EVEN OR ODD
1029)   1166 28 04       		 JR Z, GPDOEVEN        ;EVEN	;EVEN
1031)   1168 E6 0F       		 AND $0F        ;CLEAR LEFT 4 BITS	;CLEAR LEFT 4 BITS
1032)   116A 18 0A       		 JR GPDPEXIT	;
1034)   116C CB 07       		GPDOEVEN: RLC A	;
1035)   116E CB 07       		 RLC A	;
1036)   1170 CB 07       		 RLC A	;
1037)   1172 CB 07       		 RLC A	;
1038)   1174 E6 0F       		 AND $0F        ;ZERO LEFT	;ZERO LEFT
1039)   1176 F5          		GPDPEXIT: PUSH AF       ;SAVE PIXEL	;SAVE PIXEL
1040)   1177 CD 38 10    		 CALL VGA_RMVGRPG	;
1041)   117A F1          		 POP AF         ;RESTORE PIXEL	;RESTORE PIXEL
1042)   117B C9          		 RET	;
1047)   117C C3 85 12    		VGA_DOPRNCHGRP: JP VGA_PRNGRCH	;
1055)   117F C9          		 RET	;
1061)   1180 06 02       		SETGRAPHPGS: LD B, 2	;
1062)   1182 3A 29 F0    		 LD A, (PGSEM)        ;PG SEM FOR ALL 4 PAGES	;PG SEM FOR ALL 4 PAGES
1063)   1185 3C          		 INC A	;
1064)   1186 32 29 F0    		 LD (PGSEM), A	;
1065)   1189 FE 01       		 CP 1	;
1066)   118B C0          		 RET NZ	;
1067)   118C E5          		 PUSH HL	;
1068)   118D 0E 04       		 LD C, 4	;
1069)   118F 21 25 F0    		 LD HL, TMPG	;
1070)   1192 C5          		 PUSH BC	;
1071)   1193 E5          		SGP_NXT: PUSH HL	;
1072)   1194 CD 87 05    		 CALL GETPGINBANK	;
1073)   1197 E1          		 POP HL	;
1074)   1198 77          		 LD (HL), A	;
1075)   1199 23          		 INC HL	;
1076)   119A 04          		 INC B	;
1077)   119B 0D          		 DEC C	;
1078)   119C 20 F5       		 JR NZ, SGP_NXT	;
1079)   119E C1          		 POP BC	;
1080)   119F 0E 04       		 LD C, 4	;
1081)   11A1 3A 90 F0    		 LD A,(VGABUF)	;
1082)   11A4 1F          		 RRA	;
1083)   11A5 3E 08       		 LD A, 8       ;BUFFER 0	;BUFFER 0
1084)   11A7 30 02       		 JR NC, SGP_NXT2	;
1085)   11A9 3E 0C       		 LD A, 12      ;BUFFER 1	;BUFFER 1
1088)   11AB C5          		SGP_NXT2: PUSH BC	;
1089)   11AC CD 65 05    		 CALL PUTPGINBANK	;
1090)   11AF C1          		 POP BC	;
1091)   11B0 3C          		 INC A	;
1092)   11B1 04          		 INC B	;
1093)   11B2 0D          		 DEC C	;
1094)   11B3 20 F6       		 JR NZ, SGP_NXT2	;
1095)   11B5 E1          		 POP HL	;
1096)   11B6 C9          		 RET	;
1100)   11B7 06 02       		RMVGRAPHPGS: LD B, 2	;
1101)   11B9 3A 29 F0    		 LD A, (PGSEM)	;
1102)   11BC FE 00       		 CP 0	;
1103)   11BE C8          		 RET Z	;
1104)   11BF 3D          		 DEC A	;
1105)   11C0 32 29 F0    		 LD (PGSEM), A	;
1106)   11C3 FE 00       		 CP 0	;
1107)   11C5 C0          		 RET NZ	;
1108)   11C6 E5          		 PUSH HL	;
1109)   11C7 21 25 F0    		 LD HL, TMPG	;
1110)   11CA 0E 04       		 LD C, 4	;
1111)   11CC 7E          		RGP_NXT: LD A, (HL)	;
1112)   11CD E5          		 PUSH HL	;
1113)   11CE C5          		 PUSH BC	;
1114)   11CF CD 65 05    		 CALL PUTPGINBANK       ;RESTORE OLD PAGE	;RESTORE OLD PAGE
1115)   11D2 C1          		 POP BC	;
1116)   11D3 E1          		 POP HL	;
1117)   11D4 04          		 INC B	;
1118)   11D5 23          		 INC HL	;
1119)   11D6 0D          		 DEC C	;
1120)   11D7 20 F3       		 JR NZ, RGP_NXT	;
1121)   11D9 E1          		 POP HL	;
1122)   11DA C9          		 RET	;
1132)   11DB 3E 50       		VGA_CALC_VA64: LD A, 80	;
1134)   11DD E5          		 PUSH HL	;
1135)   11DE CD C1 15    		 CALL Mult12        ;HL=A * DE=Y	;HL=A * DE=Y
1136)   11E1 EB          		 EX DE, HL        ;DE=Y*80	;DE=Y*80
1137)   11E2 E1          		 POP HL	;
1138)   11E3 0E 08       		 LD C, 8	;
1139)   11E5 CD 17 16    		 CALL DIV16_8        ;HL=HL/C  A=REMAINDER	;HL=HL/C  A=REMAINDER
1140)   11E8 19          		 ADD HL, DE        ;THE ADDRESS IN 32K VIDEO BUFFER	;THE ADDRESS IN 32K VIDEO BUFFER
1141)   11E9 11 00 40    		 LD DE, $4000	;
1142)   11EC 19          		 ADD HL, DE        ;THE ADDRESS IN Z80 RAM	;THE ADDRESS IN Z80 RAM
1144)   11ED 4F          		 LD C,A	;
1145)   11EE 3E 07       		 LD A,7	;
1146)   11F0 91          		 SUB C        ;A=7-REM TO FIND THE BIT TO SET LEFT TO RIGHT	;A=7-REM TO FIND THE BIT TO SET LEFT TO RIGHT
1147)   11F1 06 01       		 LD B, 1	;
1148)   11F3 B7          		 OR A	;
1149)   11F4 28 05       		VCVA_AGN: JR Z, VCVA_NXT	;
1150)   11F6 CB 10       		 RL B         ;MOVE B (THE MASK) TO THE RIGHT BIT	;MOVE B (THE MASK) TO THE RIGHT BIT
1151)   11F8 3D          		 DEC A	;
1152)   11F9 18 F9       		 JR VCVA_AGN	;
1153)   11FB 78          		VCVA_NXT: LD A, B	;
1154)   11FC C9          		 RET	;
1161)   11FD F5          		VGA_CHECKXY64: PUSH AF	;
1162)   11FE E5          		 PUSH HL	;
1163)   11FF D5          		 PUSH DE	;
1164)   1200 B7          		 OR A	;
1165)   1201 11 80 02    		 LD DE, 640	;
1166)   1204 ED 52       		 SBC HL, DE	;
1167)   1206 30 0F       		 JR NC, CXY6_ABEX	;
1168)   1208 D1          		 POP DE	;
1169)   1209 D5          		 PUSH DE	;
1170)   120A EB          		 EX DE, HL	;
1171)   120B 11 90 01    		 LD DE, 400	;
1172)   120E ED 52       		 SBC HL, DE	;
1173)   1210 D1          		 POP DE         ;ABNORMAL EXIT PIXEL CANT PUT TO SCREEN	;ABNORMAL EXIT PIXEL CANT PUT TO SCREEN
1174)   1211 E1          		 POP HL	;
1175)   1212 30 03       		 JR NC, CXY6_ABEX	;
1176)   1214 F1          		 POP AF	;
1177)   1215 37          		 SCF         ;RETURN WITH C SET	;RETURN WITH C SET
1178)   1216 C9          		 RET	;
1179)   1217 F1          		CXY6_ABEX: POP AF	;
1180)   1218 AF          		 XOR A	;
1181)   1219 C9          		 RET         ;RETURN WITH NC	;RETURN WITH NC
1186)   121A CD FD 11    		VGA_PLTPXL64: CALL VGA_CHECKXY64	;
1187)   121D D0          		 RET NC         ;NOT VALID PARAMS	;NOT VALID PARAMS
1188)   121E F5          		 PUSH AF	;
1189)   121F E5          		 PUSH HL	;
1190)   1220 D5          		 PUSH DE	;
1191)   1221 CD 80 11    		 CALL SETGRAPHPGS       ;BRING VIDEO PAGES TO Z80	;BRING VIDEO PAGES TO Z80
1192)   1224 D1          		PP6_PAROK: POP DE	;
1193)   1225 E1          		 POP HL	;
1195)   1226 CD DB 11    		 CALL VGA_CALC_VA64       ;HL THE VGA ADDRESS AND A THE BIT MASK	;HL THE VGA ADDRESS AND A THE BIT MASK
1196)   1229 D1          		 POP DE         ;D HAS THE COLOR 0 OR 1, RESET BIT OR SET	;D HAS THE COLOR 0 OR 1, RESET BIT OR SET
1197)   122A 5F          		 LD E, A	;
1198)   122B 3A 8A F0    		 LD A,(VGABCOL)	;
1199)   122E BA          		 CP D         ;CHECK IF COLOR IS SAME AS BACKG	;CHECK IF COLOR IS SAME AS BACKG
1200)   122F 28 05       		 JR Z, PP6_RESET	;
1202)   1231 7E          		 LD A, (HL)        ;GET THE BYTE	;GET THE BYTE
1203)   1232 B3          		 OR E         ;SET THE BIT	;SET THE BIT
1204)   1233 77          		 LD (HL), A        ;PUT THE BYTE BACK	;PUT THE BYTE BACK
1205)   1234 18 06       		 JR PP6_EXIT	;
1208)   1236 7B          		 LD A, E        ;MASK ON A	;MASK ON A
1209)   1237 2F          		 CPL         ;INVERT ALL PIXELS	;INVERT ALL PIXELS
1210)   1238 5F          		 LD E, A        ;MASK ON E	;MASK ON E
1211)   1239 7E          		 LD A, (HL)        ;GET THE BYTE	;GET THE BYTE
1212)   123A A3          		 AND E         ;RESET THE BIT	;RESET THE BIT
1213)   123B 77          		 LD (HL), A        ;PUT THE BYTE BACK	;PUT THE BYTE BACK
1214)   123C CD B7 11    		PP6_EXIT: CALL RMVGRAPHPGS      ;RESTORE PREVIOUS PAGES TO Z80	;RESTORE PREVIOUS PAGES TO Z80
1215)   123F C9          		 RET	;
1223)   1240 CD FD 11    		VGA_GETPXL64: CALL VGA_CHECKXY64	;
1224)   1243 D0          		 RET NC         ;NOT VALID PARAMS	;NOT VALID PARAMS
1225)   1244 CD 80 11    		 CALL SETGRAPHPGS       ;BRING VIDEO PAGES TO Z80	;BRING VIDEO PAGES TO Z80
1226)   1247 D1          		 POP DE	;
1227)   1248 E1          		 POP HL	;
1228)   1249 F1          		 POP AF	;
1230)   124A CD DB 11    		 CALL VGA_CALC_VA64       ;HL THE VGA ADDRESS AND A THE BIT MASK	;HL THE VGA ADDRESS AND A THE BIT MASK
1231)   124D 5F          		 LD E, A	;
1232)   124E 7E          		 LD A, (HL)	;
1233)   124F A3          		 AND E	;
1234)   1250 FE 00       		 CP 0	;
1235)   1252 28 02       		 JR Z, GP6EXIT	;
1236)   1254 3E 01       		 LD A, 1	;
1238)   1256 F5          		GP6EXIT: PUSH AF	;
1239)   1257 CD B7 11    		 CALL RMVGRAPHPGS       ;RESTORE PREVIOUS PAGES TO Z80	;RESTORE PREVIOUS PAGES TO Z80
1240)   125A F1          		 POP AF	;
1241)   125B C9          		 RET	;
1249)   125C F5          		VGA_PLTPXL: PUSH AF	;
1250)   125D E5          		 PUSH HL	;
1251)   125E D5          		 PUSH DE        ;SAVE A	;SAVE A
1252)   125F CD BD 0C    		 CALL VGA_GETCONF	;
1253)   1262 D1          		 POP DE	;
1254)   1263 E1          		 POP HL	;
1255)   1264 F1          		 POP AF	;
1256)   1265 E5          		 PUSH HL	;
1257)   1266 D5          		 PUSH DE	;
1258)   1267 DD 21 75 12 		 LD IX,VGA_PPEXIT	;
1259)   126B DD E5       		 PUSH IX        ;RETURN ADDRESS  	;RETURN ADDRESS
1260)   126D CB 49       		 BIT 1, C        ;test low or hi	;test low or hi
1261)   126F C2 1A 12    		 JP NZ, VGA_PLTPXL64       ;NZ MEANS HI	;NZ MEANS HI
1262)   1272 C3 7F 10    		 JP VGA_PLTPXL32	;
1263)   1275 D1          		VGA_PPEXIT: POP DE	;
1264)   1276 E1          		 POP HL	;
1265)   1277 C9          		 RET	;
1271)   1278 D5          		VGA_GETPXL: PUSH DE	;
1272)   1279 CD BD 0C    		 CALL VGA_GETCONF	;
1273)   127C D1          		 POP DE	;
1274)   127D CB 49       		 BIT 1, C        ;test low or hi	;test low or hi
1275)   127F C2 40 12    		 JP NZ, VGA_GETPXL64       ;NZ MEANS HI	;NZ MEANS HI
1276)   1282 C3 22 11    		 JP VGA_GETPXL32	;
1282)   1285 F5          		VGA_PRNGRCH:  PUSH AF	;
1288)   1286 1E 08       		 LD E,FONT_WIDTH	;
1289)   1288 3A 8B F0    		VPGC_NXT: LD A,(VGATX_X)	;
1290)   128B 67          		 LD H,A	;
1292)   128C CD B5 15    		 CALL MULT8	;
1293)   128F E5          		 PUSH HL        ;SAVE RESULT	;SAVE RESULT
1294)   1290 1E 0A       		 LD E,FONT_HEIGHT	;
1295)   1292 3A 8C F0    		 LD A,(VGATX_Y)	;
1296)   1295 67          		 LD H,A	;
1297)   1296 CD B5 15    		 CALL MULT8	;
1298)   1299 D1          		 POP DE	;
1299)   129A EB          		 EX DE,HL	;
1301)   129B F1          		 POP AF        ;GET THE CHAR	;GET THE CHAR
1303)   129C E5          		VGA_PRNGRCHAT: PUSH HL	;
1304)   129D D5          		 PUSH DE	;
1305)   129E B7          		 OR A	;
1306)   129F 21 00 40    		 LD HL, FONT_ADDR	;
1307)   12A2 16 00       		 LD D, 0	;
1308)   12A4 5F          		 LD E, A	;
1309)   12A5 ED 5A       		 ADC HL, DE        ;HL THE START OF FONT	;HL THE START OF FONT
1310)   12A7 0E 0A       		 LD C, FONT_HEIGHT       ; TOTAL FONT LINES	; TOTAL FONT LINES
1311)   12A9 EB          		 EX DE,HL       ;DE THE START OF FONT PATTERN	;DE THE START OF FONT PATTERN
1312)   12AA 1A          		VPGC_AGN3: LD A, (DE)       ;FONT 8BIT PATTERN FOR A LINE	;FONT 8BIT PATTERN FOR A LINE
1313)   12AB 06 08       		 LD B, FONT_WIDTH	;
1314)   12AD CB 27       		VPGC_AGN4: SLA A        ;CHECK BIT FOR 1=FCOLOR OR 0=BCOLOR	;CHECK BIT FOR 1=FCOLOR OR 0=BCOLOR
1315)   12AF 67          		 LD H,A        ;SAVE A  	;SAVE A
1316)   12B0 38 05       		 JR C, VPGC_FCOLOR	;
1317)   12B2 3A 8A F0    		 LD A, (VGABCOL)	;
1318)   12B5 18 03       		 JR VPGC_CONT	;
1319)   12B7 3A 89 F0    		VPGC_FCOLOR: LD A, (VGAFCOL) 	;
1321)   12BA D9          		VPGC_CONT: EXX 	;
1322)   12BB D1          		 POP DE	;
1323)   12BC E1          		 POP HL	;
1324)   12BD CD 5C 12    		 CALL VGA_PLTPXL	;
1325)   12C0 23          		 INC HL        ;NEXT PIXEL ON VIDEO BUF	;NEXT PIXEL ON VIDEO BUF
1326)   12C1 E5          		 PUSH HL	;
1327)   12C2 D5          		 PUSH DE	;
1328)   12C3 D9          		 EXX	;
1329)   12C4 7C          		 LD A,H        ;RESTORE A	;RESTORE A
1330)   12C5 10 E6       		 DJNZ VPGC_AGN4	;
1331)   12C7 D9          		 EXX	;
1332)   12C8 D1          		 POP DE	;
1333)   12C9 E1          		 POP HL	;
1334)   12CA 06 00       		 LD B,0	;
1335)   12CC 0E 08       		 LD C,FONT_WIDTH	;
1336)   12CE B7          		 OR A	;
1337)   12CF ED 42       		 SBC HL,BC       ;X=HL AT THE START	;X=HL AT THE START
1338)   12D1 13          		 INC DE        ;Y=DE +1	;Y=DE +1
1339)   12D2 E5          		 PUSH HL	;
1340)   12D3 D5          		 PUSH DE	;
1341)   12D4 D9          		 EXX	;
1342)   12D5 14          		 INC D         ;ADD 256 FOR NEXT CHAR PATTERN	;ADD 256 FOR NEXT CHAR PATTERN
1343)   12D6 0D          		 DEC C	;
1344)   12D7 20 D1       		 JR NZ, VPGC_AGN3	;
1345)   12D9 D1          		 POP DE	;
1346)   12DA E1          		 POP HL	;
1347)   12DB C9          		 RET	;
1352)   12DC 67          		VGA_CLRTXTLN: LD H,A	;
1353)   12DD 3A 8C F0    		 LD A,(VGATX_Y)	;
1354)   12E0 F5          		 PUSH AF	;
1355)   12E1 7C          		 LD A,H	;
1356)   12E2 32 8C F0    		 LD (VGATX_Y),A	;
1357)   12E5 F5          		 PUSH AF	;
1358)   12E6 CD BD 0C    		 CALL VGA_GETCONF	;
1359)   12E9 F1          		 POP AF	;
1360)   12EA CB 49       		 BIT 1, C 	;
1361)   12EC 06 4E       		 LD B,78       ;test low or hi	;test low or hi
1362)   12EE 20 02       		 JR NZ, DOCLRTXT;CLRTXT64    ;NZ MEANS HI	;CLRTXT64    ;NZ MEANS HI
1364)   12F0 06 26       		 LD B,38	;
1365)   12F2 3E 20       		DOCLRTXT: LD A,' '	;
1366)   12F4 C5          		 PUSH BC	;
1367)   12F5 CD EF 0C    		 CALL VGA_PRCH      ;PRINT AND FORWARDS	;PRINT AND FORWARDS
1368)   12F8 C1          		 POP BC	;
1369)   12F9 10 F7       		 DJNZ DOCLRTXT	;
1370)   12FB 3E 20       		 LD A,' '	;
1371)   12FD CD FF 0C    		 CALL VGA_DOPRNCH	;
1372)   1300 AF          		 XOR A	;
1373)   1301 32 8B F0    		 LD (VGATX_X),A	;
1374)   1304 F1          		 POP AF	;
1375)   1305 32 8C F0    		 LD LD (VGATX_Y),A	;
1376)   1308 C9          		 RET	;
 37)   1309 F5          		DELAYMICROSEC: PUSH AF	;
 38)   130A D5          		 PUSH DE	;
 39)   130B 1B          		 DEC DE	;
 40)   130C D1          		 POP DE	;
 41)   130D F1          		 POP AF	;
 42)   130E C9          		 RET	;
 45)   130F CD 09 13    		S21: CALL DELAYMICROSEC	;
 46)   1312 10 FB       		 DJNZ S21	;
 47)   1314 C9          		 RET	;
 51)   1315 F5          		DELAYMILISEC: PUSH AF	;
 52)   1316 D5          		 PUSH DE	;
 53)   1317 11 2C 01    		 LD DE, 300        ;2000 1 MILISEC =300 ON 8MHZ SO 30= 0.1 MILISECS = 100 MICROSECS	;2000 1 MILISEC =300 ON 8MHZ SO 30= 0.1 MILISECS = 100 MICROSECS
 54)   131A 1B          		DEL1: DEC DE	;
 55)   131B 7A          		 LD A, D        ;TEST FOR DE=00	;TEST FOR DE=00
 56)   131C B3          		 OR E	;
 57)   131D 20 FB       		 JR NZ, DEL1	;
 58)   131F D1          		 POP DE	;
 59)   1320 F1          		 POP AF	;
 60)   1321 C9          		 RET	;
 63)   1322 06 50       		 LD B, 80	;
 65)   1324 CD 15 13    		S1: CALL DELAYMILISEC	;
 66)   1327 10 FB       		 DJNZ S1	;
 67)   1329 C9          		 RET	;
 72)   132A C5          		@DELAYSEC: PUSH BC	;
 73)   132B 01 E8 03    		 LD BC, 1000	;
 74)   132E C5          		MYDLAGN: PUSH BC	;
 75)   132F CD 15 13    		 CALL DELAY        ;1MS ON 8 MHZ	;1MS ON 8 MHZ
 76)   1332 C1          		 POP BC	;
 77)   1333 0B          		 DEC BC	;
 78)   1334 78          		 LD A, B	;
 79)   1335 B1          		 OR C	;
 80)   1336 20 F6       		 JR NZ, MYDLAGN	;
 81)   1338 C1          		 POP BC	;
 82)   1339 10 EF       		 DJNZ DELAYSEC	;
 83)   133B C9          		 RET	;
 88)   133C F5          		OUTASC: PUSH AF	;
 89)   133D D5          		 PUSH DE	;
 90)   133E CD 71 13    		 CALL B2Bcd	;
 91)   1341 D1          		 POP DE	;
 92)   1342 CD 97 13    		 CALL BCD2HA	;
 93)   1345 F1          		 POP AF	;
 94)   1346 C9          		 RET	;
108)   1347 B7          		BCD2BN: OR A	;
109)   1348 47          		 LD B, A	;
110)   1349 E6 F0       		 AND $F0	;
111)   134B 0F          		 RRCA	;
112)   134C 4F          		 LD C, A	;
113)   134D 0F          		 RRCA	;
114)   134E 0F          		 RRCA	;
115)   134F 81          		 ADD A, C	;
116)   1350 4F          		 LD C, A	;
117)   1351 78          		 LD A, B	;
118)   1352 E6 0F       		 AND $0F	;
119)   1354 81          		 ADD A, C	;
120)   1355 C9          		 RET	;
135)   1356 26 FF       		BN2BCD: LD H, $FF	;
136)   1358 24          		D100LP: INC H	;
137)   1359 D6 64       		 SUB 100	;
138)   135B 30 FB       		 JR NC, D100LP	;
139)   135D C6 64       		 ADD A, 100	;
140)   135F 2E FF       		 LD L, $FF	;
141)   1361 2C          		D10LP: INC L	;
142)   1362 D6 0A       		 SUB 10	;
143)   1364 30 FB       		 JR NC, D10LP	;
144)   1366 C6 0A       		 ADD A, 10	;
145)   1368 4F          		 LD C, A	;
146)   1369 7D          		 LD A, L	;
147)   136A 07          		 RLCA	;
148)   136B 07          		 RLCA	;
149)   136C 07          		 RLCA	;
150)   136D 07          		 RLCA	;
151)   136E B1          		 OR C	;
152)   136F 6F          		 LD L, A	;
153)   1370 C9          		 RET	;
167)   1371 01 00 10    		 LD BC, 16 * 256 + 0       ; handle 16 bits, one bit per iteration	; handle 16 bits, one bit per iteration
168)   1374 11 00 00    		 LD DE, 0	;
170)   1377 29          		 ADD HL, HL	;
171)   1378 7B          		 LD A, E	;
172)   1379 8F          		 ADC A, A	;
173)   137A 27          		 DAA	;
174)   137B 5F          		 LD E, A	;
175)   137C 7A          		 LD A, D	;
176)   137D 8F          		 ADC A, A	;
177)   137E 27          		 DAA	;
178)   137F 57          		 LD D, A	;
179)   1380 79          		 LD A, C	;
180)   1381 8F          		 ADC A, A	;
181)   1382 27          		 DAA	;
182)   1383 4F          		 LD C, A	;
183)   1384 10 F1       		 DJNZ cvtLp	;
184)   1386 EB          		 EX DE, HL	;
185)   1387 C9          		 RET	;
199)   1388 B7          		BCD2BN: OR A	;
200)   1389 47          		 LD B, A	;
201)   138A E6 F0       		 AND $F0	;
202)   138C 0F          		 RRCA	;
203)   138D 4F          		 LD C, A	;
204)   138E 0F          		 RRCA	;
205)   138F 0F          		 RRCA	;
206)   1390 81          		 ADD A, C	;
207)   1391 4F          		 LD C, A	;
208)   1392 78          		 LD A, B	;
209)   1393 E6 0F       		 AND $0F	;
210)   1395 81          		 ADD A, C	;
211)   1396 C9          		 RET	;
223)   1397 79          		 LD A, C	;
224)   1398 CD C4 13    		 CALL cvtUN	;
225)   139B 79          		 LD A, C	;
226)   139C CD C8 13    		 CALL cvtLN	;
227)   139F 7C          		 LD A, H	;
228)   13A0 CD C4 13    		 CALL cvtUN	;
229)   13A3 7C          		 LD A, H	;
230)   13A4 CD C8 13    		 CALL cvtLN	;
231)   13A7 7D          		 LD A, L	;
232)   13A8 CD C4 13    		 CALL cvtUN	;
233)   13AB 7D          		 LD A, L	;
234)   13AC 18 1A       		 JR cvtLN	;
236)   13AE 1F          		 RRA         ; move upper nibble into lower nibble	; move upper nibble into lower nibble
237)   13AF 1F          		 RRA	;
238)   13B0 1F          		 RRA	;
239)   13B1 1F          		 RRA	;
241)   13B2 E6 0F       		 AND 0Fh        ; isolate lower nibble	; isolate lower nibble
242)   13B4 C6 90       		 ADD A, 90h        ; old trick	; old trick
243)   13B6 27          		 DAA         ; for converting	; for converting
244)   13B7 CE 40       		 ADC A, 40h        ; one nibble	; one nibble
245)   13B9 27          		 DAA         ; to hex ASCII	; to hex ASCII
246)   13BA 12          		 LD (DE), A	;
247)   13BB 13          		 INC DE	;
248)   13BC C9          		 RET	;
260)   13BD 7D          		 LD A, L	;
261)   13BE CD AE 13    		 CALL cvtUN	;
262)   13C1 7D          		 LD A, L	;
263)   13C2 18 EE       		 JR cvtLN	;
265)   13C4 1F          		 RRA         ; move upper nibble into lower nibble	; move upper nibble into lower nibble
266)   13C5 1F          		 RRA	;
267)   13C6 1F          		 RRA	;
268)   13C7 1F          		 RRA	;
270)   13C8 E6 0F       		 AND 0Fh        ; isolate lower nibble	; isolate lower nibble
271)   13CA C6 90       		 ADD A, 90h        ; old trick	; old trick
272)   13CC 27          		 DAA         ; for converting	; for converting
273)   13CD CE 40       		 ADC A, 40h        ; one nibble	; one nibble
274)   13CF 27          		 DAA         ; to hex ASCII	; to hex ASCII
275)   13D0 12          		 LD (DE), A	;
276)   13D1 13          		 INC DE	;
277)   13D2 C9          		 RET	;
294)   13D3 F5          		 PUSH AF        ; 11 T-states	; 11 T-states
296)   13D4 ED 44       		 NEG         ; 8 T-states	; 8 T-states
297)   13D6 ED 44       		 NEG         ; 8 T-states	; 8 T-states
298)   13D8 ED 44       		 NEG         ; 8 T-states	; 8 T-states
299)   13DA ED 44       		 NEG         ; 8 T-states	; 8 T-states
300)   13DC 0B          		 DEC BC         ; 6 T-states	; 6 T-states
301)   13DD 79          		 LD A, C        ; 9 T-states	; 9 T-states
302)   13DE B0          		 OR B         ; 4 T-states	; 4 T-states
303)   13DF C2 D4 13    		 JP NZ, pau_lp        ; 10 T-states	; 10 T-states
304)   13E2 F1          		 POP AF         ; 10 T-states	; 10 T-states
305)   13E3 C9          		 RET         ; Pause complete, RETurn	; Pause complete, RETurn
343)   13E4 26 00       		@B2D8: LD H, 0	;
344)   13E6 6F          		 LD L, A	;
345)   13E7 1E 00       		@B2D16: LD E, 0	;
346)   13E9 16 00       		@B2D24: LD D, 0	;
347)   13EB 01 00 00    		@B2D32: LD BC, 0	;
348)   13EE DD 21 00 00 		@B2D48: LD IX, 0        ; zero all non-used bits	; zero all non-used bits
349)   13F2 22 93 F0    		@B2D64: LD (B2DINV), HL	;
350)   13F5 ED 53 95 F0 		 LD (B2DINV + 2), DE	;
351)   13F9 ED 43 97 F0 		 LD (B2DINV + 4), BC	;
352)   13FD DD 22 99 F0 		 LD (B2DINV + 6), IX       ; place full 64-bit input value in buffer	; place full 64-bit input value in buffer
353)   1401 21 9B F0    		 LD HL, B2DBUF	;
354)   1404 11 9C F0    		 LD DE, B2DBUF + 1	;
355)   1407 36 20       		 LD (HL), ' '	;
357)   1409 01 12 00    		 LD BC, 18	;
358)   140C ED B0       		 LDIR         ; fill 1st 19 bytes of buffer with spaces	; fill 1st 19 bytes of buffer with spaces
359)   140E ED 43 AE F0 		 LD (B2DEND - 1), BC       ;set BCD value to "0" & place terminating 0	;set BCD value to "0" & place terminating 0
360)   1412 1E 01       		 LD E, 1        ; no. of bytes in BCD value	; no. of bytes in BCD value
361)   1414 21 9B F0    		 LD HL, B2DINV + 8       ; (address MSB input)+1	; (address MSB input)+1
362)   1417 01 09 09    		 LD BC, 0x0909	;
363)   141A AF          		 XOR A	;
364)   141B 05          		B2DSKP0: DEC B	;
365)   141C 28 29       		 JR Z, B2DSIZ        ; all 0: continue with postprocessing	; all 0: continue with postprocessing
366)   141E 2B          		 DEC HL	;
367)   141F B6          		 OR (HL)        ; find first byte <>0	; find first byte <>0
368)   1420 28 F9       		 JR Z, B2DSKP0	;
369)   1422 0D          		B2DFND1: DEC C	;
370)   1423 17          		 RLA	;
371)   1424 30 FC       		 JR NC, B2DFND1        ; determine no. of most significant 1-bit	; determine no. of most significant 1-bit
372)   1426 1F          		 RRA	;
373)   1427 57          		 LD D, A        ; byte from binary input value	; byte from binary input value
374)   1428 E5          		B2DLUS2: PUSH HL	;
375)   1429 C5          		 PUSH BC	;
376)   142A 21 AE F0    		B2DLUS1: LD HL, B2DEND - 1      ; address LSB of BCD value	; address LSB of BCD value
377)   142D 43          		 LD B, E        ; current length of BCD value in bytes	; current length of BCD value in bytes
378)   142E CB 12       		 RL D         ; highest bit from input value -> carry	; highest bit from input value -> carry
379)   1430 7E          		B2DLUS0: LD A, (HL)	;
380)   1431 8F          		 ADC A, A	;
381)   1432 27          		 DAA	;
382)   1433 77          		 LD (HL), A        ; double 1 BCD byte from intermediate result	; double 1 BCD byte from intermediate result
383)   1434 2B          		 DEC HL	;
384)   1435 10 F9       		 DJNZ B2DLUS0        ; and go on to double entire BCD value (+carry!)	; and go on to double entire BCD value (+carry!)
385)   1437 30 03       		 JR NC, B2DNXT	;
386)   1439 1C          		 INC E         ; carry at MSB -> BCD value grew 1 byte larger	; carry at MSB -> BCD value grew 1 byte larger
387)   143A 36 01       		 LD (HL), 1        ; initialize new MSB of BCD value	; initialize new MSB of BCD value
388)   143C 0D          		B2DNXT: DEC C	;
389)   143D 20 EB       		 JR NZ, B2DLUS1        ; repeat for remaining bits from 1 input byte	; repeat for remaining bits from 1 input byte
390)   143F C1          		 POP BC         ; no. of remaining bytes in input value	; no. of remaining bytes in input value
391)   1440 0E 08       		 LD C, 8        ; reset bit-counter	; reset bit-counter
392)   1442 E1          		 POP HL         ; pointer to byte from input value	; pointer to byte from input value
393)   1443 2B          		 DEC HL	;
394)   1444 56          		 LD D, (HL)        ; get next group of 8 bits	; get next group of 8 bits
395)   1445 10 E1       		 DJNZ B2DLUS2        ; and repeat until last byte from input value	; and repeat until last byte from input value
396)   1447 21 AF F0    		B2DSIZ: LD HL, B2DEND        ; address of terminating 0	; address of terminating 0
397)   144A 4B          		 LD C, E        ; size of BCD value in bytes	; size of BCD value in bytes
398)   144B B7          		 OR A	;
399)   144C ED 42       		 SBC HL, BC        ; calculate address of MSB BCD	; calculate address of MSB BCD
400)   144E 54          		 LD D, H	;
401)   144F 5D          		 LD E, L	;
402)   1450 ED 42       		 SBC HL, BC	;
403)   1452 EB          		 EX DE, HL        ; HL=address BCD value, DE=start of decimal value	; HL=address BCD value, DE=start of decimal value
404)   1453 41          		 LD B, C        ; no. of bytes BCD	; no. of bytes BCD
405)   1454 CB 21       		 SLA C         ; no. of bytes decimal (possibly 1 too high)	; no. of bytes decimal (possibly 1 too high)
406)   1456 3E 30       		 LD A, '0'	;
407)   1458 ED 6F       		 RLD         ; shift bits 4-7 of (HL) into bit 0-3 of A	; shift bits 4-7 of (HL) into bit 0-3 of A
408)   145A FE 30       		 CP '0'         ; (HL) was > 9h?	; (HL) was > 9h?
409)   145C 20 06       		 JR NZ, B2DEXPH        ; if yes, start with recording high digit	; if yes, start with recording high digit
410)   145E 0D          		 DEC C         ; correct number of decimals	; correct number of decimals
411)   145F 13          		 INC DE         ; correct start address	; correct start address
412)   1460 18 04       		 JR B2DEXPL        ; continue with converting low digit	; continue with converting low digit
413)   1462 ED 6F       		B2DEXP: RLD         ; shift high digit (HL) into low digit of A	; shift high digit (HL) into low digit of A
414)   1464 12          		B2DEXPH: LD (DE), A       ; record resulting ASCII-code	; record resulting ASCII-code
415)   1465 13          		 INC DE	;
416)   1466 ED 6F       		B2DEXPL: RLD	;
417)   1468 12          		 LD (DE), A	;
418)   1469 13          		 INC DE	;
419)   146A 23          		 INC HL         ; next BCD-byte	; next BCD-byte
420)   146B 10 F5       		 DJNZ B2DEXP        ; and go on to convert each BCD-byte into 2 ASCII	; and go on to convert each BCD-byte into 2 ASCII
421)   146D ED 42       		 SBC HL, BC        ; return with HL pointing to 1st decimal	; return with HL pointing to 1st decimal
422)   146F C9          		 RET	;
426)   1470 EB          		 ex de, hl        ; Get destination into DE	; Get destination into DE
427)   1471 21 9B F0    		 ld hl, B2DBUF	;
428)   1474 CD 7B 14    		 call SkipWhitespace	;
429)   1477 ED B0       		 ldir	;
430)   1479 EB          		 ex de, hl        ; Get destination into DE	; Get destination into DE
431)   147A C9          		 ret	;
436)   147B 7E          		 ld a, (hl)	;
437)   147C FE 20       		 cp ' '	;
438)   147E C0          		 ret nz	;
439)   147F 23          		 inc hl	;
440)   1480 18 F9       		 jr SkipWhitespace	;
444)   1482 06 08       		@REVBITS: ld b, 8	;
445)   1484 6F          		 ld l, a	;
447)   1485 CB 15       		 rl l	;
448)   1487 1F          		 rra	;
449)   1488 10 FB       		 djnz REVLOOP	;
450)   148A C9          		 RET	;
460)   148B E5          		 push hl	;
462)   148C 7E          		 ld a, (hl)	;
464)   148D FE 00       		 cp  0	;
465)   148F 28 0E       		 jr z, IsStrDecTrue	;
467)   1491 FE 30       		 cp  '0'	;
468)   1493 38 06       		 jr c, IsStrDecFalse	;
470)   1495 FE 3A       		 cp  '9'+1	;
471)   1497 38 09       		 jr c, IsStrDecContinue	;
472)   1499 FE 39       		 cp  '9'	;
475)   149B F6 01       		 or 1         ; Reset zero flag	; Reset zero flag
476)   149D E1          		 pop hl	;
477)   149E C9          		 ret	;
479)   149F BF          		 cp a         ; Set zero flag	; Set zero flag
480)   14A0 E1          		 pop hl	;
481)   14A1 C9          		 ret	;
483)   14A2 23          		 inc hl	;
484)   14A3 18 E7       		 jr IsStrDec00	;
491)   14A5 E5          		 push hl	;
493)   14A6 7E          		 ld a, (hl)	;
495)   14A7 FE 00       		 cp  0	;
496)   14A9 28 14       		 jr z, IsStrHexTrue	;
498)   14AB FE 30       		 cp  '0'	;
499)   14AD 38 0C       		 jr c, IsStrHexFalse	;
501)   14AF FE 3A       		 cp  '9'+1	;
502)   14B1 38 0F       		 jr c, IsStrHexContinue	;
504)   14B3 FE 30       		 cp  '0'	;
505)   14B5 38 04       		 jr c, IsStrHexFalse	;
507)   14B7 FE 47       		 cp  'F'+1	;
508)   14B9 38 07       		 jr c, IsStrHexContinue	;
511)   14BB F6 01       		 or 1         ; Reset zero flag	; Reset zero flag
512)   14BD E1          		 pop hl	;
513)   14BE C9          		 ret	;
515)   14BF BF          		 cp a         ; Set zero flag	; Set zero flag
516)   14C0 E1          		 pop hl	;
517)   14C1 C9          		 ret	;
519)   14C2 23          		 inc hl	;
520)   14C3 18 E1       		 jr IsStrHex00	;
527)   14C5 AF          		 xor a	;
528)   14C6 CD CB 14    		 call loop	;
529)   14C9 7A          		 ld a, d	;
530)   14CA C9          		 ret	;
532)   14CB 57          		 ld d, a	;
533)   14CC 7E          		 ld a, (hl)	;
534)   14CD 23          		 inc hl	;
535)   14CE D6 3A       		 sub '9' + 1	;
536)   14D0 C6 0A       		 add 10	;
537)   14D2 D0          		 ret nc	;
538)   14D3 5F          		 ld e, a	;
539)   14D4 7A          		 ld a, d	;
540)   14D5 87          		 add a, a        ;double our accumulator	;double our accumulator
541)   14D6 87          		 add a, a        ;double again (now x4)	;double again (now x4)
542)   14D7 82          		 add a, d        ;add the original (now x5)	;add the original (now x5)
543)   14D8 87          		 add a, a        ;double again (now x10)	;double again (now x10)
544)   14D9 83          		 add a, e        ;add in the incoming digit	;add in the incoming digit
545)   14DA 18 EF       		 jr loop	;
553)   14DC 7E          		 ld a, (hl)        ; Copy first char to A	; Copy first char to A
554)   14DD CD ED 14    		 call Hex12        ; Convert first char	; Convert first char
555)   14E0 87          		 add a, a        ; Multiply by 16...	; Multiply by 16...
556)   14E1 87          		 add a, a        ; ...	; ...
557)   14E2 87          		 add a, a        ; ...	; ...
558)   14E3 87          		 add a, a        ; ...done!	; ...done!
559)   14E4 57          		 ld d, a        ; Store top 4 bits in D	; Store top 4 bits in D
560)   14E5 23          		 inc hl         ; Advance to next char	; Advance to next char
561)   14E6 7E          		 ld a, (hl)	;
562)   14E7 CD ED 14    		 call Hex12        ; Convert second char	; Convert second char
563)   14EA B2          		 or d         ; Add back top bits	; Add back top bits
564)   14EB 23          		 inc hl         ; Advance for next guy	; Advance for next guy
565)   14EC C9          		 ret	;
566)   14ED D6 30       		Hex12: sub  '0'	;
567)   14EF FE 0A       		 cp 10	;
568)   14F1 D8          		 ret c	;
569)   14F2 D6 07       		 sub 'A' - '0' - 10	;
570)   14F4 C9          		 ret	;
577)   14F5 CD DC 14    		 call Read8bit	;
578)   14F8 47          		 ld b, a	;
579)   14F9 CD DC 14    		 call Read8bit	;
580)   14FC 4F          		 ld c, a	;
581)   14FD C9          		 ret	;
589)   14FE 7E          		 ld a, (hl)	;
590)   14FF 23          		 inc hl	;
591)   1500 D6 30       		 sub '0'	;
592)   1502 CB 27       		 sla a	;
593)   1504 CB 27       		 sla a	;
594)   1506 CB 27       		 sla a	;
595)   1508 CB 27       		 sla a	;
596)   150A 47          		 ld b, a	;
597)   150B 7E          		 ld a, (hl)	;
598)   150C 23          		 inc hl	;
599)   150D D6 30       		 sub '0'	;
600)   150F B0          		 or b	;
601)   1510 C9          		 ret	;
606)   1511 4F          		 ld c, a        ; a = number to convert	; a = number to convert
607)   1512 CD 1E 15    		 call Num1	;
608)   1515 77          		 ld (hl), a	;
609)   1516 23          		 inc hl	;
610)   1517 79          		 ld a, c	;
611)   1518 CD 22 15    		 call Num2	;
612)   151B 77          		 ld (hl), a	;
613)   151C 23          		 inc hl	;
614)   151D C9          		 ret	;
615)   151E 1F          		Num1: rra	;
616)   151F 1F          		 rra	;
617)   1520 1F          		 rra	;
618)   1521 1F          		 rra	;
619)   1522 F6 F0       		Num2: or $F0	;
620)   1524 27          		 daa	;
621)   1525 C6 A0       		 add a, $A0	;
622)   1527 CE 40       		 adc a, $40        ; Ascii hex at this point (0 to F)	; Ascii hex at this point (0 to F)
623)   1529 C9          		 ret	;
634)   152A 22 B0 F0    		STR_SET: LD (LINESTR),HL	;
635)   152D C9          		 RET	;
638)   152E AF          		STR_CLR: XOR A	;
639)   152F 32 B2 F0    		 LD (LINEPOS),A	;
640)   1532 32 B0 F0    		 LD (LINESTR),A	;
641)   1535 32 B1 F0    		 LD (LINESTR+1),A	;
642)   1538 C9          		 RET	;
645)   1539 3A B0 F0    		STR_VALID: LD A,(LINESTR)	;
646)   153C 47          		 LD B,A	;
647)   153D 3A B1 F0    		 LD A,(LINESTR+1)	;
648)   1540 80          		 ADD B	;
649)   1541 B7          		 OR A	;
650)   1542 C9          		 RET	;
656)   1543 F5          		STR_CALCADDR: PUSH AF	;
657)   1544 ED 5B B0 F0 		 LD DE,(LINESTR)	;
658)   1548 EB          		 EX DE,HL	;
659)   1549 3A B2 F0    		 LD A,(LINEPOS)	;
660)   154C 4F          		 LD C,A	;
661)   154D 06 00       		 LD B,0	;
662)   154F 09          		 ADD HL,BC	;
663)   1550 EB          		 EX DE,HL	;
664)   1551 F1          		 POP AF	;
665)   1552 C9          		 RET	;
669)   1553 3A B2 F0    		STR_NEXTPOS: LD A,(LINEPOS)	;
670)   1556 3C          		 INC A	;
671)   1557 32 B2 F0    		 LD (LINEPOS),A	;
672)   155A C9          		 RET	;
676)   155B CD 43 15    		STR_ADD: CALL STR_CALCADDR	;
677)   155E CD 53 15    		STRA_AGN: CALL STR_NEXTPOS	;
678)   1561 7E          		 LD A,(HL)	;
679)   1562 12          		 LD (DE),A	;
680)   1563 23          		 INC HL	;
681)   1564 13          		 INC DE	;
682)   1565 B7          		 OR A	;
683)   1566 C8          		 RET Z	;
684)   1567 18 F5       		 JR STRA_AGN	;
687)   1569 CD 43 15    		STR_ADDCHAR: CALL STR_CALCADDR	;
688)   156C 12          		 LD (DE),A	;
689)   156D CD 53 15    		 CALL STR_NEXTPOS	;
690)   1570 13          		 INC DE	;
691)   1571 AF          		 XOR A	;
692)   1572 12          		 LD (DE),A	;
693)   1573 C9          		 RET	;
701)   1574 26 00       		@PRINTNUM: LD H,0	;
702)   1576 6F          		 LD L,A	;
703)   1577 F5          		@PRINTNUM16: PUSH AF	;
705)   1578 11 B4 F0    		 LD DE,NUMBUF	;
706)   157B CD BD 13    		 CALL Bcd2ASC  ;FOR HEX	;FOR HEX
707)   157E 3E 68       		 LD A,'h'	;
708)   1580 12          		 LD (DE),A  	;
709)   1581 13          		 INC DE	;
710)   1582 AF          		 XOR A	;
711)   1583 12          		 LD (DE),A  	;
713)   1584 21 B4 F0    		 LD HL,NUMBUF	;
714)   1587 CD B8 05    		 CALL RS_TXT	;
715)   158A CD 18 06    		 CALL RS_NEWLINE	;
716)   158D F1          		 POP AF	;
717)   158E C9          		 RET	;
725)   158F E5          		@NUM_ADDZERO: PUSH HL	;
726)   1590 0E 00       		 LD C,0	;
727)   1592 7E          		AZ_AGN: LD A,(HL)   	;
728)   1593 23          		 INC HL	;
729)   1594 0C          		 INC C	;
730)   1595 FE 00       		 CP 0	;
731)   1597 20 F9       		 JR NZ,AZ_AGN	;
732)   1599 0D          		 DEC C ;EXCLUDE ZERO TERM	;EXCLUDE ZERO TERM
733)   159A E1          		 POP HL	;
734)   159B 79          		 LD A,C	;
735)   159C B8          		 CP B	;
736)   159D C8          		 RET Z	;
738)   159E 78          		 LD A,B	;
739)   159F 91          		 SUB C	;
740)   15A0 D8          		 RET C ;RETURN IF CARRY MEANS WE HAVE MORE DIGITS	;RETURN IF CARRY MEANS WE HAVE MORE DIGITS
741)   15A1 47          		 LD B,A	;
742)   15A2 3E 30       		 LD A,'0'	;
743)   15A4 2B          		AZ_AGN2: DEC HL	;
744)   15A5 77          		 LD (HL),A	;
745)   15A6 10 FC       		 DJNZ AZ_AGN2 	;
746)   15A8 C9          		 RET	;
752)   15A9 11 60 F0    		@COPYFNAME: LD DE,STRGBUFF	;
753)   15AC 7E          		@COPYSTRING:   LD A,(HL)	;
754)   15AD 12          		 LD (DE),A	;
755)   15AE FE 00       		 CP 0	;
756)   15B0 C8          		 RET Z  	;
757)   15B1 13          		 INC DE	;
758)   15B2 23          		 INC HL	;
759)   15B3 18 F7       		 JR COPYSTRING	;
  7)   15B5 16 00       		   ld d,0	;
  8)   15B7 6A          		   ld l,d	;
  9)   15B8 06 08       		   ld b,8	;
 11)   15BA 29          		   add hl,hl	;
 12)   15BB 30 01       		   jr nc,Mult8_NoAdd	;
 13)   15BD 19          		   add hl,de	;
 15)   15BE 10 FA       		   djnz Mult8_Loop	;
 16)   15C0 C9          		   ret	;
 23)   15C1 2E 00       		   ld l,0	;
 24)   15C3 06 08       		   ld b,8	;
 26)   15C5 29          		   add hl,hl	;
 27)   15C6 87          		   add a,a	;
 28)   15C7 30 01       		   jr nc,Mult12_NoAdd	;
 29)   15C9 19          		   add hl,de	;
 31)   15CA 10 F9       		   djnz Mult12_Loop	;
 32)   15CC C9          		   ret	;
 39)   15CD 21 00 00    		@Mult16: ld hl, 0	;
 40)   15D0 78          		 ld a, b	;
 41)   15D1 06 10       		 ld b, 16	;
 43)   15D3 29          		 add hl, hl	;
 44)   15D4 CB 21       		 sla c	;
 45)   15D6 17          		 rla	;
 46)   15D7 30 01       		 jr nc, Mult16_NoAdd	;
 47)   15D9 19          		 add hl, de	;
 49)   15DA 10 F7       		 djnz Mult16_Loop	;
 50)   15DC C9          		 ret	;
 56)   15DD D5          		@Mult32: PUSH DE	;
 57)   15DE 79          		 ld a, c	;
 58)   15DF 48          		 ld c, b	;
 59)   15E0 21 00 00    		 ld hl, 0	;
 60)   15E3 06 10       		 ld b, 16	;
 62)   15E5 29          		 add hl, hl	;
 63)   15E6 17          		 rla	;
 64)   15E7 CB 11       		 rl c	;
 65)   15E9 30 07       		 jr nc, Mult32_NoAdd	;
 66)   15EB 19          		 add hl, de	;
 67)   15EC CE 00       		 adc a, 0	;
 68)   15EE D2 F2 15    		 jp nc, Mult32_NoAdd	;
 69)   15F1 0C          		 inc c	;
 71)   15F2 10 F1       		 djnz Mult32_Loop	;
 72)   15F4 41          		 ld b, c	;
 73)   15F5 4F          		 ld c, a	;
 74)   15F6 D1          		 POP DE	;
 75)   15F7 C9          		 ret	;
 83)   15F8 AF          		   xor a	;
 84)   15F9 06 08       		   ld b,8	;
 86)   15FB CB 13       		   rl e	;
 87)   15FD 17          		   rla	;
 88)   15FE 91          		   sub c	;
 89)   15FF 30 01       		   jr nc,Div8_NoAdd	;
 90)   1601 81          		   add a,c	;
 92)   1602 10 F7       		   djnz Div8_Loop	;
 93)   1604 47          		   ld b,a	;
 94)   1605 7B          		   ld a,e	;
 95)   1606 17          		   rla	;
 96)   1607 2F          		   cpl	;
 97)   1608 C9          		   ret	;
103)   1609 AF          		  xor a	;
104)   160A 06 08       		  ld b, 8	;
107)   160C CB 22       		  sla d	;
108)   160E 17          		  rla	;
109)   160F BB          		  cp e	;
110)   1610 38 02       		  jr c, $+4	;
111)   1612 93          		  sub e	;
112)   1613 14          		  inc d	;
114)   1614 10 F6       		  djnz DIV8_8_loop	;
116)   1616 C9          		  ret	;
122)   1617 AF          		  xor a	;
123)   1618 06 10       		  ld b, 16	;
126)   161A 29          		  add hl, hl	;
127)   161B 17          		  rla	;
128)   161C 38 03       		  jr c, $+5	;
129)   161E B9          		  cp c	;
130)   161F 38 02       		  jr c, $+4	;
132)   1621 91          		  sub c	;
133)   1622 2C          		  inc l	;
135)   1623 10 F5       		  djnz DIV16_8_loop	;
137)   1625 C9          		  ret	;
145)   1626 21 00 00    		   ld hl,0	;
146)   1629 78          		   ld a,b	;
147)   162A 06 08       		   ld b,8	;
149)   162C 17          		   rla	;
150)   162D ED 6A       		   adc hl,hl	;
151)   162F ED 52       		   sbc hl,de	;
152)   1631 30 01       		   jr nc,Div16_NoAdd1	;
153)   1633 19          		   add hl,de	;
155)   1634 10 F6       		   djnz Div16_Loop1	;
156)   1636 17          		   rla	;
157)   1637 2F          		   cpl	;
158)   1638 47          		   ld b,a	;
159)   1639 79          		   ld a,c	;
160)   163A 48          		   ld c,b	;
161)   163B 06 08       		   ld b,8	;
163)   163D 17          		   rla	;
164)   163E ED 6A       		   adc hl,hl	;
165)   1640 ED 52       		   sbc hl,de	;
166)   1642 30 01       		   jr nc,Div16_NoAdd2	;
167)   1644 19          		   add hl,de	;
169)   1645 10 F6       		   djnz Div16_Loop2	;
170)   1647 17          		   rla	;
171)   1648 2F          		   cpl	;
172)   1649 41          		   ld b,c	;
173)   164A 4F          		   ld c,a	;
174)   164B C9          		   ret  	;
181)   164C 19          		 ADD HL, DE        ; 16-BIT ADD OF HL AND DE	; 16-BIT ADD OF HL AND DE
182)   164D D9          		 EXX	;
183)   164E ED 5A       		 ADC HL, DE        ; 16-BIT ADD OF HL AND DE WITH CARRY	; 16-BIT ADD OF HL AND DE WITH CARRY
184)   1650 D9          		 EXX	;
187)   1651 C9          		 RET	;
197)   1652 11 40 00    		 ld de, $0040	;
198)   1655 7D          		 ld a, l	;
199)   1656 6C          		 ld l, h	;
200)   1657 62          		 ld h, d	;
201)   1658 B7          		 or a	;
202)   1659 06 08       		 ld b, 8	;
204)   165B ED 52       		 sbc hl, de	;
205)   165D 30 01       		 jr nc, Sqr16_Skip	;
206)   165F 19          		 add hl, de	;
208)   1660 3F          		 ccf	;
209)   1661 CB 12       		 rl d	;
210)   1663 87          		 add a, a	;
211)   1664 ED 6A       		 adc hl, hl	;
212)   1666 87          		 add a, a	;
213)   1667 ED 6A       		 adc hl, hl	;
214)   1669 10 F0       		 djnz Sqr16_Loop	;
215)   166B C9          		 ret	;
235)   166C 3A B3 F0    		 ld a, (RNDseed)	;
236)   166F 47          		 ld b, a 	;
238)   1670 0F          		 rrca ; multiply by 32	; multiply by 32
239)   1671 0F          		 rrca	;
240)   1672 0F          		 rrca	;
241)   1673 EE 1F       		 xor 0x1f	;
243)   1675 80          		 add a, b	;
244)   1676 DE FF       		 sbc a, 255 ; carry	; carry
246)   1678 32 B3 F0    		 ld (RNDseed), a	;
247)   167B C9          		 ret	;
