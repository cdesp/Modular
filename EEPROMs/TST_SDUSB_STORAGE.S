;CH376S USB & SDCARD STORAGE

INCLUDE MYOS_2_0000.SYM

ORG $C000

JP PROGRAM

INCLUDE ATL_CH376S.Z80



ADDZERO EQU NUM_ADDZERO


OS_PRINTMSG:	;TEMP UNTIL ROM COMPILE
;PRINTS A ZT MESSSAGE FOLLOWING THE CALL
;PRESERVES ALL REGS DESTROYS ALTERNATIVES
RS_MESG:	EXX		
		POP HL
		CALL RS_TXT
		PUSH HL
		EXX
		RET	

CH376_ERROR EQU RS_MESG

PRINTNEWLINE:  	LD A,10
		CALL RS_TX
		LD A,13
		CALL RS_TX
		RET

;PRESERVES A
;DESTROYS HL,DE
PRINTNUM:	LD H,0
		LD L,A
PRINTNUM16:	PUSH AF
		
		LD DE,NUMBUF
		CALL Bcd2ASC		;FOR HEX
		LD A,'h'
		LD (DE),A		
		INC DE
		XOR A
		LD (DE),A		
		;CALL OUTASC		;FOR DECIMAL OUTPUT
		LD HL,NUMBUF
		CALL RS_TXT
		CALL PRINTNEWLINE
		POP AF
		RET




FILENAME	DEFM "*.*"
		DB 0,0



;-----------------------
INCLUDE ATL_UTILS.Z80
INCLUDE ATL_STORAGE_NEW.Z80

PROGRAM:	CALL STRG_INIT			;INITIALIZE USB DEV CH376S
		JR Z, STINIOK
		CALL RS_MESG
		DEFM "ERROR INITILIZING CH376S"
		DB 0
		JP MENU
STINIOK:	CALL PRINTNUM
		CALL RS_MESG
		DEFM " VERSION"
		DB 10,13,0
		
		LD A,6				;USB DRIVE
		CALL STRG_OPENCRD		;MOUNT THE DRIVE
		JR Z, STOPNOK
		CALL RS_MESG
		DEFM "ERROR MOUNTING THE DRIVE"
		DB 10,13,0
		JP MENU
STOPNOK:	CALL STRG_PRDRVINFO		;PRINT DRIVE INFO
LOOPMENU:	CALL RS_MESG
		DB 10,13
		DEFM "L:LOADFILE, P:PRINT FROM MEM, M:MENU"
		DB 0

		CALL RS_RX
		CP 'L'				;LOAD THE FILE TO MEM
		CALL Z,TESTTEXTFILE
		CP 'P'
		CALL Z,PRINTMEM
		CP 'M'
		JP Z,MENU
		CP '0'
		CALL Z, PROGRAM2
		CP '1'
		CALL Z,LOADGRPHLO
		CP '2'
		CALL Z,LOADGRPHHI
		JR LOOPMENU


DIRNM:		DEFM "\DIR1"  ;181 BYTES
		DEFB 0

FILENM:		DEFM "\TEST1.TXT"  ;181 BYTES
		DEFB 0

GRNM1:		DEFM "\ATLAS2.IMG"  
		DEFB 0

GRNM2:		DEFM "\ATLAS3.IMG"  
		DEFB 0


LOADGRPHLO:	CALL VGA_SETLOWGR
		LD HL,GRNM1
		CALL TESTGRAPHFILE
		CALL RS_RX
		CALL VGA_SETHITX
		RET

LOADGRPHHI:	CALL VGA_SETHIGR
		LD HL,GRNM2
		CALL TESTGRAPHFILE
		CALL RS_RX
		CALL VGA_SETHITX
		RET

TESTGRAPHFILE:	;BRING IN THE GRAPH PAGES TO SLOT 2-5		
		PUSH HL
		LD A,8
		LD B,2
		CALL PUTPGINBANK
		LD A,9
		LD B,3
		CALL PUTPGINBANK
		LD A,10
		LD B,4
		CALL PUTPGINBANK
		LD A,11
		LD B,5
		CALL PUTPGINBANK
		POP HL		;FILENAME
		LD BC,32000
		LD DE,$4000
		CALL LOADFILE
		RET

TESTTEXTFILE:	LD HL,FILENM
		LD BC,4000
		LD DE,FILEBUFFER
		CALL LOADFILE
		LD (FILEBTCNT),BC
		RET

LOADFILE:	PUSH DE
		PUSH BC
		PUSH HL		
		CALL RS_MESG
		DEFM "OPEN FILE"
		DB 10,13,0
		POP HL
		CALL COPYFNAME
		CALL STRG_OPNFILE		
		JR NZ, FOPENERR
		CALL RS_MESG
		DB 10,13
		DEFM "FILE OPEN OK"
		DB 10,13,0
		;LD BC,4000
		POP BC		;BYTECOUNT
		POP DE		;DEST BUFFER
		CALL STRG_BLKREAD
		JR Z, FREADOK
		CALL PRINTNUM
		CALL RS_MESG
		DEFM " ERROR READING FILE"
		DB 10,13,0
FREADOK:	PUSH BC
		CALL B2D16
		LD HL,B2DBUF
		CALL SKIPSPC
		CALL RS_TXT
		CALL RS_MESG
		DEFM " BYTES READ"
		DB 10,13,0
		CALL STRG_CLSFILE
		POP BC			;BYTES LOADED TO BUFFER
		RET
FOPENERR:	POP BC
		POP DE
		CALL PRINTNUM
		CALL RS_MESG
		DEFM "-->ERROR OPENING FILE"
		DB 10,13,0
		LD HL,STRGBUFF
		CALL RS_TXT
		CALL PRINTNEWLINE
		RET





;PRINTS TO SCREEN FROM A MEMORY LOCATION
;HL THE BUFFER TO PRINT
;BC THE BYTES TO PRINT
PRINTFROMMEM:	LD A,(HL)
		PUSH HL
		PUSH BC
		CALL OS_PRINTCHAR
		POP BC
		POP HL
		INC HL
		DEC BC
		LD A,B
		OR C
		JR NZ,PRINTFROMMEM
		RET		

PRINTMEM:	CALL OS_CLRSCR
		LD A,13
		CALL OS_PRINTCHAR
		LD HL,FILEBUFFER
		LD BC,(FILEBTCNT)
		CALL PRINTFROMMEM
		RET


PROGRAM2:
		CALL RS_MESG
		DEFM "INIT DEVICE"
		DB 10,13,0
		CALL CH376_INIT
		JR Z,SKIP
		CALL RS_MESG
		DEFM "DEVICE NOT EXISTANT!!!"
		DB 10,13,0	                
		JP MENU
SKIP:		CALL RS_MESG
		DEFM "DEVICE PRESENT"
		DB 10,13,0
		CALL RS_MESG
		DEFM "CH376 VERSION:"
		DB 0	
		CALL CH376_VERSION
		CALL PRINTNUM
		CALL PRINTNEWLINE
             						
		
;USB DISK CONN
		;CALL RS_MESG
		;DEFM "SET USB"
		;DB 10,13,0	
		;LD A,6		
		;CALL CH376_SETUSB
		;PUSH AF
		;CALL PRINTNUM
		;POP AF
		;JP NZ,MENU
		

		CALL RS_MESG
		DEFM "MOUNT USB STICK"
		DB 10,13,0			
		LD A,6			;USB STICK 3-SDCARD
		CALL CH376_MOUNT
		;PUSH AF
		;CALL PRINTNUM
		;POP AF
		JP NZ,MENU
		CALL RS_MESG
		DEFM "...USB MOUNT OK"
		DB 10,13,0

		CALL PRINTNEWLINE
;DRIVE INFO
		CALL RS_MESG
		DEFM "USB DISK INFO"
		DB 10,13,0
		LD A,CMD_RDUSB_DATA0
		CALL CH376_COMMD
		CALL CH376_GETDATA
		;PUSH AF
		;CALL RS_MESG
		;DEFM "BYTES TO READ:"
		;DB 0
		;POP AF		
		;CALL PRINTNUM
		PUSH AF
		SUB 8		
		LD B,A
		POP AF
		LD HL,USBBUF+8		;SKIP 8 BYTES
DI_NXT:		LD A,(HL)
		CALL RS_TX
		INC HL
		;PUSH HL
		;CALL PRINTNUM
		;POP HL
		DJNZ DI_NXT		
		CALL PRINTNEWLINE
			                		

;FREESPACE
		CALL RS_MESG
		DEFM "DRIVE INFO"
		DB 10,13,0			
		LD A,CMD_DISK_QUERY  
		CALL CH376_COMMD
		CALL CH376_WTCMDEND
		JP NZ,MENU
		LD A,CMD_RDUSB_DATA0
		CALL CH376_COMMD		
		CALL CH376_GETDATA
		

		LD IX,USBBUF	
					;DE:HL RES ON B2DBUF
		LD D,(IX+3)
		LD E,(IX+2)
		LD H,(IX+1)
		LD L,(IX+0)
		CALL B2D32
		LD HL,B2DBUF
		CALL SKIPSPC
		CALL RS_TXT
		CALL RS_MESG
		DEFM " SECTORS"
		DB 0
		CALL PRINTNEWLINE


		LD IX,USBBUF
					;DE:HL RES ON B2DBUF
		LD D,(IX+7)
		LD E,(IX+6)
		LD H,(IX+5)
		LD L,(IX+4)		
		CALL B2D32
		LD HL,B2DBUF
		CALL SKIPSPC
		CALL RS_TXT
		CALL RS_MESG
		DEFM " SECTORS FREE   "
		DB 0
		CALL PRINTNEWLINE	

		LD IX,USBBUF
FILESYSTEM:	LD A,(IX+8)		;1-FAT12,2-FAT16,3-FAT32
		DEC A
		JR NZ,FSTP_NXT1
		;1-FAT12		
		CALL RS_MESG
		DEFM "FAT-12"
		DB 0
		JR FSTP_NXT4
FSTP_NXT1:	DEC A
		JR NZ,FSTP_NXT2
		CALL RS_MESG
		DEFM "FAT-16"
		DB 0
		JR FSTP_NXT4
FSTP_NXT2:	DEC A
		JR NZ,FSTP_NXT3
		CALL RS_MESG
		DEFM "FAT-32"
		DB 0
		JR FSTP_NXT4
FSTP_NXT3:	CALL RS_MESG
		DEFM "UNKNOWN FS"
		DB 0
		LD A,(IX+9)
		CALL PRINTNUM
FSTP_NXT4:	CALL PRINTNEWLINE

;DIRECTORY LIST 
		CALL PRINTNEWLINE
		CALL RS_MESG
		DEFM "DIRECTORY LISTING   "
		DB 10,13,0

		LD HL,FILENAME
		LD DE,USBBUF
		CALL COPYFNAME		;COPY FNAME TO USBBUF
		LD A,CMD_SETFILENAME
		CALL CH376_COMMD
		LD HL,USBBUF
DL_NXT:		LD A,(HL)		;TRANSFER FILENAME
		INC HL
		CALL CH376_DATAWR	
		CP 0
		JR NZ,DL_NXT
		LD A,CMD_FILE_OPEN	;OPEN FILE/DIR
		CALL CH376_COMMD
		JP NZ, DISKERROR
		CALL CH376_WTCMDEND
DL_NXT2:	LD A,CMD_RDUSB_DATA0
		CALL CH376_COMMD
		CALL CH376_GETDATA
		CALL PRNDIRENTRY
		CALL PRINTNEWLINE
		LD A,CMD_FILEENUM_GO
		CALL CH376_COMMD
		CALL CH376_WTCMDEND
		CP USB_INT_DISK_READ
		JR Z,DL_NXT2
		CP ERR_MISS_FILE		;NO MORE ENTRIES
		JP NZ, DISKERROR
		

		CALL RS_MESG
		DEFM "DIR CMD OK"
		DB 10,13,0
		

		JP MENU	

;PRINTS USBBUFFER
;B THE NO OF BYTES TO PRINT
PRNUSBBUF:	PUSH HL
		PUSH AF
		LD HL,USBBUF
PUB_AGN:	LD A,(HL)
		PUSH HL
		CALL PRINTNUM
		POP HL
		INC HL
		DJNZ PUB_AGN
		POP AF
		POP HL
		RET

;RPINTS TEXT
;HL THE MESSAGE ADDRESS
;B THE NUMBER OF BYTES TO PRINT
PRNTX:		LD A,(HL)
		CALL RS_TX
		INC HL
		DJNZ PRNTX
		RET


;_FAT_DIR_INFO
;   UINT8	DIR_Name[11];					/* 00H
;   UINT8	DIR_Attr;					/* 0BH
;   UINT8	DIR_NTRes;					/* 0CH */
;   UINT8	DIR_CrtTimeTenth;				/* 0DH
;   UINT16	DIR_CrtTime;					/* 0EH
;   UINT16	DIR_CrtDate;					/* 10H
;   UINT16	DIR_LstAccDate;					/* 12H
;   UINT16	DIR_FstClusHI;					/* 14H 
;   UINT16	DIR_WrtTime;					/* 16H MAKE_FILE_TIME */
;   UINT16	DIR_WrtDate;					/* 18H MAKE_FILE_DATE */
;   UINT16	DIR_FstClusLO;					/* 1AH
;   UINT32	DIR_FileSize;					/* 1CH

;ENCODE TO 16BIT MAKE_FILE
; /* Time = (Hour<<11) + (Minute<<5) + (Second>>1) */
; /* Date = ((Year-1980)<<9) + (Month<<5) + Day */

;ATTR
;#define ATTR_READ_ONLY			0x01		
;#define ATTR_HIDDEN				0x02	
;#define ATTR_SYSTEM				0x04	
;#define ATTR_VOLUME_ID			0x08		
;#define ATTR_DIRECTORY			0x10		
;#define ATTR_ARCHIVE			0x20		
;#define ATTR_LONG_NAME			( ATTR_READ_ONLY | ATTR_HIDDEN | ATTR_SYSTEM | ATTR_VOLUME_ID )	
;#define ATTR_LONG_NAME_MASK		( ATTR_LONG_NAME | ATTR_DIRECTORY | ATTR_ARCHIVE )





;DECODES THE TIME FROM 16 BIT BACK TO HOUR MIN SEC
;DE THE 16BIT VALUE TO DECODE
;PRESERVES HL
DECODETIME:	PUSH HL
		PUSH DE
		LD A,D			;HOUR DECODE
		SRL A
		SRL A
		SRL A		
		CALL B2D8
		LD B,2
		CALL ADDZERO
		POP DE
		CALL RS_TXT		
		LD A,':'
		CALL RS_TX
		PUSH DE
		LD A,D
		AND 00000111B
		SLA A
		SLA A
		SLA A
		LD H,A			;SAVE A
		LD A,E
		AND 11100000B
		SRL A
		SRL A
		SRL A
		SRL A
		SRL A
		OR H			;MIX A AND H
		CALL B2D8
		LD B,2
		CALL ADDZERO
		POP DE
		CALL RS_TXT		
		LD A,':'
		CALL RS_TX
		LD A,E
		AND 00011111B
		CALL B2D8
		LD B,2
		CALL ADDZERO
		CALL RS_TXT				
		POP HL
		RET



;DECODES THE DATE FROM 16 BIT BACK TO DAY,MONTH,YEAR
;DE THE 16BIT VALUE TO DECODE
;PRESERVES HL
DECODEDATE:	PUSH HL
		PUSH DE
		LD A,E			;DAY DECODE
		AND 00011111B		;KEEP DAY INFO
		CALL B2D8
		LD B,2
		CALL ADDZERO
		CALL RS_TXT		
		LD A,'/'
		CALL RS_TX
		POP DE
		PUSH DE
		LD A,D			;MONTH DECODE
		RRA			;BIT 0 TO CARRY
		LD A,E
		RRA			;CARRY TO BIT 7
		SRL A
		SRL A
		SRL A
		SRL A			;SHIFT DOWN 4 BITS PUTTING 0 ON HI BITS
		CALL B2D8
		LD B,2
		CALL ADDZERO
		CALL RS_TXT					
		LD A,'/'
		CALL RS_TX
		POP DE
		LD A,D			;YEAR DECODE
		AND 11111110B		;KEEP ONLY YEAR INFO
		SRL A		
		LD HL,1980
		LD B,0
		LD C,A
		ADD HL,BC
		CALL B2D16
		CALL RS_TXT
		POP HL
		RET



;PRINTS THE DIR ENTRY FROM USBBUF
;32 BYTES
PRNDIRENTRY:	CALL RS_MESG
		DEFM "FILENAME:"
		DB 0
		LD HL,USBBUF
		LD B,8		;FILENAME
		CALL PRNTX
		LD A,'.'
		CALL RS_TX
		LD B,3		;EXTENSION
		CALL PRNTX
		CALL PRINTNEWLINE
		CALL RS_MESG
		DEFM "ATTRIBUTE:"
		DB 0
		LD A,(HL)	;ATTR
		CALL PRINTNUM
		;INC HL		;SKIP NTRES
		;INC HL		;SKIP CTRTIMETENTH
		;INC HL		;SKIP CTRTIME
		;INC HL
		;INC HL		;SKIP CTRDATE
		;INC HL
		LD HL,USBBUF+012H
		CALL RS_MESG
		DEFM "LAST ACCESS:"
		DB 0
		LD A,(HL)
		LD E,A
		INC HL
		LD A,(HL)
		LD D,A		;DE THE LAST ACCESS DATE
		CALL DECODEDATE
		CALL PRINTNEWLINE
		LD HL,USBBUF+018H
		CALL RS_MESG
		DEFM "CREATE DATE:"
		DB 0
		LD A,(HL)
		LD E,A
		INC HL
		LD A,(HL)
		LD D,A		;DE THE CREATION DATE
		CALL DECODEDATE
		CALL PRINTNEWLINE
		LD HL,USBBUF+016H
		CALL RS_MESG
		DEFM "CREATE TIME:"
		DB 0
		LD A,(HL)
		LD E,A
		INC HL
		LD A,(HL)
		LD D,A		;DE THE CREATION TIME
		CALL DECODETIME
		CALL PRINTNEWLINE
		CALL RS_MESG
		DEFM "SIZE:"
		DB 0
		LD IX,USBBUF+01CH
		LD D,(IX+3)
		LD E,(IX+2)
		LD H,(IX+1)
		LD L,(IX+0)
		CALL B2D32
		LD HL,B2DBUF
		CALL SKIPSPC
		CALL RS_TXT
		CALL RS_MESG
		DEFM " Bytes"
		DB 0
		CALL PRINTNEWLINE						
		RET

;TEMP UNTIL ROM COMPILE
LINESTR:	DEFS 2		;ADDRESS OF LINEBUF FOR PRINTING ON STRING
LINEPOS		DEFS 1


;PROG VARS
@NUMBUF		DEFM "000000" 
		DB 0
@LINEBUF:	DEFS 80		;LINE STRING
@USBBUF:		DEFS 50		;CH376 USB BUFFER
FILEBTCNT	DEFS 2
@FILEBUFFER:	DEFS 5000
