		NAME MAIN
		
		@MJVER EQU '0'
		@MNVER1 EQU '3'
		@MNVER2 EQU '9'
		
		GLOBAL DEVKBI
		GLOBAL DEVINT
		GLOBAL DEVI2C
		GLOBAL DEVSTOR
		GLOBAL DEVTAP
		GLOBAL DEVSER
		GLOBAL DEVINP
		GLOBAL DEVTFT
		GLOBAL DEVFFS
		GLOBAL DEVMMU
		GLOBAL MENU
		GLOBAL KEYCTR
		GLOBAL SOUTAS
		GLOBAL COPSTA
		
		DEVKBI EQU $78							;Y15 PS/2 KEYBOARD 
		DEVI2C EQU $48							;Y9 I2C INTERFACE (DS1307 RTC,LCD 16X2,...)
		DEVINT EQU $40							;Y8 INTERRUPT MODULE

		DEVXX2 EQU $38							;Y7 EMPTY
		DEVSTOR EQU $30							;Y6 STORAGE SDCARD THROUGH ARDUINO NANO
		DEVTAP EQU $28							;Y5 NOT USED --> TAPE SIMULATION (SERIAL PORT)
		DEVSER EQU $20							;Y4 Serial RS232
		DEVINP EQU $18							;Y3 INPUT FROM DEVICES: DEV1=USB KEYB ON BITS 7=DATA & 6=CLOCK,DEV2=INT MODL BITS 0-2
		DEVTFT EQU $10							;Y2 LCD SCREEN TFT wSSD1963
		DEVFFS EQU $08							;Y1 EPROM WR SIGNAL ON/OFF 1/0 BIT 0, USB KEYB ON/OFF ON/OFF 2/0 BIT 1
		DEVMMU EQU $00							;Y0 MMU MEMORY MANAGEMENT UNIT
		
		COPSTA EQU 6							; PS/2 STATUS PORT
		
		@RAMAD EQU 0x4000						;FOR OS		
		@BBCBASIC EQU $4000
		@STACKP EQU 0xFAFF						;0xFFF0  	;100
		KDATA EQU 6							;DATA FLAGS SET TO 1 IF UNTRANSMITTED
		
		
@START:		DI
		JP BOOT 							;SKIP TESTING
;GLOBAL COMMANDS FOR INTERFACING - MAINLY FROM BBC BASIC
@IOS_CLRSCR:	JP OS_CLRSCR
@IOS_RMVCURS: 	JP OS_RMVCURS
@IOS_PRNCURS:	JP OS_PRNCURS
@IOS_CALCLINE:	JP LCD_CALCLINE							;TODO: VGA???
@IOS_PRINTCHAR: JP OS_PRINTCHAR
@IOS_GETCHAR:	JP GET_CHAR
@IOS_GETCHARNW:	JP GET_CHARNW
@IOS_DIRLIST: 	JP STRG_DIRLIST
@IOS_DIRCHG:	JP STRG_DIRCHG
@IOS_OPNFILE: 	JP STRG_OPNFILE
@IOS_TPFILE:	JP STRG_TPFILE
@IOS_CLSFILE:	JP STRG_CLSFILE
@IOS_BLKWRITE:	JP STRG_BLKWRITE
@IOS_BLKREAD:	JP STRG_BLKREAD
@IOS_GETPOS:	JP STRG_GETPOS
@IOS_SETPOS:	JP STRG_SETPOS
@IOS_GETSIZE:	JP STRG_GETSIZE
@IOS_GETEOF:	JP STRG_GETEOF
@IOS_BN2BCD:	JP BN2BCD
@IOS_DSADJUST:	JP DS1307_ADJUST
@IOS_DSGETNOW: 	JP DS1307_GETNOW
@IOS_L16BLOFF: 	JP LCD16_BLINKOFF
@IOS_L16BLON:	JP LCD16_BLINKON
@IOS_L16CLR:	JP LCD16_CLR
@IOS_L16SETCRS:	JP LCD16_SETCURS
@IOS_L16CRSOFF:	JP LCD16_CURSOFF
@IOS_L16CRSON:	JP LCD16_CURSON
@IOS_L16NODISP:	JP LCD16_NODISP
@IOS_L16DISP:	JP LCD16_DISP
@IOS_L16HOME:	JP LCD16_HOME
@IOS_L16MVLEFT:	JP LCD16_MOVLEFT
@IOS_L16MVRGHT:	JP LCD16_MOVRIGHT
@IOS_L16PRINT:	JP LCD16_PRINT
@IOS_L16SCLEFT:	JP LCD16_SCRLEFT
@IOS_L16SCRGHT:	JP LCD16_SCRRIGHT
@IOS_CLRGRAPH:	JP CLEARGRAPH
@IOS_GRDRAWLNE:	JP GR_DRAWLINE
@IOS_GRREADPXL:	JP LCD_READPIXEL		;TODO: CHANGE TO GRAPH READ PIXEL
@IOS_GRCIRCLE:	JP GR_CIRCLE
@IOS_GRFILL:	JP LCD_FILL			;TODO: CHANGE TO GRAPH
@IOS_ADD32:	JP ADD32
@IOS_MULT32:	JP MULT32
@IOS_SQRT32:	JP 0000			;TODO: MAKE ONE



;TESTING
		
;OUT 5 TIMES AT PORT 0 (0 AND 255)
CN1:		LD B, 5
AGN1:		LD C, 0
		LD A, 0
		OUT (C), A
		LD C, 0
		LD A, 255
		OUT (C), A
		DJNZ AGN1
		
		
;TEST RAM
		
		LD DE, 1
		LD A, 0 							;WRITE 0
		LD C, A
		LD HL, RAMAD
		LD B, 8
AGN2:		LD (HL), A
		LD C, (HL)
		CP C
		JP NZ, ERR
		ADD HL, DE
		ADD A, 32							;WRITE +32
		LD C, A
		DJNZ AGN2
		
		LD B, 5
AGN3:		LD C, 00001000B 						;LLH ON 138 Y1 OUT
		LD A, 64
		OUT (C), A
		ADD A, 128
		OUT (C), A
		DJNZ AGN3 							; SIGNAL ALL OK CONTINUOUS 10 TIMES ON PORT 8
		JP BOOT
		
		
ERR:		LD C, 00111000B 						;HHH ON 138 Y7 OUT
		LD A, 64
		OUT (C), A
		
		JP ERR 								;DO AGAIN PORT 1
		
;TESTING END
;=================
;SETS BAUD RATE TO 115200 FOR SERIAL COMMS
SETHISPEED:	LD A, 1 							;12=9600 BPS, 1=115200BPS
		CALL RS_INI 							;RS232 INITIALIZE
		RET

MYMMUBANK:      DB 0,1,10,11,4,5,6,7

;SET PARAMS
;INITIALIZE THE DEVICES
@BOOT:		DI
		IM 1
;WE CAN't CALL UNTIL WE SETUP THE MMU
;WE ONLY HAVE THE EEPROM IN MEMORY
MMUSETUP:   	LD C,DEVMMU
	 	XOR A
		LD B,0.SHL.5
		OUT (C),A
		INC A
		LD B,1.SHL.5
		OUT (C),A		
		;INC A
		LD A,10			;VID MEM RAM
		LD B,2.SHL.5		
		OUT (C),A		
		;INC A
		LD A,11			;VID MEM RAM
		LD B,3.SHL.5		
		OUT (C),A		
		;INC A
		LD A,4
		LD B,4.SHL.5
		OUT (C),A		
		INC A
		LD B,5.SHL.5
		OUT (C),A		
		INC A
		LD B,6.SHL.5
		OUT (C),A		
		INC A
		LD B,7.SHL.5
		OUT (C),A	

;CLEAR ALL FLIP FLOPS FOR THE INTERRUPT MODULE
INTFFPS:	LD A,7
IFFAGN:		OUT (DEVINT), A
		DEC A
		JP NZ, IFFAGN				
;SYSTEM INIT			
		LD SP, STACKP
		LD HL,OSVARS							;ZERO OS VARIABLES
SI_AGN:		XOR A
		LD (HL),A
		INC HL
		LD A,H
		OR L
		JR NZ,SI_AGN							;HL=0000 WHEN OVERFLOW FROM FFFF		

		CALL INITMMU							;PUT PAGES 0..7 IN RAM BANKS 0..7
		LD HL,MYMMUBANK
		LD DE,BANKS
		LD BC,8
		LDIR								;TO RAM PAGE 7 OS VARS

		LD A,36 							;RANDOM SEED
		LD (RNDseed),A

		CALL FF_CLR
		CALL EPROMOFF
		;CALL KEYBDATON
		
;RS232 SERIAL PORT INIT
		LD A, 12 							;12=9600 BPS, 1=115200BPS
		CALL RS_INI 							;RS232 INITIALIZE
		LD HL, STR00
		CALL RS_TXT
		
;I2C INIT
		CALL I2C_INIT 							;INITIALIZE I2C
		CALL DS1307_ADJUST_TEST 					;SET A DEFAULT DATETIME ON DS1307
		CALL LCD16_INIT 						;INITIALIZE 16X2 LCD
		LD HL, SVER
		CALL LCD16_PRINT 						;PRINT VERSION ON 1,1
		
;STORAGE DEVICE INIT (ARDUINO VIA RS232)
		CALL STRG_INIT
		LD HL, STR001
		CALL RS_TXT
		
;LCD16X2 PARALLEL INTERFACE INIT --DISABLED CAUSE WE ARE USING AN I2C DEVICE
;	CALL LCDINI	;LCD 16x2 Initialized
;	LD HL,STR0
;	CALL LCDTXT
		
;LCD TFT 800X480px  INIT
		CALL LCD_INIT
		LD HL, COL_BLACK
		LD (BCOLOR), HL
		LD HL, COL_WHITE
		LD (FCOLOR), HL
		LD HL, STRSCR
		CALL RS_TXT
		CALL LCD_CLRSCR
		XOR A
		LD (SCRLN), A
		LD A, 0
		LD (CURSORX), A
		LD A, 0
		LD (CURSORY), A

;VGA INIT	
		CALL VGA_INIT
		LD HL, TXTMES
		CALL RS_TXT

;PS2KBINT	
		CALL PS2KBINIT

;END DEVICE INITILIZATION		

;COPY INTERRUPT TABLE & ENABLE INTERRUPTS
		CALL COPYINTTAB

;PRINT VERSION
		LD HL,OSVERMES
		CALL OS_PRINTTEXT
		
ALLOK:										;CALL TVON
		
;MAIN MENU FOR THE BOOTLOADER
@MENU:		XOR A
		LD (SCRLN), A
		LD HL, STRMN
		CALL RS_TXT							;OUTPUT MENU COMMANDS AT RS232
		LD HL, STR01
		CALL RS_TXT							;OUTPUT WAITING AT RS232
		
		
;;LD HL,STR02
;CALL LCDTXT
		
		;PRINT ON SCREEN
		LD A, 0
		LD (CURSORX), A
		LD (VGATX_X), A
		LD A, 6
		LD (CURSORY), A
		LD (VGATX_Y), A
		LD HL, SMENU
		CALL OS_PRINTTEXT
		
		CALL GET_CHAR							;TAKE A CHAR FROM RS232 OR PS2 KEYB
;CALL RS_RX	; WAIT FOR A CHAR IN RS232
		
		CP 'U' 								;UPLOAD PROGRAM
		CALL Z, UPLOD
		CP 'X'
		JP Z, EXEC
		CP 'S'
		CALL Z,SETHISPEED
		CP 'T'
		CALL Z, RSTST
		CP 'Y'
		CALL Z, RSTST2
		CP 'H'
		CALL Z, XMTST
		CP 'J'
		CALL Z, DNLOD
		CP 'K'
		CALL Z,OS_COMMAND
		CP 'C'
		CALL Z, OS_CLRSCR
		CP 'B'
		JP Z, GOTOBBCBASIC
		
		JP MENU
		
;BRING BBCBASIC ROM TO PAGE 2 AND 3
;AND JUMP TO BASIC
@GOTOBBCBASIC:	LD B,2
		LD A,2
		CALL PUTPGINBANK
		LD B,3
		LD A,3
		CALL PUTPGINBANK
		JP BBCBASIC
		
;GET KEY PRESSED EITHER THROUGH RS232 OR PS2 KEYBOARD
;DOES NOT WAIT FOR A KEY TO BE PRESSED
;TODO MAKE IT WAIT 10MS FOR PARAM 0
;FIND PARAM WHO HAS HOW MANY 10MS WE WAIT
;PRESERVES DE
;CARRY IS SET TO SIGNAL A USER INPUT
@GET_CHARNW:	PUSH DE
		CALL OS_CHKCURS
		XOR A
;GET CHAR FROM RS232
		CALL RS_KEYRD							;CHAR IN RS232?
		JR Z, CNW_TST2
		CALL RS_RX							; GET THAT CHAR
		CALL CHKFKEYS
		POP DE
		SCF
		RET
;GET CHAR FROM PS2 KEYBOARD
CNW_TST2:	CALL PS2ISK
		JR Z, CNW_EXIT
		CALL READCHAR							;GET THE KEY FROM USB KEYBOARD (HAS A TIMEOUT)		
		CALL CHKFKEYS
		SCF
CNW_EXIT:	POP DE	
		RET

		


;GET KEY PRESSED EITHER THROUGH RS232 OR PS2 KEYBOARD
;WAITS FOR A KEY TO BE PRESSED
@GET_CHAR:	CALL OS_CHKCURS
		XOR A
;GET CHAR FROM RS232
		CALL RS_KEYRD							;CHAR IN RS232?
		JR Z, CW_TST2
		CALL RS_RX							; GET THAT CHAR
		CALL CHKFKEYS
		SCF
		RET
;GET CHAR FROM PS2 KEYBOARD
CW_TST2:	CALL PS2ISK							;GET THE KEY FROM USB KEYBOARD (HAS A TIMEOUT)
		;CP 0 								;IF KEY=0 THEN IT IS INVALID
		JR Z, GET_CHAR
		CALL READCHAR
		CALL CHKFKEYS
		SCF
		RET
		
CHKFKEYS:	CP 165
		CALL Z,DOF5
		CP 166
		CALL Z,DOF6
		CP 167
		CALL Z,DOF7
		CP 168
		CALL Z,DOF8
		RET
;SET LOWRES SCREEN WITH GRAPHICS
DOF5:		JP VGA_SETLOWGR
;SET LOWRES SCREEN WITH TEXT
DOF6:		JP VGA_SETLOWTX
;SET HIRES SCREEN WITH GRAPHICS
DOF7:		JP VGA_SETHIGR
;SET HIRES SCREEN WITH TEXT
DOF8:		JP VGA_SETHITX


;PRINTS A CHAR TO THE OS SCREEN		
;A HAS THE CHAR
@OS_PRINTCHAR:	PUSH AF
		CALL LCD_PRCH
		POP AF
		CALL VGA_PRCH
		RET

;PRINT A MESSAGE TO SCREEN
;HL THE MESSAGE
@OS_MSG:	PUSH HL
		CALL LCD_MSG
		POP HL
		CALL VGA_PRINT
		RET

@OS_PRNCURS:	CALL LCD_PRNCURS
		CALL VGA_PRNCURS
		RET

@OS_RMVCURS:	CALL LCD_RMVCURS
		CALL VGA_RMVCURS
		RET

@OS_CHKCURS:	PUSH AF
		LD A, (TIMECTR)
		BIT 4, A
		JR Z, CCSHOW 							;IF SET SHOW
CCHIDE:		LD A, (CURSSTAT)
		BIT 1, A
		JR NZ, CCEX 							;IF NOT SET ALREADY HIDDEN
		SET 1, A
		LD (CURSSTAT), A
		CALL OS_RMVCURS
		JR CCEX
CCSHOW:		LD A, (CURSSTAT)
		BIT 1, A
		JR Z, CCEX 							;IF SET ALREADY VISIBLE
		RES 1, A
		LD (CURSSTAT), A
		CALL OS_PRNCURS
		
CCEX:		POP AF
		RET


@OS_CLRSCR:	CALL LCD_CLRSCR
		CALL VGA_TXTCLR
		RET

;HL POINTS TO ZERO TERMINATED MSG
@OS_PRINTTEXT:	LD A,(HL)
		CP 0
		RET Z
		PUSH HL
		CALL OS_PRINTCHAR
		POP HL
		INC HL
		JR OS_PRINTTEXT 

;EXECUTE THE RECENTLY TRANSFERED CODE
;ADDRESS TO EXECUTE IN PRGEX RAM ADDRESS
;PROGRAM MUST RETURN WITH JP MENU
EXEC:										;CALL LCDCLS
;CALL LCDLN2
;LD HL,SPRGX
;CALL LCDTXT
;CALL LCDLN1
		
		LD A, 5
		CALL SCPRN
		
		LD HL, (PRGEX)
;LD DE,PRGEX
;LD A,(DE)
;LD L,A
;INC DE
;LD A,(DE)
;LD H,A
		JP (HL)
		
;UPLOAD (SEND TO Z80) BYTES THROUGH RS232
;RECEIVING LOW BYTE FIRST
;HL ADDRESS IN RAM BYTE 1&2
;BC BYTES TO RECEIVE BYTE 3&4
		
UPLOD:		DI
;LD HL,DATST
;CALL LCDLN2
;CALL LCDTXT
		
		CALL RS_RX 							;HL HAS RAM ADDRESS
		LD L, A
		CALL RS_RX
		LD H, A
		CALL RS_RX							;BC HAS TOTAL DATA TO BE SEND
		LD C, A
		CALL RS_RX
		LD B, A
		
		LD (PRGEX), HL
		LD A, (PRGEX + 1)
;LD DE,PRGEX 	;SAVE TO PRGEX THE PROG EXEC ADDR=HL
;LD A,L
;LD (DE),A
;INC DE
;LD A,H
;LD (DE),A
		
		CP $80
		CALL C, EPROMON 						;C ROM IN 0-8000 NC ROM IN 8000-FFFF ;SET ROM WRITABLE = '0'
		
NORWR:		PUSH HL
NXB:		CALL RS_RX
		LD (HL), A
		INC HL
		DEC BC
		LD A, B
		OR C
		JR NZ, NXB							;LOOP ALL BYTES
		CALL EPROMOFF
		
;LD HL,DATTR
;CALL LCDCLS
;CALL LCDTXT
		LD A, 5
		CALL SCPRN
		CALL DELAY
		
		POP HL
;CALL (HL)
		
		EI
		RET
		
;DOWNLOAD (SEND TO PC)BYTES THROUGH	RS232
;RECEIVING LOW BYTE FIRST
;HL RAM ADDRESS BYTE 1&2
;BC BYTE COUNT TO TRANSFER BYTE 3&4
DNLOD:		
;LD HL,DATST
;CALL LCDLN2
;CALL LCDTXT
		
		CALL RS_RX 							;HL HAS RAM ADDRESS
		LD L, A
		CALL RS_RX
		LD H, A
		CALL RS_RX							;BC HAS TOTAL DATA TO BE SEND
		LD C, A
		CALL RS_RX
		LD B, A
		
NXB3:		LD A, (HL)
		CALL RS_TX							;SEND BYTE
		INC HL
		DEC BC
		LD A, B
		OR C
		JR NZ, NXB3							;LOOP ALL BYTES
		RET
		
RSTST:		NOP								;GET A KEY FROM RS232
		LD B, 10
TEN:		PUSH BC
		CALL RS_RX
;CALL LCDCHR  	;THE RECEIVED CHAR
		CALL RS_TX							;SEND BACK THE CHAR
		
		LD A, ' '
;CALL LCDCHR
		LD A, 'R'
;CALL LCDCHR
		
		CALL DEL2
;CALL LCDCLS
		POP BC
		DJNZ TEN
		
		XOR A
		RET
		
RSTST2:		NOP								;TEST RECEIVING AND SENDING 255 BYTES
		LD B, 255
TEN2:		PUSH BC
		CALL RS_RX
;CALL LCDCHR  	;THE RECEIVED CHAR
		CALL RS_TX							;SEND BACK THE CHAR
;CALL DEL2
		POP BC
		DJNZ TEN2
		XOR A
		RET
		
		
XMTST:		NOP								;TEST XMIT ALL 8 BITS
		LD B, 255
TEN3:		PUSH BC
		LD A, B
		CALL RS_TX							;SEND  THE BYTE
		POP BC
		DJNZ TEN3
		XOR A
		RET
		
;-----------------------------------
; FLIP FLOP MANAGEMENT
;-----------------------------------
@FF_CLR:	
		XOR A
		LD (FFSTAT), A
		RET
		
;B HAS THE BIT TO SET OFF =0 ON THE FLIP FLOPS
@FF_OFF:	INC B 								; DO 0-7 TO 1-8
		XOR A
		SCF
SBAGN:		RLA 								; MOVE IT TO THE RIGHT PLACE
		DJNZ SBAGN
		CPL 								;INVERSE BITS ON A
		LD B, A
		LD A, (FFSTAT)
		AND B 								;ZERO THE BIT
		LD (FFSTAT), A
		OUT (DEVFFS), A
		RET
		
;B HAS THE BIT TO SET OFF =0 ON THE FLIP FLOPS
@FF_ON:		INC B 								; DO 0-7 TO 1-8
		XOR A
		SCF
SBAGN:		RLA 								; MOVE IT TO THE RIGHT PLACE
		DJNZ SBAGN
		LD B, A
		LD A, (FFSTAT)
		OR B 								;SET THE BIT
		LD (FFSTAT), A
		OUT (DEVFFS), A
		RET
		
@EPROMOFF:	PUSH BC
		LD B, 0
		CALL FF_OFF
		POP BC
		RET
		
@EPROMON:	PUSH BC
		LD B, 0
		CALL FF_ON
		POP BC
		RET
		
		
		
;SERIAL PRINT ASCII IN DECIMAL
		
SOUTAS:		PUSH AF 							;SERIAL PRINT ASCII IN DECIMAL
		LD H, 0
		LD L, A
		LD DE, MYNUM
		CALL OUTASC
		
		LD A, 10
		LD (DE), A
		INC DE
		LD A, 13
		LD (DE), A
		INC DE
		XOR A
		LD (DE), A
		
		LD HL, MYNUM
		CALL RS_TXT
		POP AF
		RET
		
		
;MESSAGES
		
		
SMENU:		;DEFM "U:UP J:DN X:RUN TYH:RS C:CLS B:BASIC"
		DEFM "U:UP J:DN X:RUN C:CLS B:BASIC K:CMDPRMT"
		DB 0

STRMN:		DB 10,13
		;DEFM "UI:UP J:DN X:RUN TYH:RS S:DISP C:CLS B:BASIC K:CMD PROMPT"
		DEFM "U:UPLOAD J:DOWNLD S:115KBPS X:RUN C:CLS B:BASIC K:CMD PROMPT"
		DB 10,13,0


STR0:		DEFM "LCD INITIALIZED"
		DB 0
		
STR1:		DEFM "RS232 INIT"
		DB 0
		
STR2:		DEFM "PROGRAM HALTED"
		DB 0
		
STR02:		DEFM "WAITING..."
		DB 0
		
DATTR:		DEFM "PRG TRANSFERED"
		DB 0
		
DATST:		DEFM "RECEIVING..."
		DB 0
		
SPRGX:		DEFM "PRG EXECUTE"
		DB 0
		
STIMG:		DEFM "IMAGE COPY"
		DB 0
		
TXTMES:		DEFM "SCREEN READY"
		DB 0
				
STRSCR:		DEFM "CLEARING SCREEN."
		DB 10,13,0
		
STR00:		DB 10,13
		DEFM "RS232 INITIALIZED"
		DB 10,13,0
		
STR01:		DB 10,13
		DEFM "WAITING..."
		DB 10,13,0
		DB 0
		
STR06:		DB 10,13
		DEFM "KEY PRESSED"
		DB 10,13,0
		DB 0
		
STR001:		DB 10,13
		DEFM "STORAGE INITIALIZED"
		DB 10,13,0

SVER:		DEFM "ATLAS OS VER"
		DEFB MJVER
		DEFB 46
		DEFB MNVER1,MNVER2
		DEFB 0

OSVERMES:	DEFM "ATLAS Modular Z80 Computer"
		DEFB 0AH, 0DH
		DEFM "Operating System Version "		
		DEFB MJVER
		DEFB 46
		DEFB MNVER1,MNVER2
		DEFB 0AH, 0DH
		DEFM "CDesp 2020-21"
		DEFB 0AH, 0DH				
		DEFM "RAM: 4000h, TOP: FA00h"
		DEFB 0AH, 0DH
		DEFB 00H


		END
