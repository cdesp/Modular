;*******************************************************************************
; Z80 DS1307 RTC ROUTINES
;
; This module provides routines for communicating with and controlling a DS1307
; Real-Time Clock (RTC) chip via the I2C bus. It includes functions to
; initialize, read, and write date and time information.
;
; The module relies on external I2C routines (I2C_READ, I2C_WRITE) to perform
; the low-level bus communication.
;*******************************************************************************
		NAME DS1307_ROUTINES
		
		GLOBAL DS1307_INIT 						; Initializes the module. Params: None.
		GLOBAL DS1307_ADJUST_TEST 					; Tests setting a default date/time. Params: None.
		GLOBAL DS1307_ADJUST 						; Adjusts the DS1307 time with a buffer. Params: Assumes BUFFER contains the 9 bytes of data.
		GLOBAL DS1307_GETNOW 						; Reads raw time data from the DS1307. Params: None.
		GLOBAL DS1307_SETSQ 						; Configures the square-wave output pin. Params: D = value for the control register.
		GLOBAL DS1307_GETTIME 						; Reads and formats the current time as a string. Params: None.
		GLOBAL DS1307_SETTIME 						; Sets the DS1307 time from a string buffer. Params: Assumes TIMMSG buffer contains the date/time st
		
;=========================
; DS1307
;-------------------------
; Variables and Constants
;
; BUFFER:		A buffer to hold data for I2C communication with the DS1307.
; TIMMSG:		A 20-byte buffer used to store and set the date and time string in
;			the format 'dd/mm/yy w hh:mn:ss', where 'w' is the day of the week (1-7).
; DS1307_ADDRESS:	The 7-bit I2C address of the DS1307, 0x68.
; DS1307_CONTROL_REGISTER: The address of the control register, 0x07.
; DS1307_RAM_REGISTER:	The start address of user RAM, 0x08.
;
; Control Register Bits:
; RTC_DS1307__RS0:	Rate Select 0 bit for square wave output.
; RTC_DS1307__RS1:	Rate Select 1 bit for square wave output.
; RTC_DS1307__SQWE:	Square Wave Enable bit.
; RTC_DS1307__OUT:	Output level control for the SQW pin.
;
; Day of Week Strings:
; SUN, MON, TUE, WED, THU, FRI, SAT: ASCII strings for days of the week.
; DAYS:			A table of pointers to the day of week strings.
;
; Error Messages:
;MESERR:		"RTC ER RV" (Real-Time Clock Error Read/Verify)
;MESERR0:		"RTC ER SD" (Real-Time Clock Error Send Data)
;-------------------------
		
		DS1307_ADDRESS EQU $68 						;0x68 SHL 1 UPPER 7 BITS
		DS1307_CONTROL_REGISTER EQU 0x07
		DS1307_RAM_REGISTER EQU 0x08
; DS1307 Control register bits.
		RTC_DS1307__RS0 EQU 0x00
		RTC_DS1307__RS1 EQU 0x01
		RTC_DS1307__SQWE EQU 0x04
		RTC_DS1307__OUT EQU 0x07
		
		SUN DEFM  "Sunday"
		DB 0
		MON DEFM  "Monday"
		DB 0
		TUE DEFM  "Tuesday"
		DB 0
		WED DEFM  "Wednesday"
		DB 0
		THU DEFM  "Thursday"
		DB 0
		FRI DEFM  "Friday"
		DB 0
		SAT DEFM  "Saturday"
		DB 0
		
		DAYS DEFW SUN
		DEFW MON
		DEFW TUE
		DEFW WED
		DEFW THU
		DEFW FRI
		DEFW SAT
		
		MESERR DEFM "RTC ER RV"
		DEFB 10,13,0
		
		MESERR0 DEFM "RTC ER SD"
		DEFB 10,13,0
		
;-------------------------------------------------------------------------------
; SHERR0: Displays a "send data" error message.
;
; This routine is called when the I2C_WRITE routine returns an error. It prints
; the contents of registers E and C, followed by the "RTC ER SD" message.
;
; Parameters:
;	E: High byte of a value to print.
;	C: Low byte of a value to print.
;
; Returns:
;	None.
;
; Memory Accessed:
;	Console output via SOUTAS and RS_TXT routines.
;-------------------------------------------------------------------------------
SHERR0:		
		LD A, E
		PUSH BC
		CALL SOUTAS
		POP BC
		LD A, C
		CALL SOUTAS
		
		LD HL, MESERR0
		CALL RS_TXT
		RET
		
;-------------------------------------------------------------------------------
; SHERR: Displays a "read/verify" error message.
;
; This routine is called when the I2C_READ routine returns an error. It prints
; the contents of register C, followed by the "RTC ER RV" message, and sets the
; Carry flag.
;
; Parameters:
;	C: A value to print.
;
; Returns:
;	Carry flag (C) is set to indicate an error.
;
; Memory Accessed:
;	Console output via SOUTAS and RS_TXT routines.
;-------------------------------------------------------------------------------
SHERR:		
		LD A, C
		CALL SOUTAS
		LD HL, MESERR
		CALL RS_TXT
		SCF
		RET
		
;-------------------------------------------------------------------------------
; RST_BUF: Resets the BUFFER to all zeros.
;
; This routine clears the 20-byte BUFFER to prepare it for new data.
;
; Parameters:
;	None.
;
; Returns:
;	None.
;
; Memory Accessed:
;	Writes to the BUFFER memory location.
;-------------------------------------------------------------------------------
RST_BUF:	
		XOR A
		LD B, 20
		LD HL, BUFFER
LP1:		
		LD (HL), A
		INC HL
		DJNZ LP1
		RET
		
DATEMASK:	
		DEFM "dd/mm/yy w hh:mm:ss"
		
;-------------------------------------------------------------------------------
; DS1307_INIT: Initializes the DS1307 module.
;
; Copies the 'dd/mm/yy w hh:mm:ss' string mask into the TIMMSG variable. This
; sets up the format for subsequent time string operations.
;
; Parameters:
;	None.
;
; Returns:
;	None.
;
; Memory Accessed:
;	Writes to the TIMMSG memory location.
;-------------------------------------------------------------------------------
DS1307_INIT:	
		LD HL, DATEMASK
		LD DE, TIMMSG
		LD BC, 19
		LDIR
		RET
		
;-------------------------------------------------------------------------------
; DS1307_GETNOW: Reads raw time data from the DS1307.
;
; This routine sends a read command (0x00) to the DS1307 and then reads 7 bytes
; of raw BCD data (seconds, minutes, hours, day of week, day, month, year) into
; the BUFFER.
;
; Parameters:
;	None.
;
; Returns:
;	Z flag is set if successful, else jump to SHERR0/SHERR.
;	On success, the raw time data is in BUFFER.
;
; Memory Accessed:
;	I/O Ports: Communicates with the I2C device.
;	Writes to the BUFFER memory location.
;-------------------------------------------------------------------------------
DS1307_GETNOW:	
		LD HL, BUFFER
		XOR A
		LD (HL), A
		LD D, DS1307_ADDRESS
		LD BC, 1
		CALL I2C_WRITE
		JP NZ, SHERR0
;READ 7 BYTES
		LD HL, BUFFER
		LD D, DS1307_ADDRESS
		LD BC, 7
		CALL I2C_READ
		JP NZ, SHERR
		XOR A
		RET
		
;-------------------------------------------------------------------------------
; DS1307_SETTIME: Sets the DS1307 time from a string.
;
; This routine takes a date/time string from TIMMSG in the format
; 'dd/mm/yy w hh:mn:ss', converts each part to BCD, and writes the data to the
; DS1307 RTC.
;
; Parameters:
;	None.
;	Assumes the TIMMSG buffer contains the date/time string.
;
; Returns:
;	None.
;
; Memory Accessed:
;	I/O Ports: Communicates with the I2C device.
;	Reads from TIMMSG.
;	Writes to BUFFER.
;-------------------------------------------------------------------------------
DS1307_SETTIME:	
		LD DE, BUFFER
		XOR A
		LD (DE), A
		INC DE
		LD HL, TIMMSG + 17
		CALL SETTMPARAM
		LD HL, TIMMSG + 14
		CALL SETTMPARAM
		LD HL, TIMMSG + 11
		CALL SETTMPARAM
		LD HL, TIMMSG + 9
		CALL SETTMPARAM
		LD HL, TIMMSG
		CALL SETTMPARAM
		LD HL, TIMMSG + 3
		CALL SETTMPARAM
		LD HL, TIMMSG + 6
		CALL SETTMPARAM
		LD A, 0
		LD (DE), A
		CALL DS1307_ADJUST
		RET
		
;-------------------------------------------------------------------------------
; SETTMPARAM: Helper routine to set a single time parameter.
;
; This routine is called by DS1307_SETTIME. It reads a value from the TIMMSG
; string, converts it to a byte, then to BCD, and stores it in the BUFFER.
;
; Parameters:
;	HL: Pointer to the start of the ASCII string in TIMMSG.
;	DE: Pointer to the current position in BUFFER.
;
; Returns:
;	DE is incremented, pointing to the next free byte in BUFFER.
;
; Memory Accessed:
;	Reads from TIMMSG.
;	Writes to BUFFER.
;-------------------------------------------------------------------------------
SETTMPARAM:	
		PUSH DE
		CALL strtob
		POP DE
		CALL BN2BCD
		LD A, L
		LD (DE), A
		INC DE
		RET
		
;-------------------------------------------------------------------------------
; DS1307_ADJUST_TEST: Sets a predefined test date/time.
;
; This routine loads hardcoded values into the BUFFER and then calls
; DS1307_ADJUST to write them to the DS1307 RTC. This is a debug or test
; routine.
;
; Parameters:
;	None.
;
; Returns:
;	None.
;
; Memory Accessed:
;	I/O Ports: Communicates with the I2C device via DS1307_ADJUST.
;	Writes to the BUFFER memory location.
;-------------------------------------------------------------------------------
DS1307_ADJUST_TEST:	
;SET PARAMS
		LD DE, BUFFER
		XOR A
		LD (DE), A
		INC DE
		LD A, 10
		CALL BN2BCD
		LD A, L
		LD (DE), A
		INC DE
		LD A, 34
		CALL BN2BCD
		LD A, L
		LD (DE), A
		INC DE
		LD A, 18
		CALL BN2BCD
		LD A, L
		LD (DE), A
		INC DE
		LD A, 5
		LD (DE), A
		INC DE
		LD A, 18
		CALL BN2BCD
		LD A, L
		LD (DE), A
		INC DE
		LD A, 02
		CALL BN2BCD
		LD A, L
		LD (DE), A
		INC DE
		LD A, 21
		CALL BN2BCD
		LD A, L
		LD (DE), A
		INC DE
		XOR A
		LD (DE), A
;END OF 9 PARAMS
;9 BYTES OF BUFFER
;0 (CMD)
;SECS
;MINS
;HOURS
;DAY OF WEEK 0-7
;DAY
;MONTH
;YEAR
;YEAR 0
		
;-------------------------------------------------------------------------------
; DS1307_ADJUST: Writes 9 bytes of time data from BUFFER to the DS1307.
;
; This routine sends the raw BCD time data from BUFFER to the DS1307 via I2C.
;
; Parameters:
;	None.
;	Assumes BUFFER contains the 9 bytes of data.
;
; Returns:
;	None.
;
; Memory Accessed:
;	I/O Ports: Communicates with the I2C device.
;	Reads from BUFFER.
;-------------------------------------------------------------------------------
DS1307_ADJUST:	
		LD HL, BUFFER
		LD D, DS1307_ADDRESS
		LD BC, 9
		CALL I2C_WRITE
		JP NZ, SHERR0
		LD B, 1
		CALL DELAYSEC
		RET
		
;-------------------------------------------------------------------------------
; DS1307_SETSQ: Configures the square-wave output.
;
; Writes a single byte to the DS1307 control register (0x07) to configure the
; square-wave output pin.
;
; Parameters:
;	D: Contains the desired value for the control register.
;
; Returns:
;	None.
;
; Memory Accessed:
;	I/O Ports: Communicates with the I2C device.
;	Writes to BUFFER.
;-------------------------------------------------------------------------------
DS1307_SETSQ:	
		LD HL, BUFFER
		PUSH HL
		LD A, DS1307_CONTROL_REGISTER
		LD (HL), A
		INC HL
		LD A, D
		LD (HL), A
		POP HL
		LD D, DS1307_ADDRESS
		LD BC, 2
		CALL I2C_WRITE
		JP NZ, SHERR0
		RET
		
;-------------------------------------------------------------------------------
; CONVHL: Helper routine to convert a BCD byte to two ASCII characters.
;
; This routine takes a BCD byte in the L register and converts it to a two-digit
; ASCII string. It uses an external Bcd2ASC routine.
;
; Parameters:
;	L: Contains the BCD value.
;
; Returns:
;	HL: Contains the two ASCII characters. H is the most significant digit, L is
;	the least significant digit.
;
; Memory Accessed:
;	None.
;-------------------------------------------------------------------------------
CONVHL:		
		CALL Bcd2ASC
		LD H, 0
		RET
		
;-------------------------------------------------------------------------------
; CHKERROR: Checks for an error condition in the BUFFER.
;
; This routine scans the first 7 bytes of BUFFER for a value of 0xFF, which
; indicates a read error from the I2C bus.
;
; Parameters:
;	None.
;
; Returns:
;	Carry flag is set if an error is found, otherwise it is cleared.
;
; Memory Accessed:
;	Reads from BUFFER.
;-------------------------------------------------------------------------------
CHKERROR:	
		LD B, 7
		LD HL, BUFFER
CEAGN:		
		LD A, (HL)
		CP $FF
		JR Z, STER
		INC HL
		DJNZ CEAGN
		XOR A
		RET
STER:		
		SCF
		RET
		
;-------------------------------------------------------------------------------
; DS1307_GETTIME: Reads the time and formats it as a string.
;
; This is the main routine for reading the current time. It calls DS1307_GETNOW
; to read the raw data, checks for errors, and then formats the raw BCD data
; from BUFFER into the TIMMSG string in the 'dd/mm/yy hh:mm:ss' format.
;
; Parameters:
;	None.
;
; Returns:
;	Carry flag is set if an error occurs.
;	On success, TIMMSG contains the formatted time string.
;
; Memory Accessed:
;	Reads from BUFFER.
;	Writes to TIMMSG.
;-------------------------------------------------------------------------------
DS1307_GETTIME:	
		CALL RST_BUF
		CALL DS1307_GETNOW
		RET C
		CALL CHKERROR
		RET C
		LD IX, BUFFER
		LD DE, TIMMSG
		LD H, 0
		LD L, (IX + 4)
		CALL CONVHL
		LD A, ' / '
		LD (DE), A
		INC DE
		LD L, (IX + 5)
		CALL CONVHL
		LD A, ' / '
		LD (DE), A
		INC DE
		LD L, (IX + 6)
		CALL CONVHL
		LD A, ' '
		LD (DE), A
		INC DE
		LD L, (IX + 2)
		CALL CONVHL
		LD A, ':'
		LD (DE), A
		INC DE
		LD L, (IX + 1)
		CALL CONVHL
		LD A, ':'
		LD (DE), A
		INC DE
		LD L, (IX)
		CALL CONVHL
		INC DE
		XOR A
		LD (DE), A
		RET
