;struct Sprites
;nosprites byte 1
;blendaddr: word ;maxwid maxhei 64x64x2 bytes


;struct sprite
;PosX word    2  0 position X in Screen
;PosY word    2  2 position Y in Screen
;NewX word    2  4 new position X in Screen
;NewY word    2  6 new position Y in Screen
;wid:byte     1  8 width of sprite
;hei:byte     1  9 height of sprite
;curpic:byte  1  10 current picture no
;npics:byte   1  11 number of sprite pics
;graddr:word  2  12 address in memory graphics are stored
;scraddr:word 2  14 address in memory screen background is stored
;
;
;total bytes needed in struct 16
;bytes needed for graphics (wid*hei)*npics*2
;
;routines
;getScreenBG sprno  puts data from screen to memory
;setScreenBG sprno  puts data from memory to screenBG
;setScreenSPR sprno,memaddr  puts data from blend memory to screen
;blendSprite sprno
;createSprite returns sprno IN A
;getSpriteStruct sprno returns addr of start of struct
;DECCOLOR8 GETS AN 8BIT COLOR INFO 3,3,2 AND RETURNS IT IN 16BIT
;ENCCOLOR8 GETS A 16 BIT COLOR AND ENCODES IT AS 8 BIT 3,3,2


;8 BIT COLORS

RED8 	EQU 11100000B
GREEN8 	EQU 00011100B
BLUE8	EQU 00000011B
WHITE8	EQU 11111111B
BLACK8  EQU 00000000B
MAGENTA8 EQU 11100011B
YELLOW8 EQU 11111100B
CYAN8	EQU 00011111B

LRED8 	EQU 01100000B
LGREEN8 EQU 00001100B
LBLUE8	EQU 00000001B
LWHITE8	EQU 01001101B
LBLACK8 EQU 10010010B
LMAGENTA8 EQU 01100001B
LYELLOW8 EQU 01101100B
LCYAN8	EQU 00001101B


DGREEN8 EQU 00011000B	;DARK
DBLUE8	EQU 00000010B	;DARK
CREAM8	EQU 11011010B  
GREY8	EQU 00100101B	;DARK
PINK8 	EQU 11000010B
ORANGE8 EQU 11011000B
DCYAN8	EQU 00011010B	;DARK

DDGREEN8 EQU 00001100B  ;DARK
DDBLUE8	EQU 00000001B   ;NAVY
LGREY8	EQU 01001101B
LPINK8  EQU 10010010B

MAXSPR  EQU 20
MAXSPRW	EQU 30
MAXSPRH	EQU 30
SPRSTRCSIZE EQU 16
LCD_CS EQU $11
LCD_RS EQU $10
LCD_WR_COM EQU $0658
;MULT16 EQU 6373
;LCD_SETXY EQU 1940 


;creates a new sprite
@createSprite:    	LD A,(NOSPRITES)
			CP MAXSPR
			JR NC,CSERROR
			INC A
                	LD (NOSPRITES),A
			DEC A
			RET
CSERROR:		LD A,255
			RET

@getSpriteStruct:	LD HL,0
			LD DE,SPRSTRCSIZE 
			LD B,A
			CP 0
			JR Z,GSSEXIT			
GSSAGN:			ADD HL,DE 
			DJNZ GSSAGN			
GSSEXIT:       		EX DE,HL
			LD HL,SPRT 
			ADD HL,DE
			PUSH HL
			POP IX			
			RET
			

setSprScrBox:		NOP
			CALL getSpriteStruct			
			PUSH IX
			LD D,(IX)  ;POSX
			LD E,(IX+1)			
			PUSH DE    ;X1    			
			LD H,(IX+2);POSY						
			LD L,(IX+3);			
			PUSH HL     ;Y1			
    			LD B,0    			
			LD C,(IX+8) ;WID
			DEC BC
			EX DE,HL
			ADD HL,BC			
			PUSH HL     ;X2	
			LD C,(IX+9) ;HEI
			DEC BC
			EX DE,HL    			
			ADD HL,BC
    			PUSH HL    ;Y2
    			CALL LCD_SETXY
    			POP IX
    			RET
    			
getSprSize:	    	LD B,0
    			LD A,(IX+8) ;WID
    			;SLA A	    ;DOUBLE WIDTH CAUSE EACH PIXEL HAS 2 BYTES ; NO DOUBLE ON 8 BIT ENCODE
    			LD C,A
    			LD D,0
    			LD E,(IX+9) ;HEI    			
    			CALL Mult16 ;RESULT ON HL = TOTAL BYTES TO READ    			
    			PUSH HL
    			POP BC     			
			RET
    			
			

@getScreenBG		CALL setSprScrBox  ;IX ON STRUCT
    			LD D,0x2E         ;READ DATA FROM LCD
    			CALL LCD_WR_COM      
    			;START LOOP AND READ THE PIXELS
    			CALL getSprSize ;BC SIZE IN BYTES OF SPRITE
    			LD D,(IX+14) ;SCRADDRESS    			   			    			
    			LD E,(IX+15)
GSBGAGN:		IN A,(LCD_CS)
    			LD H,A
    			IN A,(LCD_CS)
    			LD L,A
    			CALL ENCCOLOR8	;ENCODE COLOR TO 8 BIT  			
    			LD (DE),A
    			INC DE
    			DEC BC    			
    			LD A,B
    			OR C
    			JR NZ,GSBGAGN
    			RET
    			
@SetScreenBG		CALL setSprScrBox  ;IX ON STRUCT
    			;START LOOP AND WRITE THE PIXELS
    			CALL getSprSize ;BC SIZE IN BYTES OF SPRITE
    			LD D,(IX+14) ;SCRADDRESS    			   			    			
    			LD E,(IX+15)
SSBGAGN:		LD A,(DE)
			PUSH DE
			CALL DECCOLOR8 ;DECODE FROM 8 TO 16BIT
			POP DE
			LD A,H
			OUT (LCD_CS),A
			LD A,L
			OUT (LCD_CS),A
    			INC DE
    			DEC BC
    			LD A,B
    			OR C
    			JR NZ,SSBGAGN
    			RET
    			
    			
@setScreenSPR		CALL setSprScrBox  ;IX ON STRUCT
    			CALL getSprSize ;BC SIZE IN BYTES OF SPRITE
    			SLA C
    			RL B  ;DOUBLE BC    			
			LD HL,(BLENDADDR)
			;CALL LCD_SETPIXEL ;HL PXL D DESTROYED
SSSPRAGN:		LD A,(HL);
			OUT (LCD_CS),A
			INC HL
			LD A,(HL)
			OUT (LCD_CS),A
			INC HL
			DEC BC
			DEC BC ;2 BYTES SENT FOR EACH PIXEL
			LD A,B
			OR C
			JR NZ,SSSPRAGN
			RET
			
@blendSprite:		PUSH IY
			CALL getSpriteStruct						
			;COPY FROM graddr TO BLENDADDR
			CALL getSprSize ;BC SIZE IN BYTES OF SPRITE						
			LD H,(IX+12)  ;GRADDR TODO GRADDR*curpic			
			LD L,(IX+13)		
			LD D,(IX+14)
			LD E,(IX+15)						
			PUSH DE
			POP IY			
			LD DE,(BLENDADDR)
BSAGN: 			LD A,(HL) ;GET 8BIT COLOR
			INC HL			
			PUSH HL
			LD H,(IY)
			INC IY
			PUSH DE
			;TODO GET COLOR FROM SCREENGRAPH AND BLEND IT ON 8 BIT
			CP 0
			JR NZ,BSNOBLEND			
			LD A,(IY) ;GET SCREEN COLOR WHEN BLACK ON SPRITE
BSNOBLEND:		CALL DECCOLOR8			
			POP DE
			EX DE,HL
			LD (HL),D
			INC HL
			LD (HL),E
			INC HL
			EX DE,HL
			POP HL
			DEC BC
			LD A,B
			OR C			
			JR NZ,BSAGN			
			POP IY
			RET



;GETS AN 8BIT COLOR INFO 3,3,2 AND RETURNS IT IN 16BIT
;INPUT A OUTPUT HL
@DECCOLOR8      PUSH DE
                LD D,A ;SAVE COLOR8
SPLTRED		AND 11100000B
		LD H,A
		SLA A
		SLA A
		SLA A  	;HERE A IS ZERO AND BIT 5 IS ON CARRY
		JR NC,SPLTGRN		
		LD A,H
		OR 00011000B ;SET R0,R1
SPLTGRN:	OR A ;CLEAR CARRY RED IS OK HERE	ON H
		LD A,D
		AND 00011100B		
		RRA
		RRA
		OR H
		LD H,A	;H HAS THE HIGH BYTE INFO
		RRA
		LD L,11000000B  ;SET G1,G0	
		JR C,SPLTBLU		
		LD L,0		;RESET G1,G0	
SPLTBLU:	OR A  ;GREEN IS OK HERE
		LD A,D
		AND 00000011B
		SLA A
		SLA A
		SLA A
		SLA A
		OR L
		LD L,A
		LD A,D
		RRA
		JR NC,COLDONE
		LD A,L
		OR 00001111B
		LD L,A	
COLDONE:	;HL HAS THE COLOR	
		;EX DE,HL  ;TEMP SAVE TO RAM
		;LD HL,CBHI
		;LD (HL),D
		;LD HL,CBLO
		;LD (HL),E
		;EX DE,HL  ;HL HAS THE COLOR
		POP DE
		RET

;GETS A 16 BIT COLOR AND ENCODES IT AS 8 BIT 3,3,2
;INPUT HL COLOR 16 BIT OUTPUT A COLOR 8BIT
@ENCCOLOR8	PUSH DE
		LD A,H
		AND 11100000B  ;REMOVE GREEN AND R0,R1
		LD D,A	;SAVE TO D
		;RED IS OK HERE
		LD A,H
		AND 00000111B  ;REMOVE RED
		OR A  ;CLEAR CARRY
		SLA A
		SLA A
		OR D
		LD D,A	;SAVE TO D
		;GREEN IS OK HERE
		LD A,L  ;GET LOW BYTE
		AND 00111111B  ;REMOVE GREEN
		SLA A
		SLA A
		SLA A
		SLA A
		OR D
		;BLUE IS OK
		POP DE
		RET
		
		

SPRITES EQU $
NOSPRITES DB 0
BLENDADDR DEFW BLENDAREA


SPRT EQU $    ;STRUCT SPRITE ARRAY
     DEFS MAXSPR*SPRSTRCSIZE
     
BLENDAREA DEFS MAXSPRW*MAXSPRH*2 ;2 BYTES PER PIXEL     
     

