    MODULE OSMAIN
  ;MAIN INTERFACE IMPLEMENTATION WITH BASIC

    CR  	 EQU 0DH
    LF		 EQU 0AH
    ES		 EQU 1BH    
    BS     EQU 08H
    ESC    EQU 1BH
    
    ;global vars FROM BBC BASIC
    @ACCS   EQU 0x8000       ;STRING INPUT BUFFER
    @ERRLIN EQU ACCS+0x2F4   ;
    @RANDOM EQU ACCS+0x2F6   ;RANDOM SEED MUST BE NON ZERO 5 BYTES
    @TOP    EQU ACCS+0x2DE   ;START OF BASIC PROGRAM
    @PAGE   EQU ACCS+0x2DC   ;END OF BASIC PROGRAM 
    @BBCBASIC EQU $4000   
    @ESCAPE EQU BBCBASIC+0x0DC2 ;ESCAPE ROUTINE ON BBC BASIC
    @CRLF   EQU BBCBASIC+0x086D ;CRLF ROUTINE ON BBC BASIC
    @EXTERR EQU BBCBASIC+0x06F0  ;EXTERR ROUTINE ON BBC BASIC
    @TELL   EQU BBCBASIC+0x0C2B ;PRINT A MESSAGE ON SCREEN THROUGH BBC BASIC
    @XEQ    EQU BBCBASIC+0x0CE8 ;DO BASIC NEXT COMMAND
    @EXPRI  EQU BBCBASIC+0x1E94 ;PARSE PARAMETER 
      
    

      
      
;TEST: JP LCD_TEST    
    
@MYOS_CLRSCN:JP LCD_CLRSCR        ; CLRSCN: clears the screen.
            
@MYOS_PUTIME:        ; PUTIME: set current time to DE:HL, in centiseconds.
       		 LD A,L
       		 LD (TIMECTR),A
					 LD A,H
 	  		   LD (TIMECTR+1),A
 	  		   LD A,E
 	  		   LD (TIMECTR+2),A
 	  		   LD A,D
 	  		   LD (TIMECTR+3),A 	  		   
		       RET
@MYOS_GETIME:        ; GETIME: return current time in DE:HL, in centiseconds.
           ;1 CENTIS IS 10MS
           ;TIMECTR HAS THE TIME IN CENTISECS
       		 LD A,(TIMECTR)
       		 LD L,A
 	  		   LD A,(TIMECTR+1)
 	  		   LD H,A
 	  		   LD A,(TIMECTR+2)
 	  		   LD E,A
 	  		   LD A,(TIMECTR+3)
 	  		   LD D,A
			     RET		       
@MYOS_PUTCSR:		    ; PUTCSR: move to cursor to x=DE, y=HL
           LD H,E
           PUSH HL
           CALL LCD_RMVCURS
           POP HL
           LD A,H
           LD (CURSORX),A
           LD A,L
           LD (CURSORY),A
           CALL LCD_PRNCURS                      
           RET
@MYOS_GETCSR:		    ; GETCSR: return cursor position in x=DE, y=HL
           LD D,0
           LD A,(CURSORX)
           LD E,A
           LD H,0
          ; LD A,(CURSORY)
           CALL LCD_CALCLINE ;GETS CURSORY WITH SCROLL
			     LD L,A
			     RET
KEYGET:		LD      B,80 ;SCREEN WIDTH IN CHARS	     
@MYOS_OSRDCH:        ; OSRDCH: read a character in from the keyboard	
        	 PUSH    HL
           SBC     HL,HL           ;HL=0
           CALL    MYOS_OSKEY
           POP     HL
           RET     C
           JR      MYOS_OSRDCH           
			     RET		
@MYOS_OSWRCH:		    ; OSWRCH: write a character to the screen            
			     PUSH    AF
           PUSH    DE
           PUSH    HL
           PUSH    IX                      
           LD      E,A
           CALL    ESCTEST
           ;CHECK CHAR FOR CONTROL COMMANDS
           ;0-31 & 127
           LD A,E
           CP 32
           JR C,CTRCODE
           CP 127   ;BACKSPACE 
           JP NZ,PRINTIT
           LD A,8            ;DO A BACKSPACE
           CALL LCD_PRINTCHAR
           JP OSWREXIT
CTRCODE:   CP 4 ;WRITE TEXT AT TEXT POS
           JR NZ,CC1
           LD (VDUMODE),A           
           JP OSWREXIT
CC1:       CP 5 ;WRITE TEXT AT GRAPH POS    
           JR NZ,CC2
           LD (VDUMODE),A
           JP OSWREXIT
CC2:       CP 6 ;ENABLE OUTPUT TO SCREEN
           JR NZ,CC3
           JP OSWREXIT
CC3:       CP 7 ;BEEP
           JR NZ,CC4
           JP OSWREXIT
CC4:       CP 8 ;MOVE TEXT CURSOR BACK A CHAR
           JR NZ,CC5
           JP PRINTIT
           ;LD A,(CURSORX)
           ;DEC A
           ;CP 0XFF
           ;JP Z,OSWREXIT ;EXIT IF NEGATIVE
           ;LD (CURSORX),A           
           ;JP OSWREXIT
CC5:       CP 9 ;MOVE TEXT CURSOR FORWARD A CHAR
           JR NZ,CC6
           LD A,(CURSORX)
           INC A
           CP 80
           JP NC,OSWREXIT
           LD (CURSORX),A         
           JP OSWREXIT   
CC6:       CP 10 ;MOVE TEXT DOWN LF
           JP Z,PRINTIT
CC7:       CP 11 ;MOVE TEXT UP
           JR NZ,CC8
           LD A,(CURSORY)
           DEC A
           CP 0XFF
           JP Z,OSWREXIT
           LD (CURSORY),A           
           JP OSWREXIT   
CC8:       CP 12 ; CLS
           JR NZ,CC9
           CALL LCD_CLRSCR
           JP OSWREXIT   
CC9:       CP 13 ;GOTO START OF LINE CR
           JP Z,PRINTIT
CC10:      CP 14 ;ENABLE THE AUTOPAGING MODE
           JR NZ,CC11
           JP OSWREXIT   
CC11:      CP 15 ;DISABLE THE AUTOPAGING MODE
           JR NZ,CC12
           JP OSWREXIT   
CC12:      CP 16 ;CLG
           JR NZ,CC13
           CALL MYOS_CLG       
           JP OSWREXIT   
CC13:      CP 17 ; SAME AS COLOUR
           JR NZ,CC14
           ;TODO:TAKE NEXT PARAM AND SET THE COLOR  
           INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;l has the param  color
           JP OSWREXIT   
CC14:      CP 18 ;SAME AS GCOL
           JR NZ,CC15
           INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;l has the param  mode
           INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;l has the param  color                                        
           ;TODO:TAKE NEXT PARAM AND SET THE GRAPHICS COLOR                      
           JP OSWREXIT   
CC15:      CP 19 ;SELECT A COLOR PALLETTE???
           JR NZ,CC16
           ;5 params
           LD B,5
CC15AGN:   PUSH BC
           INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;l has the param
           POP BC
           DJNZ CC15AGN           
           JP OSWREXIT   
CC16:      CP 20 ;RESTORE THE DEFAULT LOGICAL COLORS
           JR NZ,CC17           
           ;TODO:COPY THE COLORS LIKE OSINIT           
           JP OSWREXIT   
CC17:      CP 21 ;NO OUTPUT TO SCREEN
           JR NZ,CC18
           ;TODO:SET A FLAG FOR LCD
           JP OSWREXIT   
CC18:      CP 22 ;LIKE MODE
           JR NZ,CC19
           INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;l has the param           
           JP OSWREXIT   
CC19:      CP 23 ;Program characters and control the cursor.???
           JR NZ,CC20
           LD B,9   ;9 PARAMS CHAR_NO +8 ROWS OF A CHAR
           LD A,(IY)
           INC IY ;SKIP ',' OR ';'
           CP ';'
           JR NZ,CC19AGN
           DEC B ; IF ; THE DELIMETER THEN 2 BYTES AT START   
CC19AGN:   PUSH BC
           CALL    EXPRI
           EXX ;l has the param           
					 LD A,(IY)
					 CP ','
					 JR Z,CC19NXT0					         
           CP ';'           
           JR NZ,CC19NXT
           POP BC
           DEC B
           PUSH BC
CC19NXT0:  INC IY ;SKIP ','           
CC19NXT:   POP BC
           DJNZ CC19AGN                     
           JP OSWREXIT   
CC20:      CP 24 ;Define a graphics window
           JR NZ,CC21
           INC IY ;SKIP ','
           LD B,4   ;4 PARAMS TWO CORNERS OF A RECT
CC20AGN:   PUSH BC           
           CALL    EXPRI
           EXX ;HL has the param
           INC IY ;SKIP ';'
           POP BC
           DJNZ CC20AGN                                
           JP OSWREXIT   
CC21:      CP 25 ;Identical to PLOT.
           JR NZ,CC22
           INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;L has the param PLOTMODE
           INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;HL has the param X
           INC IY ;SKIP ';'
           CALL    EXPRI
           EXX ;HL has the param Y
           INC IY ;SKIP ';'
           ;TODO PUT PARAMS ON GRPARAM1,2
           ;CALL PLOT COMMAND
           JP OSWREXIT   
CC22:      CP 26 ;Restore the default text and graphics windows.
           JR NZ,CC23
           JR OSWREXIT   
CC23:      CP 27 ;Send the next character to the screen.
           JR NZ,CC24
           CALL    EXPRI
           EXX ;
           LD A,L
           JR PRINTIT           
CC24:      CP 28 ;Define a text window.
           JR NZ,CC25
           LD B,4   ;4 PARAMS UPPERLEFT AND LOWERRIGHT
CC24AGN:   PUSH BC
					 INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;l has the param
           POP BC           
           DJNZ CC24AGN                                
           JR OSWREXIT   
CC25:      CP 29 ;Set the graphics origin.
           JR NZ,CC26
           INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;HL has the param X
           INC IY ;SKIP ';'
           CALL    EXPRI
           EXX ;HL has the param Y
           INC IY ;SKIP ';'
           ;SET THE LASTMOVE
           JR OSWREXIT   
CC26:      CP 30 ;Home the text cursor to the top left of the screen.
           JR NZ,CC27
           LD HL,0
           LD (CURSORX),HL
           JR OSWREXIT   
CC27:      CP 31 ;Move the text cursor - identical to TAB(x,y).
           JR NZ,OSWREXIT   
           INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;l has the param X
           INC IY ;SKIP ','
           CALL    EXPRI
           EXX ;l has the param Y
           ;SET TEXT X,Y
           JR OSWREXIT   
           
           
PRINTIT:   CALL    EDPUT
OSWREXIT:  POP     IX
           POP     HL
           POP     DE
           POP     AF
           RET



;
EDPUT:  LD      A,(FLAGS)
        BIT     3,A
        JR      Z,WRCH
        LD      A,E
        CP      ' '
        RET     C
        LD      HL,(EDPTR)
        LD      (HL),E
        INC     L
        RET     Z
        LD      (EDPTR),HL
        RET           
           
@MYOS_PROMPT: 	      ; PROMPT: output the input prompt	
           LD E,'>'			     
WRCH:      LD A,E
           ;OUT (0),A      
           PUSH AF
           PUSH BC
           PUSH DE
					 PUSH HL
					 PUSH IX
					 PUSH IY
					 
           PUSH AF
           PUSH BC
           PUSH DE
					 PUSH HL
					 CALL LCD_RMVCURS
           POP HL
           POP DE
           POP BC
           POP AF
           CALL LCD_PRINTCHAR
           CALL LCD_PRNCURS

           POP IY
           POP IX
           POP HL
           POP DE
           POP BC
           POP AF
			     RET 
;
TOGGLE: LD      A,(FLAGS)
        XOR     00000100B
        LD      (FLAGS),A
        RET
;
;OSKEY - Read key with time-limit, test for ESCape.
;Main function is carried out in user patch.
;   Inputs: HL = time limit (centiseconds)
;  Outputs: Carry reset if time-out
;           If carry set A = character
; Destroys: A,H,L,F
;
@MYOS_OSKEY:	PUSH    HL
            LD      HL,INKEY
            LD      A,(HL)
            LD      (HL),0
            POP     HL
            OR      A
            SCF
            RET     NZ		
            ;PUSH    DE
            CALL    GETKEYNW
            ;POP     DE
            RET     NC
            CP      ESC
            SCF
            RET     NZ                        
ESCSET: 		PUSH    HL
        		LD      HL,FLAGS
        		BIT     6,(HL)          ; ESC DISABLED?
        		JR      NZ,ESCDIS
        		SET     7,(HL)          ; SET ESCAPE FLAG
ESCDIS: 		POP     HL
        		RET	
ESCTEST:		CALL RS_RXNW
		      	OR A
		      	RET Z
		      	CP 0x1B			; ESC	
	      		JR Z,ESCSET
	      		LD (INKEY),A
	       		RET

@MYOS_TRAP:			CALL ESCTEST
@MYOS_LTRAP:		LD A,(FLAGS)
			          OR A
		           	RET P
ABORT:       		LD HL,FLAGS 
		          	RES 7,(HL)
		          	JP ESCAPE          
;		          	
;OSINIT - Initialise RAM mapping etc.
;   Outputs: DE = initial value of HIMEM (top of RAM)
;            HL = initial value of PAGE (user program)
;            Z-flag reset indicates AUTO-RUN.
;  Destroys: A,D,E,H,L,F
;
@MYOS_OSINIT: 		
            DI
            LD HL,RANDOM    ; SET RANDOM SEED TO NON 0
            LD A,0x06
            LD (HL),A
            LD A,0xBB
            LD (HL),A
            LD HL,0
            LD (CURSORX),HL  ; CURSOR X 7 Y ZEROED            
            LD DE,COL_WHITE   ; SET FCOLOR AND BCOLOR DEFAULT VALUES
            LD HL,FCOLOR
            LD (HL),E
            INC HL
            LD (HL),D
            INC HL
            LD DE,COL_BLACK
            LD (HL),E
            INC HL
            LD (HL),D     
            LD BC,4					; COPY SAME COLORS TO GRAPHICS
            LD DE,FGRCOL
            LD HL,FCOLOR
            LDIR                                          
            LD DE,FCOLPAL
            CALL COPYPAL
            LD DE,BCOLPAL            
            CALL COPYPAL
            JR OSFINSH;
COPYPAL:    LD HL,COL_PALET   
            LD BC,16*2         ;SHOULD ADD 8 MORE COLORS 
            LDIR
            XOR A
            LD (SCRLN),A
            LD HL,0
            LD (TIMECTR),HL
            LD (TIMECTR+2),HL            
            RET
            ;PRINT MYOS MESSAGE HERE
OSFINSH:    CALL LCD_CLRSCR
            CALL    TELL
						DEFM	"CDesp Modular Z80 Computer 2020-21"
						DEFB	0AH,0DH
						DEFM	"ATLAS Operating System Version 2.04"						
						DEFB 0AH,0DH,0AH,0DH						
						DEFB 00H
            XOR A
         		LD DE,0xFFFF		;DE = HIMEM
         		LD E,A             	;PAGE BOUNDARY
         		LD HL,@USER      
         		EI   		
         		RET	
COL_PALET:  DW COL_BLACK
            DW COL_RED
            DW COL_GREEN
            DW COL_YELLOW
            DW COL_BLUE
            DW COL_MAGENTA
            DW COL_CYAN
            DW COL_WHITE            
           DW COL_BLACK ;TODO PICK 8 MORE COLORS
            DW COL_RED
            DW COL_GREEN
            DW COL_YELLOW
            DW COL_BLUE
            DW COL_MAGENTA
            DW COL_CYAN
            DW COL_WHITE            
      
;
;OSCLI - Process an "operating system" command
;
@MYOS_OSCLI: 
      CALL    SKIPSP
			CP      CR
			RET     Z
			CP      '|'
			RET     Z
			CP      '.'
			JP      Z,DOT           ;*.
			EX      DE,HL
			LD      HL,COMDS
OSCLI0:			LD      A,(DE)
			CALL    UPPRC
			CP      (HL)
			JR      Z,OSCLI2
			JR      C,HUH
OSCLI1:			BIT     7,(HL)
			INC     HL
			JR      Z,OSCLI1
			INC     HL
			INC     HL
			JR      OSCLI0
;
OSCLI2:			PUSH    DE
OSCLI3:			INC     DE
			INC     HL
			LD      A,(DE)
			CALL    UPPRC
			CP      '.'             ;ABBREVIATED?
			JR      Z,OSCLI4
			XOR     (HL)
			JR      Z,OSCLI3
			CP      80H
			JR      Z,OSCLI4
			POP     DE
			JR      OSCLI1
;
OSCLI4:			POP     AF
		        INC     DE
OSCLI5:			BIT     7,(HL)
			INC     HL
			JR      Z,OSCLI5
			LD      A,(HL)
			INC     HL
			LD      H,(HL)
			LD      L,A
			PUSH    HL
			EX      DE,HL
			JP      SKIPSP

HUH:    		LD      A,254
        		CALL    EXTERR
        		DEFM    'Bad command'
        		DEFB    0			

SKIPSP:			LD      A,(HL)
        		CP      ' '
        		RET     NZ
        		INC     HL
        		JR      SKIPSP	

UPPRC:  		AND     7FH
			CP      '`'
			RET     C
			AND     5FH             ;CONVERT TO UPPER CASE
			RET					


;ALPHABETICALLY
COMDS:DEFM    'BY'
			DEFB    'E'+80H
			DEFW    BYE
      DEFM    'C'
			DEFB    'D'+80H
			DEFW    NIMP			
      DEFM    'DI'
			DEFB    'R'+80H
			DEFW    NIMP						
      DEFM    'F'
			DEFB    'X'+80H
			DEFW    FX	
      DEFM    'LCD_PRIN' 
      			DEFB	'T'+80H
      			DEFW    LCD_PRN				
      DEFM    'PW'
			DEFB    'D'+80H
			DEFW    NIMP			
      DEFM    'TYP'
			DEFB    'E'+80H
			DEFW    NIMP						
			
			DEFB	0FFH

; OSCLI - *.
DOT:			RET


; OSCLI - *BYE
;
BYE:			JP 0

; OSCLI - *FX
FX: RET			
  
; OSCLI - *VARIOUS
NIMP: RET			;NOT IMPLEMENTED YET

FORMAT 	EQU BBCBASIC+0x16E3
EXPR 	EQU BBCBASIC+0x1D84
HEXSTR	EQU BBCBASIC+0x2353
STR 	EQU BBCBASIC+0x2396
FILL 	EQU BBCBASIC+0x172A
TERM?   EQU BBCBASIC+0x16C2
STAVAR  EQU $8200
COUNT   EQU $82FB


LCD_PRN:	PUSH HL
		POP IY        
		JR PRINT0
PRINT6:			LD      B,2
			JR      PRINTC
PRINT8:			LD      BC,100H
			JR      PRINTC
PRINT9:			LD      HL,STAVAR
			XOR     A
			CP      (HL)
			JR      Z,PRINT0
			LD      A,(COUNT)
			OR      A
			JR      Z,PRINT0
PRINTA:			SUB     (HL)
			JR      Z,PRINT0
			JR      NC,PRINTA
			NEG
			CALL    FILL		              
PRINT0:			LD      A,(STAVAR)
			LD      C,A             ;PRINTS
			LD      B,0             ;PRINTF
PRINTC:			CALL    TERM?
			JR      Z,PRINT4
			RES     0,B
			INC     IY
			CP      '~'
			JR      Z,PRINT6
			CP      ';'
			JR      Z,PRINT8
			CP      ','
			JR      Z,PRINT9
			CALL    FORMAT          ;SPC, TAB, '
			JR      Z,PRINTC
			DEC     IY
			PUSH    BC
			CALL    EXPR            ;VARIABLE TYPE
			EX      AF,AF'
			JP      M,PRINT3        ;STRING
			POP     DE
			PUSH    DE
			BIT     1,D
			PUSH    AF
			CALL    Z,STR           ;DECIMAL
			POP     AF
			CALL    NZ,HEXSTR       ;HEX
			POP     BC
			PUSH    BC
			LD      A,C
			SUB     E
			CALL    NC,FILL         ;RIGHT JUSTIFY
PRINT3:			POP     BC
			;E HAS THE NO OF BYTES TO PRINT
			;ACCS HAS THE DATA TO PRINT
			LD HL,ACCS ; L IS 00
			LD A,L
			ADD E
			LD L,A
			XOR A
			LD (HL),A
			LD L,A
			CALL LCD16_PRINT           ;PRINT
			JR      PRINTC
PRINT4:			JP      XEQ            
            
  
  
@MYOS_OSBPUT:
@MYOS_OSBGET: 
@MYOS_OSSTAT: 
@MYOS_OSSHUT: 
@MYOS_OSOPEN: 
@MYOS_OSCALL:   
@MYOS_GETPTR: 
@MYOS_PUTPTR: 
@MYOS_GETEXT: LD A,1
              RET 

@MYOS_RESET: RET

@MYOS_MODE:CALL EXPRI    ;GET PARAM
           EXX           ;HL HAS THE PARAM      
           JP XEQ
     
@MYOS_CLG: CALL GRPH_SAVECOLORS
           CALL LCD_CLRSCR
           CALL GRPH_RESTORECOLORS
           JP XEQ           ;RETURN TO BASIC    


@MYOS_GCOL:   PUSH IX
              LD A,1
              CALL BAS_COLOUR     
              POP IX
              JP XEQ           ;RETURN TO BASIC    
              
@MYOS_COLOUR: PUSH IX
              XOR A   
              CALL BAS_COLOUR     
              POP IX
              JP XEQ           ;RETURN TO BASIC              

@MYOS_DRAW: PUSH IX 
            CALL BAS_DRAW
            POP IX
            JP XEQ           ;RETURN TO BASIC    

@MYOS_MOVE:PUSH IX
           CALL BAS_MOVE
           POP IX
           JP XEQ           ;RETURN TO BASIC    

@MYOS_PLOT:PUSH IX
           CALL BAS_PLOT
           POP IX
           JP XEQ           ;RETURN TO BASIC    

@MYOS_POINT:PUSH IX
           CALL BAS_POINT ;RETURNS A VALUE TO BASIC
           POP IX
           RET
            




@MYOS_ENVEL:
@MYOS_SOUND: 
@MYOS_ADVAL:
@MYOS_GETIMS:
@MYOS_PUTIMS:CALL GETBASICPARAMS;             
             JP XEQ
             
			CALL    EXTERR
			DEFM    'Sorry'
			DEFB    0            
      
      

; Read a character - waits for input
; A: ASCII character
;
GETKEY:		  CALL GET_CHAR
            SCF
			      RET       
      
; Read a character - DOES NOT wait for input
; A: ASCII character
;
GETKEYNW:		CALL CHKCURS
            CALL GET_CHARNW
            CCF
            CP 0
            RET Z
            SCF
			      RET       
      
@CHKCURS:    PUSH AF
            LD A,(TIMECTR)
            BIT 4,A
            JR Z,CCSHOW      ;IF SET SHOW       
CCHIDE:     LD A,(CURSSTAT)
            BIT 1,A
            JR NZ,CCEX      ;IF NOT SET ALREADY HIDDEN
            SET 1,A
            LD (CURSSTAT),A
            CALL LCD_RMVCURS
            JR CCEX                                               
CCSHOW:     LD A,(CURSSTAT)
            BIT 1,A
            JR Z,CCEX      ;IF SET ALREADY VISIBLE
            RES 1,A
            LD (CURSSTAT),A
            CALL LCD_PRNCURS
            
CCEX:       POP AF
						RET          
         		
;
;OSLINE - Read/edit a complete line, terminated by CR.
;   Inputs: HL addresses destination buffer.
;           (L=0)
;  Outputs: Buffer filled, terminated by CR.
;           A=0.
; Destroys: A,B,C,D,E,H,L,F
;
@MYOS_OSLINE: 
        LD      A,(FLAGS)
        BIT     3,A             ;EDIT MODE?
        JR      Z,OSLIN1
        RES     3,A
        LD      (FLAGS),A
        LD      HL,(EDPTR)
        CP      L
OSLIN1: LD      A,CR
        LD      (HL),A
        CALL    NZ,MYOS_OSWRCH
        LD      L,0
        LD      C,L             ;REPEAT FLAG
        JR      Z,OSWAIT        ;SUPPRESS UNWANTED SPACE
UPDATE: LD      B,0
UPD1:   LD      A,(HL)
        INC     B
        INC     HL
        CP      CR
        PUSH    AF
        PUSH    HL
        LD      E,A
        CALL    NZ,WRCH         ;FAST WRCH
        POP     HL
        POP     AF
        JR      NZ,UPD1
        LD      A,' '
        CALL    MYOS_OSWRCH
        LD      E,BS
UPD2:   PUSH    HL
        CALL    WRCH            ;FAST WRCH
        POP     HL
        DEC     HL
        DJNZ    UPD2
OSWAIT: LD      A,C
        DEC     B
        JR      Z,LIMIT
        OR      A               ;REPEAT COMMAND?
LIMIT:  CALL    Z,KEYGET        ;READ KEYBOARD
        LD      C,A             ;SAVE FOR REPEAT
        LD      DE,OSWAIT       ;RETURN ADDRESS
        PUSH    DE
        LD      A,(FLAGS)
        OR      A               ;TEST FOR ESCAPE
        LD      A,C
        JP      M,OSEXIT
        CP      11         ;CURSOR UP     (IX-11)
        JP      Z,LEFT
        CP      10         ;CURSOR DOWN   (IX-10)
        JP      Z,RIGHT
        LD      B,0
        CP      5          ;CLEAR LEFT    (IX-5)
        JR      Z,BACK
        CP      9          ;START OF LINE (IX-9)
        JR      Z,LEFT
        CP      7          ;CLEAR RIGHT   (IX-7)
        JR      Z,DELETE
        CP      8          ;END OF LINE   (IX-8)
        JP      Z,RIGHT
        LD      C,0             ;INHIBIT REPEAT
        CP      'P' AND 1FH
        JP      Z,TOGGLE
        CP      6          ;DELETE LEFT   (IX-6)
        JR      Z,BACK
        CP      4          ;CURSOR LEFT   (IX-4)
        JR      Z,LEFT
        CP      2          ;DELETE RIGHT  (IX-2)
        JR      Z,DELETE
        CP      1          ;INSERT SPACE  (IX-1)
        JR      Z,INSERT
        CP      3          ;CURSOR RIGHT  (IX-3)
        JR      Z,RIGHT
        CP      ' '             ;PRINTING CHARACTER
        JR      NC,SAVECH
        CP      CR              ;ENTER LINE
        RET     NZ
OSEXIT: LD      A,(HL)
        CALL    MYOS_OSWRCH          ;WRITE REST OF LINE
        INC     HL
        SUB     CR
        JR      NZ,OSEXIT
        POP     DE              ;DITCH RETURN ADDRESS
        CP      C
        JP      NZ,ABORT        ;ESCAPE
        LD      A,LF
        CALL    MYOS_OSWRCH
        LD      DE,(ERRLIN)
        XOR     A
        LD      L,A
        LD      (EDPTR),HL
        CP      D
        RET     NZ
        CP      E
        RET     NZ
        LD      DE,EDITST
        LD      B,4
CMPARE: LD      A,(DE)
        CP      (HL)
        LD      A,0
        RET     NZ
        INC     HL
        INC     DE
        LD      A,(HL)
        CP      '.'
        JR      Z,ABBR
        DJNZ    CMPARE
ABBR:   XOR     A
        LD      B,A
        LD      C,L
        LD      L,A
        LD      DE,LISTST
        EX      DE,HL
        LDIR
        LD      HL,FLAGS
        SET     3,(HL)
        RET
;
BACK:   SCF                     ;DELETE LEFT
LEFT:   INC     L               ;CURSOR LEFT
        DEC     L
        JR      Z,STOP
        LD      A,BS
        CALL    MYOS_OSWRCH
        DEC     L
        RET     NC
DELETE: LD      A,(HL)          ;DELETE RIGHT
        CP      CR
        JR      Z,STOP
        LD      D,H
        LD      E,L
DEL1:   INC     DE
        LD      A,(DE)
        DEC     DE
        LD      (DE),A
        INC     DE
        CP      CR
        JR      NZ,DEL1
DEL2:   POP     DE              ;DITCH
        JP      UPDATE
;
INSERT: LD      A,CR            ;INSERT SPACE
        CP      (HL)
        RET     Z
        LD      D,H
        LD      E,254
INS1:   INC     DE
        LD      (DE),A
        DEC     DE
        LD      A,E
        CP      L
        DEC     DE
        LD      A,(DE)
        JR      NZ,INS1
        LD      (HL),' '
        JR      DEL2
;
RIGHT:  LD      A,(HL)          ;CURSOR RIGHT
        CP      CR
        JR      Z,STOP
SAVECH: LD      D,(HL)          ;PRINTING CHARACTER
        LD      (HL),A
        INC     L
        JR      Z,WONTGO        ;LINE TOO LONG
        CALL    MYOS_OSWRCH
        LD      A,CR
        CP      D
        RET     NZ
        LD      (HL),A
        RET
;
WONTGO: DEC     L
        LD      (HL),CR
       ; LD      A,BEL
       ; CALL    MYOS_OSWRCH          ;BEEP!
STOP:   LD      C,0             ;STOP REPEAT
        RET
;
;
EDITST: DEFM    'EDIT'
LISTST: DEFM    'LIST'




    
    ENDMODULE