;GRAPHICS MODULE
;PRIMITIVE COMMANDS FOR VGA & LCD MODULE

;PLOTS A PIXEL
;HL=X, DE=Y
;DE 1ST PARAM HL 2ND PARAM
@PLOTP:	        PUSH BC 							;SAVE BC
		PUSH IX

		;CHECK LCD ENABLED
		LD A,(SCRNST)
		AND 1
		JR Z, PPNX		
		
                PUSH DE
                PUSH HL
                ;FOR LCD1963
                ;SET VIEWPORT
		PUSH HL
		PUSH DE
		PUSH HL
		PUSH DE
		CALL LCD_SETXY
                ;SET PIXEL
		LD HL, (FCOLOR)
		CALL LCD_SETPIXEL

                ;FOR VGA
                POP HL
                POP DE	                
PPNX:		LD A,(SCRNST)
		AND 2
		JR Z, PPNX2		

                LD A,(VGAFCOL)
                CALL VGA_PLTPXL

PPNX2:		POP IX
		POP BC 								;RESTORE BC
		RET


@CLEARGRAPH:    CALL LCD_CLRSCR
		CALL VGA_GRCLS
                RET


;X , Y , LENGTH 3 PARAMS PASS ON STACK
@GR_DRAWHLINE:	LD IX, 2							;3 PARAMS 2-BYTES EACH TOTAL 6 BYTES		
		ADD IX, SP
		LD H, (IX + 5) 							;X
		LD L, (IX + 4) 							;X
		LD D, (IX + 3) 							;Y
		LD E, (IX + 2) 							;Y
		LD B, (IX + 1) 							;LENGTH
		LD C, (IX) 							;LENGTH			
		PUSH HL
		LD HL, $8000
		OR A 								;CLEAR CARRY
		SBC HL, BC 							;CHECK IF LENGTH<0
		JR NC, POSH1
		XOR A 								;l=-l
		SUB C
		LD C, A
		SBC A, A
		SUB B
		LD B, A
		POP HL
		SBC HL, BC 							;x -= l;
		PUSH HL
POSH1:		POP HL	
NXTH1:		PUSH HL
                PUSH DE                
                CALL PLOTP                					;HL X,DE Y                
                POP DE
                POP HL                
                INC HL
		DEC BC
		LD A, C
		OR B
		JR NZ, NXTH1
		CALL LCD_CLRXY
		POP DE
		LD HL, 6 							;REMOVE PARAMS FROM STACK
		ADD HL, SP
		LD SP, HL
		EX DE, HL
		JP (HL)
		
		
		
@GR_DRAWVLINE:									;3 PARAMS 2-BYTES EACH TOTAL 6 BYTES
;X , Y , LENGTH
		LD IX, 2
		ADD IX, SP
		LD H, (IX + 5) 							;X
		LD L, (IX + 4) 							;X
		LD D, (IX + 3) 							;Y
		LD E, (IX + 2) 							;Y
		LD B, (IX + 1) 							;LENGTH
		LD C, (IX) 							;LENGTH
		PUSH HL
		LD HL, $8000
		OR A 								;CLEAR CARRY
		SBC HL, BC 							;CHECK IF LENGTH<0
		JR NC, POSV1
		XOR A 								;l=-l
		SUB C
		LD C, A
		SBC A, A
		SUB B
		LD B, A
		EX DE,HL
		SBC HL, BC 							;Y -= l;
		EX DE,HL
POSV1:		POP HL
NXTV1:		PUSH HL
                PUSH DE
                CALL PLOTP
                POP DE
                POP HL
                INC DE
		DEC BC
		LD A, C
		OR B
		JR NZ, NXTV1
		CALL LCD_CLRXY
		POP DE
		LD HL, 6 							;REMOVE PARAMS FROM STACK
		ADD HL, SP
		LD SP, HL
		EX DE, HL
		JP (HL)
		
@GR_DRAWLINE:									;4 PARAMS 2-BYTES EACH TOTAL 8 BYTES
;X1 , Y1 , X2, Y2
		LD IX, 2
		ADD IX, SP
; LD D,(IX+7)   ;X1
; LD E,(IX+6)   ;X1
; LD H,(IX+5)   ;Y1
;  LD L,(IX+4)   ;Y1
; LD D,(IX+3)   ;X2
;  LD E,(IX+2)   ;X2
;  LD H,(IX+1)   ;Y2
;  LD L,(IX)     ;Y2
		
		LD H, (IX + 5) 							;Y1
		LD L, (IX + 4) 							;Y1
		LD D, (IX + 1) 							;Y2
		LD E, (IX) 							;Y2
		OR A
		SBC HL, DE
		JR NZ, YNOTEQ
;CALL DRAWHLINE CAUSE Y1=Y2
		LD B, (IX + 7) 							;X1
		LD C, (IX + 6) 							;X1
		PUSH BC 							;X1 1ST PARAM ON STACK
		PUSH DE 							;Y 2ND PARAM ON STACK
		LD H, (IX + 3) 							;X2
		LD L, (IX + 2) 							;X2
		SBC HL, BC 							;X2-X1 = LENGTH OF HORIZ LINE
		PUSH HL 							;LENGTH 3RD PARAM ON STACK
		CALL GR_DRAWHLINE
		JP DLNEX
YNOTEQ:		
		LD H, (IX + 7) 							;X1
		LD L, (IX + 6) 							;X1
		LD D, (IX + 3) 							;X2
		LD E, (IX + 2) 							;X2
		OR A
		SBC HL, DE
		JR NZ, XNOTEQ
;CALL DRAWVLINE CAUSE X1=X2
		PUSH DE 							;X2=X1 1ST PARAM ON STACK
		LD B, (IX + 5) 							;Y1
		LD C, (IX + 4) 							;Y1
		PUSH BC 							;Y1 2ND PARAM ON STACK
		LD H, (IX + 1) 							;Y2
		LD L, (IX) 							;Y2
		SBC HL, BC 							;Y2-Y1 = LENGTH OF VERT LINE
		PUSH HL 							;LENGTH 3RD PARAM ON STACK
		CALL GR_DRAWVLINE
		JP DLNEX
XNOTEQ:		
;LINE ALGORITHM
		JR C, X2GTX1
;HL=X1-X2
		XOR A
		DEC A 								;XSTEP=-1
		JR DLNXT1
X2GTX1:		
; LD HL,DE      ;X2
		PUSH DE
		POP HL
		LD D, (IX + 7) 							;X1
		LD E, (IX + 6) 							;X1
		OR A
		SBC HL, DE 							;X2-X1 ON HL
;HL=X2-X1  HL=DX
		LD A, 1 							;XSTEP=1
DLNXT1:		
		LD B, 0
		LD C, 0
		PUSH BC 							;T
		PUSH HL 							;DX
		CP 1
		JR Z, DLXMINUS1
		LD B, 0XFF
DLXMINUS1:	LD C, A
		PUSH BC 							;XSTEP
		LD H, (IX + 5) 							;Y1
		LD L, (IX + 4) 							;Y1
		LD D, (IX + 1) 							;Y2
		LD E, (IX) 							;Y2
		OR A
		SBC HL, DE
		JR C, Y2GTY1 							;HL=Y1-Y2
		XOR A
		DEC A 								;YSTEP=-1
		JR DLNXT2
Y2GTY1:		
;LD HL,DE      ;Y2
		PUSH DE
		POP HL
		LD D, (IX + 5) 							;Y1
		LD E, (IX + 4) 							;Y1
		OR A
		SBC HL, DE 							;HL=Y2-Y1    HL=DY
		LD B, 0
		LD A, 1 							;YSTEP=1
DLNXT2:		
		CP 1
		JR Z, DLYMINUS1
		LD B, 0XFF
DLYMINUS1:	
		LD C, A
		PUSH HL 							;DY
		PUSH BC 							;YSTEP
		LD IY, 0
		ADD IY, SP
;IY+9= T HI
;IY+8= T LO
;IY+7= DX HI
;IY+6= DX LO
;IY+5= XSTEP
;IY+4= XSTEP
;IY+3= DY HI
;IY+2= DY LO
;IY+1= YSTEP
;IY= YSTEP
		
;DE = ROW
;LD D,(IX+7)   ;COL
;LD E,(IX+6)   ;COL
		LD D, (IY + 7) 							;DX
		LD E, (IY + 6) 							;DX
		OR A
		SBC HL, DE 							;DY-DX
		JP C, DXGTDY
		JP Z, DXGTDY
;DX<DY
		ADD HL, DE 							;HL=DY
		LD B, H
		LD C, L
		SRL B
		RR C 								;(dy >> 1)
		LD HL, 0
		SBC HL, BC 							;t = - (dy >> 1);
		LD (IY + 9), H 							;SAVE T
		LD (IY + 8), L 							;SAVE T
DLAGN1:		
		LD D, (IX + 5) 							;ROW
		LD E, (IX + 4) 							;ROW=Y1
		LD H, (IX + 7) 							;COL
		LD L, (IX + 6) 							;COL=X1
		PUSH DE
		PUSH IX


                PUSH HL
                PUSH DE
                CALL PLOTP
                POP DE
                POP HL

		POP IX
		POP DE
		LD H, (IX + 1) 							;Y2
		LD L, (IX) 							;Y2
		SBC HL, DE 							; ROW=Y2
		JP Z, DLEXIT
		LD B, (IY + 1) 							;YSTEP HI
		LD C, (IY) 							;YSTEP LO
		EX DE, HL
		ADD HL, BC 							;row += ystep;
		LD (IX + 5), H 							;SAVE ROW
		LD (IX + 4), L 							;
;EX DE,HL      ;DE=ROW
		LD D, (IY + 9) 							; T
		LD E, (IY + 8) 							; T
		LD H, (IY + 7) 							;DX
		LD L, (IY + 6) 							;DX
		ADD HL, DE
		LD (IY + 9), H 							;t += dx;
		LD (IY + 8), L
		EX DE, HL
		LD HL, $8000
		SBC HL, DE 							;CHECK IF T<0
		JR C, DLAGN1 							; CARRY SET IF NEGATIVE
		LD B, (IY + 5) 							;XSTEP HI
		LD C, (IY + 4) 							;XSTEP LO
		LD H, (IX + 7) 							;COL HI
		LD L, (IX + 6) 							;COL LO
		ADD HL, BC 							;col += xstep;
		LD (IX + 7), H 							;SAVE COL
		LD (IX + 6), L 							;
;t   -= dy;
		LD H, (IY + 9) 							; T
		LD L, (IY + 8) 							; T
		LD B, (IY + 3) 							;DY
		LD C, (IY + 2) 							;DY
		SBC HL, BC
		LD (IY + 9), H 							;t -= dY;
		LD (IY + 8), L
		JP DLAGN1
DXGTDY:		
		ADD HL, DE 							;HL=DY DE=DX
		LD B, D
		LD C, E
		SRL B
		RR C 								;(dX >> 1)
		LD HL, 0
		SBC HL, BC 							;t = - (dX >> 1);
		LD (IY + 9), H 							;SAVE T
		LD (IY + 8), L 							;SAVE T
DLAGN2:		
		LD D, (IX + 5) 							;ROW
		LD E, (IX + 4) 							;ROW=Y1
		LD H, (IX + 7) 							;COL
		LD L, (IX + 6) 							;COL=X1
		PUSH HL 							;SAVE COL
		PUSH IX

		PUSH HL
		PUSH DE
                CALL PLOTP
                POP DE
                POP HL

		POP IX
		POP DE 								;RETRIEVE COL
		LD H, (IX + 3) 							;X2
		LD L, (IX + 2) 							;X2
		SBC HL, DE 							; COL=X2?
		JR Z, DLEXIT
		EX DE, HL 							;HL=COL
		LD B, (IY + 5) 							;XSTEP HI
		LD C, (IY + 4) 							;XSTEP LO
		ADD HL, BC 							;col += xstep;
		LD (IX + 7), H 							;SAVE COL
		LD (IX + 6), L 							;
		LD D, (IY + 9) 							; T
		LD E, (IY + 8) 							; T
		LD H, (IY + 3) 							;DY
		LD L, (IY + 2) 							;DY
		ADD HL, DE
		LD (IY + 9), H 							;t += dY;
		LD (IY + 8), L
		EX DE, HL 							;T=DE
		LD HL, $8000
		SBC HL, DE 							;CHECK IF T<0
		JR C, DLAGN2 							;CARRY SET IF NEGATIVE
		LD B, (IY + 1) 							;YSTEP HI
		LD C, (IY) 							;YSTEP LO
		LD H, (IX + 5) 							;ROW HI
		LD L, (IX + 4) 							;ROW LO
		ADD HL, BC 							;ROW += Ystep;
		LD (IX + 5), H 							;SAVE COL
		LD (IX + 4), L 							;
;t   -= dX;
		LD H, (IY + 9) 							; T
		LD L, (IY + 8) 							; T
		LD B, (IY + 7) 							;DX
		LD C, (IY + 6) 							;DX
		SBC HL, BC
		LD (IY + 9), H 							;t -= dX;
		LD (IY + 8), L
		JP DLAGN2
		
DLEXIT:		
		LD HL, 5 * 2 							;REMOVE 5 IY PARAMS FROM STACK
		ADD HL, SP 							;
		LD SP, HL
DLNEX:		POP DE 								;RET ADDR
		LD HL, 4 * 2 							;REMOVE 4 PARAMS FROM STACK
		ADD HL, SP
		LD SP, HL
		EX DE, HL
		JP (HL)



;int x, int y, int radius
@GR_CIRCLE:	
		POP HL 								;GET THE RETURN ADDRESS
		PUSH DE 							;F VAR
		PUSH DE 							;DDF_X
		PUSH DE 							;DDF_Y
		PUSH DE 							;X1
		PUSH DE 							;Y1
		PUSH HL 							;RET ADDR
		LD IX, 2
		ADD IX, SP
;LD D,(IX+15)    ;X
;LD E,(IX+14)    ;X
;LD D,(IX+13)    ;Y
;LD E,(IX+12)    ;Y
;LD D,(IX+11)    ;R
;LD E,(IX+10)    ;R
;LD D,(IX+9)    ;F
;LD E,(IX+8)    ;F
;LD D,(IX+7)    ;DDF_X
;LD E,(IX+6)    ;DDF_X
;LD D,(IX+5)    ;DDF_Y
;LD E,(IX+4)    ;DDF_Y
;LD D,(IX+3)    ;X1
;LD E,(IX+2)    ;X1
;LD D,(IX+1)    ;Y1
;LD E,(IX+0)    ;Y1
;f = 1 - radius
		XOR A
		LD D, (IX + 11) 						;R
		LD E, (IX + 10) 						;R
		LD (IX + 1), D 							;Y1=R
		LD (IX + 0), E
		LD HL, 1
		LD (IX + 7), H 							;DDF_X=1
		LD (IX + 6), L
		LD (IX + 3), H 							;X1=0
		LD (IX + 2), H
		SBC HL, DE
		LD (IX + 9), H 							;F
		LD (IX + 8), L 							;F
;ddF_y = -2 * radius;
		EX DE, HL 							;HL=RADIUS
		ADD HL, HL 							;2*R
		EX DE, HL
		LD HL, 0
		SBC HL, DE 							;-2*R
		LD (IX + 5), H
		LD (IX + 4), L 							;DDF_Y
;setXY(x, y + radius, x, y + radius);
		LD H, (IX + 13) 						;Y
		LD L, (IX + 12)
		PUSH HL 							;SAVE Y
		LD D, (IX + 11) 						;R
		LD E, (IX + 10)
		PUSH DE 							;SAVE R
		ADD HL, DE 							;Y+R
		LD D, (IX + 15) 						;X
		LD E, (IX + 14)
		PUSH DE 							;SAVE X
		EX DE,HL
;PUSH DE,HL,DE,HL
		CALL PLOTP
;setXY(x, y - radius, x, y - radius);
		POP DE 								;GET X
		POP BC 								;GET R
		POP HL 								;GET Y
		PUSH HL 							;SAVE VARS
		PUSH BC
		PUSH DE
		XOR A
		SBC HL, BC 							;
;PUSH DE,HL,DE,HL
		EX DE,HL
		CALL PLOTP
;setXY(x + radius, y, x + radius, y);
		POP HL 								;GET X
		POP BC 								;GET R
		POP DE 								;GET Y
		PUSH DE 							;SAVE VARS
		PUSH BC
		PUSH HL
		XOR A
		ADC HL, BC
		;EX DE, HL
;PUSH DE,HL,DE,HL		
		CALL PLOTP
;setXY(x - radius, y, x - radius, y);
		POP HL 								;GET X
		POP BC 								;GET R
		POP DE 								;GET Y
		XOR A
		SBC HL, BC
		;EX DE, HL
;PUSH DE,HL,DE,HL
		CALL PLOTP
		
;while(x1 < y1)
CIRC_AGN:	LD H, (IX + 3) 							;X1
		LD L, (IX + 2) 							;X1
		LD D, (IX + 1) 							;Y1
		LD E, (IX + 0) 							;Y1
		XOR A
		SBC HL, DE
		JP NC, CIRC_EXIT
;if(f >= 0)
		ADD HL, DE
		PUSH HL 							;SAVE X1
		PUSH DE 							;SAVE Y1
		LD HL, 0
		XOR A
;LD D,(IX+9)    ;F
;LD E,(IX+8)
		LD A, (IX + 9) 							;F HI BYTE
		CP 80
		JR NC, CIRC_SKIP
		JR Z, CIRC_SKIP
;y1--;
;ddF_y += 2;
;f += ddF_y;
		POP DE 								;Y1
		DEC DE
		LD (IX + 1), D 							;SAVE Y1
		LD (IX + 0), E
		PUSH DE 							;Y1
		LD H, (IX + 5) 							;DDF_Y
		LD L, (IX + 4)
		INC HL
		INC HL
		LD (IX + 5), H 							;SAVE DDF_Y
		LD (IX + 4), L
		LD D, (IX + 9) 							;F
		LD E, (IX + 8)
		ADD HL, DE
		LD (IX + 9), H 							;SAVE F
		LD (IX + 8), L
CIRC_SKIP:									;x1++;
;ddF_x += 2;
;f += ddF_x;
		POP BC 								;Y1
		POP HL 								;X1
		INC HL
		LD (IX + 3), H 							;SAVE X1
		LD (IX + 2), L
		PUSH HL 							;X1
		LD H, (IX + 7) 							;DDF_X
		LD L, (IX + 6)
		INC HL
		INC HL
		LD (IX + 7), H 							;SAVE DDF_X
		LD (IX + 6), L
		LD D, (IX + 9) 							;F
		LD E, (IX + 8)
		ADD HL, DE
		LD (IX + 9), H 							;SAVE F
		LD (IX + 8), L
		
;setXY(x + x1, y + y1, x + x1, y + y1);
		POP HL 								;X1
		PUSH HL
		LD D, (IX + 15) 						;X
		LD E, (IX + 14)
		PUSH DE
		ADD HL, DE
		EX DE, HL 							;DE=X+X1
		LD H, (IX + 13) 						;Y
		LD L, (IX + 12)		
		ADD HL, BC 							;HL=Y+Y1
;DE,HL,DE,HL
		EX DE,HL
		CALL PLOTP
;setXY(x - x1, y + y1, x - x1, y + y1);
		POP HL 								;X
		POP DE 								;X1
		PUSH DE
		PUSH HL
		XOR A
		SBC HL, DE
		EX DE, HL 							;DE=X-X1
		LD H, (IX + 13) 						;Y
		LD L, (IX + 12)
		ADD HL, BC 							;HL=Y+Y1
;DE,HL,DE,HL
		EX DE,HL
		CALL PLOTP
;setXY(x + x1, y - y1, x + x1, y - y1);
		POP HL 								;X
		POP DE 								;X1
		PUSH DE
		PUSH HL
		ADD HL, DE
		EX DE, HL 							;DE=X+X1
		LD H, (IX + 13) 						;Y
		LD L, (IX + 12)
		XOR A
		SBC HL, BC 							;HL=Y+Y1
;DE,HL,DE,HL
		EX DE,HL
		CALL PLOTP
;setXY(x - x1, y - y1, x - x1, y - y1);
		POP HL 								;X
		POP DE 								;X1
		PUSH DE
		PUSH HL
		XOR A
		SBC HL, DE
		EX DE, HL 							;DE=X-X1
		LD H, (IX + 13) 						;Y
		LD L, (IX + 12)
		XOR A
		SBC HL, BC 							;HL=Y-Y1
;DE,HL,DE,HL
		EX DE,HL
		CALL PLOTP
;setXY(x + y1, y + x1, x + y1, y + x1);
		POP HL 								;X
		POP DE 								;X1
		PUSH BC 							;SAVE Y1 SWITCH DE AND BC
		PUSH HL 							;SAVE X
		PUSH DE 							;SAVE X1
		ADD HL, BC 							;
		POP BC 								;BC=X1
		EX DE, HL 							;DE=X+Y1
		LD H, (IX + 13) 						;Y
		LD L, (IX + 12)
		ADD HL, BC 							;HL=Y+X1
;DE,HL,DE,HL
		EX DE,HL
		CALL PLOTP
;setXY(x - y1, y + x1, x - y1, y + x1);
		POP HL 								;X
		POP DE 								;Y1
		PUSH DE
		PUSH HL
		XOR A
		SBC HL, DE
		EX DE, HL 							;DE=X-Y1
		LD H, (IX + 13) 						;Y
		LD L, (IX + 12)
		ADD HL, BC 							;HL=Y+X1
;DE,HL,DE,HL
		EX DE,HL
		CALL PLOTP
;setXY(x + y1, y - x1, x + y1, y - x1);
		POP HL 								;X
		POP DE 								;Y1
		PUSH DE
		PUSH HL
		ADD HL, DE
		EX DE, HL 							;DE=X+Y1
		LD H, (IX + 13) 						;Y
		LD L, (IX + 12)
		XOR A
		SBC HL, BC 							;HL=Y-X1
		PUSH HL
;DE,HL,DE,HL
		EX DE,HL
		CALL PLOTP
;setXY(x - y1, y - x1, x - y1, y - x1);
		POP BC 								;Y-X1
		POP HL 								;X
		POP DE 								;Y1
		XOR A
		SBC HL, DE
		EX DE, HL 							;DE=X-Y1
		PUSH BC
		POP HL 								;HL=Y-X1
;DE,HL,DE,HL
		EX DE,HL
		CALL PLOTP
		JP CIRC_AGN
CIRC_EXIT:	CALL LCD_CLRXY
		POP DE 								;GET RET ADDR
		LD HL, 8 * 2 							;REMOVE PARAMS FROM STACK
		ADD HL, SP 							;
		LD SP, HL
		EX DE, HL
		JP (HL)                