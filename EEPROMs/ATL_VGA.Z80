;VGA MODULE
		
		GLOBAL VGA_INIT 						;INITIALIZATION PARAMS
		GLOBAL VGA_GETPAGE 						;BRINGS PG8 TO BANK 4
		GLOBAL VGA_RMVPAGE 						;RESTORES PREVIOUS PAGE ON BANK 4
		GLOBAL VGA_SETCONF 						;SET SCREEN MODE
		GLOBAL VGA_GETCONF 						;GET SCREEN MODE
		GLOBAL VGA_CLRSCR						;CLEARS TEXT OR GRAPH SCREEN
		GLOBAL VGA_TXTCLR 						;CLEARS THE TEXT SCREEN
		GLOBAL VGA_PRCH 						;PRINT A CHAR
		GLOBAL VGA_PRINT 						;PRINT A MESSAGE
		GLOBAL VGA_RMVCURS 						;REMOVES THE CURSOR
		GLOBAL VGA_PRNCURS 						;SETS THE CURSOR
		GLOBAL VGA_GETCHAR 						;GETS A CHAR FROM SCREEN
		GLOBAL VGA_DOCHCLR 						;CHANGES THE CHAR COLOR INFO
		GLOBAL VGA_PLTPXL32 						;PLOTS A PIXEL ON 320X200X4
		GLOBAL VGA_GETPXL32 						;RETURNS A PIXEL FROM SCREEN ON 320X200X4
		GLOBAL VGA_GRCLS 						;CLEARS GRAPHIC SCREEN
		GLOBAL VGA_SETGRPGHI 						;BRINGS PAGE 10,11 TO BANK 5,6
		GLOBAL VGA_SETGRPGLO 						;BRINGS PAGE 8,9 TO BANK 5,6
		GLOBAL VGA_RMVGRPG 						;RESTORES PAGES TO BANK 5,6
		GLOBAL VGA_PLTPXL64 						;PLOTS A PIXEL ON 640X400X2
		GLOBAL VGA_GETPXL64 						;RETURNS A PIXEL FROM SCREEN ON 640X400X2
		GLOBAL VGA_PLTPXL 						;PLOTS A PIXEL ON VGA GRAPH
		GLOBAL VGA_GETPXL 						;RETURNS A PIXEL FROM VGAGRAPH
		GLOBAL VGA_SETLOWGR 						;SETS A LOW RES GRAPH SCREEN
		GLOBAL VGA_SETLOWTX 						;SETS A LOW RES TEXT SCREEN
		GLOBAL VGA_SETHIGR 						;SETS A HIGH RES GRAPH SCREEN
		GLOBAL VGA_SETHITX 						;SETS A HIGH RES TEXT SCREEN
		GLOBAL VGA_GETCOL 						;RETURNS THE COLOR INFO
		GLOBAL VGA_SETCOL 						;SETS THE COLOR INFO
		GLOBAL VGA_MIXCOLOR 						;MIXES FORE AND BACK COLOR
		GLOBAL VGA_SETVISBUFF						;SET VISIBLE BUFFER
		GLOBAL VGA_SWVISBUFF						;SWITCH VISIBLE BUFFER
		GLOBAL VGA_SETWRKBUFF						;SET WORKING BUFFER
		GLOBAL VGA_SWWRKBUFF						;SWITCH WORKING BUFFER
		GLOBAL VGA_PRNGRCH						;PRINT A CHAR AT TXT_X,TXT_Y COORDS
		GLOBAL VGA_PRNGRCHAT						;PRINT A CHAR AT SPECIFIED COORDS
		
		
		
;Bit 0 is Blue, 1 is green , 2 is red, 3 is intensity
		@VGA_BLACK EQU 0
		@VGA_MAROON EQU 1
		@VGA_GREEN EQU 2
		@VGA_OLIVE EQU 3
		@VGA_NAVY EQU 4
		@VGA_PURPLE EQU 5
		@VGA_TEAL EQU 6
		@VGA_SILVER EQU 7
		@VGA_GRAY EQU 8
		@VGA_RED EQU 9
		@VGA_LIME EQU 10
		@VGA_YELLOW EQU 11
		@VGA_BLUE EQU 12
		@VGA_FUCHSIA EQU 13
		@VGA_AQUA EQU 14
		@VGA_WHITE EQU 15
		
		CONFPG EQU 11
		CONFADDR EQU $1FF8 						;32760 SCREEN CONFIG BYTE BIT 1=LO/HI RES,BIT 0=GRAPH/TEXT SCREEN , BIT 7 SELECTS BUFFER 
		@LOGRAPH EQU 00B
		@LOTEXT EQU 01B
		@HIGRAPH EQU 10B
		@HITEXT EQU 11B
		
		BASEADDR EQU $4000
		
		FONT_WIDTH EQU 8
		FONT_HEIGHT EQU 10
		
		VGA_CURSCHAR EQU 147;254						;CURSOR CHAR _
		
VGA_INIT:									;LD C, 01B 							;LOW RES TEXT SCREEN
		LD C, 11B 							;HIRES TEXT SCREEN
		LD A, VGA_NAVY
		SLA A
		SLA A
		SLA A
		SLA A
		LD B, VGA_WHITE
		OR B
		LD B, A
		CALL VGA_SETCONF
		RET
		
		
;SET LOWRES SCREEN WITH GRAPHICS
VGA_SETLOWGR:	PUSH AF
		CALL VGA_GETCONF 						;GET CURRENT MODE AND COLORS
		LD C, 00B 							;LOW RES GRAPH SCREEN
		CALL VGA_SETCONF
		POP AF
		RET
		
;SET LOWRES SCREEN WITH TEXT
VGA_SETLOWTX:	PUSH AF
		CALL VGA_GETCONF 						;GET CURRENT MODE AND COLORS
		LD C, 01B 							;LOW RES TEXT SCREEN
		CALL VGA_SETCONF
		POP AF
		RET
;SET HIRES SCREEN WITH GRAPHICS
VGA_SETHIGR:	PUSH AF
		CALL VGA_GETCONF 						;GET CURRENT MODE AND COLORS
		LD C, 10B 							;HI RES GRAPH SCREEN
		CALL VGA_SETCONF
		POP AF
		RET
;SET HIRES SCREEN WITH TEXT
VGA_SETHITX:	PUSH AF
		CALL VGA_GETCONF 						;GET CURRENT MODE AND COLORS
		LD C, 11B 							;HI RES TEXT SCREEN
		CALL VGA_SETCONF
		POP AF
		RET
		
		
;SET VISIBLE BUFFER 
;A THE BUFFER 0 OR 1
VGA_SETVISBUFF:	RRCA								;BIT 1 > BIT 7
		PUSH HL
		PUSH AF
		LD B, 4 							;8000h
		CALL GETPGINBANK
		POP HL								;H THE BUFFER
		PUSH AF								;SAVE PREVIOUS PAGE
		PUSH HL
		LD A, CONFPG 							;PAGE 11
		CALL PUTPGINBANK
		LD HL, CONFADDR
		LD DE, $8000
		OR A
		ADC HL, DE
		POP BC								;B THE BUFFER 0 OR 1
		LD A,(HL)
		RRA
		RR B								;BIT 0 ON CARRY
		RLA
		LD (HL),A
		POP AF								;PREVIOUS PAGE NO
		LD B, 4
		CALL PUTPGINBANK 						;RESTORE PREVIOUS PAGE
		POP HL
		RET		

;SWITCHES THE VISIBLE BUFFERS ON VGA
;PRESERVES HL		
VGA_SWVISBUFF:	PUSH HL
		LD B, 4 							;8000h
		CALL GETPGINBANK
		PUSH AF 							;SAVE PREVIOUS PAGE
		LD A, CONFPG 							;PAGE 11
		CALL PUTPGINBANK
		LD HL, CONFADDR
		LD DE, $8000
		OR A
		ADC HL, DE
		LD A, (HL) 							;VIDEO CTRL REG1 VIDEO MODE
		BIT 7,A 
		JR Z,VSVB_SETBUF1
		;SETBUF0
		RES 7,A
		JR VSVB_CONT
VSVB_SETBUF1:	SET 7,A								;SET BIT 7
		;NEG
		;XOR $7F								;SWITCH BIT 7 ONLY
VSVB_CONT:	LD (HL),A
		POP AF
		LD B, 4
		CALL PUTPGINBANK 						;RESTORE PREVIOUS PAGE
		POP HL
		RET		
		
;SETS THE VIDEO BUFFER ALL COMMANDS ARE WORKING ON
;A THE BUFFER NO 0 OR 1
VGA_SETWRKBUFF: LD (VGABUF),A
		RET

;SWITCH THE WORKING BUFFER
VGA_SWWRKBUFF:  LD A,(VGABUF)
		XOR 1
		LD (VGABUF),A
		RET


; SETS NEW SCREEN & DEFAULT COLORS FOR MONOCHROME MODES
; C THE SCREEN CODE 0,1,2,3
; B THE DEFAULT BACK AND FORE COLOR FOR MONOCHROME SCREEN
; THIS RESETS THE SELECTED BUFFER TO 0
VGA_SETCONF:	PUSH HL
		PUSH BC
		LD B, 4 							;8000h
		CALL GETPGINBANK
		POP BC
		PUSH AF 							;SAVE PREVIOUS PAGE
		PUSH BC 							;SAVE SCREEN CODE
		LD A, CONFPG 							;PAGE 11
		LD B, 4
		CALL PUTPGINBANK
		POP BC
		LD A, C
		LD HL, CONFADDR
		LD DE, $8000
		OR A
		ADC HL, DE
		LD (HL), A 							;VIDEO CTRL REG1 VIDEO MODE
		INC HL
		LD A, B 							;DEFAULT COLORS
		LD (HL), A 							;VIDEO CTRL REG2 VIDEO DEF COLORS
		POP AF
		PUSH BC
		LD B, 4
		CALL PUTPGINBANK 						;RESTORE PREVIOUS PAGE
		POP BC
		POP HL
		LD A, C 							;SCREEN MODE
		BIT 0, A
		JP NZ, VGA_TXTINIT
		JP VGA_GRPHINIT
		
;RETURNS CURRENT SCREEN CODE
;A RETURNS 0,1,2,3
;B HAS THE DEFAULT COLORS
;A,C HAVE THE SCREEN CODE AS A
;DESTROYS BC,DE
VGA_GETCONF:	PUSH HL
		LD B, 4 							;8000h
		CALL GETPGINBANK
		PUSH AF 							;SAVE PREVIOUS PAGE
		LD A, CONFPG 							;PAGE 11
		CALL PUTPGINBANK
		LD HL, CONFADDR
		LD DE, $8000
		OR A
		ADC HL, DE
		LD A, (HL)
		AND 3								;KEEP ONLY BITS 0,1
		LD C, A 							;SCREEN MODE
		INC HL
		LD A, (HL)
		LD B, A 							;DEFAULT COLORS
		POP AF
		PUSH BC
		LD B, 4
		CALL PUTPGINBANK
		POP BC
		POP HL
		LD A, C
		RET
		
		
;---------------- ENTRY POINT FUNCTIONS TEXT/GRAPHICS -------------
		
;
;CLEARS THE SCREEN TEXT OR GRAPH
VGA_CLRSCR:	CALL VGA_GETCONF
		BIT 0,A
		JP NZ,VGA_TXTCLR
		JP VGA_GRCLS


; ;PRINTS CHAR ON A TO SCREEN EITHER TEXT OR GRAPHICS LOW OR HIGH RESOLUTION
; VGA_PRCH:	LD H,A								;SAVE A
; 		CALL VGA_GETCONF
; 		BIT 0,A
; 		LD A,H								;RESTORE A
; 		JP NZ, VGA_PRCHTXT						;NZ MEANS TEXT
; 		JP VGA_PRCHGRP
		
;PRINTS A CHAR & COLOR TO CURRENT TX,TY  EITHER TEXT OT GRAPHICS LOW OR HIGH RES
;FORWARDS CURSOR
;DESTROYS BC,DE,A
VGA_PRCH:	;PUSH AF
		;CALL VGA_GETPAGE
		;POP AF
		PUSH AF 							;SAVE FLAGS
		POP DE 								;FLAGS ON DE
		CP 31
		CALL C, VGA_NOTVISCH
		JR Z, PRCH_EX 							;EXIT IF CHAR WAS HANDLED
		CALL VGA_DOPRNCH 						;PRINT THE CHAR
		CALL VGA_TXFORW 						;TEXT FORWARD
PRCH_EX:	;CALL VGA_RMVPAGE
		RET
		
		
;A=CHAR THIS DOES THE ACTUAL PRINTING EITHER TEXT OT GRAPHICS LOW OR HIGH RES
;NO CURSOR FORWARD
VGA_DOPRNCH:	LD H, A 							;SAVE A
		CALL VGA_GETCONF
		BIT 0, A
		LD A, H 							;RESTORE A
		JP NZ, VGA_DOPRNCHTXT 						;NZ MEANS TEXT
		JP VGA_DOPRNCHGRP
		
		
;-------------COMMON FUNCTIONS --------------------
		
;PERFORMS SCREEN ACTIONS BASED ON CONTROL CHARS 0-31
;A= CHAR 0-31
;DE HAS THE FLAGS AF
VGA_NOTVISCH:	PUSH AF
		PUSH DE
		CALL VGA_RMVCURS						;REMOVE CURSOR
		POP DE
		POP AF
		CP 8 								;BACKSPACE
		JR NZ, NX1
		LD A, (VGATX_X)
		CP 0 								;COL 0 HAS THE PROMPT
		RET Z 								;DO NOT PRINT ANYTHING
		DEC A
		LD (VGATX_X), A
		PUSH DE
		POP AF 								;GET FLAGS BACK
		JR NC, MVLEFT							;IF C THEN DELETE THE CHAR ON THE LEFT
		LD A, ' ' 							;PRINT SPACE
		LD (VGATMPC),A
		CALL VGA_DOPRNCH 						;
		XOR A 								;CLEAR ZERO
		RET
NX1:		CP 10 								;JUST IGNORE IT
		RET Z
		CP 13 								;CR =NEW LINE
		JR NZ, NX2
		CALL VGA_RMVCURS
		CALL VGDOY 							;ADD 1 TO TY
		LD (VGATX_X), A 						;ZF IS SET
		RET
MVLEFT:		CALL VGA_GETCHAR
		LD A, D
		LD (VGATMPC),A
NX2:		XOR A 								;NC MEANS WE DON'T PRINT
		RET
		
		
;HL THE MESSAGE
VGA_PRINT:	CALL VGA_GETPAGE
VGAP_AGN:	LD A, (HL)
		CP 0
		JR Z, VGAP_EX
		PUSH HL
		CALL VGA_PRCH
		POP HL
		INC HL
		JR VGAP_AGN
VGAP_EX:	CALL VGA_RMVPAGE
		RET
		
		
VGA_TXFORW:	PUSH AF
		PUSH HL
		LD HL, VGAMAXX
		LD A, (VGATX_X)
		INC A
		CP (HL)
		CALL Z, VGDOY
		LD (VGATX_X), A
		POP HL
		POP AF
		RET
VGDOY:		LD HL, VGAMAXY
		LD A, (VGATX_Y)
		INC A
		CP (HL)
		CALL Z, DOSCRL
		LD (VGATX_Y), A
		XOR A
		RET
		
DOSCRL:		CALL VGA_GETCONF 						;GET SCREEEN MODE
		BIT 0, A
		JP Z, DOSCRLGR
		BIT 1, A 							; CHECK IF HIRES SO NO COLOR INFO
		CALL Z, DOSCRL_COL 						;SCROLL COLORS IF BIT 1=0
		CALL DOSCRL_TXT 						;SCROLL TEXT
		RET
		
		
;-------------TEXT SCREEN-----------------------
		
;SETS THE VIDEO PAGE 8 OR 12 ON $8000 BANK 4
;IT MAY BE CALLED SEVERAL TIMES IT KEEPS TRACK ON THAT
;EACH VGA_GETPAGE MUST HAVE A VGA_RMVPAGE
;LAST ONE SETS THE PREVIOUS PAGE IN BANK 4
;DESTROYS A,BC,DE
VGA_GETPAGE:	LD A, (PGSEM)
		INC A
		LD (PGSEM), A
		CP 1
		RET NZ
		PUSH HL
		LD B, 4 							;8000h
		CALL GETPGINBANK
		LD (TMPG), A 							;SAVE OLD PAGE
		LD A,(VGABUF)
		RRA 								;PUT BIT 0 ON CARRY FLAG
		LD A, 8 							;PAGE 8  IS BUFFER 0
		JR NC, VGP_SETPG
		LD A, 12 							;PAGE 12 IS BUFFER 1
VGP_SETPG:	CALL PUTPGINBANK
		POP HL
		RET
		
;SET BACK THE PAGE THAT WAS ON BANK 4
;DESTROYS A,BC,DE
VGA_RMVPAGE:	LD A, (PGSEM)
		DEC A
		LD (PGSEM), A
		CP 0
		RET NZ
		PUSH HL
		LD B, 4
		LD A, (TMPG)
		CALL PUTPGINBANK 						;RESTORE OLD PAGE
		POP HL
		RET
		
VGA_SETFONT:	CALL VGA_GETPAGE
		LD HL, FONT_ADDR
		LD DE, $9000 							;FONT ADDRESS ON VIDEO MEM AT $1000=4096 ON BANK 4=$8000
		LD BC, 2560
		LDIR 								;TRANSFER
		CALL VGA_RMVPAGE
		RET
		
;C HAS THE SCREEN CODE
VGA_SETMAXS:	LD A, C
		LD D, 40
		LD E, 20
		BIT 1,A								;LOW RES MODE
		JR Z, VGSM_NX
;HIRES TEXT MODE
		LD D, 80
		LD E, 40
VGSM_NX:	LD A, D
		LD (VGAMAXX), A
		LD A, E
		LD (VGAMAXY), A
		RET

;C HAS THE SCREEN MODE
VGA_SETSCRDEFS:	XOR A
		LD (PGSEM), A
		LD (TMPG), A
		LD A, VGA_YELLOW
		LD (VGAFCOL), A
		LD A, VGA_NAVY
		LD (VGABCOL), A
		CALL VGA_SETMAXS
		XOR A
		LD (VGATX_X), A
		LD (VGATX_Y), A
		RET
;C HAS THE SCREEN MODE
VGA_TXTINIT:	CALL VGA_SETSCRDEFS
		CALL VGA_SETFONT 						;SET THE FONT ON VIDEO MEM
		
;CLEARS TEXT SCREEN MODE 1 OR 3
VGA_TXTCLR:	LD A, (VGAMAXX)
		LD H, A
		LD A, (VGAMAXY)
		LD E, A
		CALL MULT8
		PUSH HL
		CALL VGA_GETPAGE
		CALL VGA_GETCONF
		POP BC 								;TOTAL BYTES
		BIT 1, A
		JR Z, ISLOWRES
;HIRES
		LD HL, $8000
		LD A, 32
		LD (HL), A
		LD DE, $8001
		LDIR
		JP VGAC_EXIT
		
ISLOWRES:	LD HL, $8000 							;BANK4
		LD DE, $8400 							;COLOR INFO
		JP VGAC_AGN
		
		
;CLEARS THE VGA TEXT AREA FOR 320X200X4
;PUTS 32 SPACE AS CHAR AND THE BACKGROUND COLOR ONLY
VGA_CLR:	CALL VGA_GETPAGE
		LD BC, 800
		LD HL, $8000 							;DEL CHARS
		LD DE, $8400
;CLEARS THE VGA TEXT AREA
;PUTS 32 SPACE AS CHAR AND THE DEFAULT COLORS
VGAC_AGN:	LD A, 32
		LD (HL), A
		PUSH BC
		CALL VGA_GETCOL
		POP BC
		LD (DE), A
		INC HL
		INC DE
		DEC BC
		LD A, B
		OR C
		JR NZ, VGAC_AGN
VGAC_EXIT:	XOR A
		LD (VGATX_X), A
		LD (VGATX_Y), A
		CALL VGA_RMVPAGE
		RET
		
;MIXES COLOR INFO A=FORE B=BACKCOLOR
;RETURNS A MIX COLOR HI NIBBLE IS BACKCOLOR
VGA_MIXCOLOR:	SLA B
		SLA B
		SLA B
		SLA B
		OR B 								;BLEND COLOR 4 BITS FCOLOR AND 4 BITS BCOLOR
		RET
		
;RETURNS COLOR INFO ON A HI NIBBLE IS BACKCOLOR
;DESTROYS B
VGA_GETCOL:	LD A, (VGABCOL) 						;GET COLOR INFO
		LD B, A
		LD A, (VGAFCOL)
		CALL VGA_MIXCOLOR
		RET
		
;SETS COLOR INFO ON A HI NIBBLE IS BACK COLOR
;DESTROYS C
VGA_SETCOL:	PUSH AF
		AND $0F
		LD (VGAFCOL), A 						;SET COLOR INFO
		POP AF
		SLA A
		SLA A
		SLA A
		SLA A
		AND $0F
		LD (VGABCOL), A 						;SET BACK COLOR
		RET
		
		
		
;RETURNS THE VIDEO TEXT ADDRESS OF TX,TY
;DESTROYS DE
;RETURN HL THE ADDRESS
VGA_CALC_VIDAD:	PUSH AF
		LD A, (VGATX_Y)
		LD H, A	
		LD A, (VGAMAXX)
		LD E, A		
		CALL Mult8
		LD DE, $8000
		ADD HL,DE
		;HL=HL+C*E
		LD D, 0
		LD A, (VGATX_X)
		LD E, A
		ADD HL, DE
		POP AF
		RET
		
		
;PRINTS A CHAR ON CURRENT POS
VGA_DOPRNCHTXT:	PUSH HL
		PUSH AF
		CALL VGA_GETPAGE
		CALL VGA_CALC_VIDAD 						;CALC VIDEO ADDRESS
		POP AF
		LD (HL), A 							;PUT CHAR ON SCREEN
		PUSH HL
		CALL VGA_GETCONF 						;GET SCREEEN MODE
		BIT 1, A 							; CHECK IF HIRES SO NO COLOR INFO
		POP HL
		JR NZ, DPC_EX
		LD DE, $400
		ADD HL, DE 							;CALC COLOR ADDRESS
		CALL VGA_GETCOL 						;GET CURRENT COLOR
		LD (HL), A 							;PUT COLOR INFO ON SCREEN
DPC_EX:		POP HL
		CALL VGA_RMVPAGE
		RET
		
;A HAS THE NEW COLOR VALUE TO PUT ON CHAR
;DESTROYS HL,DE
VGA_DOCHCLR:	PUSH AF
		CALL VGA_GETPAGE
		CALL VGA_CALC_VIDAD 						;CALC VIDEO ADDRESS
		LD DE, $400
		ADD HL, DE 							;CALC COLOR ADDRESS
		POP AF
		LD (HL), A 							;PUT COLOR INFO ON SCREEN
		CALL VGA_RMVPAGE
		RET
		
;GET THE CURRENT CHAR ON D AND THE COLOR ON E
VGA_GETCHAR:	CALL VGA_GETCONF 						;GET SCREEEN MODE
		BIT 0,A
		JR NZ,GC_DOIT							;IF TEXT DOIT
		;IS GRAPHICS
		LD D,  147 ;' '
		LD A,(VGABCOL)
		LD E,A
		RET
GC_DOIT:	CALL VGA_GETPAGE
		CALL VGA_CALC_VIDAD 						;CALC VIDEO ADDR ON HL
		LD A, (HL)
		PUSH AF
		CALL VGA_GETCONF 						;GET SCREEEN MODE
		CP 3 	;TEXT HI						; CHECK IF HIRES SO NO COLOR INFO
		POP DE								;AF ON DE TO PRESERVE FLAG		
		JR Z, GC_NOCOL
		LD A, D
		LD DE, $400  ;TEXT LOW
		ADD HL, DE 							;CALC COLOR ADDRESS
		LD D, A								;THE CHAR
		LD A, (HL)							;THE COLOR
		LD E, A
		JR GC_EX
GC_NOCOL:	;LD D, A
		LD E, 0
GC_EX:		LD H,D
		LD L,E
		CALL VGA_RMVPAGE
		LD D,H
		LD E,L
		RET
		

VGA_REVRCOLRS:	CP E
		RET Z
		LD A, E
		RRCA 								;CHANGE FORE AND BACK COLOR INFO
		RRCA
		RRCA
		RRCA
		CALL VGA_DOCHCLR 				;CHANGE THE COLOR OF THE CHAR
		RET
		
VGA_RMVCURS:	CALL VGA_GETCONF 						;GET SCREEEN MODE
		BIT 0,A
		JR Z, RC_GR							;IF GRAPHICS
		BIT 1, A 							; CHECK IF HIRES SO NO COLOR INFO
		JR Z, RC_LOW
RC_GR:		LD A, (VGATMPC)
		JR RC_EX
RC_LOW:		CALL VGA_GETCHAR						;GET CURRENT COLORS
		CALL VGA_GETCOL							;GET DEFAULT COLORS
		CALL VGA_REVRCOLRS						;REVERSE IF NECESSARY
		RET
RC_EX:		CALL VGA_DOPRNCH
		RET
VGA_PRNCURS:	CALL VGA_GETCHAR 						; E HAS THE COLOR INFO
		PUSH DE
		CALL VGA_GETCONF 						;GET SCREEEN MODE
		POP DE
		BIT 1, A 							; CHECK IF HIRES SO NO COLOR INFO		
		JR NZ, PC_NOCOL
		BIT 0,A								;CHECK IF GRAPH SO NO TEXT COLOR INFO
		JR Z, PC_LORESGR
		CALL VGA_GETCOL							;GET CURRENT COLORS
		RRCA								;REVERSE BACK & FORE
		RRCA
		RRCA
		RRCA
		CALL VGA_REVRCOLRS						;LOWRES TEXT REVERSE COLORS
		RET
PC_LORESGR:	LD A, VGA_CURSCHAR
		JR PC_EX
PC_NOCOL:	LD A,D
		CP VGA_CURSCHAR
		RET Z								;ALREADY PRINTED
		LD (VGATMPC), A
		LD A, VGA_CURSCHAR 							;'_'
PC_EX:		CALL VGA_DOPRNCH		
		RET
		
		
;SCROLLS TEXT LINES UP & CLEARS LAST LINE
;A HAS THE CURRENT LINE = THE LAST ONE		
DOSCRL_TXT:	CALL VGA_GETPAGE
		LD A, (VGAMAXX)
		LD H, 0
		LD L, A
		LD DE, $8000
		ADD HL, DE
;MULTIPLY VGAMAXX*(VGAMAXY-1)
		PUSH HL
		PUSH DE
;H*E
		LD H, A
		LD A, (VGAMAXY)
		DEC A
		LD E, A
		CALL Mult8
		LD B, H
		LD C, L
		POP DE
		POP HL
		PUSH BC
		LDIR 								;SCROLL UP 39 LINES
		POP DE								;DE = BC
		LD HL, $8000
		ADD HL, DE 							;LINE 39 OR 19 ADDRESS TO BE CLEARED (0-39) (0-19)
		LD A, (VGAMAXX) 						;80 OR 40
		LD B, A
		LD A, 32
DST_AGN:	LD (HL), A
		INC HL
		DJNZ DST_AGN
		CALL VGA_RMVPAGE
		LD A, (VGAMAXY)
		DEC A
		RET
		
DOSCRL_COL:	CALL VGA_GETPAGE
		LD HL, $8428 							;LINE 1
		LD DE, $8400 							;LINE 0
		LD BC, 800 - 40 						;BYTES TO SCROLL UP
		LDIR
		CALL VGA_GETCOL 						;SET DEFAULT COLOR
		LD HL, $86F8 							;LINE 19 = LAST LINE
		LD B, 40
DOS_AGNCL:	LD (HL), A 							;CLEAR LAST LINE
		INC HL
		DJNZ DOS_AGNCL
		CALL VGA_RMVPAGE
		RET
		
		
		
;-------------GRAPHICS  SCREEN-----------------------
		
;SET PAGES 8,9 OR 12,13 OF VIDEO LOW VIDEO MEM TO $4000 BANKS 2,3
;PRESERVES HL
;ALWAYS CALL VGA_RMVGRPG WHEN FINISH YOUR JOB
VGA_SETGRPGLO:	
		LD A, (PGSEM)
		INC A
		LD (PGSEM), A
		CP 1
		RET NZ
		PUSH HL
		LD B, 2 							;4000h
		CALL GETPGINBANK
		LD (TMPG), A
		LD B, 3 							;6000h
		CALL GETPGINBANK
		LD (TMPG + 1), A
		LD A,(VGABUF)
		RRA								;PUT SCREEN BUF ON CARRY FLAG
		JR C,VSPL_SETBUFONE
;GET PAGE 8 AT $A000=B5
		LD A, 8
		LD B, 2
		CALL PUTPGINBANK
;GET PAGE 9 AT $C000=B6
		LD A, 9
		LD B, 3
		CALL PUTPGINBANK
		POP HL
		RET
VSPL_SETBUFONE:	;GET PAGE 12 AT $A000=B5
		LD A, 12
		LD B, 2
		CALL PUTPGINBANK
;GET PAGE 13 AT $C000=B6
		LD A, 13
		LD B, 3
		CALL PUTPGINBANK
		POP HL
		RET

		
;SET PAGES 10,11 OR 14,15 OF VIDEO HI VIDEO MEM TO $4000 BANKS 2,3
;PRESERVES HL
;ALWAYS CALL VGA_RMVGRPG WHEN FINISH YOUR JOB
VGA_SETGRPGHI:	
		LD A, (PGSEM)
		INC A
		LD (PGSEM), A
		CP 1
		RET NZ
		PUSH HL
		LD B, 2 							;4000h
		CALL GETPGINBANK
		LD (TMPG), A
		LD B, 3 							;6000h
		CALL GETPGINBANK
		LD (TMPG + 1), A
		LD A,(VGABUF)
		RRA								;PUT SCREEN BUF ON CARRY FLAG
		JR C,VSPH_SETBUFONE
;PUT PAGE 10 AT $4000=B3
		LD A, 10
		LD B, 2
		CALL PUTPGINBANK
;PUT PAGE 11 AT $6000=B4
		LD A, 11
		LD B, 3
		CALL PUTPGINBANK
		POP HL
		RET
VSPH_SETBUFONE:	;PUT PAGE 14 AT $4000=B3
		LD A, 14
		LD B, 2
		CALL PUTPGINBANK
;PUT PAGE 15 AT $6000=B4
		LD A, 15
		LD B, 3
		CALL PUTPGINBANK
		POP HL
		RET
	
		
;RESTORE ORIGINAL PAGE ON BANKS 2,3
;PRESERVES HL
VGA_RMVGRPG:	LD A, (PGSEM)
		CP 0
		RET Z
		DEC A
		LD (PGSEM), A
		CP 0
		RET NZ
		PUSH HL
		LD B, 2
		LD A, (TMPG)
		CALL PUTPGINBANK 						;RESTORE OLD PAGE
		LD B, 3
		LD A, (TMPG + 1)
		CALL PUTPGINBANK 						;RESTORE OLD PAGE
		POP HL
		RET
		
;C THE SCREEN CODE		
VGA_GRPHINIT:	CALL VGA_SETSCRDEFS						;SET SCREEN DEFAULTS
		CALL VGA_GRCLS
		XOR A
		RET
		
;CHECKS THE PARAMS ON HL,DE FOR VALIDITY
;IF C THEN PARAMS ARE VALID
;IF NC JUST RETURN PARAMS NOT VALID
;PRESERVES A,HL,DE
VGA_CHECKXY32:	PUSH AF
		PUSH HL
		PUSH DE
		OR A
		LD DE, 320
		SBC HL, DE
		JR NC, CXY3_ABEX
		POP DE
		PUSH DE
		EX DE, HL
		LD DE, 200
		SBC HL, DE
		JR NC, CXY3_ABEX
		POP DE
		POP HL
		POP AF
		SCF 								;RETURN WITH C SET
		RET
;;ABNORMAL EXIT PIXEL CANT PUT TO SCREEN
CXY3_ABEX:	POP DE 								
		POP HL
		POP AF
		OR A
		RET 								;RETURN WITH NC		
				
		
;PLOTPIXEL AT 320X200
;USES 2 BANKS EITHER LOW OR HIGH
;HL=X , DE=Y  A=COLOR
VGA_PLTPXL32:	CALL VGA_CHECKXY32						;CHECK BOUNDS
		RET NC
		PUSH HL 							;CHECK BOUNDS
		PUSH AF
		LD A, E
		CP 102
		JR C, PPNXT0 							;LESS THAN 102
		JR NZ, NXTBNK 							;MORE THAN 102
		PUSH HL 							;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
		LD BC, 128
		OR A
		SBC HL, BC
		LD B, A
		LD A, H
		OR A 								; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
		LD A, B
		POP HL
		JR NZ, PPNXT0
;BANK 2 LINE 102
		LD A, 103 							;WE ARE AT LINE ZERO ON 2ND BANK
		LD DE, 129 + 191
		OR A
		SBC HL, DE 							;
NXTBNK:		SUB 103 							;SKIP 102 ROWS
		LD DE, 192 							;320-128
		OR A
		ADC HL, DE
		PUSH AF
;PUSH HL
		CALL VGA_SETGRPGHI
;POP HL	 ;L HAS THE EXCESS OF 129
		POP AF 								;A HAS THE ROWS ON 2ND 16K
		JR PPNXT1
PPNXT0:		PUSH AF 							;A=E=ROW=Y
		CALL VGA_SETGRPGLO
		POP AF
PPNXT1:		LD DE, BASEADDR
;HALVE HL=X CAUSE 2 PIXELS ONE BYTE
		SRL H
		RR L
		ADD HL, DE 							;FIND COLUMN
		PUSH HL
		LD DE, 160
;HL=A*DE
		CALL Mult12
		POP DE
		ADD HL, DE
DOPLOTPX:	POP BC 								;B HAS THE COLOR
		POP DE 								;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
		LD A, (HL) 							;GET PIXEL BYTE
		BIT 0, E 							;CHECK X IS EVEN OR ODD
		JR Z, DOEVEN 							;EVEN
;SET RIGHT 4 BITS
		AND $F0 							;CLEAR RIGHT 4 BITS
		JR DPEXIT
;SET LEFT 4BITS
DOEVEN:		RLC B
		RLC B
		RLC B
		RLC B
		AND $0F 							;ZERO LEFT
DPEXIT:		OR B 								;MIX PIXELS
		LD (HL), A
		CALL VGA_RMVGRPG
		RET
		
		
VGA_GRCLS:	CALL VGA_SETGRPGLO
		LD HL, BASEADDR
		LD DE, BASEADDR + 1
		LD BC, 16384 - 1 						;BYTES ON 1ST 16K
		XOR A
		LD (HL), A
		LDIR 								;RED - RED
;CALL FILLBTS
		CALL VGA_RMVGRPG
		CALL VGA_SETGRPGHI
		LD HL, BASEADDR
		LD DE, BASEADDR + 1
		LD BC, 15616 - 1 						;BYTES ON 2ND 16K
		XOR A
		LD (HL), A
		LDIR
		CALL VGA_RMVGRPG
		XOR A								;RESET TEXT COORDS
		LD (VGATX_X), A
		LD (VGATX_Y), A
		RET 								;TO MENU
		
FILLBTS:	PUSH BC
AGN1:		LD (DE), A
		INC DE
		DEC BC
		LD H, A
		LD A, B
		OR C
		LD A, H
		JR NZ, AGN1
		DEC L
		LD A, L
		OR A
		LD A, H
		POP BC
		JR NZ, FILLBTS
		RET
		
		
;RETURNS THE PIXEL OF X,Y ON A
;DESTROYS BC,DE,HL
;HL=X , DE=Y
VGA_GETPXL32:	PUSH HL
		PUSH AF
		LD A, E
		CP 102
		JR C, GPNXT0 							;LESS THAN 102
		JR NZ, GPNXTBNK 						;MORE THAN 102
		PUSH HL 							;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
		LD BC, 128
		OR A
		SBC HL, BC
		LD B, A
		LD A, H
		OR A 								; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
		LD A, B
		POP HL
		JR NZ, GPNXT0
;BANK 2 LINE 102
		LD A, 103 							;WE ARE AT LINE ZERO ON 2ND BANK
		LD DE, 129 + 191
		OR A
		SBC HL, DE 							;
GPNXTBNK:	SUB 103 							;SKIP 102 ROWS
		LD DE, 192 							;320-128
		ADD HL, DE
		PUSH AF
;PUSH HL
		CALL VGA_SETGRPGHI
;POP HL	 ;L HAS THE EXCESS OF 129
		POP AF 								;A HAS THE ROWS ON 2ND 16K
		JR GPNXT1
GPNXT0:		PUSH AF 							;A=E=ROW=Y
		CALL VGA_SETGRPGLO
		POP AF
GPNXT1:		LD DE, BASEADDR
;HALVE HL=X CAUSE 2 PIXELS ONE BYTE
		SRL H
		RR L
		ADD HL, DE 							;FIND COLUMN
		LD DE, 160
		CALL Mult12 							;HL=A*DE
GPDOGETPX:	POP BC 								;B HAS THE COLOR
		POP DE 								;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
		LD A, (HL) 							;GET PIXEL BYTE
		BIT 0, E 							;CHECK X IS EVEN OR ODD
		JR Z, GPDOEVEN 							;EVEN
;GET RIGHT 4 BITS
		AND $0F 							;CLEAR LEFT 4 BITS
		JR GPDPEXIT
;SET LEFT 4BITS
GPDOEVEN:	RLC A
		RLC A
		RLC A
		RLC A
		AND $0F 							;ZERO LEFT
GPDPEXIT:	PUSH AF 							;SAVE PIXEL
		CALL VGA_RMVGRPG
		POP AF 								;RESTORE PIXEL
		RET
		
		
;PRINTS A CHAR ON GRAPHICS SCREEN
;NO FORWARD OF CURSOR
VGA_DOPRNCHGRP: JP VGA_PRNGRCH
		
		
		
;NOT DONE
;SCROLL GRAPHICS SCREEN
;THIS IS TIME CONSUMING
DOSCRLGR:	
		RET
		
		
;PUTS ALL GRAPHICS PAGES TO RAM 
;DESTROYS BC,DE,A
;USES BANK 2,3,4,5 SO FREE RAM IS BANK 6
SETGRAPHPGS:	LD B, 2
		LD A, (PGSEM) 							;PG SEM FOR ALL 4 PAGES
		INC A
		LD (PGSEM), A
		CP 1
		RET NZ
		PUSH HL
		LD C, 4
		LD HL, TMPG
		PUSH BC
SGP_NXT:	PUSH HL
		CALL GETPGINBANK
		POP HL
		LD (HL), A
		INC HL
		INC B
		DEC C
		JR NZ, SGP_NXT
		POP BC
		LD C, 4
		LD A,(VGABUF)
		RRA
		LD A, 8							;BUFFER 0
		JR NC, SGP_NXT2
		LD A, 12						;BUFFER 1
		
;PUT 4 VIDEO PAGES AT BANK B - B+3
SGP_NXT2:	PUSH BC
		CALL PUTPGINBANK
		POP BC
		INC A
		INC B
		DEC C
		JR NZ, SGP_NXT2
		POP HL
		RET
		
;RESTORE PREVIOUS 4 PAGES
;DESTROYS A,DE,BC
RMVGRAPHPGS:	LD B, 2
		LD A, (PGSEM)
		CP 0
		RET Z
		DEC A
		LD (PGSEM), A
		CP 0
		RET NZ
		PUSH HL
		LD HL, TMPG
		LD C, 4
RGP_NXT:	LD A, (HL)
		PUSH HL
		PUSH BC
		CALL PUTPGINBANK 						;RESTORE OLD PAGE
		POP BC
		POP HL
		INC B
		INC HL
		DEC C
		JR NZ, RGP_NXT
		POP HL
		RET
		
		
;CALCULATES THE VIDEO ADDRESS START=$4000
;8 BITS PER PIXEL AND 400 LINES
;HL=X,  DE=Y
;AD= $4000+Y*80+X DIV 8 AND SET THE X MOD 8 BIT ON THAT BYTE
;HL=X DE=Y
;RETURNS HL WITH THE ADDRESS, A HAS THE PIXEL MASK TO SET OR UNSET
;DESTROYS A,DE,BC
VGA_CALC_VA64:	LD A, 80
;PUSH DE
		PUSH HL
		CALL Mult12 							;HL=A * DE=Y
		EX DE, HL 							;DE=Y*80
		POP HL
		LD C, 8
		CALL DIV16_8 							;HL=HL/C  A=REMAINDER
		ADD HL, DE 							;THE ADDRESS IN 32K VIDEO BUFFER
		LD DE, $4000
		ADD HL, DE 							;THE ADDRESS IN Z80 RAM
		
		LD C,A
		LD A,7
		SUB C								;A=7-REM TO FIND THE BIT TO SET LEFT TO RIGHT
		LD B, 1
		OR A
VCVA_AGN:	JR Z, VCVA_NXT
		RL B 								;MOVE B (THE MASK) TO THE RIGHT BIT
		DEC A
		JR VCVA_AGN
VCVA_NXT:	LD A, B
		RET
		
		
		
;CHECKS THE PARAMS ON HL,DE FOR VALIDITY
;IF C THEN PARAMS ARE VALID
;IF NC JUST RETURN PARAMS NOT VALID
VGA_CHECKXY64:	PUSH AF
		PUSH HL
		PUSH DE
		OR A
		LD DE, 640
		SBC HL, DE
		JR NC, CXY6_ABEX
		POP DE
		PUSH DE
		EX DE, HL
		LD DE, 400
		SBC HL, DE
		POP DE 								;ABNORMAL EXIT PIXEL CANT PUT TO SCREEN
		POP HL
		JR NC, CXY6_ABEX
		POP AF
		SCF 								;RETURN WITH C SET
		RET
CXY6_ABEX:	POP AF
		XOR A
		RET 								;RETURN WITH NC
		
;PLOTS A PIXEL AT 640X400
;USES 4 BANKS FROM BANK 2 TO 5
;HL=X , DE=Y  A=COLOR
VGA_PLTPXL64:	CALL VGA_CHECKXY64
		RET NC 								;NOT VALID PARAMS
		PUSH AF
		PUSH HL
		PUSH DE
		CALL SETGRAPHPGS 						;BRING VIDEO PAGES TO Z80
PP6_PAROK:	POP DE
		POP HL
;CALC VIDEO ADDRESS
		CALL VGA_CALC_VA64 						;HL THE VGA ADDRESS AND A THE BIT MASK
		POP DE 								;D HAS THE COLOR 0 OR 1, RESET BIT OR SET
		LD E, A
		LD A,(VGABCOL)
		CP D 								;CHECK IF COLOR IS SAME AS BACKG
		JR Z, PP6_RESET
;SET THE BIT IN MASK TO 1, MASK IN E  I.E. 00010000
		LD A, (HL) 							;GET THE BYTE
		OR E 								;SET THE BIT
		LD (HL), A 							;PUT THE BYTE BACK
		JR PP6_EXIT
		
PP6_RESET:									;RESET THE BIT IN MASK TO 0
		LD A, E 							;MASK ON A
		CPL 								;INVERT ALL PIXELS
		LD E, A 							;MASK ON E
		LD A, (HL) 							;GET THE BYTE
		AND E 								;RESET THE BIT
		LD (HL), A 							;PUT THE BYTE BACK
PP6_EXIT:	CALL RMVGRAPHPGS 						;RESTORE PREVIOUS PAGES TO Z80
		RET
		
		
;RETURNS A PIXEL FROM 640X400 MONOCHROME
;RETURNS THE PIXEL OF X,Y ON A
;DESTROYS BC,DE,HL
;HL=X , DE=Y
;A =1 IF THE PIXEL IS SET ELSE 0
VGA_GETPXL64:	CALL VGA_CHECKXY64
		RET NC 								;NOT VALID PARAMS
		CALL SETGRAPHPGS 						;BRING VIDEO PAGES TO Z80
		POP DE
		POP HL
		POP AF
;CALC VIDEO ADDRESS
		CALL VGA_CALC_VA64 						;HL THE VGA ADDRESS AND A THE BIT MASK
		LD E, A
		LD A, (HL)
		AND E
		CP 0
		JR Z, GP6EXIT
		LD A, 1
		
GP6EXIT:	PUSH AF
		CALL RMVGRAPHPGS 						;RESTORE PREVIOUS PAGES TO Z80
		POP AF
		RET
		
		
		
;PLOTS A PIXEL EITHER AT 320X200 OR 640X400
;DESTROYS C
;PRESERVES HL,DE
;HL=X , DE=Y  A=COLOR
VGA_PLTPXL:	PUSH AF
		PUSH HL
		PUSH DE 							;SAVE A
		CALL VGA_GETCONF
		POP DE
		POP HL
		POP AF
		PUSH HL
		PUSH DE
		LD IX,VGA_PPEXIT
		PUSH IX								;RETURN ADDRESS		
		BIT 1, C 							;test low or hi
		JP NZ, VGA_PLTPXL64 						;NZ MEANS HI
		JP VGA_PLTPXL32
VGA_PPEXIT:	POP DE
		POP HL
		RET
		
;RETURNS A PIXEL EITHER AT 320X200 OR 640X400
;RETURNS THE PIXEL OF X,Y ON A
;DESTROYS BC,DE,HL
;HL=X , DE=Y
VGA_GETPXL:	PUSH DE
		CALL VGA_GETCONF
		POP DE
		BIT 1, C 							;test low or hi
		JP NZ, VGA_GETPXL64 						;NZ MEANS HI
		JP VGA_GETPXL32

;PRINT A CHAR ON GRAPHICS SCREENS
;VGASTADR THE ADDRESS ON VIDEO BUFFER TO START PRINTING
;VGATX_X, VGATX_Y THE COORDS 
;A THE CHAR TO PRINT
VGA_PRNGRCH:  	PUSH AF
		;CALL VGA_GETCONF
		;BIT 1, C
		;LD E,80
		;JR NZ,VPGC_NXT
		;320
		LD E,FONT_WIDTH
VPGC_NXT:	LD A,(VGATX_X)
		LD H,A
		;X*8 ,Y*10
		CALL MULT8
		PUSH HL								;SAVE RESULT
		LD E,FONT_HEIGHT
		LD A,(VGATX_Y)
		LD H,A
		CALL MULT8
		POP DE
		EX DE,HL
		;HL THE X DE THE Y COORDS TO PLOT
		POP AF								;GET THE CHAR
;PRINT A CHAR AT COORDS HL=X DE=Y A=CHAR
VGA_PRNGRCHAT:	PUSH HL
		PUSH DE
		OR A
		LD HL, FONT_ADDR
		LD D, 0
		LD E, A
		ADC HL, DE 							;HL THE START OF FONT
		LD C, FONT_HEIGHT 						; TOTAL FONT LINES
		EX DE,HL							;DE THE START OF FONT PATTERN
VPGC_AGN3:	LD A, (DE) 							;FONT 8BIT PATTERN FOR A LINE
		LD B, FONT_WIDTH
VPGC_AGN4:	SLA A 								;CHECK BIT FOR 1=FCOLOR OR 0=BCOLOR
		LD H,A								;SAVE A		
		JR C, VPGC_FCOLOR
		LD A, (VGABCOL)
		JR VPGC_CONT
VPGC_FCOLOR:	LD A, (VGAFCOL)		
		;SAVE DE, BC RESTORE HL,DE
VPGC_CONT:	EXX		
		POP DE
		POP HL
		CALL VGA_PLTPXL
		INC HL								;NEXT PIXEL ON VIDEO BUF
		PUSH HL
		PUSH DE
		EXX
		LD A,H								;RESTORE A
		DJNZ VPGC_AGN4
		EXX
		POP DE
		POP HL
		LD B,0
		LD C,FONT_WIDTH
		OR A
		SBC HL,BC							;X=HL AT THE START
		INC DE								;Y=DE +1
		PUSH HL
		PUSH DE
		EXX
		INC D 								;ADD 256 FOR NEXT CHAR PATTERN
		DEC C
		JR NZ, VPGC_AGN3
		POP DE
		POP HL
		RET




