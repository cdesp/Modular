;VGA MODULE
		
		GLOBAL VGA_INIT 						;INITIALIZATION PARAMS
		GLOBAL VGA_GETPAGE						;BRINGS PG8 TO BANK 4
		GLOBAL VGA_RMVPAGE						;RESTORES PREVIOUS PAGE ON BANK 4
		GLOBAL VGA_SETCONF 						;SET SCREEN MODE
		GLOBAL VGA_GETCONF 						;GET SCREEN MODE
		GLOBAL VGA_TXTCLR 						;CLEARS THE TEXT SCREEN
		GLOBAL VGA_PRCH 						;PRINT A CHAR
		GLOBAL VGA_PRINT 						;PRINT A MESSAGE
		GLOBAL VGA_RMVCURS 						;REMOVES THE CURSOR
		GLOBAL VGA_PRNCURS 						;SETS THE CURSOR
		GLOBAL VGA_GETCHAR 						;GETS A CHAR FROM SCREEN
		GLOBAL VGA_DOCHCLR 						;CHANGES THE CHAR COLOR INFO
		GLOBAL VGA_PLTPXL32 						;PLOTS A PIXEL ON 320X200X4
		GLOBAL VGA_GRCLS 						;CLEARS GRAPHIC SCREEN
		GLOBAL VGA_SETGRPGHI						;BRINGS PAGE 10,11 TO BANK 5,6
		GLOBAL VGA_SETGRPGLO						;BRINGS PAGE 8,9 TO BANK 5,6
		GLOBAL VGA_RMVGRPG						;RESTORES PAGES TO BANK 5,6

		
		
;Bit 0 is Blue, 1 is green , 2 is red, 3 is intensity
		@VGA_BLACK EQU 0
		@VGA_MAROON EQU 1
		@VGA_GREEN EQU 2
		@VGA_OLIVE EQU 3
		@VGA_NAVY EQU 4
		@VGA_PURPLE EQU 5
		@VGA_TEAL EQU 6
		@VGA_SILVER EQU 7
		@VGA_GRAY EQU 8
		@VGA_RED EQU 9
		@VGA_LIME EQU 10
		@VGA_YELLOW EQU 11
		@VGA_BLUE EQU 12
		@VGA_FUCHSIA EQU 13
		@VGA_AQUA EQU 14
		@VGA_WHITE EQU 15
		
		CONFPG EQU 11
		CONFADDR EQU $1FF8 						;32760 SCREEN CONFIG BYTE BIT 1=LO/HI RES,BIT 2=GRAPH/TEXT SCREEN
		LOGRAPH EQU 00B
		LOTEXT EQU 01B
		HIGRAPH EQU 10B
		HITEXT EQU 11B
		
		BASEADDR EQU $A000
		
		
		
VGA_INIT:	LD C, 01B 							;LOW RES TEXT SCREEN
		CALL VGA_SETCONF
		RET
		
; SETS NEW SCREEN
; C THE SCREEN CODE 0,1,2,3
VGA_SETCONF:	PUSH HL
		LD B, 4 							;8000h
		CALL GETPGINBANK
		PUSH AF 							;SAVE PREVIOUS PAGE
		PUSH BC 							;SAVE SCREEN CODE
		LD A, CONFPG 							;PAGE 11
		CALL PUTPGINBANK
		POP BC
		LD A, C
		LD HL, CONFADDR
		LD DE, $8000
		OR A
		ADC HL, DE
		LD (HL), A
		POP AF
		PUSH BC
		CALL PUTPGINBANK 						;RESTORE PREVIOUS PAGE
		POP BC
		POP HL
		LD A, C 							;SCREEN MODE
		BIT 0, A
		JP NZ, VGA_TXTINIT
		JP VGA_GRPHINIT
		
;RETURNS CURRENT SCREEN CODE
;A RETURNS 0,1,2,3
VGA_GETCONF:	PUSH HL
		LD B, 4 							;8000h
		CALL GETPGINBANK
		PUSH AF 							;SAVE PREVIOUS PAGE
		LD A, CONFPG 							;PAGE 11
		CALL PUTPGINBANK
		LD HL, CONFADDR
		LD DE, $8000
		OR A
		ADC HL, DE
		LD A, (HL)
		LD C, A
		POP AF
		PUSH BC
		CALL PUTPGINBANK
		POP BC
		POP HL
		LD A, C
		RET
		
		
		
;-------------TEXT SCREEN-----------------------
		
;SETS THE VIDEO PAGE 8 ON $8000 BANK 4
;IT MAY BE CALLED SEVERAL TIMES IT KEEPS TRACK ON THAT
;EACH VGA_GETPAGE MUST HAVE A VGA_RMVPAGE
;LAST ONE SETS THE PREVIOUS PAGE IN BANK 4
;DESTROYS A,BC,DE
VGA_GETPAGE:	LD A, (PGSEM)
		INC A
		LD (PGSEM), A
		CP 1
		RET NZ
		PUSH HL
		LD B, 4 							;8000h
		CALL GETPGINBANK
		LD (TMPG), A 							;SAVE OLD PAGE
		LD A, 8 							;PAGE 8
		CALL PUTPGINBANK
		POP HL
		RET
		
;SET BACK THE PAGE THAT WAS ON BANK 4
;DESTROYS A,BC,DE
VGA_RMVPAGE:	LD A, (PGSEM)
		DEC A
		LD (PGSEM), A
		CP 0
		RET NZ
		PUSH HL
		LD B, 4
		LD A, (TMPG)
		CALL PUTPGINBANK 						;RESTORE OLD PAGE
		POP HL
		RET
		
VGA_SETFONT:	CALL VGA_GETPAGE
		LD HL, FONT_ADDR
		LD DE, $9000 							;FONT ADDRESS ON VIDEO MEM AT $1000=4096 ON BANK 4=$8000
		LD BC 2560
		LDIR 								;TRANSFER
		CALL VGA_RMVPAGE
		RET
		
;C HAS THE SCREEN MODE
VGA_TXTINIT:	XOR A
		LD (PGSEM), A
		LD (TMPG), A
		LD A, VGA_YELLOW
		LD (VGAFCOL), A
		LD A, VGA_NAVY
		LD (VGABCOL), A
		LD A, C
		LD D, 40
		LD E, 20
		CP 1 								;LOW RES TEXT MODE
		JR Z, VGTI_NX
;HIRES TEXT MODE
		LD D, 80
		LD E, 40
VGTI_NX:	LD A, D
		LD (VGAMAXX), A
		LD A, E
		LD (VGAMAXY), A
		XOR A
		LD (VGATX_X), A
		LD (VGATX_Y), A
		CALL VGA_SETFONT 						;SET THE FONT ON VIDEO MEM
		
;CLEARS TEXT SCREEN MODE 1 OR 3
VGA_TXTCLR:	LD A, (VGAMAXX)
		LD H, A
		LD A, (VGAMAXY)
		LD E, A
		CALL MULT8
		PUSH HL
		CALL VGA_GETPAGE
		POP BC 								;TOTAL BYTES
		LD HL, $8000 							;BANK4
		LD DE, $8400 							;COLOR INFO
		JP VGAC_AGN
		
		
		
		
;CLEARS THE VGA TEXT AREA FOR 320X200X4
;PUTS 32 SPACE AS CHAR AND THE BACKGROUND COLOR ONLY
VGA_CLR:	CALL VGA_GETPAGE
		LD BC, 800
		LD HL, $8000 							;DEL CHARS
		LD DE, $8400
;CLEARS THE VGA TEXT AREA
;PUTS 32 SPACE AS CHAR AND THE BACKGROUND COLOR ONLY
VGAC_AGN:	LD A, 32
		LD (HL), A
		LD A, (VGABCOL)
		SLA A
		SLA A
		SLA A
		SLA A
		LD (DE), A
		INC HL
		INC DE
		DEC BC
		LD A, B
		OR C
		JR NZ, VGAC_AGN
		XOR A
		LD (VGATX_X), A
		LD (VGATX_Y), A
		CALL VGA_RMVPAGE
		RET
		
;RETURNS COLOR INFO
;DESTROYS A,B
VGA_GETCOL:	LD A, (VGAFCOL) 						;GET COLOR INFO
		LD B, A
		LD A, (VGABCOL)
		SLA A
		SLA A
		SLA A
		SLA A
		OR B 								;BLEND COLOR 4 BITS FCOLOR AND 4 BITS BCOLOR
		RET
		
		
;RETURNS THE VIDEO TEXT ADDRESS OF TX,TY
;DESTROYS BC,DE,HL
VGA_CALC_VIDAD:	PUSH AF
		LD B, 0
		LD A, (VGATX_Y)
		LD C, A
		LD HL, $8000
		LD DE, 40
VGCLC_AGN:	LD A, B
		OR C
		JR Z, VGCLC_DOX
		ADD HL, DE
		DEC BC
		JR VGCLC_AGN
VGCLC_DOX:	LD B, 0
		LD A, (VGATX_X)
		LD C, A
		ADD HL, BC
		POP AF
		RET
		
;PRINTS A CHAR & COLOR TO CURRENT TX,TY
;DESTROYS BC,DE,A
VGA_PRCH:	PUSH AF
		CALL VGA_GETPAGE
		POP AF
		CP 31
		CALL C, VGA_NOTVISCH
		JR Z, PRCH_EX 							;EXIT IF CHAR WAS HANDLED
		CALL VGA_DOPRNCH 						;PRINT THE CHAR
		CALL VGA_TXFORW 						;TEXT FORWARD
PRCH_EX:	CALL VGA_RMVPAGE
		RET
		
;PRINTS A CHAR ON CURRENT POS
VGA_DOPRNCH:	PUSH HL
		PUSH AF
		CALL VGA_GETPAGE
		CALL VGA_CALC_VIDAD 						;CALC VIDEO ADDRESS
		POP AF
		LD (HL), A 							;PUT CHAR ON SCREEN
		LD DE, $400
		ADD HL, DE 							;CALC COLOR ADDRESS
		CALL VGA_GETCOL 						;GET CURRENT COLOR
		LD (HL), A 							;PUT COLOR INFO ON SCREEN
		POP HL
		CALL VGA_RMVPAGE
		RET
		
;PERFORMS SCREEN ACTIONS BASED ON CONTROL CHARS 0-31
;A= CHAR 0-31
VGA_NOTVISCH:	CP 8 								;BACKSPACE
		JR NZ, NX1
		LD A, (VGATX_X)
		CP 0 								;COL 0 HAS THE PROMPT
		RET Z 								;DO NOT PRINT ANYTHING
		DEC A
		LD (VGATX_X), A
		LD A, 32 							;PRINT SPACE
		CALL VGA_DOPRNCH 						;
		XOR A 								;CLEAR ZERO
		RET
NX1:		CP 10 								;JUST IGNORE IT
		RET Z
		CP 13 								;CR =NEW LINE
		JR NZ, NX2
		CALL VGDOY 							;ADD 1 TO TY
		LD (VGATX_X), A 						;ZF IS SET
		RET
NX2:		XOR A 								;NC MEANS WE DON'T PRINT
		RET
		
;A HAS THE NEW COLOR VALUE TO PUT ON CHAR
;DESTROYS HL,DE
VGA_DOCHCLR:	PUSH AF
		CALL VGA_GETPAGE
		CALL VGA_CALC_VIDAD 						;CALC VIDEO ADDRESS
		LD DE, $400
		ADD HL, DE 							;CALC COLOR ADDRESS
		POP AF
		LD (HL), A 							;PUT COLOR INFO ON SCREEN
		CALL VGA_RMVPAGE
		RET
		
;GET THE CURRENT CHAR ON D AND THE COLOR ON E
VGA_GETCHAR:	CALL VGA_GETPAGE
		CALL VGA_CALC_VIDAD 						;CALC VIDEO ADDR ON HL
		LD A, (HL)
		LD DE, $400
		ADD HL, DE 							;CALC COLOR ADDRESS
		LD D, A
		LD A, (HL)
		LD E, A
		CALL VGA_RMVPAGE
		RET
		
		
VGA_RMVCURS:	CALL VGA_GETCHAR
		LD A, D
		CALL VGA_DOPRNCH
		RET
VGA_PRNCURS:	CALL VGA_GETPAGE
		CALL VGA_GETCHAR 						; E HAVE THE COLOR INFO
		LD A, E
		RRCA 								;CHANGE FORE AND BACK COLOR INFO
		RRCA
		RRCA
		RRCA
		CALL VGA_DOCHCLR 						;CHANGE THE COLOR
		CALL VGA_RMVPAGE
		RET
		
;HL THE MESSAGE
VGA_PRINT:	CALL VGA_GETPAGE
VGAP_AGN:	LD A, (HL)
		CP 0
		JR Z, VGAP_EX
		CALL VGA_PRCH
		INC HL
		JR VGAP_AGN
VGAP_EX:	CALL VGA_RMVPAGE
		RET
		
		
VGA_TXFORW:	PUSH AF
		LD A, (VGATX_X)
		INC A
		CP 40
		CALL Z, VGDOY
		LD (VGATX_X), A
		POP AF
		RET
VGDOY:		LD A, (VGATX_Y)
		INC A
		CP 20
		CALL Z, DOSCRL
		LD (VGATX_Y), A
		XOR A
		RET
		
DOSCRL:		CALL DOSCRL_COL 						;SCROLL COLORS
		CALL DOSCRL_TXT 						;SCROLL TEXT
		RET
DOSCRL_TXT:	LD HL, $8028 							;LINE 1
		LD DE, $8000 							;LINE 0
		LD BC, 800 - 40 						;BYTES TO SCROLL UP
		LDIR
		LD A, 32
		LD HL, $82F8 							;LINE 19 = LAST LINE
		LD B, 40
DOS_AGN:	LD (HL), A 							;CLEAR LAST LINE
		INC HL
		DJNZ, DOS_AGN
		LD A, 19 							;SET TO LAST LINE
		RET
		
DOSCRL_COL:	LD HL, $8428 							;LINE 1
		LD DE, $8400 							;LINE 0
		LD BC, 800 - 40 						;BYTES TO SCROLL UP
		LDIR
		CALL VGA_GETCOL 						;SET DEFAULT COLOR
		LD HL, $86F8 							;LINE 19 = LAST LINE
		LD B, 40
DOS_AGNCL:	LD (HL), A 							;CLEAR LAST LINE
		INC HL
		DJNZ, DOS_AGNCL
		RET
		
		
		
;-------------GRAPHICS  SCREEN-----------------------
		
;SET 16 OF VIDEO LOW VIDEO MEM TO $A000
;PRESERVES HL
;ALWAYS CALL VGA_RMVGRPG WHEN FINISH YOUR JOB
VGA_SETGRPGLO:	
		LD A, (PGSEM)
		INC A
		LD (PGSEM), A
		CP 1
		RET NZ
		PUSH HL
		LD B, 5 							;A000h
		CALL GETPGINBANK
		LD (TMPG), A
		LD B, 6 							;A000h
		CALL GETPGINBANK
		LD (TMPG + 1), A
;GET PAGE 8 AT $A000=B5
		LD A, 8
		LD B, 5
		CALL PUTPGINBANK
;GET PAGE 9 AT $C000=B6
		LD A, 9
		LD B, 6
		CALL PUTPGINBANK
		POP HL
		RET
		
;SET 16 OF VIDEO HI VIDEO MEM TO $A000
;PRESERVES HL
;ALWAYS CALL VGA_RMVGRPG WHEN FINISH YOUR JOB
VGA_SETGRPGHI:	
		LD A, (PGSEM)
		INC A
		LD (PGSEM), A
		CP 1
		RET NZ
		PUSH HL
		LD B, 5 							;A000h
		CALL GETPGINBANK
		LD (TMPG), A
		LD B, 6 							;A000h
		CALL GETPGINBANK
		LD (TMPG + 1), A
;GET PAGE 10 AT $A000=B5
		LD A, 10
		LD B, 5
		CALL PUTPGINBANK
;GET PAGE 11 AT $C000=B6
		LD A, 11
		LD B, 6
		CALL PUTPGINBANK
		POP HL
		RET
		
		
;RESTORE ORIGINAL PAGE ON BANKS 5,6
;PRESERVES HL
VGA_RMVGRPG:	LD A, (PGSEM)
		CP 0
		RET Z
		DEC A
		LD (PGSEM), A
		CP 0
		RET NZ
		PUSH HL
		LD B, 5
		LD A, (TMPG)
		CALL PUTPGINBANK 						;RESTORE OLD PAGE
		LD B, 6
		LD A, (TMPG + 1)
		CALL PUTPGINBANK 						;RESTORE OLD PAGE
		POP HL
		RET
		
		
VGA_GRPHINIT:	CALL VGA_GRCLS
		RET
		
		
;PLOTPIXEL AT 320X200
;HL=X , DE=Y  A=COLOR
VGA_PLTPXL32:									;CHECK BOUNDS
		PUSH HL
		PUSH AF
		LD A, E
		CP 102
		JR C, PPNXT0 							;LESS THAN 102
		JR NZ, NXTBNK 							;MORE THAN 102
		PUSH HL 							;ROW 102 IS SPLIT BETWEEN TWO 16K PAGES
		LD BC, 128
		OR A
		SBC HL, BC
		LD B, A
		LD A, H
		OR A 								; IF H IS ZERO THEN GREATER THAN 128 ELSE LESS OR EQUAL TO 128
		LD A, B
		POP HL
		JR NZ, PPNXT0
;BANK 2 LINE 102
		LD A, 103 							;WE ARE AT LINE ZERO ON 2ND BANK
		LD DE, 129 + 191
		OR A
		SBC HL, DE 							;
NXTBNK:		SUB 103 							;SKIP 102 ROWS
		LD DE, 192 							;320-128
		OR A
		ADC HL, DE
		PUSH AF
;PUSH HL
		CALL VGA_SETGRPGHI
;POP HL	 ;L HAS THE EXCESS OF 129
		POP AF 								;A HAS THE ROWS ON 2ND 16K
		JR PPNXT1
PPNXT0:		PUSH AF 							;A=E=ROW=Y
		CALL VGA_SETGRPGLO
		POP AF
PPNXT1:		LD DE, BASEADDR
;HALVE HL=X CAUSE 2 PIXELS ONE BYTE
		SRL H
		RR L
		ADD HL, DE 							;FIND COLUMN
		LD DE, 160
DONXTROW:	OR A 								;CHECK ROW=0
		JR Z, DOPLOTPX
		ADD HL, DE
		DEC A
		JR DONXTROW
DOPLOTPX:	POP BC 								;B HAS THE COLOR
		POP DE 								;DE=X CHECK IF IT IS EVEN OR ODD AND CHANGE THE PIXEL
		LD A, (HL) 							;GET PIXEL BYTE
		BIT 0, E 							;CHECK X IS EVEN OR ODD
		JR Z, DOEVEN 							;EVEN
;SET RIGHT 4 BITS
		AND $F0 							;CLEAR RIGHT 4 BITS
		JR DPEXIT
;SET LEFT 4BITS
DOEVEN:		RLC B
		RLC B
		RLC B
		RLC B
		AND $0F 							;ZERO LEFT
DPEXIT:		OR B 								;MIX PIXELS
		LD (HL), A
		CALL VGA_RMVGRPG
		RET
		
		
VGA_GRCLS:	CALL VGA_SETGRPGLO
		LD DE, $A000
		LD BC, 16384 							;BYTES ON 1ST 16K
		LD HL, 1
		LD A, $00 							;RED - RED
		CALL FILLBTS
		CALL VGA_RMVGRPG
		CALL VGA_SETGRPGLO
		LD DE, $A000
		LD HL, 1
		LD BC, 15616 							;BYTES ON 2ND 16K
		LD A, $00 							;RED - RED
		CALL FILLBTS
		CALL VGA_RMVGRPG
		RET 								;TO MENU
		
FILLBTS:	PUSH BC
AGN1:		LD (DE), A
		INC DE
		DEC BC
		LD H, A
		LD A, B
		OR C
		LD A, H
		JR NZ, AGN1
		DEC L
		LD A, L
		OR A
		LD A, H
		POP BC
		JR NZ, FILLBTS
		RET


;TODO: PRINT TEXT ON GRAPHICS SCREEN
;CHANGE DISPLAY MODES WITH F5-F8
;USE THE GRAPHICS SCREEN AS TEXT
;MAKE AVAILABLE ALL DRAWING ROUTINES FOR THE VGA