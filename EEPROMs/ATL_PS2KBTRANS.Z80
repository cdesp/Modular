;*******************************************************************************
; Z80 PS/2 Keyboard Translation
;
; This module provides routines for interpreting scan codes received from a
; PS/2 keyboard. It handles extended keys, key release events, and the
; translation of scan codes into ASCII characters considering shift and caps lock states.
;
; Variables:
;   LASTKEY: BYTE - Stores the last key pressed or released.
;   KEYCTR:  BYTE - Flags for Shift, Control, Alt, and Caps Lock states.
;
; External references:
;   CHECKEXT - Routine to check and process extended key scan codes.
;   PS2LOK   - Routine to translate scan codes to ASCII characters.
;*******************************************************************************

;----------------- Variables -----------------
; LASTKEY: BYTE - Last key pressed or released
; KEYCTR:  BYTE - Flags for Shift, Control, Alt, Caps Lock

GLOBAL CHECKEXT
    ; Description: Checks for special and extended key scan codes.
    ; Params: None
    ; Returns: None
    ; Registers used: A, C, HL, BC, DE
    ; Memory accessed: LASTKEY, KEYCTR
;
GLOBAL PS2LOK
    ; Description: Converts a scan code to an ASCII character, considering shift and caps lock.
    ; Params: None
    ; Returns: A = ASCII character; Z=1 if invalid translation
    ; Registers used: A, B, C, HL, D
    ; Memory accessed: PS2TAB1, PS2TAB2

;----------------- Check for Extended Keys -----------------
CHECKEXT:
    CP $E1                     ; Check for break key (break code)
    RET Z                      ; If break, just save it (exit)
    CP $F0                     ; Check for key release code (240)
    RET Z                      ; If release, just save it (exit)
    CP $E0                     ; Check for extended key prefix
    RET Z                      ; If extended, save it
    CP $AA                     ; Post-test to confirm keyboard OK
    RET Z                      ; If OK, return

    LD C, A                    ; Save current key code in C
    LD A, (LASTKEY)            ; Load last key pressed
    CP $E1                     ; Is last key break code?
    JR Z, GTBRK                ; If yes, handle break
    CP $F0                     ; Is last key release?
    JR Z, GTREL                ; If yes, handle release
    CP $E0                     ; Is last key extended?
    JR Z, GTEXT                ; If yes, handle extended key
    LD A, C                    ; Restore current key code

    ; Check for specific modifier keys
    CP 18                      ; LEFT SHIFT
    CALL Z, SHFTOG             ; Toggle shift flag if pressed
    CP 89                      ; RIGHT SHIFT
    CALL Z, SHFTOG             ; Toggle shift flag
    CP 20                      ; RIGHT CTRL
    CALL Z, CTRTOG             ; Toggle control flag
    CP 17                      ; LEFT ALT
    CALL Z, ALTTOG             ; Toggle alt flag
    CP $58                     ; CAPS LOCK
    CALL Z, CAPSTOG            ; Toggle caps lock flag
    RET

;----------------- Handle Key Break (GTBRK) -----------------
GTBRK:
    LD A, C                    ; Load last key code
    CP $F0                     ; Check if last key was release code
    RET Z                      ; If yes, return
    XOR A                      ; Clear A
    RET                        ; Return

;----------------- Handle Extended Keys (GTEXT) -----------------
GTEXT:
    LD A, C                    ; Load scanned extended key
    CP $6B                     ; LEFT arrow
    RET Z
    CP $72                     ; DOWN arrow
    RET Z
    CP $74                     ; RIGHT arrow
    RET Z
    CP $75                     ; UP arrow
    RET Z
    CP $70                     ; INSERT
    RET Z
    CP $6C                     ; HOME
    RET Z
    CP $7D                     ; PAGE UP
    RET Z
    CP $7A                     ; PAGE DOWN
    RET Z
    CP $69                     ; END
    RET Z
    CP $71                     ; DELETE
    RET Z
    CP $66                     ; BACKSPACE
    RET Z
    CP $5A                     ; ENTER (numeric keypad)
    RET Z
    CP $11                     ; RIGHT ALT
    RET Z
    CP $14                     ; LEFT ALT
    RET Z
    CP $4A                     ; NUMLOCK /
    RET Z
    CP $F0                     ; Extended key release prefix
    JR NZ, EXGTEX             ; If not extended key release, invalid

;----------------- Invalid Extended Key -----------------
EXGTEX:
    XOR A                      ; Not valid extended key
    RET

;----------------- Handle Key Release (GTREL) -----------------
GTREL:
    LD A, C                    ; Load key code
    CP 18                      ; LEFT SHIFT released
    CALL Z, SHFRES             ; Reset shift flag
    CP 20                      ; LEFT CTRL released
    CALL Z, CTRRES             ; Reset control flag
    CP 17                      ; LEFT ALT released
    CALL Z, ALTRES             ; Reset alt flag
    CP 89                      ; RIGHT SHIFT released
    CALL Z, SHFRES             ; Reset shift flag
    LD (LASTKEY), A            ; Save last key code
    XOR A                      ; Clear A
    RET

;----------------- Reset Shift Flag -----------------
SHFRES:
    LD HL, KEYCTR              ; Load pointer to key flags
    RES 6, (HL)                ; Reset shift bit (bit 6)
    RET

;----------------- Reset Control Flag -----------------
CTRRES:
    LD HL, KEYCTR
    RES 7, (HL)                ; Reset control bit (bit 7)
    RET

;----------------- Reset Alt Flag -----------------
ALTRES:
    LD HL, KEYCTR
    RES 5, (HL)                ; Reset alt bit (bit 5)
    RET

;----------------- Toggle Shift Flag -----------------
SHFTOG:
    LD HL, KEYCTR
    LD A, $40                  ; Mask for shift (bit 6)
    XOR (HL)                   ; Toggle shift bit
    LD (HL), A
    XOR A                      ; Clear A
    RET

;----------------- Toggle Control Flag -----------------
CTRTOG:
    LD HL, KEYCTR
    LD A, $80                  ; Mask for control (bit 7)
    XOR (HL)                   ; Toggle control bit
    LD (HL), A
    XOR A
    RET

;----------------- Toggle Alt Flag -----------------
ALTTOG:
    LD HL, KEYCTR
    LD A, $20                  ; Mask for alt (bit 5)
    XOR (HL)                   ; Toggle alt bit
    LD (HL), A
    XOR A
    RET

;----------------- Toggle Caps Lock -----------------
CAPSTOG:
    LD HL, KEYCTR
    LD A, $10                  ; Mask for caps lock (bit 4)
    XOR (HL)                   ; Toggle caps lock
    LD (HL), A
    XOR A
    RET

;----------------- ASCII translation: PS2LOK -----------------
; Converts scan code to ASCII considering shift and caps lock
; Returns in A, Z=1 if invalid
PS2LOK:
    CP $AA                    ; Validate scan code range
    JR C, DOTRANS            ; If less, translate
    XOR A                     ; Invalid code, clear A
    RET

; DOTRANS: translate scan code based on shift state
DOTRANS:
    LD HL, PS2TAB1           ; Load unshifted table
    LD D, A                  ; Save scan code
    CALL PLK1                ; Translate to ASCII
    LD B, A                  ; Save character
    CP 'a'                   ; Check if lowercase letter
    JR C, PS2CHKCAPS        ; If not, check caps/shift conditions
PS2SGT:
    CP 'z'+1
    JR C, PS2CPSF           ; If letter, process caps and shift
    ; Non-letter keys, process shift
PS2CHKCAPS:
    LD A, (KEYCTR)           ; Load shift/caps flags
    BIT 6, A                ; Check shift
    LD A, B                  ; Character
    RET Z                    ; If no shift, return character    
	  JR PS2SHIFT
    ; Shifted key, process caps lock
PS2CPSF:
    LD A, (KEYCTR)
    LD C, A                  ; Save caps lock state
    RR A                     ; Rotate right shift bits
    RR A
    XOR C                    ; Combine shift and caps lock
    BIT 4, A                ; Check if shifted
    JR NZ, PS2SHIFT        ; If yes, get shifted char
    LD A, B                  ; Else, unshifted char
    RET
PS2SHIFT:
    LD A, D                  ; Restore scan code
    LD HL, PS2TAB2           ; Load shifted table
    CALL PLK1                ; Get shifted ASCII
    RET

; PLK1: Helper to translate scan code to ASCII from table
; Returns character in A
PLK1:
    LD B, 0
    LD C, A
    ADD HL, BC
    LD A, (HL)               ; Retrieve ASCII character
    RET
		
		ESC EQU $1B
;SCAN CODES
PS2TAB1:	DB 0,0,0,165,0,0,0,0,0,0
		DB 168,166,0,0,'`',0,0,0,0,0
		DB 0,'q','1',0,0,0,'z','s','a','w'
		DB '2',0,0,'c','x','d','e','4','3',0
		DB 0,' ','v','f','t','r','5',0,0,'n' 				;40-49
		DB 'b','h','g','y','6',0,0,44,'m','j' 				;50-59
		DB 'u','7','8',0,0,',','k','i','o','0' 				;60-69
		DB '9',0,0,'.','/','l',59,'p','-',0 				;70-79
		DB 0,0,39,0,'[','=',0,0,0,0 					;80-89
		DB 13,']',0,'\',0,0,0,0,0,0 					;90-99
		DB 0,0,6,0,0,8,0,4,9,0 						;100-109
		DB 0,0,1,7,10,0,3,11,ESC,0 					;110-119
		DB 0,0,'+','-','*','9',0,0,0,0 					;120-129
		DB 0,167,0,0,0,0,0,0,0,0 					;130-139
		DB 0,0,0,0,0,0,0,0,0,0 						;140-149
		DB 0,0,0,0,0,0,0,0,0,0 						;150-159
		DB 0,0,0,0,0,0,0,0,0,0 						;160-169
		
		
PS2TAB2:	DB 0,0,0,165,0,0,0,0,0,0
		DB 168,166,0,0,'~',0,0,0,0,0
		DB 0,'Q','!',0,0,0,'Z','S','A','W'
		DB '@',0,0,'C','X','D','E','$','#',0
		DB 0,' ','V','F','T','R','%',0,0,'N' 				;40-49
		DB 'B','H','G','Y','^',0,0,34,'M','J' 				;50-59 34=""
		DB 'U','&','*',0,0,'<','K','I','O',')' 				;60-69
		DB '(',0,0,'>','?','L',':','P','_',0 				;70-79
		DB 0,0,34,0,'{','+',0,0,0,0 					;80-89
		DB 13,'}',0,'|',0,0,0,0,0,0 					;90-99
		DB 0,0,6,0,0,8,0,4,9,0 						;100-109
		DB 0,0,1,7,10,0,3,11,ESC,0 					;110-119
		DB 0,0,'+','-','*','9',0,0,0,0 					;120-129
		DB 0,167,0,0,0,0,0,0,0,0 					;130-139
		DB 0,0,0,0,0,0,0,0,0,0 						;140-149
		DB 0,0,0,0,0,0,0,0,0,0 						;150-159
		DB 0,0,0,0,0,0,0,0,0,0 						;160-169
