;MAIN BOOTLOADER
;INITIALIZES VGA SCREEN, SERIAL, AND STORAGE NEW
;LOADS OPERATING SYSTEM FROM DISK
;OS LOADS AT $C000 
;OR USE A LOAD INITIALIZATION FILE TO SETUP THE OS (I.E. BOOT.INI)
;OS SHOULD CHANGE THE BANKS AS NEEDED


ORG $0000
		@DEVMMU EQU $00
		@DEVFFS EQU $08
		@DEV376 EQU $30
		@DEVSER EQU $18	
		@DEVINT EQU $68
		CH376_ERROR EQU RS_MESG
		@FONT_ADDR EQU $4000;

		DI		
		LD SP, BLSTACKP	
		JP BOOTLOADER

OSVERMES:	DEFM "ATLAS BOOTLOADER "
		DEFM "Version "		
		DEFM "0.03"
		DEFB 0AH, 0DH
		DEFM "CDesp 2022"
		DEFB 0AH, 0DH				
		DEFB 00H

OS_PRINTMSG:	;TEMP UNTIL ROM COMPILE
;PRINTS A ZT MESSSAGE FOLLOWING THE CALL
;PRESERVES ALL REGS DESTROYS ALTERNATIVES
		JP RS_MESG

MYMMUBANK:      DB 0,1,10,11,4,5,6,7
;SETUP THE MMU 
SETUPMMU:	LD C,DEVMMU
	 	XOR A			;BANK
		LD B,0.SHL.5		;PAGE
		;OUT (C),A		;0 IS OUR PAGE SO NO NEED TO EXECUTE THIS HELPS WITH TESTING TOO
		INC A
		LD B,1.SHL.5
		OUT (C),A		
		;INC A
		LD A,10			;VID MEM RAM
		LD B,2.SHL.5		
		OUT (C),A		
		;INC A
		LD A,11			;VID MEM RAM
		LD B,3.SHL.5		
		OUT (C),A		
		;INC A
		LD A,4
		LD B,4.SHL.5
		OUT (C),A		
		INC A
		LD B,5.SHL.5
		OUT (C),A		
		INC A
		LD B,6.SHL.5
		OUT (C),A		
		INC A
		LD B,7.SHL.5
		OUT (C),A	
		CALL INITMMU							;PUT PAGES 0..7 IN RAM BANKS 0..7
		LD HL,MYMMUBANK
		LD DE,BANKS
		LD BC,8
		LDIR								;TO RAM PAGE 7 OS VARS
		RET

;CLEARS INTERRUPT FLIP FLOPS IF THERE IS ONE
SETUPFFPS:	LD A,7
SFFAGN:		OUT (DEVINT), A
		DEC A
		JP NZ, SFFAGN				
		RET

SETUPVARS:	LD HL,OSVARS							;ZERO OS VARIABLES
SI_AGN:		XOR A
		LD (HL),A
		INC HL
		LD A,H
		OR L
		JR NZ,SI_AGN							;HL=0000 WHEN OVERFLOW FROM FFFF	
		RET


INITVGA:	NOP
		;SET SCREENS ENABLED
		LD HL,SCRNST
		RES 0,(HL)	;DISABLE LCD
		SET 1,(HL)	;ENABLE VGA
;VGA SCREEN		
		LD HL, CHARSETFILE		
		LD BC, 3000		;MAX FILE SIZE
		LD DE, FONT_ADDR 
		CALL STRG_LOADFILE
		JR NC, CHFILOK
		CALL RS_MESG
		DEFM "ERROR LOADING CHARSET"
		DB 13,10,0
		HALT
CHFILOK:	CALL VGA_INIT
		CALL RS_MESG
		DEFM "VGA CARD OK"
		DB 10,13,0
		RET

;PRINTS A CHAR TO THE OS SCREEN		
;A HAS THE CHAR
;FLAGS MUST BE RETAINED NO CARRY FLAG MEANS BACKSPACE IS GO LEFT
@OS_PRINTCHAR:	PUSH AF
OSPCNX:		POP DE
		LD A,(SCRNST)
		AND 2
		RET Z
		PUSH DE
		POP AF				;GET THE FLAGS BACK AND THE CHAR
		PUSH AF
		CALL RS_TX
		POP AF
		CALL VGA_PRCH	;** FIX THIS WRITES TO 0 PAGE INSTEAD OF VGA BUFFER
		RET
;HL POINTS TO ZERO TERMINATED MSG
;IX,A DESTROYED
@OS_PRINTTEXT:	LD A,(HL)
		CP 0
		RET Z
		PUSH HL
		CALL OS_PRINTCHAR
		POP HL
		INC HL
		JR OS_PRINTTEXT 
;PRINTS A ZT MESSAGE FOLLOWING THE CALL
@OS_PRINTMSG:	POP HL
                CALL OS_PRINTTEXT	
		INC HL
		PUSH HL			;CONTINUE AFTER THE MESG	
		RET

BOOTLOADER:	NOP	
;DEVICE INIT		
;MEMORY MANAGEMENT UNIT
		CALL SETUPVARS
		CALL SETUPMMU
;RS232 SERIAL PORT INIT
		LD A, 1 ;12 							;12=9600 BPS, 1=115200BPS
		CALL RS_INI 							;RS232 INITIALIZE
		CALL RS_MESG
		DEFM "SERIAL INITIALIZED OK"
		DB 10,13,0
		DI
;STORAGE DEVICE INIT (NEW USB DEVICE)
		LD A,6
		CALL STRG_INIT
		JR Z, STINIOK
		CALL RS_MESG
		DEFM "ERROR INITILIZING CH376S"
		DB 10,13,0
		HALT
STINIOK:	CALL RS_MESG
		DEFM "STORAGE DEVICE OK"
		DB 10,13,0
		LD A,6				;USB DRIVE
		CALL STRG_OPENCRD		;MOUNT THE DRIVE
		JR Z, STOPNOK
		CALL RS_MESG
		DEFM "ERROR MOUNTING THE DRIVE"
		DB 10,13,0
		HALT
		JP $
STOPNOK:	CALL STRG_PRDRVINFO		;PRINT DRIVE INFO
		CALL RS_NEWLINE
		CALL INITVGA
;PS2 KEYBOARD
		;CALL PS2KBINIT
		;CALL RS_MESG
		;DEFM "PS/2 KEYBOARD OK"
		;DB 10,13,0
;END DEVICE INITILIZATION		
		;PRINT VERSION
		LD HL,OSVERMES
		CALL OS_PRINTTEXT
		;LOAD FILE BOOT INI TO MEMORY
		;ANALYSE FILE 
			;SETUP MEMORY
			;LOAD OS FILES TO MEMORY
			;JP TO OS
		LD HL,BFILEINI
		LD BC,4000		;MAX BYTES OF FILE
		LD DE,FILEBUFFER	
		CALL STRG_LOADFILE
		JR NC, FILOK
		CALL RS_MESG
		DEFM "ERROR LOADING BOOT.INI"
		DB 13,10,0
		HALT

		;ANALYSE FILE		
		;[PAGES]
		;PAGES TO LOAD
		;pg1,pg2,pg3,...		;THOSE WILL GO TO $2000 AND UP, FILE WILL BE LOADED THERE
		;[FILE]
		; <FILENAME>	I.E. \ATLASOS.BIN
		;[BANKS] bNO=pNO 0-7 MAX	;SETUP THE MEMORY ONLY FOR THE OS 
						;IF WE NEED THE $0000 SPACE WE NEED TO RELOCATE A PLACE IN RAM BEFORE WE JUMP
		;0=0	
		;[EXEC]
		;<ADDRESS>			;ENTRY POINT
FILOK:		LD (FILEBTCNT),BC
		LD HL,FILEBUFFER
		ADD HL,BC
		INC HL
		LD (HL),0
		LD HL,FILEBUFFER
		CALL FINDSECTION
		DEFM "PAGES"
		DB 0
		JR NC, PRG_NXT1
		CALL RS_MESG
		DEFM "ERROR [PAGES] NOT FOUND"
		DB 13,10,0
		HALT
PRG_NXT1:	CALL AN_PAGES
		LD HL,FILEBUFFER
		CALL FINDSECTION
		DEFM "FILES"
		DB 0
		JR NC, PRG_NXT2
		CALL RS_MESG
		DEFM "ERROR [FILES] NOT FOUND"
		DB 13,10,0
		HALT
PRG_NXT2:	CALL LD_FILE
		LD HL,FILEBUFFER
		CALL FINDSECTION
		DEFM "BANKS"
		DB 0
		JR NC, PRG_NXT3
		CALL RS_MESG
		DEFM "ERROR [BANKS] NOT FOUND"
		DB 13,10,0
		HALT
PRG_NXT3:	CALL DO_BANKS
		CALL RS_MESG
		DEFM "BANKS SAVED"
		DB 13,10,0
		LD HL,FILEBUFFER
		CALL FINDSECTION
		DEFM "EXECBNK"
		DB 0
		JR NC, PRG_NXT4
		CALL RS_MESG
		DEFM "ERROR [EXECBNK] NOT FOUND"
		DB 13,10,0
		HALT
PRG_NXT4:	CALL DO_EXEC
		CALL RS_MESG
		DEFM "***********************************"
		DB 13,10
		DEFM "EXECUTING..."
		DB 13,10,0

		;PAGE 4 SHOULD BE RAM ON ALL SETUPS
		;PAGES ARE ON OSBANKS
		;EXEC BANK IS ON EXBANK
		;WE ARE ON BANK 0 = ROM
		;WE USE VARS ON PAGE 7 =RAM
		;WE NEED TO CALC THE EXEC ADDRESS EG BANK 6=C000
		;SET ALL PAGES ON BANKS 1-6				
		;GET PAGE OF BANK 0 TO A REGISTER
		;SET PAGE TO BANK 7 AND NO MORE CALLS SP IS INVALID
		;COPY CODE TO PUT PAGE ON BANK 0 AND JP TO EXEC ADDR ON BANK 3 $6000
		;JP $6000

		LD C,6
PRG_NXTBNK:	LD HL,OSBANKS
		LD B,0		
		ADD HL,BC
		LD B,C
		LD A,(HL)
		CALL PUTTOBANK
		DEC C
		JR NZ,PRG_NXTBNK
		LD SP,$7000		;NEW SP BANK 3 IS RAM ALWAYS
		LD HL,OSBANKS
		LD A,(HL)
		LD E,A			;PAGE TO BANK 0		
		PUSH DE
		LD HL,OSBANKS+7
		LD A,(HL)		;PAGE TO BANK 7	
		LD B,7			
		CALL PUTTOBANK		;NO MORE PARAMS ON PAGE 7	
		;COPY CODE TO RAM TO CHANGE BANK 0	
		LD DE,$6000
		LD HL,CPPUTTOBANK
		LD BC, ENPUTTOBANK-CPPUTTOBANK+1
		LDIR			;TRANSFER CODE TO RAM
		LD A,(EXBANK)		;THE BANK TO EXECUTE OS ENTRY POINT	
		LD H,A
		XOR A		
		LD B,5			;5 SHIFTS
SHIFTLEFT:	SLA H
		DJNZ SHIFTLEFT		;FIND ENTRY POINT		
 		LD L,0
		LD DE,$6001
		LD A,L
		LD (DE),A
		INC DE
		LD A,H
		LD (DE),A
		;LD HL,$6000
		;LD BC,500
		;CALL DUMPMEM
		;;CALL RS_MESG
		;DEFM " FILE DUMPED!!!"
		;DB 13,10,0		
		POP DE
		LD A,E			;PUT PAGE OF BANK 0 TO A		
		JP $6000		;EXEC CODE IN RAM

;THIS WILL BE COPIED AND EXECUTED ON $6000 UNTIL ENPUTTOBANK
CPPUTTOBANK:    LD HL,0000		;CHANGE 0000 TO THE EXEC VALUE				
		LD B,0
		CALL 24576+PUTTOBANK-CPPUTTOBANK	 ;$6000=24576		
		JP (HL)
;B THE BANK
;A THE PAGE
PUTTOBANK:	PUSH BC
		LD C,DEVMMU
				;LD B,B.SHL.5
		SLA B
		SLA B
		SLA B
		SLA B
		SLA B	
		PUSH AF
		CALL PRNNUM
		LD A,'>'
		CALL RS_TX
		LD A,B
		CALL PRNNUM
		POP AF
		OUT (C),A
		POP BC
		RET

ENPUTTOBANK:	NOP

EPRM:		DEFM "\EPRM.BIN"  
		DEFB 0

ROOTDIR:	DEFM "\"  
		DEFB 0
		
;HL THE ADDRESS TO START THE DUMP
;BC THE TOTAL BYTES TO DUMP
DUMPMEM:	PUSH HL
		;PUSH BC
		;LD HL,ROOTDIR		
		;CALL COPYFNAME
		;XOR A
		;CALL STRG_OPNFILE
		;JR Z, DR_OPDIROK
		;POP BC
		;POP HL		
		;;CALL RS_MESG
		;DB 10,13
		;DEFM "ERROR OPENING ROOT DIR"
		;DB 10,13,0
		;RET
DR_OPDIROK:	LD HL,EPRM
		;POP BC
		POP DE
		CALL STRG_SAVEFILE
		RET



;PUT THE PAGES ON THE OSBANKS ARRAY 0-7
DO_BANKS:	CALL RS_MESG
		DEFM "[BANKS]"
		DB 13,10,0
		LD DE,OSBANKS
		LD B,8
NXTBNK:		PUSH BC
		PUSH DE
		CALL GETSTRNUM
		CALL SKIPNL
		PUSH HL
		LD HL,NUMSTR
		CALL strtob
		POP HL
		POP DE
		CALL PRNNUM
		LD (DE),A
		INC DE
		POP BC
		DJNZ NXTBNK
		RET
;PUTS THE EXEC BANK TO EXBANK VAR
DO_EXEC:	CALL RS_MESG
		DEFM "[EXEC]"
		DB 13,10,0
		CALL GETSTRNUM
		LD HL,NUMSTR
		CALL strtob
		LD (EXBANK),A
		RET
;COPIES A 0D, 0A , 0 TERMINATED FILE NAME TO OSFNAME ZERO TERMINATED
;HL THE FILENAME
COPYOSFILE:	LD DE,OSFNAME
COPYOSFILE1:	LD A,(HL)
		CP 13
		JR Z, LDF_EXIT
		CP 10
		JR Z, LDF_EXIT
		CP 0
		JR Z, LDF_EXIT
		LD (DE),A
		INC DE
		INC HL
		JR COPYOSFILE1;
LDF_EXIT:	XOR A
		LD (DE),A
		RET

LD_FILE:	CALL RS_MESG
		DEFM "[FILES]"
		DB 13,10,0
		LD B,1			;START FROM BANK 1 ;2 FOR TESTING
		CALL COPYOSFILE
		LD HL,OSFNAME
		LD BC,32768		;MAX BYTES OF FILE IS 4 PAGES
		LD DE,$2000		;$2000 FOR REAL
		CALL STRG_LOADFILE
		JR NC, LDFILOK
		CALL RS_MESG
		DEFM "ERROR LOADING OSFILE"
		DB 13,10,0
		RET
LDFILOK:	CALL RS_MESG
		DEFM "OS FILE LOADED!!!"
		DB 13,10,0
		;LD HL,$2000
		;LD BC,$4000
		;CALL DUMPMEM
		;CALL RS_MESG
		;DEFM "OS FILE DUMPED!!!"
		;DB 13,10,0		
		RET
;PUTS A STRING NUMBER ON  NUMST
;HL THE STRING WITH THE NUMBER SEPERATED BY , OR =
GETSTRNUM:	LD DE,NUMSTR
GETSTRNUM1:	LD A,(HL)
		;CALL PRNCHAR
		CP ','
		JR Z,GS_FIN
		CP '='
		JR Z,GS_FIN
		CP 0
		JR Z,GS_FIN
		CP 13
		JR Z,GS_FIN
		CP 10
		JR Z,GS_FIN
		LD (DE),A
		INC DE
		INC HL
		JR GETSTRNUM1
GS_FIN:		XOR A
		LD (DE),A		
		RET		

;ANALYZING PAGES		
AN_PAGES:	CALL RS_MESG
		DEFM "[PAGES]"
		DB 13,10,0
		LD B,1			;START FROM BANK 1 ;$2000
NXT_PG:		CALL GETSTRNUM
		PUSH HL
		PUSH BC
		LD HL,NUMSTR
		CALL RS_TXT
		LD A,'-'
		CALL RS_TX
		LD HL,NUMSTR
		CALL strtob		;A HAS THE PAGE TO PUT ON BANK 1,2,3,ETC
		POP BC
		CALL PUTTOBANK
		INC B
		PUSH BC
		CALL PRINTNUM
		POP BC
		POP HL
		LD A,(HL)
		CP ','
		INC HL
		JR Z,NXT_PG
		RET
;HL THE STRING TO SEARCH		
;B THE CHAR TO FIND	
;A=0 IF NOT FOUND
FINDCHAR:	LD A,(HL)		
		CP B
		RET Z
		CP 0
		RET Z
		INC HL
		JR FINDCHAR


;PRESERVES ALL 
PRNNUM:		PUSH AF
		PUSH HL
		PUSH BC
		PUSH DE
		CALL PRINTNUM
		POP DE
		POP BC
		POP HL
		POP AF
		RET


PRNCHAR:	PUSH AF
		PUSH HL
		PUSH BC
		PUSH DE
		CALL RS_TX
		PUSH AF
		LD A,'='
		CALL RS_TX
		POP AF
		CALL PRINTNUM
		POP DE
		POP BC
		POP HL
		POP AF
		RET

;COMPARES STRING POINTED BY HL TO A STRING ON DE
;NC IF SAME
;HL AFTER THE STRING
STRCMP:		LD A,(DE)	;STRING TO FIND CHAR
		CP 0		;KEYWD ENDED
		JR Z,STRFOUND
		LD B,A
		LD A,(HL)	;STRING TESTING CHAR
		CP B
		JR NZ,STRNOTFOUND
		INC DE
		INC HL
		JR STRCMP
STRFOUND:	XOR A		;CLEAR CARRY
		RET
STRNOTFOUND:	SCF
		RET		

FNDRETADDR:	LD A,(DE)
		INC DE
		CP 0		
		RET Z
		JR FNDRETADDR

;FINDS A SECTION IN HL BUFFER
;RETURNS THE 1ST ITEM OF THE SECTION ON HL
FINDSECTION:    POP DE
		PUSH DE
		CALL FINDASECTION
		JR NC,SECFOUND
		POP DE
		LD A,(HL)
		CP 0
		JR Z, SECNOEXIST	;END OF TEXT FILE REACHED
		INC HL
		PUSH DE
		JR FINDSECTION ;KEEP SEARCHING
SECNOEXIST:     CALL FNDRETADDR
		PUSH DE
		SCF
		RET

SECFOUND:	INC HL		;SKIP ']'
		CALL SKIPNL
		POP DE
		CALL FNDRETADDR
		PUSH DE
		XOR A
		RET

;HL TO THE STRING
;SKIPS LETTERS<31
SKIPNL:		LD A,(HL)
		CP 31
		RET NC
		INC HL
		JR SKIPNL

;HL THE BUFFER TO SEARCH
;DE THE SECTNAME
FINDASECTION:	LD B,'['
		CALL FINDCHAR
		OR A
		JR Z,ASECTNOTFND 		;NOT FOUND IF A=0 
		INC HL	;HL POINTS TO THE STRING INSIDE []		
		CALL STRCMP
		RET C
		;HL POINTS AT ']'
		LD A,(HL)
		CP ']'
		JR NZ, ASECTNOTFND ;MORE LETTERS ON SECTION
		XOR A		;CLR CF
		RET
ASECTNOTFND:	SCF
		RET	

BFILEINI	DEFM "\BOOT.INI"
		DB 0
CHARSETFILE	DEFM "\FONT.CHR"		;2560 BYTES 
		DB 0


BOOTEND		EQU $ 

ORG $F000	;BOOTLOADER & DEVICES PARAMS
BLSTACKP	DEFS 1
OSVARS  EQU $
	;BOOTLOADER
	OSBANKS		DEFS 8
	EXBANK		DEFS 1
	NUMSTR:		DEFS 3
	OSFNAME		DEFS 14
	FILEBTCNT	DEFS 2	
	;MMU
	@BANKS 		DEFS 8							;8 PAGES FOR THE 8 BANKS 0..7
	@TMPG  		DEFS 4		;TEMP PAGE FOR VIDEO VGA
	@PGSEM		DEFS 4		;PAGE SEMAPHORES TO KEEP TRACK OF PAGE CALLS

	;SERIAL
	@SERERR 	DEFS 1							;
	;STORAGE
	@USBBUF		DEFS 50							;CH376 USB BUFFER
	@STRGBUFF 	DEFS 40 						;USED FOR DIRECTORY AND FILENAME


	;VGA
	@SCRNST 	DEFS 1							;SCREEN STATUS BIT 0 ON/OFF LCD, BIT 1 ON/OFF VGA
	@VGAFCOL 	DEFS 1		;VGA FORE COLOR
	@VGABCOL 	DEFS 1		;VGA BACK COLOR
	@VGATX_X 	DEFS 1		;VGA CURRENT X POS
	@VGATX_Y 	DEFS 1		;VGA CUR Y POS
	@VGAMAXX 	DEFS 1		;MAX HORZ CHARS
	@VGAMAXY 	DEFS 1		;MAX VERT LINES
	@VGATMPC 	DEFS 1		;TMP CHAR FOR CURSOR
	@VGABUF 	DEFS 1		;BUFFER TO WRITE - BIT 0 TO SELECT
	@VGASTADR 	DEFS 2		;START ADDRESS TO CALCULATE TEXT OUTPUT

	;UTILS
	@B2DINV 	DEFS 8		;BINARY NUMBER TO BE CONVERTED
	@B2DBUF 	DEFS 20		;ASCCI STRING OF THE NUMBER	
	@B2DEND 	DEFS 1		;0 FOR TERMINATE THE STRING
	@LINESTR:	DEFS 2		;ADDRESS OF LINEBUF FOR PRINTING ON STRING
	@LINEPOS	DEFS 1
	@RNDseed 	DEFS 1		;RANDOM SEED
	@NUMBUF		DEFS 7
	@STRG_STAT	DEFS 1
	;BOOTLOADER
	FILEBUFFER	DEFS 1		;ALL EXTRA SPACE TO BE USED FOR LOADING BOOT.INI ***THIS IS LAST***


	ORG BOOTEND
	NOP

	
	
